<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>GWAN IT Blog</title>
  
  <subtitle>GWAN IT Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2021-06-19T14:24:05.027Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>gwanhyeon Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>grading-students</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210619-grading-students/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210619-grading-students/</id>
    <published>2021-06-19T14:16:02.000Z</published>
    <updated>2021-06-19T14:24:05.027Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/grading/problem" target="_blank" rel="noopener">Grading Students</a></p><h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>HackerLand University has the following grading policy:</p><p>Every student receives a  in the inclusive range from  to .<br>Any  less than  is a failing grade.<br>Sam is a professor at the university and likes to round each student’s  according to these rules:</p><p>If the difference between the  and the next multiple of  is less than , round  up to the next multiple of .<br>If the value of  is less than , no rounding occurs as the result will still be a failing grade.<br>Examples</p><p>round to  (85 - 84 is less than 3)<br>do not round (result is less than 40)<br>do not round (60 - 57 is 3 or higher)<br>Given the initial value of  for each of Sam’s  students, write code to automate the rounding process.</p><p>Function Description</p><p>Complete the function gradingStudents in the editor below.</p><p>gradingStudents has the following parameter(s):</p><p>int grades[n]: the grades before rounding<br>Returns</p><p>int[n]: the grades after rounding as appropriate<br>Input Format</p><p>The first line contains a single integer, , the number of students.<br>Each line  of the  subsequent lines contains a single integer, .</p><p>Constraints</p><p>Sample Input 0</p><p>4<br>73<br>67<br>38<br>33<br>Sample Output 0</p><p>75<br>67<br>40<br>33<br>Explanation 0</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1484768684-54439977a1-curving2.png" alt="image"></p><p>Student  received a , and the next multiple of  from  is . Since , the student’s grade is rounded to .<br>Student  received a , and the next multiple of  from  is . Since , the grade will not be modified and the student’s final grade is .<br>Student  received a , and the next multiple of  from  is . Since , the student’s grade will be rounded to .<br>Student  received a grade below , so the grade will not be modified and the student’s final grade is .</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>문제를 읽어보면 검색하려는 값들이 38 이하일 경우에는 해당값을 반올림을 수행하지 않는다고 합니다.<br><code>no rounding occurs as the result will still be a failing grade.</code><br>그리고, 나눈 나머지 값이 3,4,5인경우 5를 올려주고 8,9,0일 경우 10단위를 바꾸어가면서 숫자를 올려나갑니다. 즉, 나머지가 3이상일 경우 반올림의 기준이되는 5의 값에서 나머지 값을 빼주면 반올림을 하는 값을 구해줄 수 있게 됩니다. 나머지가 3이 아닐 경우에는 현재 기존의 값을 리스트에 담아주게됩니다.</p><p><code>Student received a , and the next multiple of from is . Since , the student's grade is rounded to . Student received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is . Student received a , and the next multiple of from is . Since , the student's grade will be rounded to . Student received a grade below , so the grade will not be modified and the student's final grade is .</code></p><p>다음과 같은 테스트케이스에 잘 설명되어있으니 한번 잘 읽어보시면 될 것 같습니다.</p><h1 id="puli"><a href="#puli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the 'gradingStudents' function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER_ARRAY.</span></span><br><span class="line"><span class="comment">     * The function accepts INTEGER_ARRAY grades as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">gradingStudents</span><span class="params">(List&lt;Integer&gt; grades)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        List&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = grades.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> search = grades.get(i);</span><br><span class="line">            <span class="keyword">int</span> num = grades.get(i) % <span class="number">5</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(search == <span class="number">100</span> || search &lt; <span class="number">38</span>)&#123;</span><br><span class="line">                answer.add(search);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                    answer.add(search + (<span class="number">5</span> - num));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    answer.add(search);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">"OUTPUT_PATH"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> gradesCount = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; grades = IntStream.range(<span class="number">0</span>, gradesCount).mapToObj(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> bufferedReader.readLine().replaceAll(<span class="string">"\\s+$"</span>, <span class="string">""</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">            .map(String::trim)</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; result = Result.gradingStudents(grades);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(</span><br><span class="line">            result.stream()</span><br><span class="line">                .map(Object::toString)</span><br><span class="line">                .collect(joining(<span class="string">"\n"</span>))</span><br><span class="line">            + <span class="string">"\n"</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/grading/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Grading Students&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;munje&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>3. Template Method Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210619-template-method-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210619-template-method-design-pattern/</id>
    <published>2021-06-19T13:28:24.000Z</published>
    <updated>2021-06-19T13:37:04.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="template-method-pattern"><a href="#template-method-pattern" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#template-method-pattern"></a> Template Method Pattern</h1><p>알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의 하는 패턴</p><h1 id="eonje-sayonghalgga"><a href="#eonje-sayonghalgga" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#언제-사용할까"></a> 언제 사용할까?</h1><p>구현하려는 알고리즘이 일정한 프로세스가 있다.<br>구현하려는 알고리즘이 변경가능성이 있다.</p><h1 id="process"><a href="#process" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#process"></a> Process</h1><ol><li>알고리즘을 여러 단계로 나눈다.</li><li>나누어진 알고리즘의 단계를 메소드로 선언한다.</li><li>알고리즘을 수행할 템플릿 메소드를 만든다.</li><li>하위 클래스에서 나눠진 메소드들을 구현한다.</li></ol><p><img src="https://dz2cdn1.dzone.com/storage/temp/14064500-templatemethoddesignpattern.png" alt="Strategy Pattern"></p><h1 id="yogusahang"><a href="#yogusahang" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#요구사항"></a> 요구사항</h1><p>신작 게임의 접속을 구현해주세요.<br>requestConnection(String str):String</p><p>유저가 게임 접속시 다음을 고려합니다.<br>1.보안과정: 보안관련부분을 처리합니다.<br>doSecurity(String string):String<br>2.인증과정: username과 password가 일치하는지 확인합니다.<br>authentication(String id, String password):boolean<br>3.권한과정: 접속자가 유료회원인지 무료회원인지 게임 마스터 인지 확인합니다.<br>authorization(String userName):int<br>4.접속과정: 접속자에게 커넥션 정보를 넘겨줍니다.<br>connection(String info):String</p><h1 id="cuga-yogusahang"><a href="#cuga-yogusahang" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#추가-요구사항"></a> 추가 요구사항</h1><ol><li>보안과정 강화(비밀번호 알고리즘 강화)</li><li>권한 시간에 따라 다르게 처리</li></ol><p>다음 위와 같은 요구사항을 Template Method Design Pattern으로 구현을 진행해보겠습니다.<br>알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의하여 라이브러리처럼 사용한다라고도 할 수 있겠네요. 그리고 접근지정자를 protected를 사용하므로써 해당되는 패키지에서만 사용이 가능하므로 외부에서의 접근을 막을 수도 있어보입니다. 즉, 다른 패키지를 구현하여 해당 메소드를 구현하면 외부에서 접근이 불가능하게 처리할 수 있습니다. Java OOP의 특징중 캡슐화에 대한 내용이기때문에 잘 모르시는 분들이 있다면 추상성, 상속성, 캡슐화, 다형성에 대해서 공부해오시는것을 추천드립니다.</p><p>아래의 코드는 게임을 접속할때 보안작업부터 인증, 인가, 접속까지 Template Method Pattern을 사용하여 만든 예제입니다.</p><h1 id="code"><a href="#code" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><blockquote><p>AbstGameConnectHelper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstGameConnectHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">doSecurity</span><span class="params">(String string)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">authentication</span><span class="params">(String id, String password)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">authorization</span><span class="params">(String userName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">connection</span><span class="params">(String info)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Template Method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">requestConnection</span><span class="params">(String encodedInfo)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 보안작업 -&gt; 암호화된 문자열을 복호화</span></span><br><span class="line">        String decodedInfo = doSecurity(encodedInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//반환된것을 가지고 ID, PASSWORD 할당</span></span><br><span class="line">        String id = <span class="string">"kgh"</span>;</span><br><span class="line">        String password = <span class="string">"kgh"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!authentication(id, password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"is not validation id and password"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String userName = <span class="string">"kgh-User"</span>;</span><br><span class="line">        <span class="keyword">int</span> authorization = authorization(userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (authorization)&#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"after 10 pm Shut Down!"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"game Manager!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"Free members"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"Paid Members"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"Not authorized"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"etc case"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection(decodedInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DefaultGameConnectHelper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGameConnectHelper</span> <span class="keyword">extends</span> <span class="title">AbstGameConnectHelper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doSecurity</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"decoded"</span>);</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">authentication</span><span class="params">(String id, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"is Check id, password"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">authorization</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Authorization Confirm"</span>);</span><br><span class="line">        <span class="comment">// 권한 처리 추가, 10시 이후 권한 처리</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">connection</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Last Connection Step!"</span>);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Main</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstGameConnectHelper helper = <span class="keyword">new</span> DefaultGameConnectHelper();</span><br><span class="line">        helper.requestConnection(<span class="string">"Id Password, etc. Connection Information"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;template-method-pattern&quot;&gt;&lt;a href=&quot;#template-method-pattern&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#templat
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>2.Adapter Design Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210617-adapter-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210617-adapter-design-pattern/</id>
    <published>2021-06-17T06:53:49.000Z</published>
    <updated>2021-06-19T13:37:23.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adapter-pattern"><a href="#adapter-pattern" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#adapter-pattern"></a> Adapter Pattern</h1><p>연관성 없는 두 객체를 묶어서 사용한다.</p><h1 id="hagseub-mogpyo"><a href="#hagseub-mogpyo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#학습-목표"></a> 학습 목표</h1><p>알고리즘을 요구사항에 맞춰 사용할 수 있다.</p><h3 id="yimi"><a href="#yimi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#의미"></a> 의미</h3><p>Adapter는 사전적의미로는 기계 기구등을 다목적으로 사용하기 위한 부가 기구라고 할 수 있습니다.</p><h3 id="gibon-seolgye"><a href="#gibon-seolgye" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#기본-설계"></a> 기본 설계</h3><p><img src="https://online.visual-paradigm.com/repository/images/2e728499-b25b-4b5b-9cb8-1b3b3e059966.png" alt="Adapter"></p><h3 id="yogusahang-1"><a href="#yogusahang-1" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#요구사항-1"></a> 요구사항 1</h3><p>두 수에 대한 다음 연산을 수행하는 객체를 만들기</p><ol><li>수의 두 배의 수를 반환: twiceOf(Float):Float</li><li>수의 half의 수를 반환: halfOf(Float):Float</li></ol><p>구현 객체의 이름은 Adapter</p><p>Math클래스에서 두배와 절반을 구하는 함수는 이미 구현되어 있습니다.</p><p>즉, 어뎁터패턴을 사용하는이유는 미리주어진함수를 어뎁터에서 사용할 수 없기때문에 해당로직을 변경해야하므로 Adapter 를 사용한다.</p><h3 id="yogusahang-2"><a href="#yogusahang-2" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#요구사항-2"></a> 요구사항 2</h3><p>Math 클래스에 새롭게 두 배를 구할 수 있는 함수가 추가된다.</p><ol><li>새로 구현된 알고리즘을 이용하도록 프로그램을 변경하시오.</li><li>절반을 구하는 기능에서 로그를 찍는 기능을 추가하시오.</li></ol><h1 id="code"><a href="#code" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>위의 요구사항처럼 타입의 값과 요구되는 값이 변경되는 경우 Adapter 패턴을 이용하면 의존성을 줄이고 유지보수의 확장성을 올릴 수 있습니다.<br>즉, 공통 클래스로 사용되던 메소드를 변경해야되는 요구사항이 발생하게 된다면 Adapter, Main을 수정하지 않아도 구현체 부분만 변경해서 해당 요구사항들을 Adapter 패턴으로 적용할 수 있습니다.</p><blockquote><p>main class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> AdapterImpl();</span><br><span class="line">        System.out.println(adapter.twiceOf(<span class="number">100f</span>));</span><br><span class="line">        System.out.println(adapter.halfOf(<span class="number">80f</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>math class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">twoTime</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">half</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">doubled</span><span class="params">(Double d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>adapter interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">twiceOf</span><span class="params">(Float f)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">halfOf</span><span class="params">(Float f)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>adapter Implements class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">twiceOf</span><span class="params">(Float f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.doubled(f.doubleValue()).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">halfOf</span><span class="params">(Float f)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"half 함수 호출"</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>) Math.half(f.doubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;adapter-pattern&quot;&gt;&lt;a href=&quot;#adapter-pattern&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#adapter-pattern&quot;&gt;&lt;/a&gt; A
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>1.Strategy Design Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210617-strategy-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210617-strategy-design-pattern/</id>
    <published>2021-06-17T06:53:34.000Z</published>
    <updated>2021-06-17T07:23:08.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hagseubmogpyo"><a href="#hagseubmogpyo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#학습목표"></a> 학습목표</h1><ul><li>Interface</li><li>Delegate</li><li>Strategy Pattern</li></ul><h3 id="interface"><a href="#interface" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#interface"></a> Interface</h3><p>키보드나 디스플레이 따위 처럼 사람과 컴퓨터를 연결하는 장치</p><ul><li>기능에 대한 <code>선언과 구현을 분리</code></li><li>기능을 사용 통로</li></ul><p>기능을 기능의 선언과 기능의 구현을 분리할 수 있는 기능을 제공한다.</p><h3 id="delegate"><a href="#delegate" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#delegate"></a> Delegate</h3><p>특정 객체의 기능을 사용하기 위하여 다른객체의 기능을 호출하는것.</p><h3 id="strategy-pattern"><a href="#strategy-pattern" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#strategy-pattern"></a> Strategy Pattern</h3><p>여러 알고리즘을 하나의 추상적인 접근점을 만들어서 접근점에서 서로 교환이 가능하도록 하도록 하는 패턴</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/4/45/W3sDesign_Strategy_Design_Pattern_UML.jpg" alt="Strategy Pattern"></p><h1 id="code"><a href="#code" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>아래의 코드는 Strategy 디자인 패턴을 알아보기위하여 게임에서 캐릭터가 스킬 사용에 있어서 Strategy 디자인을 적용하였습니다. 하나의 캐릭터가 스킬을 사용한다고 가정하는 예제입니다.</p><p>즉, Weapon이라고하는 접근점에서 Delegate하여 공격에 대한 기능을 호출하는 방식입니다.</p><blockquote><p>main class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Delegate.AObj;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Interface.AInterface;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Interface.AInterfaceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameCharacter character = <span class="keyword">new</span> GameCharacter();</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Knife());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Sword());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Ax());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>weapon Interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Character class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 접근</span></span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 교환점</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(weapon == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hand Attack!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            weapon.attack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ax class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ax</span> <span class="keyword">implements</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Ax Attack!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Knife class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Weapon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Knife</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Knife Attack!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Sword class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sword Attack!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hagseubmogpyo&quot;&gt;&lt;a href=&quot;#hagseubmogpyo&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#학습목표&quot;&gt;&lt;/a&gt; 학습목표&lt;/h1&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>백준 효율적인해킹 1325</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-1325/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-1325/</id>
    <published>2021-06-14T05:11:56.000Z</published>
    <updated>2021-06-14T05:13:05.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-hyoyuljeogin-haeking-munje"><a href="#baegjun-hyoyuljeogin-haeking-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-효율적인-해킹-문제"></a> <a href="https://www.acmicpc.net/problem/1325" target="_blank" rel="noopener">백준 효율적인 해킹 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>양방향그래프가 아닌 단방향그래프인것을 파악하여 연결된 해킹의 컴퓨터개수를 구하는 문제였습니다.</li><li>처음에 양방향 그래프로 생각을 하여서 a-&gt;b, b-&gt;a에 대한 양방향 설정을 진행하였는데, 올바른 결과가 나오지 않았습니다.<br>문제를 다시 잘 읽어보니 B의 컴퓨터를 통해 A의 컴퓨터를 해킹을 할 수 있습니다. 즉, B-&gt;A로의 해킹이 가능해집니다. 따라서, 양방향 그래프가 아닌 단방향 그래프로 DFS를 통하여 문제를 해결하였습니다.</li><li>최근에 효율적인 해킹문제가 재채점되면서 동작되던 코드가 시간초과가 발생하는 문제가 생겼습니다.<br>아마도 큐의 비용적인 측면에서 문제가 생기고 있지 않나 라는 생각을 합니다. 혹시라도 Java에서 시간초과를 해결하신분이 있다면 답글부탁드리겠습니다^^</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_1325</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line">        graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            graphList.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        List&lt;Integer&gt; hackingList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            Arrays.fill(isCheck, <span class="keyword">false</span>);</span><br><span class="line">            bfs(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(answer == cnt)&#123;</span><br><span class="line">                hackingList.add(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(answer &lt; cnt)&#123;</span><br><span class="line">                answer = cnt;</span><br><span class="line">                hackingList.clear();</span><br><span class="line">                hackingList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(hackingList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer hack : hackingList) &#123;</span><br><span class="line">            System.out.print(hack + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        isCheck[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!isCheck[y])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        isCheck[start] = <span class="keyword">true</span>;</span><br><span class="line">        q.add(start);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(!isCheck[y])&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    isCheck[y] = <span class="keyword">true</span>;</span><br><span class="line">                    q.add(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-hyoyuljeogin-haeking-munje&quot;&gt;&lt;a href=&quot;#baegjun-hyoyuljeogin-haeking-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="그래프" scheme="http://gwanhyeon.github.io/tags/%EA%B7%B8%EB%9E%98%ED%94%84/"/>
    
  </entry>
  
  <entry>
    <title>백준 상근이의 여행 9372</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-9372/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-9372/</id>
    <published>2021-06-13T18:04:44.000Z</published>
    <updated>2021-06-13T18:06:05.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-sanggeuniyi-yeohaeng-munje"><a href="#baegjun-sanggeuniyi-yeohaeng-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-상근이의-여행-문제"></a> <a href="https://www.acmicpc.net/problem/9372" target="_blank" rel="noopener">백준 상근이의 여행 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>이 문제의 가장 핵심포인트는 비행기의 종류를 구하는것이다.</p><ol><li>비행기의 종류를 구하는것이 결국 간선의 개수가 몇개인것인지에 대한 문제이다. 즉, n-1이다</li><li>다른방식으로는 bfs로 체크되지 않은정점과 값이 있는 정점을 방문할 수 있을때마다 answer를 카운팅시켜주면서 가능한 모든 비행기 종류를 체크합니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_9372</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            n = Integer.parseInt(st.nextToken());</span><br><span class="line">            m = Integer.parseInt(st.nextToken());</span><br><span class="line">            isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">            answer = <span class="number">0</span>;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                    map[i][j] = INF;</span><br><span class="line">                    <span class="keyword">if</span>(i == j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">                st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">                <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">                map[x][y] = <span class="number">1</span>;</span><br><span class="line">                map[y][x] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bfs();</span><br><span class="line">            System.out.println(answer-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        isChecked[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            answer++;</span><br><span class="line">            <span class="keyword">int</span> x = queue.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map[x][i]!=<span class="number">0</span> &amp;&amp; !isChecked[i]) &#123;</span><br><span class="line">                    isChecked[i] = <span class="keyword">true</span>;</span><br><span class="line">                    queue.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-sanggeuniyi-yeohaeng-munje&quot;&gt;&lt;a href=&quot;#baegjun-sanggeuniyi-yeohaeng-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="BFS" scheme="http://gwanhyeon.github.io/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>백준 순열사이클 10451</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-10451/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-10451/</id>
    <published>2021-06-13T17:26:47.000Z</published>
    <updated>2021-06-13T17:29:08.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sunyeolsaikeul-munje"><a href="#sunyeolsaikeul-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#순열사이클-문제"></a> <a href="https://www.acmicpc.net/problem/10451" target="_blank" rel="noopener">순열사이클 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>순열사이클을 구하는문제이다.</li><li>사이클이 발생하면 dfs를 수행하였을때 모든값들이 check가 되어있을것이다. 따라서, 매번 순회할때마다 체크가 안된지점만 확인을 하면 최종적으로 몇개의 사이클이 만들어지는지를 알 수 있다.<br>테스트케이스로 3, 2, 7, 8, 1, 4, 5, 6일 경우 1~N까지의 수가 매칭이 되어 트리가 생성되는것을 알아야한다.</li><li>DFS내부에서 check에 따른값을 체크하면 올바른 CNT값이 나오지 않아서 고민 후 사이클이 생긴다는것은 하나의 dfs의 경로를 순회하는것과 같은 의미임을 알게되었다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_10451</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">            isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">            String[] input = br.readLine().split(<span class="string">" "</span>);</span><br><span class="line">            graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;input.length; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> y = Integer.parseInt(input[i]);</span><br><span class="line">                graphList.get(x).add(y);</span><br><span class="line">                graphList.get(y).add(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isChecked[i]) &#123;</span><br><span class="line">                    findParent(i);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(cnt);</span><br><span class="line">            Arrays.fill(isChecked,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findParent</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        isChecked[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!isChecked[y])&#123;</span><br><span class="line">                findParent(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sunyeolsaikeul-munje&quot;&gt;&lt;a href=&quot;#sunyeolsaikeul-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#순열사이클-문제&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>백준 케빈 베이컨의 6단계 법칙  1389</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-1389/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-1389/</id>
    <published>2021-06-13T16:41:16.000Z</published>
    <updated>2021-06-13T16:44:31.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.acmicpc.net/problem/1389" target="_blank" rel="noopener">문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>플로이드 워셜 알고리즘</li><li>11403번 경로찾기와 다르게 최단 경로의 비용을 구하는 문제이다.<br>예를들면, 1번 노드에서 -&gt; 2번, 3번, 4번, 5번 ,6번을 거쳐간 비용의 총합이다. 단순히 경로찾기문제는 비용이 문제가 아니라 해당되는값이 존재하는지 안존재하는지 여부만 찾았다.</li><li>자기 자신의 값을 0으로 초기화하고 나머지 모든값을 (int)1e9 로 초기화하였다. 최단경로 즉, 최소비용을 구해야하므로 이렇게 초기화시켜준것이다.</li><li>한번 이동할때의 최소비용은 1이므로 입력시 주어진 맵을 1로 갱신하였다.</li><li>거쳐갈수있는 모든경로를 아래와 같이 초기화 하였다.</li><li>map[0][0], map[0][1]…의 경로는 0-&gt;0, 0-&gt;1 0-&gt;2 …의 형식으로 모든 거쳐가는 최단경로비용을 찾는다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(map[i][k] + map[k][j] &lt; map[i][j])&#123;</span><br><span class="line">       map[i][j] = map[i][k] + map[k][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_1389</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                map[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span>(i == j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            map[y][x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][k] + map[k][j] &lt; map[i][j])&#123;</span><br><span class="line">                        map[i][j] = map[i][k] + map[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = INF;</span><br><span class="line">        <span class="keyword">int</span> idx = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                sum += map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(answer &gt; sum)&#123;</span><br><span class="line">                answer = sum;</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.acmicpc.net/p
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="플로이드워셜" scheme="http://gwanhyeon.github.io/tags/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%9B%8C%EC%85%9C/"/>
    
  </entry>
  
  <entry>
    <title>백준 경로찾기 11403</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-11403/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-11403/</id>
    <published>2021-06-13T12:58:22.000Z</published>
    <updated>2021-06-13T13:00:40.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gyeongrocajgi-munje"><a href="#gyeongrocajgi-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#경로찾기-문제"></a> <a href="https://www.acmicpc.net/problem/11403" target="_blank" rel="noopener">경로찾기 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>모든정점에서 다른정점까지 모두 탐색할 수 있는지 판별하는 문제이다. 따라서 플로이드 워셜 알고리즘을 사용하면 모두 구할 수 있고 n의 범위가 100이하이기때문에 n^3 플로이드 워샬알고리즘을 사용하였다.<br>즉, 플로이드 와샬 알고리즘은 <code>모든 정점에서 모든 정점으로의 최단거리</code>를 구하는 알고리즘입니다.<br>다익스트라 알고리즘이나 벨만 포드 알고리즘은 한 정점에서 다른 모든 정점의 최단거리를 구하는것에서 차이점을 가지고 있습니다.</p><ul><li><ol><li>가중치없는 방향그래프 G 플로이드워셜 N^3</li></ol></li><li><ol start="2"><li>n = 100 이하</li></ol></li><li><ol start="3"><li>i -&gt; j, i -&gt; k -&gt; j 로 갈 수 있으면 1, 없으면 0</li></ol></li><li><ol start="4"><li>모든정점 -&gt; 모든정점으로 가는 경우</li></ol></li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_11403</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][k] == <span class="number">1</span> &amp;&amp; map[k][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        map[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gyeongrocajgi-munje&quot;&gt;&lt;a href=&quot;#gyeongrocajgi-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#경로찾기-문제&quot;&gt;&lt;/a&gt; &lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="플로이드워셜" scheme="http://gwanhyeon.github.io/tags/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%9B%8C%EC%85%9C/"/>
    
  </entry>
  
  <entry>
    <title>백준 부모의 트리찾기 11725</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-11725/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-11725/</id>
    <published>2021-06-13T12:52:05.000Z</published>
    <updated>2021-06-13T12:55:28.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="teuriyi-bumocajgi-munje"><a href="#teuriyi-bumocajgi-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#트리의-부모찾기-문제"></a> <a href="https://www.acmicpc.net/problem/11725" target="_blank" rel="noopener">트리의 부모찾기 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li><ol><li>인접리스트로 해당되는 그래프를 연결시킨다.</li></ol></li><li><ol start="2"><li>dfs로 해당되는 모든 부모의 값을 배열 갱신시킨다.(단 루트노드는 1번 부터 시작된다.) 시작점</li></ol></li></ul><ul><li>예) parent[y] = x</li></ul><ul><li><ol start="3"><li>최종적으로 parent에는 각 노드 2번부터 n번까지 부모의 값이 담겨져 있다.</li></ol></li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_11725</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            graphList.get(x).add(y);</span><br><span class="line">            graphList.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// root is 1</span></span><br><span class="line">        findParent(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;parent.length; i++)&#123;</span><br><span class="line">            System.out.print(parent[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findParent</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        isChecked[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!isChecked[y])&#123;</span><br><span class="line">                parent[y] = x;</span><br><span class="line">                findParent(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;teuriyi-bumocajgi-munje&quot;&gt;&lt;a href=&quot;#teuriyi-bumocajgi-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#트리의-부모찾
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>백준 촌수계산 2644</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-2644/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-2644/</id>
    <published>2021-06-13T11:05:40.000Z</published>
    <updated>2021-06-13T11:07:48.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="consugyesan-munje"><a href="#consugyesan-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#촌수계산-문제"></a> <a href="https://www.acmicpc.net/problem/2644" target="_blank" rel="noopener">촌수계산 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>부모자식관계를 트리형태로 나타낸다.</li><li>시작점으로부터 각각의 depth + 1을 늘려나가면서 몇촌 (즉, 촌수는 depth를 나타낸다.)</li><li>DFS, BFS로 해당되는 값을 전파하면서 늘려나간다. 두가지 방법으로 풀이를 진행하였다.</li><li>isCheck변수에 해당되는 depth를 저장시키고 저장된 값이 0일경우 -1, 그게 아니면 해당되는 depth를 출력한다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_2644</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(st.nextToken());</span><br><span class="line">            graphList.get(a).add(b);</span><br><span class="line">            graphList.get(b).add(a);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(x,y);</span><br><span class="line">        <span class="keyword">if</span>(isCheck[y] != <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(isCheck[y]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> dest)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == dest)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(isCheck[y] == <span class="number">0</span>)&#123;</span><br><span class="line">                isCheck[y] = isCheck[x] + <span class="number">1</span>;</span><br><span class="line">                dfs(y,dest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(start);</span><br><span class="line">        isCheck[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            <span class="keyword">if</span>(x == end)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(isCheck[y] == <span class="number">0</span>)&#123;</span><br><span class="line">                    isCheck[y] = isCheck[x] + <span class="number">1</span>;</span><br><span class="line">                    q.add(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;consugyesan-munje&quot;&gt;&lt;a href=&quot;#consugyesan-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#촌수계산-문제&quot;&gt;&lt;/a&gt; &lt;a hr
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="그래프" scheme="http://gwanhyeon.github.io/tags/%EA%B7%B8%EB%9E%98%ED%94%84/"/>
    
  </entry>
  
  <entry>
    <title>백준 A-&gt;B 16953</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-16953/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-16953/</id>
    <published>2021-06-13T10:11:35.000Z</published>
    <updated>2021-06-13T10:13:56.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="boj-16953-munje"><a href="#boj-16953-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#boj-16953-문제"></a> <a href="https://www.acmicpc.net/problem/16953" target="_blank" rel="noopener">BOJ 16953 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>거꾸로 생각하거나 dfs로 풀기</li><li>10^9로는 모든경우를 체크할 수 없다. 다른방법을 구해야한다.</li><li>bfs같은경우는 모든 경우를 구하는것은 가까운것만 탐색하므로 bfs로 처리할 수 있다.</li><li>범위가 10^9이기때문에 int의 범위로는 모두 처리하지 못한다. 따라서 Long으로 처리하니까 정답을 도출하였다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_16953</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        answer = Long.MAX_VALUE;</span><br><span class="line">        a = Long.parseLong(st.nextToken());</span><br><span class="line">        b = Long.parseLong(st.nextToken());</span><br><span class="line">        isCheck = <span class="keyword">false</span>;</span><br><span class="line">        dfs(a,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!isCheck) System.out.println(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">            answer = Math.min(answer, cnt);</span><br><span class="line">            isCheck = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(a * <span class="number">2</span>,cnt+<span class="number">1</span>);</span><br><span class="line">        dfs(a * <span class="number">10</span> + <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;boj-16953-munje&quot;&gt;&lt;a href=&quot;#boj-16953-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#boj-16953-문제&quot;&gt;&lt;/a&gt; &lt;a h
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security URL RequestRejectedException 트러블 슈팅</title>
    <link href="http://gwanhyeon.github.io/Spring-20210528-spring-double-slash/"/>
    <id>http://gwanhyeon.github.io/Spring-20210528-spring-double-slash/</id>
    <published>2021-05-28T11:20:10.000Z</published>
    <updated>2021-05-28T11:31:22.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string"><a href="#the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string"></a> The request was rejected because the URL contained a potentially malicious String “//”</h1><p>AES256 암호화 키값을 생성하는 과정에서 생긴 트러블 슈팅과정입니다. 해당되는 암호화 키값이 요청 @Pathvariable으로 들어오는 과정에서 해당되는 URL 매핑이 올바르게 진행되지 않은 사항이 있었습니다. 비즈니스 로직의 원인으로 보고 요청부분에서 누락된 부분이 없는지 찾아보았습니다.<br>특히 Junit5 통합 테스트를 진행하는 도중 어떤 경우는 성공을 하고 어떤 경우는 실패를 하는 경우를 찾아낼 수 있었습니다. 어떻게 같은 코드를 돌리는데 테스트에서 성공과 실패를 번갈아가면서 리턴하는 경우가 있지 라는 생각을 하였고 암호화 키값에서 문제가 발생하는것을 확인하기위해 PostMan에서 직접적으로 요청을 보내보았는데 아래와 같은 Exception이 발생하였습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.web.firewall.RequestRejectedException: The request was rejected because the URL contained a potentially malicious String "//"</span><br><span class="line">    at org.springframework.security.web.firewall.StrictHttpFirewall.rejectedBlocklistedUrls(StrictHttpFirewall.java:456) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.security.web.firewall.StrictHttpFirewall.getFirewalledRequest(StrictHttpFirewall.java:429) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:196) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]</span><br></pre></td></tr></table></figure><p>Spring Security의 기본적인 정책은 URL에 더블슬래시가 들어가는 것을 허용하지 않으며</p><p>localhost:8080/test/{property} property = ///////#$%^&amp;*( 라고 가정을 하면 해당되는 // 에 해당하는 더블 슬래시가 정책상 firewall에 예외규칙으로 처리되는 문제가 발생하였다.</p><p>Spring Security Config 에서 Double Slash를 허용해주는것을 @Bean으로 등록하여 WebSecurity설정에 추가해주면 해당되는 원인을 해결할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    web.httpFirewall(defaultHttpFirewall());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpFirewall <span class="title">defaultHttpFirewall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultHttpFirewall();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또 다른 방식으로는 정규표현식을 사용하여 regex = [^0-9a-zA-Z] or [////]</p><p>자바에서는 슬래쉬 하나를 <code>//</code>로 인식하게 되기때문에 해당되는 것들을 모두 “” 으로 치환을 하면서 해당되는 사항을 트러블슈팅할 수 있었습니다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string&quot;&gt;&lt;a href=&quot;#the-request-was-rejected-because-the-ur
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/server/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 05 형식 맞추기</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210518-chapter05-%ED%98%95%EC%8B%9D%EB%A7%9E%EC%B6%94%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210518-chapter05-%ED%98%95%EC%8B%9D%EB%A7%9E%EC%B6%94%EA%B8%B0/</id>
    <published>2021-05-18T14:32:18.000Z</published>
    <updated>2021-05-18T15:44:38.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hyeongsigeul-majcuneun-mogjeog"><a href="#hyeongsigeul-majcuneun-mogjeog" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#형식을-맞추는-목적"></a> 형식을 맞추는 목적</h1><p>코드의 형식은 중요하다 너무 중요해서 무시하기 어렵다. 너무나도 중요하므로 융통성 없이 맹목적으로 따르면 안된다. 코드 형식은 의사소통의 일환이다.<br><code>코드의 가독성은 앞으로 바꾸리 코드의 품질에 지대한 영향을 미친다.</code>  오랜시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아 놓은 구현스타일과 가독성 수준은 유지보수 <code>용이성</code>과 <code>확장성</code>에 계속 영향을 미친다.</p><h1 id="jeogjeolhan-haeng-gilireul-yujihara"><a href="#jeogjeolhan-haeng-gilireul-yujihara" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#적절한-행-길이를-유지하라"></a> 적절한 행 길이를 유지하라</h1><blockquote><p>소스코드는 얼마나 길어야할까요?</p></blockquote><p>JUnit 자바 전체 파일중 대략 1/3이 40줄에서 100줄 조금 넘는 정도이다. 가장 긴 파일은 <code>500줄을 넘지 않으면 평균 200줄</code> 정도를 기록한다. <em>충분히 이정도로 거대한 시스템을 구축할 수 있다는 사실이다.</em> 일반적으로 큰 파일보다는 작은파일이 이해하기 쉽다.</p><h2 id="sinmun-gisaceoreom-jagseonghara"><a href="#sinmun-gisaceoreom-jagseonghara" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#신문-기사처럼-작성하라"></a> 신문 기사처럼 작성하라</h2><p><code>신문기사처럼 이름은 간단하고 설명이 가능하게 짓는다.</code> 그리고 이름만 보고도 올바른 모듈을 살펴보고 있는지 아닌지를 판단할 정도로 신경 써서 짓는다. 소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명한다. 아래로 내려갈수록 의도를 세세하게 묘사한다. 마지막에는 가장 저차원적인 함수와 세부 내역이 나온다.</p><h2 id="gaenyeomeun-bin-haengeuro-bunrihara"><a href="#gaenyeomeun-bin-haengeuro-bunrihara" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#개념은-빈-행으로-분리하라"></a> 개념은 빈 행으로 분리하라</h2><blockquote><p>빈 행을 넣지 않을 경우</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fitnesse.wikitext.widgets;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoldWidget</span> <span class="keyword">extends</span> <span class="title">ParentWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP = <span class="string">"'''.+?'''"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern pattern = Pattern.compile(<span class="string">"'''(.+?)'''"</span>,</span><br><span class="line">        Pattern.MULTILINE + Pattern.DOTALL);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoldWidget</span><span class="params">(ParentWidget parent, String text)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        Matcher match = pattern.matcher(text); match.find(); </span><br><span class="line">        addChildWidgets(match.group(<span class="number">1</span>));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">render</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        StringBuffer html = <span class="keyword">new</span> StringBuffer(<span class="string">"&lt;b&gt;"</span>);         </span><br><span class="line">        html.append(childHtml()).append(<span class="string">"&lt;/b&gt;"</span>); </span><br><span class="line">        <span class="keyword">return</span> html.toString();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빈행만으로 훨씬 가독성 좋은 코드를 만들 수 있다.</p><blockquote><p>빈 행을 넣을 경우</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fitnesse.wikitext.widgets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoldWidget</span> <span class="keyword">extends</span> <span class="title">ParentWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP = <span class="string">"'''.+?'''"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern pattern = Pattern.compile(<span class="string">"'''(.+?)'''"</span>, </span><br><span class="line">        Pattern.MULTILINE + Pattern.DOTALL</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoldWidget</span><span class="params">(ParentWidget parent, String text)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        Matcher match = pattern.matcher(text);</span><br><span class="line">        match.find();</span><br><span class="line">        addChildWidgets(match.group(<span class="number">1</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">render</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        StringBuffer html = <span class="keyword">new</span> StringBuffer(<span class="string">"&lt;b&gt;"</span>); </span><br><span class="line">        html.append(childHtml()).append(<span class="string">"&lt;/b&gt;"</span>); </span><br><span class="line">        <span class="keyword">return</span> html.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sero-miljibdo"><a href="#sero-miljibdo" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#세로-밀집도"></a> 세로 밀집도</h2><blockquote><p>줄바꿈이 개념을 분리한다면 세로 밀집도는 연관성을 의미한다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReporterConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String m_className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Property&gt; m_properties = <span class="keyword">new</span> ArrayList&lt;Property&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProperty</span><span class="params">(Property property)</span> </span>&#123; </span><br><span class="line">        m_properties.add(property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sujig-geori"><a href="#sujig-geori" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#수직-거리"></a> 수직 거리</h2><p>함수 연관관계와 동작방식을 이해하려고 이 함수에서 저 함수를 오가며 소스 파일을 위아래로 뒤지는 실수를 한 경험이 있는가?<br>서로 밀접한 개념들은 세로로 가까이 둬야한다. 타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다. 이게 바로 <code>protected 변수를 피해야하는 이유</code>중 하나이다.</p><p>변수선언은 사용하는 위치에서 최대한 가까이 선언한다. 인스턴스변수는 클래스 맨 처음(혹은 끝)에 선언한다.</p><blockquote><p>종속 함수</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WikiPageResponder</span> <span class="keyword">implements</span> <span class="title">SecureResponder</span> </span>&#123; </span><br><span class="line">    <span class="keyword">protected</span> WikiPage page;</span><br><span class="line">    <span class="keyword">protected</span> PageData pageData;</span><br><span class="line">    <span class="keyword">protected</span> String pageTitle;</span><br><span class="line">    <span class="keyword">protected</span> Request request; </span><br><span class="line">    <span class="keyword">protected</span> PageCrawler crawler;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">makeResponse</span><span class="params">(FitNesseContext context, Request request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String pageName = getPageNameOrDefault(request, <span class="string">"FrontPage"</span>);</span><br><span class="line">        loadPage(pageName, context); </span><br><span class="line">        <span class="keyword">if</span> (page == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> notFoundResponse(context, request); </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> makePageResponse(context); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPageNameOrDefault</span><span class="params">(Request request, String defaultPageName)</span> </span>&#123;</span><br><span class="line">        String pageName = request.getResource(); </span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(pageName))</span><br><span class="line">            pageName = defaultPageName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageName; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadPage</span><span class="params">(String resource, FitNesseContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WikiPagePath path = PathParser.parse(resource);</span><br><span class="line">        crawler = context.root.getPageCrawler();</span><br><span class="line">        crawler.setDeadEndStrategy(<span class="keyword">new</span> VirtualEnabledPageCrawler()); </span><br><span class="line">        page = crawler.getPage(context.root, path);</span><br><span class="line">        <span class="keyword">if</span> (page != <span class="keyword">null</span>)</span><br><span class="line">            pageData = page.getData();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response <span class="title">notFoundResponse</span><span class="params">(FitNesseContext context, Request request)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NotFoundResponder().makeResponse(context, request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> SimpleResponse <span class="title">makePageResponse</span><span class="params">(FitNesseContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        pageTitle = PathParser.render(crawler.getFullPath(page)); </span><br><span class="line">        String html = makeHtml(context);</span><br><span class="line">        SimpleResponse response = <span class="keyword">new</span> SimpleResponse(); </span><br><span class="line">        response.setMaxAge(<span class="number">0</span>); </span><br><span class="line">        response.setContent(html);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>종속 함수</code> 한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다. 또한 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다. 다음으로 호출하는 함수는 그 아래에 정의한다. 호출되는 함수를 찾기가 쉬워지며 전체 가독성도 높아진다</p><blockquote><p>개념의 유사성</p></blockquote><p>개념적인 친화도가 높을 수록 코드를 가까이 배치한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertTrue</span><span class="params">(String message, <span class="keyword">boolean</span> condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!condition) </span><br><span class="line">            fail(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertTrue</span><span class="params">(<span class="keyword">boolean</span> condition)</span> </span>&#123; </span><br><span class="line">        assertTrue(<span class="keyword">null</span>, condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertFalse</span><span class="params">(String message, <span class="keyword">boolean</span> condition)</span> </span>&#123; </span><br><span class="line">        assertTrue(message, !condition);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertFalse</span><span class="params">(<span class="keyword">boolean</span> condition)</span> </span>&#123; </span><br><span class="line">        assertFalse(<span class="keyword">null</span>, condition);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>친화도가 높은 요인은 여러가지이다. 그 중 하나가 직접적인 종속성이다. 이런 경우에는 종속성은 부차적 요인이므로 종속적인 관게가 없더라도 가까이 배치하도록한다.</p><h1 id="garo-hyeongsig-majcugi"><a href="#garo-hyeongsig-majcugi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#가로-형식-맞추기"></a> 가로 형식 맞추기</h1><p>한 행은 가로로 얼마나 길어야 적당할까? 프로그래머는 짧은 행을 선호하고 보통 40자 정도가 된다. 약 120자 정도로 제한할 것을 권고한다.</p><blockquote><p>가로 공백과 밀집도</p></blockquote><p>가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다. 공백을 넣으면 두가지 주요 요소가 확실히 나뉜다는 사실이다.<br>반면, 함수 이름과 이어지는 괄호 사이에는 공백을 넣지 않았다. 함수와 인수는 서로 밀접하기 때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addLine(lineSize, lineCount);</span><br><span class="line"><span class="keyword">return</span> b*b - <span class="number">4</span>*a*c;</span><br></pre></td></tr></table></figure><p>수식을 읽기가 매우 편하다. 곱셈은 우선순위가 가장 높다. 항 사이에는 공백이 들어간다. 덧셈과 뺄셈은 우선순위가 곱셈보다 낮기때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (-b - Math.sqrt(determinant)) / (<span class="number">2</span>*a);</span><br></pre></td></tr></table></figure><p>하지만, 도구에서 없애는 경우가 흔하다</p><blockquote><p>가로 정렬</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FitNesseExpediter</span> <span class="keyword">implements</span> <span class="title">ResponseSender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>        Socket          socket;</span><br><span class="line">    <span class="keyword">private</span>     InputStream       input;</span><br><span class="line">    <span class="keyword">private</span>     OutputStream       output;</span><br><span class="line">    <span class="keyword">protected</span>     <span class="keyword">long</span>          requestParsingTimeLimit;</span><br><span class="line">    <span class="keyword">private</span>     <span class="keyword">long</span>          requestProgress;</span><br><span class="line">    <span class="keyword">private</span>     <span class="keyword">long</span>          requestParsingDeadline;</span><br><span class="line">    <span class="keyword">private</span>     <span class="keyword">boolean</span>          hasError;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FitNesseExpediter</span><span class="params">(Socket         s,</span></span></span><br><span class="line"><span class="function"><span class="params">                           FitNessContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context =            context;</span><br><span class="line">    socket =                  s;</span><br><span class="line">    requestParsingTimeLimit = <span class="number">10000</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>깔끔해보일지 모르지만, 엉뚱한 부분을 강조해 진짜 의도가 가려지기때문이다. 예를 들어, 위 선언부를 읽다보면 변수유형은 무시하고 변수이름부터 읽게 된다. 코드 형식을 자동으로 맞춰주는 도구는 대다수가 위와 같은 정렬을 무시한다.</p><h2 id="deulyeosseugi"><a href="#deulyeosseugi" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#들여쓰기"></a> 들여쓰기</h2><p>소스파일은 윤곽도와 계층이 비슷하다. 파일 전체에 적용되는 정보가 있고, 파일 내 개별 클래스에 적용되는 정보가 있고, 클래스 내 각 메서드에 적용되는 정보가 있고, 블록 내 블록에 재귀적으로 적용되는 정보가 있다.<br>들여쓰기 한 파일은 한눈에 구조가 들어온다. 때로는 간단한 if문, while문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생긴다. <code>한 행에 뭉뚱그려놓은 코드를 지양해라!</code></p><h2 id="gajja-beomwi"><a href="#gajja-beomwi" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#가짜-범위"></a> 가짜 범위</h2><p>이상한 세미콜론을 적용하지 말자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h1 id="tim-gyucig"><a href="#tim-gyucig" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#팀-규칙"></a> 팀 규칙</h1><p>팀은 한가지 규칙을 정하고 팀원들은 규칙을 따라야한다. IDE코드 형식기를 설정하거나 규칙을 정해라!</p><h1 id="bab-ajeossiyi-hyeongsig-gyucig"><a href="#bab-ajeossiyi-hyeongsig-gyucig" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#밥-아저씨의-형식-규칙"></a> 밥 아저씨의 형식 규칙</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeAnalyzer</span> <span class="keyword">implements</span> <span class="title">JavaFileAnalysis</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lineCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxLineWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> widestLineNumber;</span><br><span class="line">    <span class="keyword">private</span> LineWidthHistogram lineWidthHistogram; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalChars;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeAnalyzer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lineWidthHistogram = <span class="keyword">new</span> LineWidthHistogram();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title">findJavaFiles</span><span class="params">(File parentDirectory)</span> </span>&#123; </span><br><span class="line">        List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;File&gt;(); </span><br><span class="line">        findJavaFiles(parentDirectory, files);</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findJavaFiles</span><span class="params">(File parentDirectory, List&lt;File&gt; files)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (File file : parentDirectory.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".java"</span>)) </span><br><span class="line">                files.add(file);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) </span><br><span class="line">                findJavaFiles(file, files);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analyzeFile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(javaFile)); </span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            measureLine(line); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureLine</span><span class="params">(String line)</span> </span>&#123; </span><br><span class="line">        lineCount++;</span><br><span class="line">        <span class="keyword">int</span> lineSize = line.length();</span><br><span class="line">        totalChars += lineSize; </span><br><span class="line">        lineWidthHistogram.addLine(lineSize, lineCount);</span><br><span class="line">        recordWidestLine(lineSize);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordWidestLine</span><span class="params">(<span class="keyword">int</span> lineSize)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (lineSize &gt; maxLineWidth) &#123;</span><br><span class="line">            maxLineWidth = lineSize;</span><br><span class="line">            widestLineNumber = lineCount; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLineCount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> lineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxLineWidth</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> maxLineWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidestLineNumber</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> widestLineNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LineWidthHistogram <span class="title">getLineWidthHistogram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineWidthHistogram;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMeanLineWidth</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)totalChars/lineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMedianLineWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer[] sortedWidths = getSortedWidths(); </span><br><span class="line">        <span class="keyword">int</span> cumulativeLineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> width : sortedWidths) &#123;</span><br><span class="line">            cumulativeLineCount += lineCountForWidth(width); </span><br><span class="line">            <span class="keyword">if</span> (cumulativeLineCount &gt; lineCount/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Cannot get here"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">lineCountForWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineWidthHistogram.getLinesforWidth(width).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer[] getSortedWidths() &#123;</span><br><span class="line">        Set&lt;Integer&gt; widths = lineWidthHistogram.getWidths(); </span><br><span class="line">        Integer[] sortedWidths = (widths.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>])); </span><br><span class="line">        Arrays.sort(sortedWidths);</span><br><span class="line">        <span class="keyword">return</span> sortedWidths;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bob 아저씨의 코드규칙을 참고해보도록 하자!</p><ol><li>함수 () { } 에서 괄호이후 한칸을 띄운다.</li><li>if문이 한줄일 경우 다음칸으로 띄우고 들여쓰기를 하자</li><li>코드의 의미를 명확하게 한다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hyeongsigeul-majcuneun-mogjeog&quot;&gt;&lt;a href=&quot;#hyeongsigeul-majcuneun-mogjeog&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
  </entry>
  
  <entry>
    <title>Spring @DirtiesContext</title>
    <link href="http://gwanhyeon.github.io/Spring-20210514-spring-dirties-context/"/>
    <id>http://gwanhyeon.github.io/Spring-20210514-spring-dirties-context/</id>
    <published>2021-05-14T07:14:33.000Z</published>
    <updated>2021-05-14T07:16:30.434Z</updated>
    
    <content type="html"><![CDATA[<p>Spring DirtiesContext</p><p>스프링 단위 테스트 진행시 단독으로 수행되던 코드들이 통합테스트시에 Context를 공유하여 올바른 값이 도출되지 않는 경우가 있다. 그 이유는 하나의 Spring TEST Context에서 기존의 Context를 재사용함에 따라 발생하는 문제이다. 이러한 문제들을 해결하기 위하여 필요한것들이 <code>@DirtiesContext</code> 이다.</p><p>이 <code>@DirtiesContext</code> 어노테이션은 테스트를 수행전, 수행후, 각 테스트 케이스마다 수행하기 전, 수행한 이후에 Context를 재생성하는 역할을 한다.</p><blockquote><p>@DirtiesContext</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@DirtiesContext indicates that the underlying Spring ApplicationContext has been dirtied during the execution of a test (that is, the test modified or corrupted it in some manner — for example, by changing the state of a singleton bean) and should be closed. When an application context is marked as dirty, it is removed from the testing framework’s cache and closed. As a consequence, the underlying Spring container is rebuilt for any subsequent test that requires a context with the same configuration metadata.</span><br><span class="line">You can use @DirtiesContext as both a class-level and a method-level annotation within the same class or class hierarchy. In such scenarios, the ApplicationContext is marked as dirty before or after any such annotated method as well as before or after the current test class, depending on the configured methodMode and classMode.</span><br></pre></td></tr></table></figure><p>doc.spring.io에 따르면 @DirtiesContext ApplicationContext 테스트를 실행하는동안 테스트 프레임워크의 캐시를 제거하고 닫게합니다. 결과적으로 기본 Spring Container에 동일한 구성 메타 데이터가 있는 컨텍스트를 필요로하는 후속 테스트를 위해 재 빌드된다고 나와있습니다.</p><p>또한, 클래스 계층 구조내에서 클래스 수준 주석과 메서드 수준 수적으로 모두 사용할 수 있습니다.</p><blockquote><p>클래스 테스트 시작전 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(classMode = BEFORE_CLASS) </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that require a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>클래스 테스트 이후 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDirtyingTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that result in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>모든 테스트 케이스마다 시작하기 이전 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(classMode = BEFORE_EACH_TEST_METHOD) </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that require a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>모든 테스트케이스가 끝날때 마다 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(classMode = AFTER_EACH_TEST_METHOD) </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDirtyingTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that result in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>특정 케이스 시작전 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(methodMode = BEFORE_METHOD) </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testProcessWhichRequiresFreshAppCtx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some logic that requires a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>특정 케이스 시작 이후 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testProcessWhichDirtiesAppCtx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some logic that results in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Reference</p></blockquote><p><a href="https://shortstories.gitbooks.io/studybook/content/dirtiescontext.html" target="_blank" rel="noopener">https://shortstories.gitbooks.io/studybook/content/dirtiescontext.html</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#spring-testing-annotation-dirtiescontext" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#spring-testing-annotation-dirtiescontext</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring DirtiesContext&lt;/p&gt;
&lt;p&gt;스프링 단위 테스트 진행시 단독으로 수행되던 코드들이 통합테스트시에 Context를 공유하여 올바른 값이 도출되지 않는 경우가 있다. 그 이유는 하나의 Spring TEST Context에서 기
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/server/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 04 주석</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210502-chapter04-%EC%A3%BC%EC%84%9D/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210502-chapter04-%EC%A3%BC%EC%84%9D/</id>
    <published>2021-05-02T14:15:54.000Z</published>
    <updated>2021-05-02T15:44:14.129Z</updated>
    
    <content type="html"><![CDATA[<p>이번에 살펴볼 파트는 주석파트입니다. 처음에 살펴볼 내용중에서 첫장부터 제게 크게 다가온 명언중 하나는</p><blockquote><p>나쁜 코드에 주석을 달지 마라. 새로 짜라.</p></blockquote><ul><li>브라이언 W. 커니핸,P.J 플라우거</li></ul><p>잘 달린 주석은 그 어떤 정보보다 유용하지만, 경솔하고 근거없는 주석은 코드를 이해하기 어렵게 만든다고 합니다. 우리는 코드로 의도를 표현하지 못해, 실패를 만회하기 위해 주석을 사용한다.</p><p>주석을 무시하는 이유중 가장 무서운것은 <code>거짓말</code>을 한다는것이다. 오래되면 오래될 수록 그릇될 가능성이 있다.</p><p><em>진실은 한곳에만 존재한다. 바로 코드이다</em> 우리는 주석을 가능한 줄이도록 해야한다.</p><h1 id="juseogeun-nabbeun-kodeureul-bowanhaji-moshanda"><a href="#juseogeun-nabbeun-kodeureul-bowanhaji-moshanda" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#주석은-나쁜-코드를-보완하지-못한다"></a> 주석은 나쁜 코드를 보완하지 못한다.</h1><p>코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다. 표현력이 풍부하고 깔끔하며 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다.</p><h1 id="kodeuro-yidoreul-pyohyeonhara"><a href="#kodeuro-yidoreul-pyohyeonhara" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#코드로-의도를-표현하라"></a> 코드로 의도를 표현하라</h1><p>확실히 코드만으로 의도를 설명하기가 어려운 경우가 있다. 몇초만 더 생각하면 더 좋은 코드를 짤 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 직원에게 복지 혜택을 받을 자격이 있는지 검사한다. </span></span><br><span class="line"><span class="keyword">if</span> ((emplotee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>주석으로 의도를 표현하지 말고 코드로 표현하라.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (employee.isEligibleForFullBenefits())</span><br></pre></td></tr></table></figure><h1 id="joheun-juseog"><a href="#joheun-juseog" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#좋은-주석"></a> 좋은 주석</h1><p>정말로 좋은 주석은, 주석을 달지 않을 방법을 찾아낸 주석이라는 사실이다.</p><h2 id="beobjeogin-juseog"><a href="#beobjeogin-juseog" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#법적인-주석"></a> 법적인 주석</h2><p>회사가 정립한 구현 표준에 맞춰 법적인 이유로 특정 주식을 넣으라고 명시한다. 각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보는 필요하고도 타당하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright (C) 2003, 2004, 2005 by Object Montor, Inc. All right reserved.</span></span><br><span class="line"><span class="comment">// GNU General Public License</span></span><br></pre></td></tr></table></figure><h2 id="jeongboreul-jegonghaneun-juseog"><a href="#jeongboreul-jegonghaneun-juseog" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#정보를-제공하는-주석"></a> 정보를 제공하는 주석</h2><p>때로는 기본적인 정보를 주석으로 제공하면 편리하다. 예를 들면, 다음 주석은 추상 메서드가 반환할 값을 설명한다. 물론 이 또한 <code>responderBeingTested</code> 로 바꾸면 주석이 필요 없어진다. 이왕이면 시각과 날짜를 변환해주는 클래스를 만들어 코드를 옮겨주면 더 좋고 깔끔하겠다. 주석이 그러면 필요 없어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 테스트 중인 Responder 인스턴스를 반환</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Responder <span class="title">responderInstance</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="yidoreul-seolmyeonghaneun-juseog"><a href="#yidoreul-seolmyeonghaneun-juseog" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#의도를-설명하는-주석"></a> 의도를 설명하는 주석</h2><p>주석은 구현을 이해하게 도와주는 선을 넘어 결정에 깔린 의도까지 설명한다. 다음은 주석으로 흥미로운 결정을 기록한 예제이다. 두 객체를 비교할 때 저자는 다른 어떤 객체보다 자기 객체에 높은 순위를 주기로 결정했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 스레드를 대량 생성하는 방법으로 어떻게든 경쟁 조건을 만들려 시도한다.  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &gt; <span class="number">2500</span>; i++) &#123;</span><br><span class="line">    WidgetBuilderThread widgetBuilderThread = </span><br><span class="line">        <span class="keyword">new</span> WidgetBuilderThread(widgetBuilder, text, parent, failFlag);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(widgetBuilderThread);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yimireul-myeongryohage-balghineun-juseog"><a href="#yimireul-myeongryohage-balghineun-juseog" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#의미를-명료하게-밝히는-주석"></a> 의미를 명료하게 밝히는 주석</h2><p>떄때로 모호한 인수나 반환값은 그 의미를 읽기 좋게 표현하면 이해하기 쉬워진다. 일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋곗지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미는 명로하게 밝히는 주석이 용이하다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertTru(a.compareTo(a) == <span class="number">0</span>); <span class="comment">// a == a</span></span><br><span class="line">assertTru(a.compareTo(b) == -<span class="number">1</span>); <span class="comment">// a &lt; a</span></span><br><span class="line">assertTru(a.compareTo(aa) == <span class="number">1</span>); <span class="comment">// a &gt; aa</span></span><br></pre></td></tr></table></figure><h2 id="gyeolgwareul-gyeonggohaneun-juseog"><a href="#gyeolgwareul-gyeonggohaneun-juseog" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#결과를-경고하는-주석"></a> 결과를 경고하는 주석</h2><p>때로 다른 프로그래머에게 결과를 경고할 목적으로 주석을 사용한다. 경고할 목적으로 주석을 사용한다. 예를 들어, 다음은 특정 테스트 케이스를 꺼야하는 이유를 설명하는 주석이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 여유 시간이 충분하지 않다면 실행하지 마십시오.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_testWithReallyBigFile</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> simpleDateFormat <span class="title">makeStandardHttpDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// SimpleDateFormat 은 스레드에 안전하지 못하다.</span></span><br><span class="line">  <span class="comment">// 그러므로 각 인스턴스를 독립적으로 생성해야 한다.</span></span><br><span class="line">  SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"EEE, dd MMM  yyyy HH:mm:ss z"</span>);</span><br><span class="line">  df.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</span><br><span class="line">  <span class="keyword">return</span> df;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="todo-juseog"><a href="#todo-juseog" class="header-anchor">3.6. </a><a class="markdownIt-Anchor" href="#todo-주석"></a> TODO 주석</h2><p>앞으로 할 일은 <code>TODO</code> 로 남겨두면 편하다. 하지만, 너무 많아지면 좋지 않다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO-MdM 현재 필요하지 않다.</span></span><br><span class="line"><span class="comment">// 체크아웃 모델을 도입하면 함수가 필요 없다.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> VersionInfo <span class="title">makeVersion</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jungyoseongeul-gangjohaneun-juseog"><a href="#jungyoseongeul-gangjohaneun-juseog" class="header-anchor">3.7. </a><a class="markdownIt-Anchor" href="#중요성을-강조하는-주석"></a> 중요성을 강조하는 주석</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String listItemContent = match.group(<span class="number">3</span>).trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다.</span></span><br><span class="line"><span class="comment">// 문자열에 시작 공백이 있으면 다른 문자열로 인식되기 때문이다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ListItemWidget(<span class="keyword">this</span>, listItemContent, <span class="keyword">this</span>.level + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> buildList(text.substring(match.end()));</span><br></pre></td></tr></table></figure><h2 id="gonggae-apieseo-javadocs"><a href="#gonggae-apieseo-javadocs" class="header-anchor">3.8. </a><a class="markdownIt-Anchor" href="#공개-api에서-javadocs"></a> 공개 API에서 Javadocs</h2><p>공개 API를 구현하고 싶으면 반드시 훌륭한 Javadocs를 작성한다.</p><h2 id="nabbeun-juseog"><a href="#nabbeun-juseog" class="header-anchor">3.9. </a><a class="markdownIt-Anchor" href="#나쁜-주석"></a> 나쁜 주석</h2><p>대다수의 주석이 이 범주에 속한다. 엉성한 코드를 변명하거나 허술한 코드를 지탱하려 한다.</p><h2 id="jujeolgeorineun-juseog"><a href="#jujeolgeorineun-juseog" class="header-anchor">3.10. </a><a class="markdownIt-Anchor" href="#주절거리는-주석"></a> 주절거리는 주석</h2><p>주석을 달기로 결정했다면 충분한 시간을 들여 최고의 주석을 달도록 노력한다. 주석은 독자와 제대로 소통하지 못하는 주석이다. 주석은 바이트만낭비할뿐이다.<br>주석의 의미를 알아내려면 다른 코드를 봐야한다. 이해가 안되어 다른 모듈까지 뒤져야 하는 주석은 제대로 된 주석이 아니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String propertiesPath = propertiesLocation + <span class="string">"/"</span> + PROPERTIES_FILE;</span><br><span class="line">    FileInputStream propertiesStream = <span class="keyword">new</span> FileInputStream(propertiesPath);</span><br><span class="line">    loadedProperties.load(propertiesStream);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 속성 파일이 없다면 기본값을 모두 메모리로 읽어 들였다는 의미다. </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gateun-iyagireul-jungboghaneun-juseog"><a href="#gateun-iyagireul-jungboghaneun-juseog" class="header-anchor">3.11. </a><a class="markdownIt-Anchor" href="#같은-이야기를-중복하는-주석"></a> 같은 이야기를 중복하는 주석</h2><p>주석이 같은 코드의 내용을 그대로 중복하면 코드보다 주석을 읽는 시간이 더 오래걸린다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this.closed가 true일 때 반환되는 유틸리티 메서드다.</span></span><br><span class="line"><span class="comment">// 타임아웃에 도달하면 예외를 던진다. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForClose</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!closed) &#123;</span><br><span class="line">    wait(timeoutMillis);</span><br><span class="line">    <span class="keyword">if</span> (!closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"MockResponseSender could not be closed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ohaehal-yeojiga-issneun-juseog"><a href="#ohaehal-yeojiga-issneun-juseog" class="header-anchor">3.12. </a><a class="markdownIt-Anchor" href="#오해할-여지가-있는-주석"></a> 오해할 여지가 있는 주석</h2><p>의도는 좋았으나 프로그래머가 딱 맞을 정도로 엄밀하게는 주석을 달지 못하기도 한다. 예를 들면 위의 코드에서 <code>this.closed</code> 가 <code>true</code> 로 *변하는 순간에 반환하지 않는다.  <code>this.closed</code> 가 <code>true</code> 여야 메서드를 반환한다.<br>즉, wait 의 타임아웃을 무조건 기다렸다가 에러를 통해 확인하게 된다. 잘못된 정보로 인해 자기코드가 굼벵이 기어가듯 돌아가는 이유를 찾느라 골머리를 앓는다.</p><h2 id="yimujeogeuro-daneun-juseog"><a href="#yimujeogeuro-daneun-juseog" class="header-anchor">3.13. </a><a class="markdownIt-Anchor" href="#의무적으로-다는-주석"></a> 의무적으로 다는 주석</h2><p>모든 함수에 Javadocs를 달거나 모든 변수에 주석을 달아야한다는 규칙은 어리석기 그지없다. 이런주석은 코드를 복잡하게 맏늘며, 거짓말을 퍼뜨리고, 혼동과 무질서를 초래한다. 예를 들어, 코드만 헷갈리게 만들며 거짓말할 가능성을 높이며 잘못된 정보를 제공할 여지를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> title CD 제목</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> author CD 저자</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tracks CD 트랙 숫자</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> durationInMinutes CD 길이(단위: 분)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCD</span><span class="params">(String title, String author, <span class="keyword">int</span> tracks, <span class="keyword">int</span> durationInMinutes)</span> </span>&#123;</span><br><span class="line">    CD cd = <span class="keyword">new</span> CD();</span><br><span class="line">    cd.title = title;</span><br><span class="line">    cd.author = author;</span><br><span class="line">    cd.tracks = tracks;</span><br><span class="line">    cd.duration = durationInMinutes;</span><br><span class="line">    cdList.add(cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iryeogeul-giroghaneun-juseog"><a href="#iryeogeul-giroghaneun-juseog" class="header-anchor">3.14. </a><a class="markdownIt-Anchor" href="#이력을-기록하는-주석"></a> 이력을 기록하는 주석</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>변경 이력 (11-Oct-2001부터)</span><br><span class="line"><span class="bullet">* </span>------------------------------------------------</span><br><span class="line"><span class="bullet">* </span>11-Oct-2001 : 클래스를 다시 정리하고 새로운 패키징</span><br><span class="line"><span class="bullet">* </span>05-Nov-2001: getDescription() 메소드 추가</span><br><span class="line"><span class="bullet">* </span>... 등등</span><br></pre></td></tr></table></figure><p>해당 정보들은 소스 코드 관리시스템(Git,SVN)과 같은 것들이 해준다.</p><h2 id="isseuna-mana-han-juseog"><a href="#isseuna-mana-han-juseog" class="header-anchor">3.15. </a><a class="markdownIt-Anchor" href="#있으나-마나-한-주석"></a> 있으나 마나 한 주석</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 기본 생성자</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AnnualDateRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>너무 당연한 사실은 주석으로 새로운 정보를 제공해주지 못한다. 지나친 주석을 무시하는 습관에 빠진다. 코드를 읽으며 자동으로 주석을 건너뛴다.</p><h2 id="museoun-jabeum"><a href="#museoun-jabeum" class="header-anchor">3.16. </a><a class="markdownIt-Anchor" href="#무서운-잡음"></a> 무서운 잡음</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The licenceName. */</span></span><br><span class="line"><span class="keyword">private</span> String licenceName;</span><br></pre></td></tr></table></figure><p>오타가 발생하면 애매한 코드가 되어버린다.</p><h2 id="hamsuna-byeonsuro-pyohyeonhal-su-issdamyeon-juseogeul-dalji-mara"><a href="#hamsuna-byeonsuro-pyohyeonhal-su-issdamyeon-juseogeul-dalji-mara" class="header-anchor">3.17. </a><a class="markdownIt-Anchor" href="#함수나-변수로-표현할-수-있다면-주석을-달지-마라"></a> 함수나 변수로 표현할 수 있다면 주석을 달지 마라</h2><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역 목록 &lt;smodule&gt;에 속하는 모듈이 우리가 속한 하위 시스템에 의존하는가?</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">module</span>.getDependSubsystems().contains(subSysMod.getSubSystem()))</span><br></pre></td></tr></table></figure><p>주석을 없애고 다음과 같이 표현한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList moduleDependencies = smodule.getDependSubSystems();</span><br><span class="line">String ourSubSystem = subSysMod.getSubSystem();</span><br><span class="line"><span class="keyword">if</span> (moduleDependees.contains(ourSubSystem))</span><br></pre></td></tr></table></figure><h2 id="wicireul-pyosihaneun-juseog"><a href="#wicireul-pyosihaneun-juseog" class="header-anchor">3.18. </a><a class="markdownIt-Anchor" href="#위치를-표시하는-주석"></a> 위치를 표시하는 주석</h2><p>/로 이어지는 잡음은 제거하는 편이 좋다.</p><h2 id="dadneun-gwalhoe-daneun-juseog"><a href="#dadneun-gwalhoe-daneun-juseog" class="header-anchor">3.19. </a><a class="markdownIt-Anchor" href="#닫는-괄호에-다는-주석"></a> 닫는 괄호에 다는 주석</h2><p>닫는 괄호에 특수한 주석을 달아놓지 말자. 중첩이 심하고 장황한 함수라면 의미가 있을지도 모르지만, 작고 캡슐화된 함수에는 잡음일 뿐이다.<br>그러므로 닫는 괄호에 주석을 달아야겠다는 생각이 든다면 대신에 함수를 줄이자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(state) &#123;</span><br><span class="line">    <span class="keyword">while</span>(t) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="comment">//while</span></span><br><span class="line">  &#125; <span class="comment">// if</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gongroreul-dolrigeona-jeojareul-pyosihaneun-juseog"><a href="#gongroreul-dolrigeona-jeojareul-pyosihaneun-juseog" class="header-anchor">3.20. </a><a class="markdownIt-Anchor" href="#공로를-돌리거나-저자를-표시하는-주석"></a> 공로를 돌리거나 저자를 표시하는 주석</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* kgh가 추가함 */</span></span><br></pre></td></tr></table></figure><p>소스 코드 관리시스템 Github는 모든것을 기억한다.</p><h3 id="juseogeuro-ceorihan-kodeu"><a href="#juseogeuro-ceorihan-kodeu" class="header-anchor">3.20.1. </a><a class="markdownIt-Anchor" href="#주석으로-처리한-코드"></a> 주석으로 처리한 코드</h3><p>주석으로 처리한 코드만큼 밉살스러운 관행도 드물다. 다음과 같은 코드는 작성하지 말라. 과감해지자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.bytePos = writeBytes(pngIdBytes, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//hdrPos = bytePos;</span></span><br><span class="line">writeHeader();</span><br><span class="line">writeResolution();</span><br><span class="line"><span class="comment">//dataPos = bytePos;</span></span><br><span class="line"><span class="keyword">if</span> (writeImageData()) &#123;</span><br><span class="line">    wirteEnd();</span><br><span class="line">    <span class="keyword">this</span>.pngBytes = resizeByteArray(<span class="keyword">this</span>.pngBytes, <span class="keyword">this</span>.maxPos);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.pngBytes = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pngBytes;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## HTML 주석</span><br><span class="line"></span><br><span class="line">HTML 주석은 혐오 그 자체다. `Javadocs` 와 같은 도구로 주석을 뽑아 웹 페이지에 올려야 한다면 주석에 HTML 태그를 삽입하는 것은 도구가 해야한다.</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">​&lt;p/&gt;</span><br><span class="line">​&lt;pre&gt;</span><br><span class="line">​용법:</span><br><span class="line">블라블라~</span><br></pre></td></tr></table></figure><h2 id="jeonyeog-gyeongbo"><a href="#jeonyeog-gyeongbo" class="header-anchor">3.21. </a><a class="markdownIt-Anchor" href="#전역-경보"></a> 전역 경보</h2><p>주석을 달아야 한다면 근처에 있는 코드만 기술하라. 시스템의 전반적인 형태, 정보를 담지 말아야 한다.</p><h2 id="neomu-manheun-jeongbo"><a href="#neomu-manheun-jeongbo" class="header-anchor">3.22. </a><a class="markdownIt-Anchor" href="#너무-많은-정보"></a> 너무 많은 정보</h2><p>관련 없는 정보를 장황하게 늘어놓지마라!</p><h2 id="mohohan-gwangye"><a href="#mohohan-gwangye" class="header-anchor">3.23. </a><a class="markdownIt-Anchor" href="#모호한-관계"></a> 모호한 관계</h2><p>주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야한다.</p><h2 id="hamsu-hedeo"><a href="#hamsu-hedeo" class="header-anchor">3.24. </a><a class="markdownIt-Anchor" href="#함수-헤더"></a> 함수 헤더</h2><p>짧은 함수는 긴 설명이 필요없다. 짧고 한가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다.</p><h2 id="bigonggae-kodeueseo-javadocs"><a href="#bigonggae-kodeueseo-javadocs" class="header-anchor">3.25. </a><a class="markdownIt-Anchor" href="#비공개-코드에서-javadocs"></a> 비공개 코드에서 Javadocs</h2><p>공개할 API 가 아니라면 쓸모가 없다. 코드만 보기싫고 산만해질 가능성이 높다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번에 살펴볼 파트는 주석파트입니다. 처음에 살펴볼 내용중에서 첫장부터 제게 크게 다가온 명언중 하나는&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나쁜 코드에 주석을 달지 마라. 새로 짜라.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;브라이언 W.
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="주석" scheme="http://gwanhyeon.github.io/tags/%EC%A3%BC%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 주사위 굴리기 14499</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210423-dice-roll/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210423-dice-roll/</id>
    <published>2021-04-22T16:22:59.000Z</published>
    <updated>2021-05-13T04:48:49.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-14499munje"><a href="#samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-14499munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-주사위-굴리기-14499문제"></a> <a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 주사위 굴리기 14499문제</a></h1><h2 id="aidieo"><a href="#aidieo" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#아이디어"></a> 아이디어</h2><ol><li>N*M의 상하좌우의 지도가 주어진다.</li><li>주사위 전개도를 살펴보면 다음과 같다.<br>2(top)<br>4(left) 1(up) 3(right)<br>5(bottom)<br>6(down)</li></ol><p>해당 문제에서는 다음과 같은 변수명으로 주사위 문제를 풀어볼 예정이다.</p><ol start="3"><li>주사위의 문제 조건을 살펴보면 다음과 같다.<br>(1) 가장 처음 주사위 모든면에 ‘0’의 값으로 초기화가 된 상태로 진행한다.<br>(2) 지도 각 칸에 N*M 가로, 세로 형태의 값을 입력받는다.<br>(3) 좌표는 X,Y값으로 구분한다.<br>(4) 지도가 ‘0’일 경우</li></ol><ul><li>주사위 바닥을 지도칸에 복사시킨다.<br>(5) 지도가 ‘0’이 아닐 경우</li><li>지도칸 숫자를 주사위바닥에 복사한다.</li><li>지도칸에 쓰여진 수를 ‘0’으로 초기화 한다.<br>(6) 지도의 N*M범위를 벗어날 수 없다. 즉, 이동하면 안되고 명령을 무시해야한다.<br>(7) 명령은 동 1 서 2 북 3 남 4의 형태로 값의 입력이 주어진다.<br>(8) 입력은 세로N, 가로M, 주사위 놓은곳의 좌표 X Y 명령어의 개수 K가 주어진다.<br>(9) 명령어의 개수만큼 명령어들을 입력받는다.</li></ul><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>가로n ,세로 m, 주사위 좌표 x/y, 명령어의 개수 k를 입력받는다.</li><li>command로 주어진 1,2,3,4 방향에 대한 리스트를 담는 List를 선언하여 저장한다.</li><li>현재 주사위의 상태를 가지고 있는 주사위 클래스 Dice클래스를 선언한다.</li><li>현재 주사위의 상태를 가지고 있는 x,y 초기에 주어지는 주사위의 비용은 0이므로 모든값들을 생성자로 초기화를 진행한다.</li><li>명령어의 순서대로 주사위를 굴린다.</li></ol><ul><li>다음 이동 위치 = 현재 위치 + 명령어 이동 방향에 따른 값 X,Y</li></ul><ol start="6"><li>주사위의 상태를 복사하여 주사위를 굴릴때 값을 변경시킨다.</li></ol><ul><li>값을 담고있는 하나의 변수를 선언하여 주사위에 쓰여진 비용값들을 담아 놓는다.</li></ul><ol start="7"><li>현재 이동된 값이 지도 범위에 만족하는지 확인한다.</li></ol><ul><li>지도의 범위를 만족하면 False, 만족하지못하면 True를 리턴한다. True를 리턴할 경우 문제의 조건에 나와있듯이 값을 출력하지 않고 다음의 경우로 이동한다. 따라서 continue를 통해 해당 경우를 뛰어넘는다.</li></ul><ol start="8"><li>지도의 값이 ‘0’ 일 경우</li></ol><ul><li>주사위바닥수가 칸에 복사된다.</li></ul><ol start="9"><li>지도의 값이 ‘0’이 아닐경우 칸에 쓰여진 수가 주사위 바닥면으로 복사한다. 그리고 칸에 쓰여진 수를 0으로 변경한다.</li></ol><blockquote><p>주사위 회전의 경우</p></blockquote><p>사용할 변수</p><p>지금 부터 말하는 값들의 기준은 내가 앞에서 바라봤을때의 기준으로 설명을 진행하겠다. top 기준 위 bottom 기준 아래 left 기준 왼쪽 right 기준 오른쪽 up 주사위 맨위  down 주사위 맨 바닥의 총 6가지의 주사위의 경우를 사용한다.</p><p>CASE1) 오른쪽으로 주사위를 굴릴 경우</p><ol><li>UP -&gt; RIGHT</li><li>RIGHT -&gt; DOWN</li><li>DOWN -&gt; LEFT</li><li>LEFT -&gt; UP</li></ol><p>CASE2) 왼쪽으로 주사위를 굴릴 경우</p><ol><li>UP -&gt; LEFT</li><li>LEFT -&gt; DOWN</li><li>DOWN -&gt; RIGHT</li><li>RIGHT -&gt; UP</li></ol><p>CASE3) 위로 주사위를 굴릴 경우</p><ol><li>UP -&gt; TOP</li><li>TOP -&gt; DOWN</li><li>DOWN -&gt; BOTTOM</li><li>BOTTOM -&gt; UP</li></ol><p>CASE4) 아래로 주사위를 굴릴 경우</p><ol><li>TOP -&gt; UP</li><li>UP -&gt; BOTTOM</li><li>BOTTOM -&gt; DOWN</li><li>DOWN -&gt; TOP</li></ol><p>총 4가지의 오른쪽, 왼쪽, 위로, 아래로 주사위를 굴리는 경우를 처리할 수 있습니다. 해당 사항에서는 문제에서 주어진대로 동서북남의 경우로 처리를 진행합니다.<br>그리고, 해당 경우의 수를 모두 지나고나서 맨위의 주사위에 있는 비용값을 출력해주고, Dice의 객체의 currX, currY의 값을 현재 이동된 값으로 갱신하여 값을 출력시켜주면 해당 문제를 해결 할 수 있습니다. 약 40분정도 소요되었던 문제였고, 대표적인 시뮬레이션 문제라고 생각합니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주사위굴리기<span class="title">_14499</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m,x,y,k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;       <span class="comment">// 동서북</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; commandList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> upCopy;      <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> topCopy;     <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> rightCopy;   <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> leftCopy;    <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> bottomCopy;  <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> downCopy;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        x = Integer.parseInt(st.nextToken());</span><br><span class="line">        y = Integer.parseInt(st.nextToken());</span><br><span class="line">        k = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        commandList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            commandList.add(Integer.parseInt(st.nextToken()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 현재 주사위 상태 객체</span></span><br><span class="line">        Dice dice = <span class="keyword">new</span> Dice(x,y,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 명령어 대로 주사위를 돌린다.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commandList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> dx = dice.currX;</span><br><span class="line">            <span class="keyword">int</span> dy = dice.currY;</span><br><span class="line">            <span class="comment">// 현재 주사위 방향</span></span><br><span class="line">            <span class="keyword">int</span> currDir = commandList.get(i)-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[currDir][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[currDir][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 주사위 이동방향 체크하기</span></span><br><span class="line">            <span class="keyword">if</span>(isCheckRange(mx,my)) <span class="keyword">continue</span>;</span><br><span class="line">            diceStateSave(dice);</span><br><span class="line">            diceTumble(dice, currDir);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 지도가 0일 경우</span></span><br><span class="line">            <span class="keyword">if</span>(map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                map[mx][my] = dice.down;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 지도가 0이 아닐 경우</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dice.down = map[mx][my];</span><br><span class="line">                map[mx][my] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dice.up);</span><br><span class="line">            dice.currX = mx;</span><br><span class="line">            dice.currY = my;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diceTumble</span><span class="params">(Dice dice, <span class="keyword">int</span> currDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(currDir == <span class="number">0</span>)&#123;</span><br><span class="line">            dice.right = upCopy;</span><br><span class="line">            dice.down = rightCopy;</span><br><span class="line">            dice.left = downCopy;</span><br><span class="line">            dice.up = leftCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">1</span>)&#123;</span><br><span class="line">            dice.left = upCopy;</span><br><span class="line">            dice.down = leftCopy;</span><br><span class="line">            dice.right = downCopy;</span><br><span class="line">            dice.up = rightCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">2</span>)&#123;</span><br><span class="line">            dice.top = upCopy;</span><br><span class="line">            dice.down = topCopy;</span><br><span class="line">            dice.bottom = downCopy;</span><br><span class="line">            dice.up = bottomCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">3</span>)&#123;</span><br><span class="line">            dice.up = topCopy;</span><br><span class="line">            dice.bottom = upCopy;</span><br><span class="line">            dice.down = bottomCopy;</span><br><span class="line">            dice.top = downCopy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diceStateSave</span><span class="params">(Dice dice)</span> </span>&#123;</span><br><span class="line">        upCopy = dice.up;</span><br><span class="line">        topCopy = dice.top;</span><br><span class="line">        rightCopy = dice.right;</span><br><span class="line">        leftCopy = dice.left;</span><br><span class="line">        bottomCopy = dice.bottom;</span><br><span class="line">        downCopy = dice.down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= m) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currX;</span><br><span class="line">        <span class="keyword">int</span> currY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 윗면, 아랫면</span></span><br><span class="line">        <span class="keyword">int</span> up;      <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">int</span> top;     <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">int</span> right;   <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">int</span> left;    <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">int</span> bottom;  <span class="comment">// 5</span></span><br><span class="line">        <span class="keyword">int</span> down;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dice</span><span class="params">(<span class="keyword">int</span> currX, <span class="keyword">int</span> currY, <span class="keyword">int</span> up, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> left, <span class="keyword">int</span> bottom, <span class="keyword">int</span> down)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currX = currX;</span><br><span class="line">            <span class="keyword">this</span>.currY = currY;</span><br><span class="line">            <span class="keyword">this</span>.up = up;</span><br><span class="line">            <span class="keyword">this</span>.top = top;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.bottom = bottom;</span><br><span class="line">            <span class="keyword">this</span>.down = down;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-14499munje&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-1449
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>백준 숫자판별하기 22101</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210422-number-board-valid/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210422-number-board-valid/</id>
    <published>2021-04-22T12:02:29.000Z</published>
    <updated>2021-05-13T05:01:39.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-susjapanbyeolhagi-22101beon"><a href="#baegjun-susjapanbyeolhagi-22101beon" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-숫자판별하기-22101번"></a> <a href="https://www.acmicpc.net/problem/2210" target="_blank" rel="noopener">백준 숫자판별하기 22101번</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>하나의 그래프 클래스를 만들어서 모든 맵의 x,y좌표로 생성한다</li><li>DFS를 수행하여 모든맵의 x,y좌표를 순회한다.</li><li>종료조건은 cnt의 개수가 6개가 만족되면 종료한다.</li><li>총 4가지 방향으로 동서남북의 direction 변수로 핸들링을 진행한다.</li><li>isCheckRange함수에 맞게 이동한 값이 범위에 맞지 않으면 다음값으로 진행한다.</li><li>DFS 다음 재귀호출은 (다음 X, 다음 Y, 선택된 개수 + 1, 현재값 * 10 + 추가할 값)을 수행한다</li><li>종료조건시에 정답을 구하기 위해 하나의 Set 자료구조를 선언하여 현재까지 진행된 값을 add해준다.</li><li>문자열로 추가하지 않고 num의 값으로 추가해 나가는 방식은 (현재 값 * 10 + 추가하는 값)으로 구해줄 수 있다. 복잡도면에서 우수할 것으로 생각한다 단순히 O(1)을 가질 것이라고 생각하기 때문이다.</li></ol><h2 id="siganbogjabdo"><a href="#siganbogjabdo" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#시간복잡도"></a> 시간복잡도</h2><p>N의 범위는 5이고 모든 맵의 범위는 5*5=25를 가지고 있다. 그리고 총 이동할 수 있는 경우의수는 자기자신의 범위를 제외한 5번이므로 4^5 * 25의 시간복잡도를 가질 수 있다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.Practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 숫자판점프<span class="title">_2210</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; arrList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; selectList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> Set&lt;Integer&gt; s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        n = <span class="number">5</span>;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">        arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        selectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                arrList.add(<span class="keyword">new</span> Graph(i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrList.size(); i++) &#123;</span><br><span class="line">            Graph graph = arrList.get(i);</span><br><span class="line">            dfs(graph.x,graph.y,<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> cnt, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">6</span>)&#123;</span><br><span class="line">            s.add(num);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (isCheckRange(mx, my)) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(mx, my, cnt + <span class="number">1</span>, num * <span class="number">10</span> + map[mx][my]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-susjapanbyeolhagi-22101beon&quot;&gt;&lt;a href=&quot;#baegjun-susjapanbyeolhagi-22101beon&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 사다리조작 15684</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210422-ladder-fake/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210422-ladder-fake/</id>
    <published>2021-04-22T08:05:52.000Z</published>
    <updated>2021-05-13T04:49:01.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje"><a href="#samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-사다리조작-15684문제"></a> <a href="https://www.acmicpc.net/problem/15684" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 사다리조작 15684문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>n은 열의 개수, m은 가로선의 추가될 개수, h는 열의 개수입력을 받습니다.</li><li>그리고 가로선의 추가될 x,y좌표의 값을 체크를 하여 맵에 넣어주는데 조심해야할 부분이 있습니다. 저 같은경우에는 x,y의 좌표값이 들어왔을때 x,y의 좌표는 1로 놓고 x,y+1의 좌표는 2로 놓았습니다. 이렇게 좌표로 놓은이유는 추후에 모든 가로선들을 놓고나서 모든 사다리들을 위에서부터 순회하는 과정에서 이동을 하기 위함입니다. 즉, x,y의 좌표 1의 경우에는 오른쪽으로 이동을 하게 되고, x,y+1의 좌표 2의 경우에는 왼쪽으로 이동하게 처리하였습니다.</li><li>n,m,n의 변수를 헷갈려했는데, 다시 한번 문제를 읽고 이해하는 문제가 되었습니다. 시간소요가 많이 된 부분이라 천천히 잘 읽으면서 진행해야겠습니다.</li><li>map의 행,열의 idx값이 1부터 진행되므로 배열할당을 [h+1][n+1]의 범위만큼 할당하여 진행하였습니다.</li><li>사다리 즉, 가로선의 개수는 3개를 넘을 수 없다 라는 조건을 처음에 간과하였습니다. 출력부분에 자세히보면 다리를 놓는것은 3개만 가능하고 그 이상이 될 경우 -1을 출력하라라는 조건을 제대로 확인을 못하였습니다.</li><li>가로선을 최대 3개까지만 구할 수 있기때문에 0,1,2,3개를 선택하는 조합의 경우로 생각할 수 있습니다. 따라서 for(0-3의 범위)를 하나씩 순회하면서 선택되는 경우를 구할 수 있습니다.(3C0, 3C1,3C2, 3C3) 의 경우라고 생각을 합니다.</li><li>이제 DFS를 수행하여 Basement조건을 수립합니다.</li><li>모든 가로선을 놓았을때 종료하는 Basement조건을 수립하고 현재 0~3개의 값을 선택하는 경우로 진행되고 있기 때문에 해당되는 조건은 cnt == len의 범위를 만족할때 사다리를 찾는 로직을 구현하면 됩니다.</li><li>모든 가로선을 아직 놓지 못하였을때는 1번행부터 h+1의 길이까지 모든 행 ~ 열을 순회하면서 현재 위치와 다음위치의 값이 0) 즉, (x,y), (x,y+1)의 값이 모두 0일 경우이자 가로선을 놓을 수 있는 경우에 가로선을 넣게 하였습니다. 가로선은 (x,y)는 1, (x,y+1)은 2로 넣어 1일 경우 오른쪽으로 이동, 2일경우 왼쪽으로 이동의 경우로 맵에 값을 갱신시켜나갔습니다.</li><li>만약 가로선의 개수가 DFS의 종료조건에 걸렸을 경우에 현재 선택된 가로선을 다시 (x,y = 0), (x,y+1 = 0)으로 값들을 해제시켜주었습니다. 그래야지 다른 경우의 가로선을 탐색할 수 있기때문입니다.</li><li>이제 모든 가로선들을 놓고, 사다리를 (1~n) 인덱스부터 순차적으로 진행하면서 해당 사다리를 타고 내려가면서 최종적으로 타고 내려온 열의 값이 현재 시작한 열의 값과 같은지 다른지를 체크합니다. 예를 들면, 1번 세로선에서 시작하여 모든 사다리를 타고나서, 최종적으로 끝의 행에 도달하였을때의 y의 값이 같다면 성공적으로 사다리를 타고 내려와서 사다리를 조작한것으로 볼 수 있습니다.</li><li>사다리를 타고 내려오는 과정은 다음과 같습니다.<ol><li>현재 map의 값이 1이면 오른쪽으로 이동시킵니다.(my++)</li><li>현재 map의 값이 2이면 왼쪽으로 이동시킵니다.(my—)</li><li>가로, 세로를 모두 움직이고나서 아래로 한칸 내려와서 사다리를 이동시킵니다.(mx++)</li><li>최종적으로 my와 현재 출발하는 j값이 같지 않다면 사다리를 제대로 타고내려와서 속인게 아니므로 false를 리턴합니다.</li></ol></li></ol><ul><li>실수한점: 모든 사다리가 세로선 i선에서 i까지 도달하는것이 아니라 하나의 그 개수만 찾으면 되는 문제였습니다. 이 부분에서 조합+DFS+BFS으로 모든 경우를 고민하게 되면서 잘못된 로직을 구현하게 되면서 시간이 소요된 문제였습니다.</li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 사다리조작<span class="title">_15684</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m, h;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        h = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[h+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            x = Integer.parseInt(st.nextToken());</span><br><span class="line">            y = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="comment">// 가로선 왼쪽: 1, 오른쪽 2</span></span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            map[x][y+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 가로선을 최대3개까지만 놓을 수 있기때문에 nCi의 경우를 모두 구해준다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// i는 몇개 선택된지 여부</span></span><br><span class="line">            answer = i;</span><br><span class="line">            <span class="comment">// dfs(시작점, 선택된 갯수)</span></span><br><span class="line">            dfs(<span class="number">1</span>, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span>(isCheck) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(isCheck ? answer : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> cnt, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// i번 세로선의 결과가 i번이 나온경우 종료!</span></span><br><span class="line">        <span class="keyword">if</span>(isCheck) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt == len)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arriveAtDestination()) &#123;</span><br><span class="line">                isCheck = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 모든 경우에 대해서 가로선 경우를 모두 놓아본다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;h+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 가로선 j+1까지 확인을 하기 때문에 n까지만 진행합니다.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">0</span> &amp;&amp; map[i][j+<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 해당점을 선택하는 경우</span></span><br><span class="line">                    map[i][j] = <span class="number">1</span>;</span><br><span class="line">                    map[i][j+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    dfs(i, cnt+<span class="number">1</span>, len);</span><br><span class="line">                    <span class="comment">// 해당점을 선택하지 않는 경우</span></span><br><span class="line">                    map[i][j] = <span class="number">0</span>;</span><br><span class="line">                    map[i][j+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">arriveAtDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 세로선을 확인하면서 나간다.(열)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="comment">// 맨위에서 부터 시작하므로 x = 1, y는 해당 세로선부터 순차적으로 확인하므로 i</span></span><br><span class="line">            <span class="keyword">int</span> mx = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> my = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;h; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[mx][my] == <span class="number">1</span>)&#123;</span><br><span class="line">                    my++;        <span class="comment">//열 움직이기 오른쪽으로</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map[mx][my] == <span class="number">2</span>)&#123;</span><br><span class="line">                    my--;        <span class="comment">//열 움직이기 왼쪽으로</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//인접한 값이 존재할 수 없으므로 세로로 밑으로 내려간다.</span></span><br><span class="line">                mx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// y값이 계속해서 사다리를 타고 내려오다가 결국 자신이 출발한 지점과 같지 않게되면 i번 세로선이 i로 도착한게 된게 아니므로 종료</span></span><br><span class="line">            <span class="keyword">if</span>(my != i)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 치킨배달 15686</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210216-chicken-delivery/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210216-chicken-delivery/</id>
    <published>2021-04-21T10:26:34.000Z</published>
    <updated>2021-05-13T04:49:58.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 치킨배달 15686</a></p><h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1><p>0은 빈 칸, 1은 집, 2는 치킨집이다.</p><p>(2, 1)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |2-1| + |1-2| = 2, (5, 5)에 있는 치킨집과의 거리는 |2-5| + |1-5| = 7이다. 따라서, (2, 1)에 있는 집의 치킨 거리는 2이다.</p><p>(5, 4)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |5-1| + |4-2| = 6, (5, 5)에 있는 치킨집과의 거리는 |5-5| + |4-5| = 1이다. 따라서, (5, 4)에 있는 집의 치킨 거리는 1이다.</p><p>이 도시에 있는 치킨집은 모두 같은 프랜차이즈이다. 프렌차이즈 본사에서는 수익을 증가시키기 위해 일부 치킨집을 폐업시키려고 한다. 오랜 연구 끝에 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.</p><p>도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다. 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li><code>0은 빈칸, 1은 집, 2는 치킨집</code>을 갖는 하나의 맵이 주어진다.</li><li>간혹 이것을 <code>BFS로 생각하여 풀이를 할 수 있는 경우</code>가 있을 텐데, 문제를 자세히 읽어보면 상하좌우의 방향이 주어지긴하지만 결국 우리에겐 필요한 것은 집과 치킨과의 치킨거리를 구하는것입니다. 즉 <code>DFS 브루트포스</code> 방법을 사용할 것입니다.</li><li>집과 치킨집과의 거리의 좌표값을 기반으로 <code>|집 X - 치킨 X| + |집 Y - 치킨 Y|</code>의 값을 구하는것이라고 생각하면 됩니다.</li><li>집에서 치킨집중 <code>최대 M개</code>를 고르는 문제가 여기서 <code>핵심 포인트</code>입니다. 집하나에서 M개의 치킨집을 고를 수 있습니다. 즉, <code>브루트포스로 치킨집 M개를 선택</code>하는 <code>basement의 조건</code>을 가질 수 있습니다.</li><li>치킨집을 1개를 골랐을때의 치킨거리의 최솟값, 치킨집 2개를 골랐을때의 최솟값…M개를 골랐을때의 <code>최솟값</code>을 구하는것입니다.</li><li>치킨집은 좌표상 <code>고를 수도 있고 안고를수도 있는 브루트포스 호출조건</code>을 잘생각해야합니다. 치킨집에 <code>3개 A,B,C</code>가 있다고 가정했을때 <code>A / AB / AC / BC / ABC</code> 의 경우를 고른다고 생각을 하셔야합니다.  이때, <code>M개를 선택해야하므로 가능한 선택의 수는 AB,AC,BC</code>가 될 것입니다.</li></ul><blockquote><p>치킨 배달 순서</p></blockquote><ol><li>좌표에서 <code>집인경우</code> 집의 좌표를 담을 벡터를 선언합니다.</li><li>좌표에서 <code>치킨집인</code> 경우 치킨집의 좌표를 담을 벡터를 선언합니다.</li><li><code>DFS(0,0)</code> 을 호출합니다. 첫번째 파라미터는 <code>현재 치킨집의 순서</code>, 두번째 파라미터는 <code>현재 선택된 치킨집의 개수</code>를 뜻합니다.</li><li>치킨집은 <code>M개까지 선택</code>하였을때 <code>집과 치킨거리를 계산</code>하여 <code>최솟값</code>으로 <code>업데이트 시켜줍니다.</code> 치킨이 선택된 것을 체크해주기 위한 <code>check배열을 선언</code>해줍니다.<br>아직 M개가 선택되지 않았더라면</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">check[idx] = <span class="literal">true</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">check[idx] = <span class="literal">false</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt);</span><br></pre></td></tr></table></figure><p><code>치킨을 선택한 경우와 치킨을 선택하지 않은 경우</code>로 나누어주면서 <code>DFS를 모두 수행</code>해줍니다.<br>5. M개를 선택하였을때 모든 치킨거리값을 ans의 값과 갱신하여 최솟값을 구해줍니다.<br>주의 해야할점은 <code>치킨거리의 거리</code>와 <code>모든 집의 치킨거리</code>는 다릅니다.<br>6. 만약 <code>idx값이 치킨값보다 클경우 종료</code>시켜줍니다. 조건에 위배됩니다.</p><h1 id="javareul-hwalyonghan-munje-jaepuli"><a href="#javareul-hwalyonghan-munje-jaepuli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#java를-활용한-문제-재풀이"></a> Java를 활용한 문제 재풀이</h1><h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고-2"></a> 컴퓨팅 사고</h2><ol><li>N*N(2&lt;=N&lt;=50)의 지도가 주어집니다.</li><li>치킨거리는 집과 치킨집사이의 거리를 뜻합니다.</li><li>모든집의 치킨거리의 합은 각집당 모든치킨집사이의 거리중 가장 작은 값들의 합을 뜻합니다.</li><li>지도상에 0: 빈칸, 1:집, 2: 치킨집을 뜻합니다.<br>예를 들면, (2,1) 집 (1,2) 치킨집이 있으면 치킨 거리 = |2-1| + |1-2| = 2를 뜻하게 됩니다. 각 도시의 치킨거리는 = 하나의 집을 기준으로 나머지 치킨집의 치킨거리를 구한 값중 가장작은값의 합들을 뜻합니다. 처음에 문제를 제대로 읽지 않아서 헷갈리는 부분이었습니다.</li><li>최대 M개의 치킨집의 개수를 고를 수 있으므로 결국, 치킨배달의 문제는 N개중 M개를 선택하는 문제인 순열과 조합을 떠올릴 수 있습니다.</li><li>문제에서 뜻하는 바로는 도시의 치킨거리가 가장작은 값을 구하는것이므로 치킨집 리스트중에서 M개를 선택하였을때의 최솟값을 구해주면됩니다.</li></ol><h2 id="aidieo"><a href="#aidieo" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#아이디어"></a> 아이디어</h2><ol><li>입력 N이 주어지고 R, C의 길이를 뜻합니다. N(치킨집)개의 중에서 M개를 선택할지를 구하는 M을 입력받습니다.</li><li>입력으로 주어진 값이 ‘1’일 경우 집 -&gt; house의 리스트에 담습니다.</li><li>입력으로 주어진 값이 ‘2’일 경우 집 -&gt; chicken의 리스트에 담습니다.</li><li>DFS를 수행하여 모든 조합을 구해줍니다.<ol><li>종료조건: 종료조건은 N개의 치킨집중에서 M개를 선택한 조건이 됩니다. 즉, 선택된 개수(CNT) == 선택해야할 개수(M)이 종료조건이 됩니다. 치킨 거리는 집에서 가장 가까운거리를 구하는것이므로 처음에는 BFS를 떠올렸지만, 전혀 문제풀이와 상관이 없는 지도맵이였습니다. 도시의 치킨거리는 모든집의 치킨거리의 합을 나타내므로 종료조건에 걸렸을때 모든집의 치킨거리를 구해줍니다.</li><li>예를 들면, 각집(x,y) , 치킨집1,2,3 이 있으면 Math.min((집 X - 치킨집 X) + (집 Y - 치킨집 Y))의 최솟값을 구하여서 하나의 sum 변수에 더해나갑니다. 이렇게 모든하우스의 경우와 모든 치킨집의 경우를 모두 찾아내게 되면 하나의 조합의 경우로 만들 수 있는 모든도시의 치킨거리의 합을 하나 구하게 됩니다. 하나의 재귀 종료조건에 걸리게 되면 이떄 하나의 모든도시의 치킨거리의 합을 구하는것과 같습니다.</li><li>수행조건: 처음에는 순열로 모든값을 구해주었지만 시간초과가 나오는 불상사가 발생하였습니다. 조합을 사용하여 중복값을 제거하여 통과를 시켰습니다.</li><li>예를 들면, [1,2,3,4]라는 배열에서 1,2,3의 값을 뽑았으면 [1,2,3],[2,3,1],[3,2,1]과 같이 순열은 이전의 값들도 쳐다보는게 됩니다. 따라서 조합의 경우를 구하면 [1,2,3],[2,3,1],[3,2,1]은 다 같이 하나의 조건으로 생각하기때문에 순열에 비해 시간복잡도가 줄어들게 됩니다. 따라서 ,순열의 경우를 조합으로 변경하니 시간초과를 해결할 수 있었습니다.</li></ol></li></ol><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 순열로 돌리니까 시간초과, 조합으로 돌리니까 통과</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 치킨배달<span class="title">_15686</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; houseList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; chickenList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; selectChickenList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        houseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        chickenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        selectChickenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span> (map[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    houseList.add(<span class="keyword">new</span> Graph(i, j));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    chickenList.add(<span class="keyword">new</span> Graph(i, j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[chickenList.size()];</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">            <span class="comment">// 모든 도시의 치킨집</span></span><br><span class="line">            <span class="keyword">int</span> totalChickenPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;houseList.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = Integer.MAX_VALUE;</span><br><span class="line">                Graph houseGraph = houseList.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; selectChickenList.size(); j++) &#123;</span><br><span class="line">                    Graph chickenGraph = selectChickenList.get(j);</span><br><span class="line">                    sum = Math.min(sum,Math.abs(houseGraph.x - chickenGraph.x) + Math.abs(houseGraph.y - chickenGraph.y));</span><br><span class="line">                &#125;</span><br><span class="line">                totalChickenPrice += sum;</span><br><span class="line">            &#125;</span><br><span class="line">            answer = Math.min(answer, totalChickenPrice);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;chickenList.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isCheck[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheck[i] = <span class="keyword">true</span>;</span><br><span class="line">            selectChickenList.add(<span class="keyword">new</span> Graph(chickenList.get(i).x, chickenList.get(i).y));</span><br><span class="line">            dfs(cnt+<span class="number">1</span>,i);</span><br><span class="line">            selectChickenList.remove(selectChickenList.size()-<span class="number">1</span>);</span><br><span class="line">            isCheck[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  치킨배달15686.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/21.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; house;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; chicken;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> ans = MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 치킨 사이즈를 넘게되었을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx &gt; chicken.size())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨집 m개를 선택하였을때</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">        <span class="keyword">int</span> chicken_street = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;house.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> dist = MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;chicken.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] == <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> ax = house[i].first;</span><br><span class="line">                    <span class="keyword">int</span> ay = house[i].second;</span><br><span class="line">                    <span class="keyword">int</span> bx = chicken[j].first;</span><br><span class="line">                    <span class="keyword">int</span> by = chicken[j].second;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> distance = <span class="built_in">abs</span>(ax-bx) + <span class="built_in">abs</span>(ay-by);</span><br><span class="line">                    dist = min(dist,distance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chicken_street += dist;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, chicken_street);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨 선택</span></span><br><span class="line">    check[idx] = <span class="literal">true</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 치킨 미선택</span></span><br><span class="line">    check[idx] = <span class="literal">false</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                house.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                chicken.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
</feed>
