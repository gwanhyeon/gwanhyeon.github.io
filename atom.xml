<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Ethan Kim IT Blog</title>
  
  <subtitle>Ethan Kim IT Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2021-01-14T11:12:57.425Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>Ethan Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>릿코드 Search Insert Position</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210114-leetcode-search-insert-position/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210114-leetcode-search-insert-position/</id>
    <published>2021-01-14T10:09:42.000Z</published>
    <updated>2021-01-14T11:12:57.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-search-insert-position"><a href="#riskodeu-search-insert-position" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-search-insert-position"></a> <a href="https://leetcode.com/problems/search-insert-position/" target="_blank" rel="noopener">릿코드 search insert position</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: nums = [1,3,5,6], target = 5<br>Output: 2</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: nums = [1,3,5,6], target = 2<br>Output: 1</p><h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: nums = [1,3,5,6], target = 7<br>Output: 4</p><h3 id="example-4"><a href="#example-4" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3><p>Input: nums = [1,3,5,6], target = 0<br>Output: 0</p><h3 id="example-5"><a href="#example-5" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#example-5"></a> Example 5:</h3><p>Input: nums = [1], target = 0<br>Output: 0</p><h3 id="constraints"><a href="#constraints" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>1 &lt;= nums.length &lt;= 104<br>-104 &lt;= nums[i] &lt;= 104<br>nums contains distinct values sorted in ascending order.<br>-104 &lt;= target &lt;= 104</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>binarySearch 함수를 구현하여 해당되는 타겟값이 있으면 해당 인덱스를 반환하고 그렇지 않으면 -1을 반환합니다.</li><li>insertBinarySearch 함수를 구현하여 현재 해당되는 Target의 끝지점 인덱스를 찾아 반환합니다. end는 target값의 이전인덱스이기 때문에 end+1을 반환시켜줍니다.</li></ul><blockquote><p>시간복잡도</p></blockquote><p>이진탐색 O(logN)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_search_insert_position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(searchInsert(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = binarySearch(nums, target);</span><br><span class="line">        <span class="keyword">if</span>(answer == -<span class="number">1</span>)&#123;</span><br><span class="line">            answer = insertBinarySearch(nums,target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 해당되는 타겟값이 있으면 해당 인덱스 반환, 그렇지 않으면 -1 반환</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 타겟의 끝지점을 찾는다. End점에는 결국에는 해당되는 값의 마지막지점 인덱스가 저장되어있다.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-search-insert-position&quot;&gt;&lt;a href=&quot;#riskodeu-search-insert-position&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="binarysearch" scheme="http://gwanhyeon.github.io/tags/binarysearch/"/>
    
      <category term="이진탐색" scheme="http://gwanhyeon.github.io/tags/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Spring Lombok @Annotation(어노테이션)</title>
    <link href="http://gwanhyeon.github.io/Spring-20210114-spring-lombok-annotation/"/>
    <id>http://gwanhyeon.github.io/Spring-20210114-spring-lombok-annotation/</id>
    <published>2021-01-14T09:13:01.000Z</published>
    <updated>2021-01-14T09:15:13.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lombok-library-annotation"><a href="#lombok-library-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#lombok-library-annotation"></a> Lombok library @Annotation</h1><h2 id="lombok"><a href="#lombok" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#lombok"></a> Lombok</h2><p>Lombok(롬복)은 MIT 라이선스로 배포되는 오픈소스 라이브러리로서 annotation 주석으로 VO(Value Object), DTO(Data Transfort Object), Entity Class 등을 만들때 Getter/Setter 및 toString()을 자동화 시켜줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</span><br></pre></td></tr></table></figure><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok 공식 사이트</a></p><blockquote><p>Lombok 사용방법</p></blockquote><p>Lombok을 사용하기 위해서는 해당 라이브러리를 다운을 받아야합니다. IntellJ같은 경우는 플러그인을 설치하여 Lombok을 다운받으면 되고 Gradle or Maven Dependency를 추가해주어야합니다.<br>모든 설치가 완료되면</p><blockquote><p>IntellJ Configuration</p></blockquote><p><code>IntelliJ의 File &gt; Settings &gt; Build, Execution, Deployment &gt; Compiler &gt; Annotation Processors를 선택 한 후 &quot;Enable annotation processing&quot;을 체크</code><br>해당 설정을 해주는 이유는 Lombok을 작업중에도 동작시키기 위해서는 해당과 같은 설정을 해주셔야 Lombok이 정상적으로 동작하게 됩니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># gradle</span><br><span class="line">configurations &#123;</span><br><span class="line">    compileOnly &#123;</span><br><span class="line">      extendsFrom annotationProcessor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># maven</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">   &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="getter-setter"><a href="#getter-setter" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#getter-setter"></a> @Getter, @Setter</h2><p>Lombok에서 가장 많이 사용되는 어노테이션인 @Getter와 @Setter에 대해서 설명드리겠습니다.<br>기존에 스프링에서는 필드를 선언하면 명시적으로 선언을 매번해주어야하였지만, Lombok을 사용하면 필드를 선언하면 Getter(),Setter()  메소드를 자동으로 생성해줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> item;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lombok 사용시 필요없는 코드</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(<span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(<span class="keyword">int</span> user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필드 레벨이 아닌 클래스 레벨에 @Getter 또는 @Setter를 선언해줄 경우, 모든 필드에 접근자와 설정자가 자동으로 생성됩니다.</p><h2 id="noargsconstructor"><a href="#noargsconstructor" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#noargsconstructor"></a> NoArgsConstructor</h2><p>@NoArgsConstructor 어노테이션은 파라미터가 없는 기본 생성자를 생성해줍니다.</p><h2 id="allargsconstructor"><a href="#allargsconstructor" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#allargsconstructor"></a> @AllArgsConstructor</h2><p>@AllArgsConstructor 어노테이션은 모든 필드 값을 파라미터로 받는 생성자를 만들어줍니다.</p><h2 id="requiredargsconstructor"><a href="#requiredargsconstructor" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#requiredargsconstructor"></a> @RequiredArgsConstructor</h2><p>@RequiredArgsConstructor 어노테이션은 final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 만들어줍니다.</p><h2 id="data"><a href="#data" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#data"></a> @Data</h2><p>Class Level에서 @Data 어노테이션을 붙여주면, 모든 필드를 대상으로 접근자와 설정자가 자동으로 생성됩니다. 그리고, final 또는 @NonNull 필드 값을 파라미터로 받는 생성자가 만들어지며, toStirng, equals, hashCode 메소드가 자동으로 생성되게 됩니다. 개인적으로는 @Data를 무분별하게 사용하면 나중에 유지보수측면에서 시간이 많이 소요되고 불필요한 소스양이 늘어날 것으로 생각하며 결론적으로 @Data는 지양하고 무분별한 Setter 남용을 하지 않도록 해야할 것입니다.</p><h2 id="builder"><a href="#builder" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#builder"></a> @Builder</h2><p>@Builder Annotation은 모델 객체를 생성할 때 Builder를 자동으로 추가해 주는 Annotation입니다. 해당 Annotation을 사용하면 Builder Pattern을 적용할 수 있습니다.</p><blockquote><p>Builder Annotation 미적용</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="keyword">this</span>.name);</span><br><span class="line">    user.setAge(<span class="keyword">this</span>.age);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Builder Annotation 적용</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Builder pattern 사용</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = User.builder()</span><br><span class="line">                  .name(<span class="string">"KGH"</span>)</span><br><span class="line">                  .age(<span class="number">100</span>)</span><br><span class="line">                  .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>References</p></blockquote><p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lombok-library-annotation&quot;&gt;&lt;a href=&quot;#lombok-library-annotation&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lom
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="Annotation" scheme="http://gwanhyeon.github.io/tags/annotation/"/>
    
      <category term="Lombok" scheme="http://gwanhyeon.github.io/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Spring @Annotation(어노테이션)</title>
    <link href="http://gwanhyeon.github.io/Spring-20210114-spring-annotation/"/>
    <id>http://gwanhyeon.github.io/Spring-20210114-spring-annotation/</id>
    <published>2021-01-14T07:22:00.000Z</published>
    <updated>2021-01-14T09:23:00.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-annotation"><a href="#spring-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#spring-annotation"></a> Spring @Annotation</h1><h2 id="restcontroller"><a href="#restcontroller" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#restcontroller"></a> @RestController</h2><p>@RestController 동작에 앞서, 먼저 알아보아야할것이 @Controller와의 차이점입니다.</p><blockquote><p>@Controller 내부</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Controller Annotation의 내부를 살펴보면 다음과 같은 구조를 볼 수 있습니다. 자세히 살펴보시면 <code>@Component</code> 어노테이션을 살펴보실 수 있습니다. 과연 이것의 어노테이션의 역할은 무엇일까요?<br>즉, 기존의 Spring에서는 <code>@Bean</code>을 붙여 빈을 등록하던 것처럼 빈 클래스에 <code>@Component</code> 애노테이션을 붙여 빈을 등록할 수 있습니다. 따라서 <code>@Controller</code> 어노테이션 내부에는 해당 컨트롤러를 <code>@Bean</code> 으로 등록하는 역할도 하고 있다는 뜻입니다.<br>@Component를 붙여 빈을 등록하면 클래스 이름의 첫 문자를 소문자로 바꾼 것이 빈의 이름(id)이 됩니다. 그리고 빈 객체가 생성되는 시점은 ApplicationContext 객체가 생성되는 시점이며 기본적으로 singleton scope 입니다.</p><p>해당 경로로 요청을 진행한다고 할때  <code>localhost:8080/mvc</code>의 요청경로에 맞는 컨트롤러를 @Bean 컴포넌트 스캔을 통하여 해당 경로를 가지고 있는 컨트롤러를 찾아주게 됩니다.  만약 <code>@ResponseBody</code> 가 붙여져 있지 않다면 해당 모델에 값을 넘겨줄 수도 있고, String을 반환하게 되면 데이터를 넘겨주는것이 아니라 해당 View의 Path값에 맞게  모델값과 함께 반환시켜주게 됩니다. 요약하면 API와 view를 동시에 사용하는 경우에 사용한다고 생각하시면 됩니다.</p><p>이제 @Controller 다음으로 @RestController 의미에 대해 알아보겠습니다. 간단히 <code>@RestController는 @Controller가 포함되어있고 @ReponseBody형식을 함께 사용할때 사용합니다.</code></p><blockquote><p>@RestController 내부</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A convenience annotation that is itself annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125; and &#123;<span class="doctag">@link</span> ResponseBody <span class="doctag">@ResponseBody</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Types that carry this annotation are treated as controllers where</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> RequestMapping <span class="doctag">@RequestMapping</span>&#125; methods assume</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ResponseBody <span class="doctag">@ResponseBody</span>&#125; semantics by default.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; &#123;<span class="doctag">@code</span> <span class="doctag">@RestController</span>&#125; is processed if an appropriate</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> HandlerMapping&#125;-&#123;<span class="doctag">@code</span> HandlerAdapter&#125; pair is configured such as the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125;-&#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * pair which are the default in the MVC Java config and the MVC namespace.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Controller<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내부 스펙을 확인해보면 @ResponseBody Annotation, @Controller Annotation이 함께 선언되어 있습니다.</p><blockquote><p>@ResponseBody를 붙여주면 무슨일이 발생할까요?</p></blockquote><p><code>@ResponseBody</code>의 역할은 <code>HTTP BODY</code>문자내용을 반환하는 <code>api</code>라고 할 수 있습니다. 즉, 기존에 <code>@ResponseBody</code>가 없는 경우에 <code>viewResolver</code> 대신에 <code>httpMessageConverter</code>가 동작하여 문자일 경우에는 <code>StringHttpMessageConverter</code> 객체일 경우에는 <code>MappingJackson2HttpMessageConverter</code>로 이루어져있습니다. 클라이언트의 HTTP Accept헤더와 서버 컨트롤러의 반환 타입 정보 둘을 조합해서 HttpMessageConverter가 동작되게 됩니다. 기본으로 동작되는 데이터반환형식은 Default JSON형식으로 동작되게 됩니다.</p><h2 id="requestmapping"><a href="#requestmapping" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#requestmapping"></a> @RequestMapping</h2><p>@RequestMapping Annotation은 Spring에서 제공하는 HandlerMapping Class가 가지고 있습니다.<br>두 가지의 경우로 나눌 수 있는데, 이것은 스프링 HTTP 내부 Note:를 참고하면 아래와 같은 사항을 확인할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation for mapping web requests onto methods in request-handling classes</span></span><br><span class="line"><span class="comment"> * with flexible method signatures.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Both Spring MVC and Spring WebFlux support this annotation through a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125; and &#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * in their respective modules and package structure. For the exact list of</span></span><br><span class="line"><span class="comment"> * supported handler method arguments and return types in each, please use the</span></span><br><span class="line"><span class="comment"> * reference documentation links below:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring MVC</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring WebFlux</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This annotation can be used both at the class and</span></span><br><span class="line"><span class="comment"> * at the method level. In most cases, at the method level applications will</span></span><br><span class="line"><span class="comment"> * prefer to use one of the HTTP method specific variants</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> GetMapping <span class="doctag">@GetMapping</span>&#125;, &#123;<span class="doctag">@link</span> PostMapping <span class="doctag">@PostMapping</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PutMapping <span class="doctag">@PutMapping</span>&#125;, &#123;<span class="doctag">@link</span> DeleteMapping <span class="doctag">@DeleteMapping</span>&#125;, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PatchMapping <span class="doctag">@PatchMapping</span>&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; When using controller interfaces (e.g. for AOP proxying),</span></span><br><span class="line"><span class="comment"> * make sure to consistently put &lt;i&gt;all&lt;/i&gt; your mapping annotations - such as</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125; - on</span></span><br><span class="line"><span class="comment"> * the controller &lt;i&gt;interface&lt;/i&gt; rather than on the implementation class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> GetMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PostMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PutMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DeleteMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PatchMapping</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 내용을 요약 하면</p><p><strong>@RequestMapping Annotation은 클래스 및 메서드 수준에서 모두 사용할 수 있습니다. 대부분의 경우 방법 수준에서 응용 프로그램은 HTTP 메서드별 변형된 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 또는 @PatchMapping 중 하나를 사용하는 것을 권장합니다.<br>참고: 컨트롤러 인터페이스(예: AOP 프록시)를 사용할 때 구현 클래스가 아닌 컨트롤러 인터페이스에 @RequestMapping 및 @SessionAttributes와 같은 모든 매핑 주석을 일관되게 배치해야 합니다.</strong></p><p>즉, 클래스 및 메서드 수준을 모두 사용할 수 있으며, 최근에는 HTTP 메서드별 변형된 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 또는 @PatchMapping 중 하나를 사용하는 것을 권장한다고 합니다.</p><ol><li>Class Level Mapping<br>Class Level Mapping은 모든 메서드에 적용하는 경우 사용합니다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP Request 요청경로가 “/” 일 경우 해당 클래스에서 처리를 진행합니다.</p><ol start="2"><li>Handler Level Mapping</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemB</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemC</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.PATCH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemD</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemE</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요청 URL에 대하여 해당 메서드를 처리해야하는 경우 사용합니다. 특정 메서드에서 HTTP요청을 처리한다고 생각하면 됩니다.</p><blockquote><p>RequestMapping 옵션</p></blockquote><ul><li>value는 해당 URL 경로를 지정합니다.</li><li>HTTP Request Method를 지정하여 HTTP 형식에 맞추어 수행됩니다.</li></ul><h2 id="getmapping-postmapping-putmapping-deletemapping-patchmapping"><a href="#getmapping-postmapping-putmapping-deletemapping-patchmapping" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#getmapping-postmapping-putmapping-deletemapping-patchmapping"></a> @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping</h2><p>@RequestMapping에서 조금더 세분화된 Method path를 지정하여 명시적이고 효율적인 사용을 위하여 Annotation이 Spring 4.3.xx 버전 이후로 추가되었습니다.<br>현재 @RequestMapping보다는 4.3버전이후로 나온 Annotation을 권장하고 있습니다.</p><blockquote><p>종류<br><code>@GetMapping, @PostMapping, DeleteMapping, @PutMapping, @PatchMapping</code></p></blockquote><blockquote><p>Annotation 사용법</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PatchMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.PATCH)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존에 RequestMapping을 통하여 가독성이 떨어지는 코드를 작성하였는데 스프링4.3버전이후로 부터 세부적인 HTTP Method를 지정할 수 있게 되어 명시적이고 효율성이 올라갔다고 생각합니다.</p><h2 id="compoment"><a href="#compoment" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#compoment"></a> @Compoment</h2><p>스프링빈을 등록하는 방법은 2가지가 존재합니다.</p><ul><li>컴포넌트 스캔과 자동의존관계 설정</li><li>코드로 직접 스프링빈을 등록하는 방식</li></ul><p>따라서, 컴포넌트스캔원리를 이용 할때 @Component Annotation을 사용하게 됩니다. @Component의 의미는 해당 Annotation이 있으면 Spring bean으로 자동으로 등록이 됩니다.<br>즉, component-scan을 통하여 특정 패키지 안의 클래스들을 스캔하고 @Component Annotation이 있는 클래스에 대하여 bean인스턴스를 생성시킵니다. bean인스턴스로 생성되면 스프링 컨테이너에서 관리를 진행하게 되고 DI를 주입받을 수 있습니다.</p><p><code>DI주입은 필드주입, setter주입, 생성자 주입 총 3가지 방법</code>이 있습니다. 의존관계가 실행중 동적으로 변하는 경우는 거의 없기때문에 생성자 주입을 통한 DI주입을 권장합니다.</p><p><code>DI주입시 주의사항은</code> @Autowired를 통한 DI는 Controller, Service등과 같이 스프링이 관리하는 객체에서만 동작하게 됩니다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작되지 않습니다. 생성자에 @Autowired를 사용하면 객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입해줍니다. 생성자가 1개만 있으면 @Autowired는 생략이 가능합니다.</p><h2 id="controller-service-repository"><a href="#controller-service-repository" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#controller-service-repository"></a> @Controller, @Service, @Repository</h2><h3 id="controller"><a href="#controller" class="header-anchor">1.5.1. </a><a class="markdownIt-Anchor" href="#controller"></a> @Controller</h3><p>@Controller가 스프링빈으로 자동등록되는 이유는 @Controller내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 때문입니다.</p><blockquote><p>@Controller 내부</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="header-anchor">1.5.2. </a><a class="markdownIt-Anchor" href="#service"></a> @Service</h3><p>@Service Annotation또한 스프링빈으로 자동등록되는 이유는 @Service내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 떄문입니다.<br>요약하면 @Component 어노테이션에 의해서 @Controller, @Service, @Repository와 같은 어노테이션을 구체화하여 스프링 컨테이너에 @Service bean으로 등록을 하게 됩니다.</p><blockquote><p>@Service 내부</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Service", originally defined by Domain-Driven</span></span><br><span class="line"><span class="comment"> * Design (Evans, 2003) as "an operation offered as an interface that stands alone in the</span></span><br><span class="line"><span class="comment"> * model, with no encapsulated state."</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;May also indicate that a class is a "Business Service Facade" (in the Core J2EE</span></span><br><span class="line"><span class="comment"> * patterns sense), or something similar. This annotation is a general-purpose stereotype</span></span><br><span class="line"><span class="comment"> * and individual teams may narrow their semantics and use as appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Repository</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="repository"><a href="#repository" class="header-anchor">1.5.3. </a><a class="markdownIt-Anchor" href="#repository"></a> @Repository</h3><p>@Repository Annotation또한 스프링빈으로 자동등록되는 이유는 @Repository내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 떄문입니다. 즉, @Component 어노테이션에 의해서 @Controller, @Service, @Repository와 같은 어노테이션을 구체화하여 스프링 컨테이너에 @Service bean으로 등록을 하게 됩니다.</p><blockquote><p>@Repository 내부</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Repository", originally defined by</span></span><br><span class="line"><span class="comment"> * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,</span></span><br><span class="line"><span class="comment"> * retrieval, and search behavior which emulates a collection of objects".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Teams implementing traditional Java EE patterns such as "Data Access Object"</span></span><br><span class="line"><span class="comment"> * may also apply this stereotype to DAO classes, though care should be taken to</span></span><br><span class="line"><span class="comment"> * understand the distinction between Data Access Object and DDD-style repositories</span></span><br><span class="line"><span class="comment"> * before doing so. This annotation is a general-purpose stereotype and individual teams</span></span><br><span class="line"><span class="comment"> * may narrow their semantics and use as appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A class thus annotated is eligible for Spring</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.dao.DataAccessException DataAccessException&#125; translation</span></span><br><span class="line"><span class="comment"> * when used in conjunction with a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span></span><br><span class="line"><span class="comment"> * PersistenceExceptionTranslationPostProcessor&#125;. The annotated class is also clarified as</span></span><br><span class="line"><span class="comment"> * to its role in the overall application architecture for the purpose of tooling,</span></span><br><span class="line"><span class="comment"> * aspects, etc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 2.5, this annotation also serves as a specialization of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, allowing for implementation classes to be autodetected</span></span><br><span class="line"><span class="comment"> * through classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.dao.DataAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="componentscan"><a href="#componentscan" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#componentscan"></a> @ComponentScan</h2><p>@ComponentScan이란 컴포넌트 검색기능을 가진 어노테이션입니다.<br>스프링은 기본적으로 객체를 자동으로 생성하여 관리하기 때문에 @Component 어노테이션이 있는 클래스들을 스프링 컨테이너가 생성해줍니다.<br>따라서, @ComponentScan는 특별히 basePackage를 지정하지 않아도 main class가 위치한 패키지를 Root package로 하여 그 이하의 모든 컴포넌트 클래스들을 검색하여 빈으로 등록할 수 있습니다.</p><h2 id="configuration"><a href="#configuration" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#configuration"></a> @Configuration</h2><ul><li>클래스에 이 어노테이션이 붙어 있으면 스프링은 해당 클래스를 Java config로 간주합니다.</li><li>1개 이상의 @Bean을 제공하는 클래스의 경우 반드시 @Configuration을 명시해 주어야 합니다.</li></ul><h2 id="bean"><a href="#bean" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#bean"></a> @Bean</h2><ul><li>개발자가 직접 제어가 불가능한 외부 라이브러리 또는 설정을 위한 클래스를 Bean으로 등록할 때 @Bean 어노테이션을 활용합니다.</li></ul><h2 id="springbootapplication"><a href="#springbootapplication" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#springbootapplication"></a> @SpringBootApplication</h2><p>@SpringBootApplication 어노테이션은 스프링 부트의 가장 기본적인 설정을 선언이 되어있습니다. 내부로직을 살펴보도록 하겠습니다.</p><blockquote><p>@SpringBootApplication</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates a &#123;<span class="doctag">@link</span> Configuration configuration&#125; class that declares one or more</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Bean <span class="doctag">@Bean</span>&#125; methods and also triggers &#123;<span class="doctag">@link</span> EnableAutoConfiguration</span></span><br><span class="line"><span class="comment"> * auto-configuration&#125; and &#123;<span class="doctag">@link</span> ComponentScan component scanning&#125;. This is a convenience</span></span><br><span class="line"><span class="comment"> * annotation that is equivalent to declaring &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    public Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    public String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span>)</span><br><span class="line">    <span class="keyword">public</span> String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span>)</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"nameGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Configuration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">boolean</span> <span class="title">proxyBeanMethods</span>() <span class="title">default</span> <span class="title">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기 스펙부분을 자세히보시면 중요하게 생각해야할 부분이 두가지 있습니다.</p><ul><li>@ComponentScan</li><li>@EnableAutoConfiguration</li></ul><p>이 두가지가 왜 중요할까요?</p><blockquote><p>@ComponentScan</p></blockquote><p><code>@ComponentScan은</code> @component 어노테이션 및 @Service, @Repository, @Controller 등의 어노테이션을 스캔하여 Bean으로 등록해주는 어노테이션입니다.<br><code>즉, 어플리케이션 실행시에 @Service, @Repository, @Repositroy, @Controller에 컴포넌트스캔을 통하여 스프링 컨테이너에 Bean으로 등록합니다.</code></p><blockquote><p>@EnableAutoConfiguration</p></blockquote><p><code>@EnableAutoConfiguration은</code> 사전에 정의한 라이브러리들을  Bean으로 등록해 주는 어노테이션입니다. 사전에 정의한 라이브러리들 모두가 등록되는 것은 아니고 특정조건이 만족될 경우에 Bean으로 등록됩니다.</p><blockquote><p>저장위치</p></blockquote><p>사전 정의 파일 위치: <code>Dependencies &gt; spring-boot-autoconfigure &gt; META-INF &gt; spring.factories</code></p><blockquote><p>References</p></blockquote><p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a><br><a href="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s11.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s11.html</a><br><a href="https://velog.io/@gillog/Spring-Annotation-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener">https://velog.io/@gillog/Spring-Annotation-정리</a><br><a href="https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html" target="_blank" rel="noopener">https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html</a><br><a href="https://bamdule.tistory.com/31" target="_blank" rel="noopener">https://bamdule.tistory.com/31</a><br><a href="https://imucoding.tistory.com/217" target="_blank" rel="noopener">https://imucoding.tistory.com/217</a><br><a href="https://toma0912.tistory.com/86" target="_blank" rel="noopener">https://toma0912.tistory.com/86</a><br><a href="https://tomining.tistory.com/180" target="_blank" rel="noopener">https://tomining.tistory.com/180</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-annotation&quot;&gt;&lt;a href=&quot;#spring-annotation&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-annotation&quot;&gt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="Annotation" scheme="http://gwanhyeon.github.io/tags/annotation/"/>
    
      <category term="Bean" scheme="http://gwanhyeon.github.io/tags/bean/"/>
    
      <category term="DI" scheme="http://gwanhyeon.github.io/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>Network URI(Uniform Resource Identifier) 정의 및 하위요소의 특징</title>
    <link href="http://gwanhyeon.github.io/Network-20210114-network-04-uri-web-browser-request-flow/"/>
    <id>http://gwanhyeon.github.io/Network-20210114-network-04-uri-web-browser-request-flow/</id>
    <published>2021-01-14T04:50:00.000Z</published>
    <updated>2021-01-14T09:10:00.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uri-uniform-resource-identifier"><a href="#uri-uniform-resource-identifier" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier"></a> URI(Uniform Resource Identifier)</h1><p>URI에 대한 개념을 살펴보기에 앞서서 국제 인터넷 표준화 기구(IETF)에 표준스펙으로 기재되어있는 URI,URL,URN의 개념에 대해서 알아보겠습니다.</p><p><a href="https://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="noopener">국제 인터넷 표준화 기구 IETF 1.1.3 URI 표준 스펙</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.1.3.  URI, URL, and URN</span><br><span class="line"></span><br><span class="line">`A URI can be further classified as a locator, a name, or both.`  The</span><br><span class="line">`term "Uniform Resource Locator" (URL) refers to the subset of URIs</span><br><span class="line">that, in addition to identifying a resource, provide a means of</span><br><span class="line">locating the resource by describing its primary access mechanism</span><br><span class="line">(e.g., its network "location").`  The term "Uniform Resource Name"</span><br><span class="line">(URN) has been used historically to refer to both URIs under the</span><br><span class="line">"urn" scheme [RFC2141], which are required to remain globally unique</span><br><span class="line">and persistent even when the resource ceases to exist or becomes</span><br><span class="line">unavailable, and to any other URI with the properties of a name.</span><br><span class="line"></span><br><span class="line">An individual scheme does not have to be classified as being just one</span><br><span class="line">of "name" or "locator".  Instances of URIs from any given scheme may</span><br><span class="line">have the characteristics of names or locators or both, often</span><br><span class="line">depending on the persistence and care in the assignment of</span><br><span class="line">identifiers by the naming authority, rather than on any quality of</span><br><span class="line">the scheme.  Future specifications and related documentation should</span><br><span class="line">use the general term "URI" rather than the more restrictive terms</span><br><span class="line">"URL" and "URN" [RFC3305].</span><br></pre></td></tr></table></figure><blockquote><p>국제 인터넷 표준화 기구 IETF 1.1.3 URI 표준 스펙 요약</p></blockquote><ol><li><p>국제 인터넷 표준화 기구(IETF)에 표준스펙으로 기재된 내용을 간략히 살펴보면 uri는 로케이터(locator), 이름(name)또는 둘다 추가로 분류 될 수 있습니다.</p></li><li><p>URL 이라는 용어는 리소스를 식별하는 것 이외에도 기본 Access 매커니즘을 설명하여 리소스를 찾는 수단을 제공하는 URI의 하위집합을 나타낸다고 표기되어있습니다.</p></li></ol><h1 id="uri-uniform-resource-identifier-yi-guseong"><a href="#uri-uniform-resource-identifier-yi-guseong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier의-구성"></a> URI(Uniform Resource Identifier)의 구성</h1><p>URI는 큰 상위 집합으로 내부에 URL(Resource Locator)와 URN(Resource Name)을 포함하고 있습니다.</p><blockquote><p>URL(Resource Locator)</p></blockquote><p><code>kgh://google.com:8080/member?userName=kgh#hello</code> 라는 URL이 있다고 가정하겠습니다.</p><table><thead><tr><th>URL 하위요소</th><th>의미</th></tr></thead><tbody><tr><td>kgh</td><td>scheme</td></tr><tr><td><a href="http://google.com:8080" target="_blank" rel="noopener">google.com:8080</a></td><td>authority</td></tr><tr><td>member</td><td>path</td></tr><tr><td>userName=kgh</td><td>query</td></tr><tr><td>hello</td><td>fragment</td></tr></tbody></table><blockquote><p>URN(Unifrom Resource Name)</p></blockquote><table><thead><tr><th>URN 하위요소</th><th>의미</th></tr></thead><tbody><tr><td>urn:google.com:user:kgh:hello</td><td>scheme</td></tr></tbody></table><h1 id="uri-uniform-resource-identifier-yimi"><a href="#uri-uniform-resource-identifier-yimi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier-의미"></a> URI(Uniform Resource Identifier) 의미</h1><blockquote><ol><li>Uniform</li></ol></blockquote><p>리소스를 식별하는 통일된 방식</p><blockquote><ol start="2"><li>Resource</li></ol></blockquote><p>자원, URI로 식별할 수 있는 모든것</p><blockquote><ol start="3"><li>Identifier</li></ol></blockquote><p>다른 항목과 구분하는데 필요한 정보</p><h1 id="url-uniform-resource-locator-gwa-urn-uniform-resource-name-yimi"><a href="#url-uniform-resource-locator-gwa-urn-uniform-resource-name-yimi" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#urluniform-resource-locator과-urnuniform-resource-name-의미"></a> URL(Uniform Resource Locator)과 URN(Uniform Resource Name) 의미</h1><p>URL은 Locator를 뜻하며 리소스가 있는 위치를 지정하고 URN은 Name을 뜻하여 리소스에 이름을 부여합니다.<br>즉, 위치는 변할 수 있지만, 이름은 변할 수 없습니다. 마치 우리가 도서관에서 하나의 책을 찾기 위해 isbn URN을 부여 받아 실제 리소스를 찾는다고 가정하면 urn:isbn:URN의 형식으로 나타낼 수 있습니다. 이때는 URN이름만으로는 실제 리소스를 찾는방법이 보편화 된것이 아닙니다.</p><h1 id="url-bunseog"><a href="#url-bunseog" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#url-분석"></a> URL 분석</h1><blockquote><p>Request URL:</p></blockquote><p><strong><a href="https://www.google.com/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5" target="_blank" rel="noopener">https://www.google.com/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5</a></strong></p><p>다음과 같은 구글에서 hello라고 친 결과에 따른 검색 URL이 있다고 가정하고 설명을 진행하겠습니다.</p><h3 id="url-munbeob"><a href="#url-munbeob" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#url-문법"></a> URL 문법</h3><p><strong>scheme://[userinfo@]host[:port][/path][?query][#fragment]</strong><br><a href="https://www.google.com:443/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5" target="_blank" rel="noopener">https://www.google.com:443/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5</a></p><p>URL의 기본형식은 위와 같이 구성되어있고, 이것을 URL을 표현하면 다음과 같습니다.</p><ul><li>프로토콜(https)</li><li>호스트명(<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>)</li><li>포트 번호(443) -  https는 443포트를 갖습니다.</li><li>패스(/search)</li><li>쿼리 파라미터(newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5)</li></ul><h3 id="url-scheme"><a href="#url-scheme" class="header-anchor">5.2. </a><a class="markdownIt-Anchor" href="#url-scheme"></a> URL Scheme</h3><p><code>scheme:</code>//[userinfo@]host[:port][/path][?query][#fragment]</p><blockquote><p>URL scheme</p></blockquote><ul><li>주로 프로토콜로 사용되며 프로토콜은 어떤 방식으로 자원에 접근할 것인가를 약속하는 규칙입니다. 예를 들면 80: http 포트, 443:https,  20,21: ftp포트를 사용합니다.</li><li>포트같은 경우는 주로 생략이 가능하며 google URL을 자세히 보시면 실제적으로는 포트 보이지 않는것을 확인 할 수 있습니다.</li><li>https같은 경우는 http에 보안이 추가된 프로토콜을 의미합니다.</li><li>https의 정의는 HTTPS(HyperText Transfer Protocol over Secure Socket Layer, HTTP over TLS, HTTP over SSL, HTTP Secure)는 월드 와이드 웹 통신 프로토콜인 HTTP의 보안이 강화된 버전으로 규정되어있습니다.</li></ul><h3 id="url-userinfo"><a href="#url-userinfo" class="header-anchor">5.3. </a><a class="markdownIt-Anchor" href="#url-userinfo"></a> URL userinfo</h3><p>scheme://<code>[userinfo@]</code>host[:port][/path][?query][#fragment]</p><ul><li>URL에 보통 사용자 정보를 포함해서 인증을 진행합니다. 하지만, 거의 잘 사용하지 않는것으로 알려져있습니다.</li></ul><h3 id="url-host"><a href="#url-host" class="header-anchor">5.4. </a><a class="markdownIt-Anchor" href="#url-host"></a> URL host</h3><p>scheme://[userinfo@]<code>host</code>[:port][/path][?query][#fragment]</p><ul><li>URL호스트는 호스트명을 의미하며 도메인명이나 IP주소를 직접 핸들링을 할 수 있습니다.</li></ul><h3 id="url-port"><a href="#url-port" class="header-anchor">5.5. </a><a class="markdownIt-Anchor" href="#url-port"></a> URL port</h3><p>scheme://[userinfo@]host<code>[:port]</code>[/path][?query][#fragment]</p><ul><li>포트번호를 담고있으며 특히 웹브라우저 상에서 접속시 포트정보를 담고있습니다. 일반적으로 URL에는 생략이 되어있으므로 대표적인 포트로는 http:80, https는 443포트를 가지고 있습니다.</li></ul><h3 id="url-path"><a href="#url-path" class="header-anchor">5.6. </a><a class="markdownIt-Anchor" href="#url-path"></a> URL path</h3><p>scheme://[userinfo@]host[:port]<code>[/path]</code>[?query][#fragment]</p><ul><li>리소스 경로(path)와 계층적인 구조를 가지고 있습니다.<br>하나의 예를 들어보면 <code>/user/image.jpg, /users, /user/1, user/item/12</code> 와 같은 경로를 가지는것을 확인할 수 있습니다.</li></ul><h3 id="url-query"><a href="#url-query" class="header-anchor">5.7. </a><a class="markdownIt-Anchor" href="#url-query"></a> URL query</h3><p>scheme://[userinfo@]host[:port][/path]<code>[?query]</code>[#fragment]</p><ul><li><p>URL query의 구조는 Map형식의 &lt;Key, Value&gt;로 구성되어있으며 ?로 시작되고 &amp;로 추가가 가능합니다.<br>예시: <code>www.127.0.0.1:8080/path/name=kgh&amp;id=1</code><br>name과 id는 Key가 되고 나머지 kgh와 1은 Value로 나타낼 수 있습니다.</p></li><li><p>보통 query parameter, query string으로 지칭하고 웹서버에 제공하는 파라미터나 문자형태로 제공됩니다.</p></li></ul><h3 id="url-fragment"><a href="#url-fragment" class="header-anchor">5.8. </a><a class="markdownIt-Anchor" href="#url-fragment"></a> URL fragment</h3><p>scheme://[userinfo@]host[:port][/path][?query]<code>[#fragment]</code></p><ul><li>fragment라고 불리어 오는 URL의 하위요소이며 html 내부 북마크 등에 사용됩니다. 하지만 이정보들은 서버에 전송되지는 않습니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;uri-uniform-resource-identifier&quot;&gt;&lt;a href=&quot;#uri-uniform-resource-identifier&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="uri" scheme="http://gwanhyeon.github.io/tags/uri/"/>
    
      <category term="url" scheme="http://gwanhyeon.github.io/tags/url/"/>
    
      <category term="urn" scheme="http://gwanhyeon.github.io/tags/urn/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 maximal square</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210112-leetcode-maximal-square/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210112-leetcode-maximal-square/</id>
    <published>2021-01-12T06:39:19.000Z</published>
    <updated>2021-01-12T06:47:28.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-maximal-square"><a href="#leetcode-maximal-square" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#leetcode-maximal-square"></a> <a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener">leetcode maximal square</a></h1><h2 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2><p>Given an m x n binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg" alt="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg"></p><h3 id="example-1"><a href="#example-1" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: matrix = [[“1”,“0”,“1”,“0”,“0”],[“1”,“0”,“1”,“1”,“1”],[“1”,“1”,“1”,“1”,“1”],[“1”,“0”,“0”,“1”,“0”]]<br>Output: 4</p><h3 id="example-2"><a href="#example-2" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: matrix = [[“0”,“1”],[“1”,“0”]]<br>Output: 1</p><h3 id="example-3"><a href="#example-3" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: matrix = [[“0”]]<br>Output: 0</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>m == matrix.length<br>n == matrix[i].length<br>1 &lt;= m, n &lt;= 300<br>matrix[i][j] is ‘0’ or ‘1’.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1) dynamic programming : bottom up 방식으로 왼쪽 상단 모서리 값을 기준으로 정사각형을 만들수있는 값을 체크해나가는 규칙을 찾아내면서 최대 사각형의 넓이를 구할 수 있습니다.</li><li>(2) 왼쪽 상단 모서리의 값이 ‘1’ 즉, 포함가능한 값일 경우에 값을 캐시하여 구해줍니다.</li><li>가장 먼저 Math.min()함수를 이용하여 왼쪽하단, 우측상단의 대각선을 비교하고 왼쪽 상단의 모서리의 값중 최솟값구해줍니다.</li><li>그리고 최솟값+1을 해주는 이유는 최대 정사각형의 길이를 구해주기 위해서 입니다. 그리고 현재 값과 비교하여 길이의 최댓값을 갱신시켜줍니다.</li></ul><h3 id="dp-yesi"><a href="#dp-yesi" class="header-anchor">1.2.1. </a><a class="markdownIt-Anchor" href="#dp-예시"></a> DP 예시</h3><blockquote><p>Input value for matrix:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>다음과 같은 입력값이 들어왔을때, 어디서부터 기준을 잡고 들어가야할지를 고민해야합니다.<br>정사각형이라는 조건을 만족하기위해서는 <code>1 x 1, 2 x 2, 3 x 3 .... n x n의 범위</code>의 만족해야합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>(<span class="number">1</span>), <span class="number">0</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">2</span>), <span class="number">0</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>(<span class="number">1</span>), <span class="number">1</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>(<span class="number">2</span>), <span class="number">0</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><p>다음과 같이 전체의 경우중에 예시로 두가지 경우를 생각해보면 왼쪽상단의 모서리값을 기준으로 정사각형이 형성되는 규칙을 발견하실 수 있습니다. <code>하지만, 0이 하나라도 포함되어있으면 정사각형을 형성할 수 없습니다.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">1</span> <span class="number">1</span> ]</span><br><span class="line">[ <span class="number">1</span> <span class="number">1</span> ]</span><br></pre></td></tr></table></figure><p>의 경우를 살펴보면 해당 경우는 <code>최대 길이 2까지의 정사각형의 넓이 2*2</code>를 구할 수 있게됩니다. 이것의 규칙을 살펴보면 값의 최솟값 + 1의 값이 해당 정사각형의 길이를 나타내는 것을 알 수 있습니다.<br><code>즉,왼쪽하단의 값, 우측상단의값의 최솟값을 구하여 왼쪽 상단모서리의 값중에서 가장 최소인값의 + 1을 해주게 되면 오른쪽상단 모서리에 해당 범위에서 구할 수 있는 정사각형의 길이를 저장해나가면 계속해서 왼쪽상단의 모서리를 기준으로 비교하는 규칙을 발견</code>할 수 있습니다.</p><blockquote><p>answer :</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>시간복잡도</li></ol></blockquote><p>O(N*M)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_maximal_square_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        maximalSquare(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        maximalSquare(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="comment">//왼쪽 상단 모서리값을 기준으로 '1'을 포함하고 있을 경우</span></span><br><span class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 왼쪽하단, 우측상단의 대각선을 비교하고 왼쪽 상단의 모서리의 값중 최솟값구해줍니다. +1을 해주는 이유는 최대 정사각형의 길이를 구해주기 위해서 입니다.</span></span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i][j-<span class="number">1</span>] , dp[i-<span class="number">1</span>][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">                    answer = Math.max(dp[i][j], answer); <span class="comment">// update result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer*answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;leetcode-maximal-square&quot;&gt;&lt;a href=&quot;#leetcode-maximal-square&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcod
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="DP" scheme="http://gwanhyeon.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Single Number</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210112-leetcode-single-number/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210112-leetcode-single-number/</id>
    <published>2021-01-12T01:35:16.000Z</published>
    <updated>2021-01-12T01:46:25.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-leetcode-single-number"><a href="#riskodeu-leetcode-single-number" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-single-number"></a> <a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">릿코드 leetcode  Single Number</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.</p><p>Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: nums = [2,2,1]<br>Output: 1</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: nums = [4,1,2,1,2]<br>Output: 4</p><h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: nums = [1]<br>Output: 1</p><h3 id="constraints"><a href="#constraints" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>1 &lt;= nums.length &lt;= 3 * 104<br>-3 * 104 &lt;= nums[i] &lt;= 3 * 104<br>Each element in the array appears twice except for one element which appears only once.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li>Map을 사용하여 개수를 체크한 후 value값이 1인 경우 return 결과값을 도출하면 되는 간단한 문제였습니다.</li></ul><h1 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_single_number</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        singleNumber(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        singleNumber(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            m.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Integer key : m.keySet())&#123;</span><br><span class="line">            Integer value = m.get(key);</span><br><span class="line">            <span class="keyword">if</span>(value == <span class="number">1</span>)&#123;</span><br><span class="line">                answer = key;</span><br><span class="line">                System.out.println(key);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-leetcode-single-number&quot;&gt;&lt;a href=&quot;#riskodeu-leetcode-single-number&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Decode String</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210111-leetcode-decode-string/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210111-leetcode-decode-string/</id>
    <published>2021-01-11T12:36:09.000Z</published>
    <updated>2021-01-11T12:39:53.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-decode-string"><a href="#riskodeu-decode-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-decode-string"></a> <a href="https://leetcode.com/problems/decode-string/" target="_blank" rel="noopener">릿코드 Decode String</a></h1><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p><h3 id="example-1"><a href="#example-1" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: s = “3[a]2[bc]”<br>Output: “aaabcbc”</p><h3 id="example-2"><a href="#example-2" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: s = “3[a2[c]]”<br>Output: “accaccacc”</p><h3 id="example-3"><a href="#example-3" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: s = “2[abc]3[cd]ef”<br>Output: “abcabccdcdcdef”</p><h3 id="example-4"><a href="#example-4" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3><p>Input: s = “abc3[cd]xyz”<br>Output: “abccdcdcdxyz”</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>1 &lt;= s.length &lt;= 30<br>s consists of lowercase English letters, digits, and square brackets ‘[]’.<br>s is guaranteed to be a valid input.<br>All the integers in s are in the range [1, 300].</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1) 모든 디코드 문자열값을 s의 길이 범위에 만족할때 while문을 진행합니다.</li><li>(2) 현재 문자가 숫자일 경우 value값을 업데이트 시켜줍니다. 단 자리수는 k가 양의 정수이기 때문에 2자리이상도 가능하나는 것입니다. 2자리이상의 값도 구해주기위해서 (value * 10 + c-‘0’)식을 통해 문자의 값들을 하나씩 정수로 구해주게 됩니다.</li><li>(3) 문자가 '['일 경우</li></ul><ul><li>재귀 함수를 호출하여 ']'를 만날때 까지 진행해줍니다. 즉, ‘[’    ‘]’ 의 값사이에 존재하는 값을 찾아서 반환시켜준다음 괄호앞에 존재하는 숫자의 개수 곱의수만큼을 추가하면서 진행을 합니다.</li></ul><blockquote><p>테스트케이스 예시</p></blockquote><p>3[a]2[bc] -&gt; return ‘aaa’ -&gt; aaa2[bc] -&gt; ‘bcbc’ return -&gt; aaabcbc 의 형태로 값을 반환시킬 수 있게 됩니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_DecodeString_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        decodeString(<span class="string">"3[a]2[bc]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">char</span> c= s.charAt(idx);</span><br><span class="line">            idx++;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">                String subStr = decodeString(s);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value; i++)&#123;</span><br><span class="line">                    sb.append(subStr);</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-decode-string&quot;&gt;&lt;a href=&quot;#riskodeu-decode-string&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#릿코드-decod
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="문자열" scheme="http://gwanhyeon.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Longest Common Prefix</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210111-leetcode-longest-common-prefix/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210111-leetcode-longest-common-prefix/</id>
    <published>2021-01-11T12:31:34.000Z</published>
    <updated>2021-01-12T01:39:49.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-leetcode-longest-common-prefix"><a href="#riskodeu-leetcode-longest-common-prefix" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-longest-common-prefix"></a> <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">릿코드 leetcode  Longest Common Prefix</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: strs = [“flower”,“flow”,“flight”]<br>Output: “fl”</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: strs = [“dog”,“racecar”,“car”]<br>Output: “”<br>Explanation: There is no common prefix among the input strings.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li>(1)기준이 되는 문자열을 기준값으로 설정합니다. 예) str[0]</li><li>(2)indexOf 함수를 사용하여 값이 일치하면 0, 그게 아니라면 -1을 반환합니다.</li><li>(3)값이 일치할때까지 기준의 되는 문자열인 prefix을 뒤에서부터 하나씩 줄여나가면서 진행합니다.</li></ul><blockquote><p>Horizontal scanning 방식</p></blockquote><p>flower flow 의 값이 있다고 가정하면 flower 가 prefix로 설정되며 flower -&gt; flowe -&gt; flow 로 문자열을 자르게 되면서 같아지는 경우일때 루프를 빠져나옵니다.</p><p>이제 prefix값이 flow로 된 상태이므로 flow와 flight를 비교진행을 합니다. flow -&gt; flo -&gt; fl 로 진행하면서 flight의 [fl]과 값이 같으므로 해당 루프를 빠져나오면서 최종적으로 prefix 공통이 되는 문자열을 반환할 수 있습니다.</p><h1 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_Longest_Common_prefix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        longestCommonPrefix(<span class="keyword">new</span> String[]&#123;<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 기준이되는 prefix값과 일치할때까지 루프를 진행합니다.</span></span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 값을 뒤에서부터 하나씩 자르면서 비교해나갑니다.</span></span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 빈 상태에서 substring을 자르게되면 Error가 발생합니다.</span></span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-leetcode-longest-common-prefix&quot;&gt;&lt;a href=&quot;#riskodeu-leetcode-longest-common-prefix&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;m
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="문자열" scheme="http://gwanhyeon.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 문자열압축(카카오 2020 신입 공채)</title>
    <link href="http://gwanhyeon.github.io/Programmers-20210109-programmers-string-compression/"/>
    <id>http://gwanhyeon.github.io/Programmers-20210109-programmers-string-compression/</id>
    <published>2021-01-09T13:27:38.000Z</published>
    <updated>2021-01-09T13:46:13.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020"><a href="#peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-문자열압축-카카오신입-공채2020"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/60057" target="_blank" rel="noopener">프로그래머스 문자열압축 카카오신입 공채2020</a></h1><h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3><p>데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.<br>간단한 예로 aabbaccc의 경우 2a2ba3c(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, abcabcdede와 같은 문자열은 전혀 압축되지 않습니다. 어피치는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.</p><p>예를 들어, ababcdcdababcdcd의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 2ab2cd2ab2cd로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 2ababcdcd로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.</p><p>다른 예로, abcabcdede와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 abcabc2de가 되지만, 3개 단위로 자른다면 2abcdede가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.</p><p>압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.</p><h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3><p>s의 길이는 1 이상 1,000 이하입니다.<br>s는 알파벳 소문자로만 이루어져 있습니다.</p><h3 id="ibculryeog-ye"><a href="#ibculryeog-ye" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#입출력-예"></a> 입출력 예</h3><p>s    result<br>“aabbaccc”    7<br>“ababcdcdababcdcd”    9<br>“abcabcdede”    8<br>“abcabcabcabcdededededede”    14<br>“xababcdcdababcdcd”    17<br>입출력 예에 대한 설명</p><h3 id="ibculryeog-ye-1"><a href="#ibculryeog-ye-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#입출력-예-1"></a> 입출력 예 #1</h3><p>문자열을 1개 단위로 잘라 압축했을 때 가장 짧습니다.</p><h4 id="ibculryeog-ye-2"><a href="#ibculryeog-ye-2" class="header-anchor">1.4.1. </a><a class="markdownIt-Anchor" href="#입출력-예-2"></a> 입출력 예 #2</h4><p>문자열을 8개 단위로 잘라 압축했을 때 가장 짧습니다.</p><h3 id="ibculryeog-ye-3"><a href="#ibculryeog-ye-3" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#입출력-예-3"></a> 입출력 예 #3</h3><p>문자열을 3개 단위로 잘라 압축했을 때 가장 짧습니다.</p><h3 id="ibculryeog-ye-4"><a href="#ibculryeog-ye-4" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#입출력-예-4"></a> 입출력 예 #4</h3><p>문자열을 2개 단위로 자르면 abcabcabcabc6de 가 됩니다.<br>문자열을 3개 단위로 자르면 4abcdededededede 가 됩니다.<br>문자열을 4개 단위로 자르면 abcabcabcabc3dede 가 됩니다.<br>문자열을 6개 단위로 자를 경우 2abcabc2dedede가 되며, 이때의 길이가 14로 가장 짧습니다.</p><h3 id="ibculryeog-ye-5"><a href="#ibculryeog-ye-5" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#입출력-예-5"></a> 입출력 예 #5</h3><p>문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다.<br>따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다.<br>이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1) 몇개 단위로 값을 자를것인지를 체크해야합니다. 문자열이 s일경우 압축이 되기위해서는 <code>(s의 길이 / 2)</code>까지만 <code>최대 압축</code>을 진행할 수 있습니다.</li><li>(2) <code>단위만큼 값을 증가</code>시키면서 이전 <code>문자열과 비교</code>하기 위한 문자열을 저장시킵니다.</li><li>(3) <code>저장된 문자열과 이전문자열이 같다면</code> 압축을 진행한것이므로 압축값을 증가시킵니다(+1)</li><li>(4) <code>저장된 문자열과 이전문자열이 같지 않다면</code> 더이상 압축할것이 없으므로 압축값들을 문자열로 저장시킵니다. (단, 압축된 개수가 1보다 클 경우만 개수를 추가하고 그게 아니라면 해당 문자열 자체만을 저장시킵니다.)</li><li>(5) 한번의 단위검색이 모두 끝났을 경우 현재 <code>compression에 담겨진 문자열의 길이와 answer(s의 길이와 비교)</code>를 통해 더 작은값으로 갱신을 진행합니다.</li></ul><blockquote><p>압축 예시</p></blockquote><p>a != b 경우이므로 aabbaccc의 문자열에서 로직이 진행되었다고 할때 b에서 부터 다시 단위만큼 진행해야하므로 compressionCnt값을 1로 초기화시키고 현재 b의 값을 compresssionFirst값에 갱신시켜줍니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><blockquote><p>문자열 압축 완전 탐색</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열압축 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="string">"aabbaccc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = s.length();</span><br><span class="line">        <span class="comment">// 자를 부분 문자의 개수</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=s.length()/<span class="number">2</span>; i++)&#123;</span><br><span class="line">            String compressionStr = <span class="string">""</span>;</span><br><span class="line">            String compFirst = s.substring(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">int</span> compressionCnt = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 단위만큼 크기를 증가시키며 이전 문자열과 비교</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;s.length(); j += i) &#123;</span><br><span class="line">                String compSecond = <span class="string">""</span>;</span><br><span class="line">                <span class="comment">// 단위만큼 값을 가져온다.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + i; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k &lt; s.length()) compSecond += s.charAt(k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 첫번째 기준값과 현재 나온 문자열의 값이 같다면 압축횟수 증가</span></span><br><span class="line">                <span class="keyword">if</span>(compFirst.equals(compSecond)) compressionCnt++;</span><br><span class="line">                <span class="comment">// 다른 문자열이 나왔던 경우라면(더 이상 압축하지 못하는 경우라면)</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 압축하는 부분 (숫자 + 문자열)</span></span><br><span class="line">                    <span class="keyword">if</span> (compressionCnt &gt; <span class="number">1</span>) compressionStr += (compressionCnt + compFirst);</span><br><span class="line">                    <span class="keyword">else</span> compressionStr += compFirst;</span><br><span class="line">                    compSecond = <span class="string">""</span>;</span><br><span class="line">                    <span class="comment">// 다음으로 진행하기전 현재 다른 문자열이 나온값을 비교값으로 설정</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; j + i; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k &lt; s.length()) compSecond += s.charAt(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 다음 로직 이동전 값 초기화 부분</span></span><br><span class="line">                    compFirst = compSecond;</span><br><span class="line">                    compressionCnt = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 맨 마지막에 압축된 결과값이 들어가지 않으므로 이부분을 통해 최종 결과값을 붙여줍니다.</span></span><br><span class="line">            <span class="keyword">if</span> (compressionCnt &gt; <span class="number">1</span>) compressionStr += (compressionCnt + compFirst);</span><br><span class="line">            <span class="keyword">else</span> compressionStr += compFirst;</span><br><span class="line">            <span class="comment">// 최솟값 갱신시켜줍니다.</span></span><br><span class="line">            answer = Math.min(answer, compressionStr.length());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020&quot;&gt;&lt;a href=&quot;#peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/categories/programmers/"/>
    
    
      <category term="문자열" scheme="http://gwanhyeon.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
      <category term="프로그래머스" scheme="http://gwanhyeon.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Network PORT와 DNS(Domain Name System)</title>
    <link href="http://gwanhyeon.github.io/Network-20210109-network-03-port-dns/"/>
    <id>http://gwanhyeon.github.io/Network-20210109-network-03-port-dns/</id>
    <published>2021-01-09T05:58:26.000Z</published>
    <updated>2021-01-09T08:11:13.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="port"><a href="#port" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#port"></a> PORT</h1><p>네트워크 관련시간에 자주 들어보셨을 PORT에 대한 특징을 살펴보겠습니다.</p><p><code>클라이언트가 서버에게</code> <code>게임 서버, 메인 서버, 동영상 서버</code>에 접근한다고 가정해보겠습니다.<br>`클라이언트는 고유의 <em>IP:127.0.0.1</em> 를 가지고 있을때 서버 <em>IP:127.0.0.2</em> 에 <em>게임 서버, 메인 서버, 동영상 서버</em>에 요청으로 동시에 데이터를 가지고 오고 싶을때가 있을 것 입니다.</p><blockquote><p>그렇다면 클라이언트의 IP와 서버 IP만으로 어떤 서버에 어떤요청을 가져오는지가 가능할까요?</p></blockquote><p>즉, 한번에 두개이상의 서버를 호출해야한다면 IP로만 해결하기에는 어디서 온지 확인하기가 어렵게 됩니다. 그러면 어떻게 이것들을 구별하여 전송할 수 있을지 살펴보겠습니다.</p><h1 id="tcp-ip-paekis-jeongbo"><a href="#tcp-ip-paekis-jeongbo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#tcpip-패킷-정보"></a> TCP/IP 패킷 정보</h1><blockquote><p>IP 패킷</p></blockquote><p><em>출발지 IP ,목적지 IP, 기타 정보</em></p><blockquote><p>TCP 세그먼트</p></blockquote><p><em>출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증정보</em></p><p><code>IP패킷에는 가지고 있지않는 TCP 세그먼트</code>를 이용하여 <code>출발지 PORT와 목적지 PORT</code>를 가지게 되면서 같은 <code>IP에 고유의 포트를 지정하면서 전송</code>을 보낼 수 있게됩니다.</p><h1 id="paekis-jeongbo"><a href="#paekis-jeongbo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#패킷-정보"></a> 패킷 정보</h1><blockquote><p>TCP/IP<br>이제 데이터 전송시에 <code>출발지 IP,목적지 IP(IP 프로토콜)</code>과 <code>출발지 PORT, 목적지 PORT(TCP 세그먼트)</code>를 함께 보내게 되면서 <code>같은 IP내에서 프로세스를 구분</code>할 수 있게되었습니다.</p></blockquote><blockquote><p>TCP/IP 통신 예제</p></blockquote><ul><li>출발지 IP 127.0.0.1 , 목적지 IP 127.0.0.2</li><li><code>게임 서버 출발지 포트 9000 , 목적지 포트 12000</code></li><li><code>메인 서버 출발지 포트 8080 , 목적지 포트 8090</code></li><li><code>동영상 서버 출발지 포트 21000, 목적지 포트 22000</code></li></ul><p><code>게임서버</code>로 <code>127.0.0.1의 IP 출발지 포트 9000번</code>에서 <code>127.0.0.2 목적지 포트 12000번</code>으로 데이터 전송이 가능합니다.</p><p><code>메인서버</code>는 <code>127.0.0.1 IP 출발지 포트 8080번</code>에서 <code>127.0.0.2 목적지 포트 8090</code>으로 통신을 주고받을 수 있게 됩니다.</p><p><code>동영상 서버</code>의 경우 <code>127.0.0.1 21000번 포트</code>에서 목적지 포트 <code>127.0.0.2 22000번 포트</code>로 통신을 가능하게 할 수 있습니다.</p><p>결론적으로, 포트를 사용하게되면 이렇게 다양한 같은 아이피와의 구별점이 생겨 통신하는데에 있어서 <code>프로세스를 구분</code>할 수 있게 됩니다. 쉽게 생각하면 IP는 하나의 아파트 동을 나타내고 PORT는 동호수를 나타낸다고 생각하면 매우 쉽습니다.</p><h1 id="portyi-teugjing"><a href="#portyi-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#port의-특징"></a> PORT의 특징</h1><ul><li><code>0~65535</code>: 포트 할당이 가능합니다.</li><li><code>0~1023</code>: 잘 알려진 포트로 대부분 포트가 <code>사용중일 가능성</code>이 있기때문에 사용하지 않는것을 권장드립니다.</li></ul><blockquote><p>대표적인 PORT 번호</p></blockquote><ul><li>FTP 20,21</li><li>TELNET 23</li><li>HTTP 80</li><li>HTTPS 443<br>대표적인 포트로는 위의 포트 번호처럼 이미 할당이 되어있습니다.</li></ul><h1 id="dns-domain-name-system"><a href="#dns-domain-name-system" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#dnsdomain-name-system"></a> DNS(Domain Name System)</h1><p>자, 이제 여기까지 살펴보면 IP,PORT를 통해 데이터 통신의 프로세스를 구분할 수 있다는것을 알 수 있었습니다.</p><blockquote><p>하지만 매번 클라이언트와 서버쪽에서 IP를 기억하고 있다가 매번 전송을 해야할까요?</p></blockquote><p>기억하고 있기에는 매우많은 IP를 가지고 있습니다. 또한, 과거와 현재 쓰이는 IP는  쉽게 변경이 가능합니다. 이것의 문제점을 해결하기 위해 나온것이 바로 <code>DNS(Domain Name System) 도메인 네임시스템</code>이라고 이라고합니다. 즉 하나의 전화번호부처럼 사용할 수 있고, 도메인명을 IP 주소로 변환하여 사용이 가능합니다.</p><h1 id="dns-domain-name-system-eun-eoddeohge-dongjaghage-doelggayo"><a href="#dns-domain-name-system-eun-eoddeohge-dongjaghage-doelggayo" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#dnsdomain-name-system은-어떻게-동작하게-될까요"></a> DNS(Domain Name System)은 어떻게 동작하게 될까요?</h1><p>만약 저희가 <code>www.google.com</code>의 <code>도메인명</code>을 가지고 <code>서버에 요청</code>을 한다고 가정해보겠습니다.</p><ol><li><code>도메인명</code>을 바탕으로 <code>DNS서버에서 해당 도메인을 가지고 있는 IP를 전달</code>받습니다.</li><li><code>클라이언트</code>는 <code>DNS서버로 부터 응답받은 목적지 IP를 바탕으로 해당 서버에 접속</code>하게 됩니다.</li></ol><h1 id="jeongri"><a href="#jeongri" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#정리"></a> 정리</h1><p>지금까지 포스팅한 내용들을 살펴보면 <code>인터넷 통신이 어떻게 구조</code>를 이루고 있는지와 <code>IP(Internet protocal)이 어떻게 통신되고 장단점</code>이 무엇인지를 살펴보았습니다.<br>그리고 <code>IP의 문제점들을 해결</code>하기 위해 나온 <code>TCP/IP(TCP,UDP)의 동작원리</code>를 배울 수 있었습니다.마지막으로 이번장에 정리한 <code>PORT가 필요한 이유와 DNS 서버 동작</code>에 대해서 정리해보았습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;port&quot;&gt;&lt;a href=&quot;#port&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#port&quot;&gt;&lt;/a&gt; PORT&lt;/h1&gt;
&lt;p&gt;네트워크 관련시간에 자주 들어보셨을 P
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="NETWORK" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="PORT" scheme="http://gwanhyeon.github.io/tags/port/"/>
    
      <category term="DNS" scheme="http://gwanhyeon.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>Network TCP와 UDP</title>
    <link href="http://gwanhyeon.github.io/Network-20210108-network-02-tcp-udp/"/>
    <id>http://gwanhyeon.github.io/Network-20210108-network-02-tcp-udp/</id>
    <published>2021-01-08T05:58:26.000Z</published>
    <updated>2021-01-08T07:56:20.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inteones-peurotokolyi-4gyeceung"><a href="#inteones-peurotokolyi-4gyeceung" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#인터넷-프로토콜의-4계층"></a> 인터넷 프로토콜의 4계층</h1><p><code>인터넷 프로토콜의 4계층</code>에 대해서 살펴보겠습니다.</p><table><thead><tr><th>계층</th><th>프로토콜</th></tr></thead><tbody><tr><td>애플리케이션 계층</td><td>HTTP, FTP</td></tr><tr><td>전송 계층</td><td>TCP,UDP</td></tr><tr><td>인터넷 계층</td><td>IP</td></tr><tr><td>네트워크 인터페이스 계층</td><td>Empty</td></tr></tbody></table><p><code>인터넷 프로토콜은</code> 해당 <code>총 4개의 계층</code>으로 이루어져있고 <code>애플리케이션 계층, 전송계층, 인터넷계층, 네트워크 인터페이스 계층</code> 으로 구성되어있습니다.</p><h1 id="peurotokol-gyeceung"><a href="#peurotokol-gyeceung" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#프로토콜-계층"></a> 프로토콜 계층</h1><ul><li><p>애플리케이션<br><code>애플리케이션 계층</code>은 <code>웹 브라우저(크롬), 네트워크 , 게임, 채팅 프로그램</code>으로 구성되어있습니다. 그리고 <code>Socket 라이브러리</code>로 구성되어 있습니다.</p></li><li><p>OS(Operation System)<br>OS계층은 <code>TCP, UDP, IP(Internet Protocal)</code> 로 구성되어 있습니다.</p></li><li><p>네트워크 인터페이스<br>LAN 드라이버, LAN 장비, LAN카드</p></li></ul><p><code>네트워크 인터페이스</code>에서 <code>LAN카드</code>를 통해 <code>인터넷에 접근</code>하게 되고 <code>서버에 전송을 진행</code>하게 됩니다.</p><blockquote><p>전송 과정</p></blockquote><ol><li>애플리케이션 계층에서 클라이언트가 <code>&quot;Request Message&quot;</code> <code>메시지를 생성</code>시킵니다.</li><li>애플리케이션 계층에서 해당 메시지들을 <code>Socket라이브러</code>를 통해 전달이 됩니다.</li><li>OS계층에서 <code>TCP 정보를 생성</code>하여 <code>TCP세그먼트를 씌워 메시지 데이터를 포함</code>시킵니다.</li><li>OS계층에서 <code>IP 패킷이 생성되고 TCP데이터를 포함</code>시킵니다.</li><li>네트워크 인터페이스 계층에서 <code>패킷 단위</code>로 <code>LAN 카드 장비</code>를 통해 인터넷(물리적정보에) 접속하게 되어 해당 찾고자하는 <code>서버에 요청</code>을 보내게 됩니다.</li></ol><h1 id="ip-paekis-jeongbo"><a href="#ip-paekis-jeongbo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#ip-패킷-정보"></a> IP 패킷 정보</h1><p><code>패킷정보는</code> <code>출발지 IP랑 목적지 IP, 기타</code> 등등의 값을 가지고 해당 <code>전송데이터를 패킷</code>으로 감싸주는 형태로 진행됩니다.</p><h1 id="tcp-ip-paekis-jeongbo"><a href="#tcp-ip-paekis-jeongbo" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#tcpip-패킷-정보"></a> TCP/IP 패킷 정보</h1><ul><li><code>IP 패킷: 출발지 IP, 목적지 IP, 기타 데이터</code></li><li><code>TCP 세그먼트: 출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증 정보</code></li></ul><p>IP패킷안에 <code>TCP세그먼트를 감싸고</code> 그안에 <code>전송데이터</code>를 담아서 <code>네트워크상에 전송</code>되게 됩니다.<br>즉, <code>IP만으로는 해결할 수 없었던 출발지,목적지 PORT번호</code>가 있기때문에 <code>전송제어나 순서보장, 검증정보를 통해 문제점들을 해결</code> 할 수 있게 되었습니다.</p><h1 id="tcp-transmission-control-protocal"><a href="#tcp-transmission-control-protocal" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#tcptransmission-control-protocal"></a> TCP(Transmission Control Protocal)</h1><p><code>TCP(Transmission Control Protocal)</code>는 <code>전송 제어 프로토콜</code>이라고 불리어 오며 특징들에 대해서 살펴보도록 하겠습니다.</p><ol><li>연결지향 - <code>TCP 3 Way handshake(가상 연결)</code><br>개념적으로만 연결된 것을 의미합니다.</li><li>데이터 전달 보증<br><code>패킷 누락시 메시지를 못받는지를 알 수 있습니다.</code> 데이터가 전송되고 데이터가 잘 받았는지를 확인할 수 있습니다.</li><li>순서 보장<br><code>순서를 보장해줍니다.</code></li></ol><blockquote><p>예시</p></blockquote><p><code>패킷1,패킷2,패킷3을 순서대로 보낸다고 가정</code>하면 패킷을 보내다가 노드의 의 접근이 바뀌어 <code>순서가 정확하게 오지 않았을 경우</code> 서버에서 해당 순서를 확인하여 잘못되었음을 판단을 하게 됩니다. 이때, 순서가 잘못 들어온 <code>패킷이 3번</code>이라고 가정하면 해당되는 <code>패킷의 순서</code>부터 다시 <code>재전송을 요청</code>하게 됩니다. 즉, 최적화를 내부적으로 진행할 수 있습니다.</p><ol start="4"><li>신뢰할 수  있는 프로토콜<br>현재는 <code>TCP가 대부분의 전송</code>에 있어서 사용되고 있으며 <code>매우 중요한 개념</code>입니다.</li></ol><h1 id="tcp-3way-handshake"><a href="#tcp-3way-handshake" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#tcp-3way-handshake"></a> TCP 3way handshake</h1><ul><li><code>SYN:</code> 접속을 요청합니다.</li><li><code>ACK:</code> 요청을 수락합니다.</li></ul><ol><li>클라이언트가 서버에게 <code>SYN(Syncronized)의 connect 연결과정을 요청</code>합니다.</li><li>서버는 해당 클라이언트부터 SYN을 전송받고 클라이언트에게 <code>SYN+ACK(연결 상태)</code>를 함께 전송합니다.</li><li>클라이언트는 서버로 부터 해당 <code>SYN+ACK(연결상태)를 전송받고 다시 서버에게 잘 받았다는 의미로 ACK</code>을 전송시켜주게 됩니다.</li><li>해당 <code>ACK을 전송받은 서버</code>는 이때 잘 연결되었다는 의미로 알고 <code>데이터를 전송</code>시켜줍니다.</li></ol><p>이러한 <code>3way-handshake과정은</code> 클라이언트와 서버의 신뢰관계(연결 상태를 확인)하는 과정을 진행하는 것이라고 생각하시면 됩니다.</p><h1 id="udp-user-datagram-protocal"><a href="#udp-user-datagram-protocal" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#udpuser-datagram-protocal"></a> UDP(User Datagram Protocal)</h1><p><code>UDP(User Datagram Protocal)는</code> <code>사용자 데이터그램 프로토콜</code>이라고 불리어옵니다.</p><p>TCP와 매우 대조적인 특징을 가지고 있는데 살펴보겠습니다.</p><ol><li>연결지향 - TCP와는 다르게 TCP 3 way-handshake가 없습니다.</li><li>데이터 전달 보증이 되지 않습니다.</li><li>순서가 보장되지 않습니다.</li><li>데이터 전달 및 순서가 보장되지 않지만 매우 단순하고 빠른 특징을 가지고 있습니다.</li></ol><p>즉, IP와 유사하지만 <code>UDP에는</code> <code>PORT와 체크섬(Checksum)</code>이 존재하게 됩니다. <code>체크섬(Checksum)은</code> <code>메시지의 검증 데이터</code>를 일컫는 말입니다. 그리고 애플리케이션에서 추가작업이 필요로 될 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;inteones-peurotokolyi-4gyeceung&quot;&gt;&lt;a href=&quot;#inteones-peurotokolyi-4gyeceung&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="NETWORK" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="TCP" scheme="http://gwanhyeon.github.io/tags/tcp/"/>
    
      <category term="UDP" scheme="http://gwanhyeon.github.io/tags/udp/"/>
    
  </entry>
  
  <entry>
    <title>Network 인터넷 IP(Internet Protocal) 및 패킷(Packet)</title>
    <link href="http://gwanhyeon.github.io/Network-20210108-network-01-internet-communication/"/>
    <id>http://gwanhyeon.github.io/Network-20210108-network-01-internet-communication/</id>
    <published>2021-01-08T05:53:26.000Z</published>
    <updated>2021-01-08T07:56:09.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inteoneseseo-keompyuteo-duleun-eoddeohge-tongsineul-halggayo"><a href="#inteoneseseo-keompyuteo-duleun-eoddeohge-tongsineul-halggayo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#인터넷에서-컴퓨터-둘은-어떻게-통신을-할까요"></a> 인터넷에서 컴퓨터 둘은 어떻게 통신을 할까요?</h1><p>단순히 생각해보면 <code>클라이언트에서 메시지</code>를 보내면 <code>서버에서 해당 메시지</code>를 받고 정상적으로 받았다면 응답메시지를 보내주게 됩니다.</p><h1 id="inteones"><a href="#inteones" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#인터넷"></a> 인터넷</h1><h3 id="tongsineul-halddae-gwayeon-eodireul-tonghaeseo-keulraieonteuwa-seobeoga-tongsini-ganeunghaejil-su-isseosseulggayo"><a href="#tongsineul-halddae-gwayeon-eodireul-tonghaeseo-keulraieonteuwa-seobeoga-tongsini-ganeunghaejil-su-isseosseulggayo" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#통신을-할때-과연-어디를-통해서-클라이언트와-서버가-통신이-가능해질-수-있었을까요"></a> 통신을 할때 과연 어디를 통해서 클라이언트와 서버가 통신이 가능해질 수 있었을까요?</h3><p>바로, <code>인터넷</code>이라는 <code>개념</code>때문인데 <code>인터넷은 상당히 복잡한 망</code>으로 구성되어 있습니다. 각각의 인터넷안에 연결된 노드들 끼리 수도없이 복잡하게 얽혀져 있습니다.</p><h1 id="ip-internet-protocal"><a href="#ip-internet-protocal" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#ipinternet-protocal"></a> IP(Internet Protocal)</h1><p>이렇게 인터넷을 통해서 데이터를 전송하는 경우에는 <code>IP라는 인터넷프로토콜 주소</code>를 붙여서 전송시키는 경우가 많습니다.</p><blockquote><p>데이터 전송 예시<br>만약에 클라이언트 <code>IP:127.0.0.1의 주소</code>에서 <code>IP:127.0.0.2의 주소</code>로 데이터를 <code>전송</code>한다고 가정해보겠습니다.<br>이때 <code>클라이언트</code>는 찾고자하는 <code>서버의 IP를 검색</code>을 진행하면 <code>127.0.0.1의 IP주소</code>를 가지고 인터넷의 노드를 탐색하면서 <code>IP:127.0.0.2의 주소</code>를 찾아서 서버는 해당 클라이언트의 요청을 받고 해당 <code>데이터</code>들을 넘겨주게 됩니다.</p></blockquote><h1 id="ip-internet-protocla-yi-yeoghal"><a href="#ip-internet-protocla-yi-yeoghal" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#ipinternet-protocla의-역할"></a> IP(Internet Protocla)의 역할</h1><p><code>인터넷 프로토콜의 역할은</code> <code>지정된 IP주소</code>를 해당 <code>IP 주소(Address)</code>에 데이터를 전달시킵니다. 이때, <code>패킷(Packet)</code>이라는 통신 단위로 데이터를 전달하게 됩니다.</p><h1 id="ip-paekis-packet"><a href="#ip-paekis-packet" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#ip-패킷packet"></a> IP 패킷(Packet)</h1><p><code>IP패킷은</code> <code>출발지 IP</code>와 <code>목적지IP</code>, <code>기타 데이터사항</code>들을 감싸서 데이터를 <code>전송</code>합니다.</p><blockquote><p>클라이언트의 패킷은 어떻게 전달될까요?</p></blockquote><p><code>출발지 IP, 목적지 IP, 데이터 등등의 값</code>을 가지고 해당 <code>클라이언트</code>는 <code>IP패킷</code>을 <code>인터넷상에 던져주게 됩니다.</code> 노드끼리 해당 <code>목적지 IP</code>를 <code>탐색</code>하면서 <code>서버 IP</code>를 찾아냅니다. 해당 <code>서버IP</code>를 찾게 되면 <code>해당 서버에게 데이터를 패킷의 형태로 전송</code>하게 됩니다.</p><blockquote><p>서버의 패킷은 어떻게 전달 될까요?</p></blockquote><p><code>서버 IP를 출발지 IP로 지정</code>하고, 전달하고자 하는 <code>클라이언트의 아이디 목적지 IP</code>에게 해당 요청에 대한 <code>성공,실패 유무를 반환</code>하여 <code>HTTP의 상태값과 함께 전송</code>시키게 됩니다. 클라이언트와 마찬가지로 인터넷상의 <code>노드들은 목적지 IP를 탐색</code>하여 클라이언트에게 <code>패킷형태</code>로 전송시켜주게 됩니다.</p><h1 id="ip-peurotokolyi-hangye"><a href="#ip-peurotokolyi-hangye" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#ip-프로토콜의-한계"></a> IP 프로토콜의 한계</h1><ul><li><p>비연결성<br>패킷을 받을 대상이 없거나 <code>서비스 불능</code> 상태여도 <code>패킷을 전송</code>하게 됩니다. 예를 들면, 해당 서버 <code>PC가 꺼져있는 경우</code> <code>불능상태</code>이기때문에 이때에도 <code>패킷을 전송</code>해버리는 불상사가 발생하게 됩니다.</p></li><li><p>비신뢰성<br><code>중간에 패킷이 사라지는경우</code>가 생길 수 있습니다. 클라이언트가 인터넷안에서 노드가 꺼진 노드일 경우 이 <code>패킷들은 손실되어 더이상 처리가 되지 않을 수 있습니다.</code></p></li></ul><p><code>패킷이 순서대로 처리</code>되지 않을 수 있습니다. 순서대로 처리되지 않을시 같은 <code>IP는 어떻게 구분할 수 있을지에 대한 문제</code>가 생길 수 있습니다.</p><blockquote><p>패킷 순서 오류 예시</p></blockquote><p>클라이언트에서 <code>[&quot;HTTP Message1&quot;], [&quot;HTTP Message2&quot;]</code>를 전송한다고 가정하였을때 패킷이 다른노드를 타고 들어갈 수 있는 경우가 발생합니다. 클라이언트에서는<br><code>[&quot;HTTP Message1&quot;] -&gt; [&quot;HTTP Message2&quot;]</code> 의 순서로 데이터를 전송하였지만 서버측에서는 <code>[&quot;HTTP Message2&quot;] -&gt; [&quot;HTTP Message1&quot;]</code>의 순서로 데이터를 받을 수 있는 경우가 발생합니다.</p><ul><li>프로그램 구분<br><code>같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상</code>이라면 <code>프로그램을 정확히 구분할 수가 없게</code>됩니다.</li></ul><blockquote><p>TCP/IP의 등장</p></blockquote><p>결론적으로 이러한 <code>문제들을 해결하기 위해</code> <code>TCP/IP</code>라는 개념이 등장하게 되었으며 다음 포스팅에서 <code>TCP/IP</code>에 대해 자세하게 살펴볼 예정입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;inteoneseseo-keompyuteo-duleun-eoddeohge-tongsineul-halggayo&quot;&gt;&lt;a href=&quot;#inteoneseseo-keompyuteo-duleun-eoddeohge-tongsineul-halggayo
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="NETWORK" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="INTERNET" scheme="http://gwanhyeon.github.io/tags/internet/"/>
    
      <category term="TCP" scheme="http://gwanhyeon.github.io/tags/tcp/"/>
    
      <category term="IP" scheme="http://gwanhyeon.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>백준 Mootube 15591</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210108-boj-mootube/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210108-boj-mootube/</id>
    <published>2021-01-08T05:23:18.000Z</published>
    <updated>2021-01-07T16:26:37.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-mootube-15591-munje"><a href="#baegjun-mootube-15591-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-mootube-15591-문제"></a> <a href="https://www.acmicpc.net/problem/15591" target="_blank" rel="noopener">백준 MOOTUBE 15591 문제</a></h1><hr><h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3><p>농부 존은 남는 시간에 MooTube라 불리는 동영상 공유 서비스를 만들었다. MooTube에서 농부 존의 소들은 재밌는 동영상들을 서로 공유할 수 있다. 소들은 MooTube에 1부터 N까지 번호가 붙여진 N (1 ≤ N ≤ 5,000)개의 동영상을 이미 올려 놓았다. 하지만, 존은 아직 어떻게 하면 소들이 그들이 좋아할 만한 새 동영상을 찾을 수 있을지 괜찮은 방법을 떠올리지 못했다.</p><p>농부 존은 모든 MooTube 동영상에 대해 “연관 동영상” 리스트를 만들기로 했다. 이렇게 하면 소들은 지금 보고 있는 동영상과 연관성이 높은 동영상을 추천 받을 수 있을 것이다.</p><p>존은 두 동영상이 서로 얼마나 가까운 지를 측정하는 단위인 “USADO”를 만들었다. 존은 N-1개의 동영상 쌍을 골라서 직접 두 쌍의 USADO를 계산했다. 그 다음에 존은 이 동영상들을 네트워크 구조로 바꿔서, 각 동영상을 정점으로 나타내기로 했다. 또 존은 동영상들의 연결 구조를 서로 연결되어 있는 N-1개의 동영상 쌍으로 나타내었다. 좀 더 쉽게 말해서, 존은 N-1개의 동영상 쌍을 골라서 어떤 동영상에서 다른 동영상으로 가는 경로가 반드시 하나 존재하도록 했다. 존은 임의의 두 쌍 사이의 동영상의 USADO를 그 경로의 모든 연결들의 USADO 중 최솟값으로 하기로 했다.</p><p>존은 어떤 주어진 MooTube 동영상에 대해, 값 K를 정해서 그 동영상과 USADO가 K 이상인 모든 동영상이 추천되도록 할 것이다. 하지만 존은 너무 많은 동영상이 추천되면 소들이 일하는 것이 방해될까 봐 걱정하고 있다! 그래서 그는 K를 적절한 값으로 결정하려고 한다. 농부 존은 어떤 K 값에 대한 추천 동영상의 개수를 묻는 질문 여러 개에 당신이 대답해주기를 바란다.</p><h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3><p>입력의 첫 번째 줄에는 N과 Q가 주어진다. (1 ≤ Q ≤ 5,000)</p><p>다음 N-1개의 줄에는 농부 존이 직접 잰 두 동영상 쌍의 USADO가 한 줄에 하나씩 주어진다. 각 줄은 세 정수 pi, qi, ri (1 ≤ pi, qi ≤ N, 1 ≤ ri ≤ 1,000,000,000)를 포함하는데, 이는 동영상 pi와 qi가 USADO ri로 서로 연결되어 있음을 뜻한다.</p><p>다음 Q개의 줄에는 농부 존의 Q개의 질문이 주어진다. 각 줄은 두 정수 ki와 vi(1 ≤ ki ≤ 1,000,000,000, 1 ≤ vi ≤ N)을 포함하는데, 이는 존의 i번째 질문이 만약 K = ki라면 동영상 vi를 보고 있는 소들에게 몇 개의 동영상이 추천될 지 묻는 것이라는 것을 뜻한다.</p><h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3><p>Q개의 줄을 출력한다. i번째 줄에는 농부 존의 i번째 질문에 대한 답변이 출력되어야 한다.</p><h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3><p>4 3<br>1 2 3<br>2 3 2<br>2 4 4<br>1 2<br>4 1<br>3 1</p><h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3><p>3<br>0<br>2</p><h3 id="hinteu"><a href="#hinteu" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#힌트"></a> 힌트</h3><p>농부 존은 1번 동영상과 2번 동영상이 USADO 3을 가지고, 2번 동영상과 3번 동영상이 USADO 2를 가지고, 2번 동영상과 4번 동영상이 USADO 4를 가진다고 했다. 이것에 기반해서 1번 동영상과 3번 동영상의 USADO는 min(3,2)=2가 되고, 1번 동영상과 4번 동영상의 USADO는 min(3,4)=3이 되고, 3번 동영상과 4번 동영상의 USADO는 min(2,4)=2가 된다.</p><p>농부 존은 K=1일 때 2번 동영상, K=3일 때 1번 동영상, K=4일 때 1번 동영상을 보면 각각 몇 개의 동영상이 추천될까 궁금해하고 있다. K=1일 때 2번 동영상에서 추천되는 동영상은 1, 3, 4번 동영상이다. K=4일 때 1번 동영상으로부터 추천되는 동영상은 없다. 그러나 K=3일때는 1번 동영상에서 2번 동영상과 4번 동영상이 추천된다.</p><hr><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>문제를 살펴보면 <code>K값은 유사도</code>를 뜻하고 <code>K값이상으로 연결된 노드만 동영상을 추천</code>시킬 수 있습니다. <code>인접된 노드들과의 관계에서 정답</code>을 구해야하므로 <code>인접리스트</code>로 풀어야겠다는 생각을 하게 되었습니다.</p><p>가장 먼저 인접리스트를 생성시켜서 모든 값들을 넣어주고 <code>(유사도, 출발시작 노드)</code>의 값을 바탕으로 BFS를 진행해줍니다. 모든 경우에 대해서 매번 다르게 수행해야하므로 check를 모두 초기화시키면서 진행합니다. 즉, 해당노드에서 <code>시작되는 노드와 연결된 값</code>을 모두 찾아줍니다. 그리고 <code>유사도값 이상</code>인 <code>가중치값</code>을 가진 값들을 찾아주면 됩니다.</p><p>노드에 대한 체크는 <code>check변수</code>로 해당 노드를 방문했는지를 체크해주고 해당 인접리스트에 가지고 있는 <code>value의 값이 k이상일때만</code> 다음 노드를 방문할 수 있게 해줍니다. 해당 조건을 만족한다면 answer의 값을 카운팅 시켜주면 동영상 추천이 가능한 노드의 개수를 구할 수 있게 됩니다. <code>결론적으로 인접리스트와 BFS를 활용한 문제</code>였으며 문제가 길고 복잡해보였지만 생각을 조금만 달리한다면 쉽게 풀 수 있던 문제였습니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">baekjoon_Mootube15591_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> q;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Pair&gt;&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        q = Integer.parseInt(st.nextToken());</span><br><span class="line">        initListNode();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> value = Integer.parseInt(st.nextToken());</span><br><span class="line">            arr.get(x).add(<span class="keyword">new</span> Pair(y,value));</span><br><span class="line">            arr.get(y).add(<span class="keyword">new</span> Pair(x,value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> k = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> v = Integer.parseInt(st.nextToken());</span><br><span class="line">            bfs(k, v);          <span class="comment">// k이상의 유사도, 시작노드</span></span><br><span class="line">            System.out.println(answer);</span><br><span class="line">            answer=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initListNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntStream.rangeClosed(<span class="number">0</span>, n).forEach(i -&gt; arr.add(<span class="keyword">new</span> ArrayList&lt;&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">5001</span>];</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        q.add(v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> node = q.remove();</span><br><span class="line">            <span class="comment">// 연결된 노드에 있는것들을 모두 가져와서 체크</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.get(node).size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = arr.get(node).get(i).y;</span><br><span class="line">                <span class="keyword">int</span> value = arr.get(node).get(i).value;</span><br><span class="line">                <span class="comment">// 방문하지 않은 노드이고, 가중치값이 k보다 크거나 같을 경우만 진행한다. 그 외의 경우에는 진행하지 않는다. 조건을 만족 X</span></span><br><span class="line">                <span class="keyword">if</span> (!check[y] &amp;&amp; value &gt;= k) &#123;</span><br><span class="line">                    q.add(y);</span><br><span class="line">                    check[y] = <span class="keyword">true</span>;</span><br><span class="line">                    answer++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-mootube-15591-munje&quot;&gt;&lt;a href=&quot;#baegjun-mootube-15591-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="BFS" scheme="http://gwanhyeon.github.io/tags/bfs/"/>
    
      <category term="인접리스트" scheme="http://gwanhyeon.github.io/tags/%EC%9D%B8%EC%A0%91%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Letter Combinations of a Phone Number</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210108-leetcode-letter-combinations-of-a-phone-number/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210108-leetcode-letter-combinations-of-a-phone-number/</id>
    <published>2021-01-08T05:14:42.000Z</published>
    <updated>2021-01-08T05:21:48.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-letter-combinations-of-a-phone-number"><a href="#riskodeu-letter-combinations-of-a-phone-number" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-letter-combinations-of-a-phone-number"></a> <a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">릿코드 Letter Combinations of a Phone Number</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="키패드"></p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: digits = “23”<br>Output: [“ad”,“ae”,“af”,“bd”,“be”,“bf”,“cd”,“ce”,“cf”]</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: digits = “”<br>Output: []</p><h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: digits = “2”<br>Output: [“a”,“b”,“c”]</p><h3 id="constraints"><a href="#constraints" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>0 &lt;= digits.length &lt;= 4<br>digits[i] is a digit in the range [‘2’, ‘9’].</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>패드에서 누를 수 있는 <code>모든 번호의 패드리스트</code>를 하나 생성시킵니다.<br>해당 주어진 <code>패드의 정보를 가지고 DFS</code>를 수행합니다. 예를 들어 이 들어왔다면<br>2-&gt;3번을 누를시에 갈수 있는 모든 경우를 찾아줍니다.</p><blockquote><p>Test Case</p></blockquote><p>예를 들면 23의 패드가 들어와서 해당 패드 영문자가 눌렸다고 가정할때 <em>abc / def</em> 가 있다고 가정할때 아래 처럼 나타낼 수 있습니다.</p><ul><li>a -&gt; d, a -&gt; e, a -&gt; f</li><li>b -&gt; d, b -&gt; e, b -&gt; f</li><li>c -&gt; d, c -&gt; e, c -&gt; f</li></ul><p>해당 형식으로 방문하고 체크합니다.<br>DFS의 <em>Basement조건</em>은 digits 길이만큼 선택될 수 있기때문에 해당 조건일때 해당 값까지 쌓인 문자열을 answer 리스트에 넣어주고 <em>DFS를 수행하던것을 종료</em>시킵니다. 그러면 현재까지 생성된 <em>모든 조합을 출력</em>시킬 수 있습니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_letter_combinations_of_a_phone_number_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String[] padList = &#123;<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jki"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> List&lt;String&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        letterCombinations(<span class="string">"23"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(answer);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(digits,<span class="number">0</span>, <span class="string">""</span>);</span><br><span class="line">        answer.forEach(v-&gt; System.out.println(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String digits, <span class="keyword">int</span> cnt, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == digits.length())&#123;</span><br><span class="line">            answer.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String padArr = padList[(digits.charAt(cnt)-<span class="string">'0'</span>)-<span class="number">2</span>];</span><br><span class="line">        System.out.println(padArr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : padArr.toCharArray())&#123;</span><br><span class="line">            System.out.println(<span class="string">"dfs("</span>+digits+<span class="string">","</span>+(cnt+<span class="number">1</span>)+<span class="string">","</span>+(str+c)+<span class="string">")"</span>);</span><br><span class="line">            dfs(digits, cnt+<span class="number">1</span>,str+c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-letter-combinations-of-a-phone-number&quot;&gt;&lt;a href=&quot;#riskodeu-letter-combinations-of-a-phone-number&quot; class=&quot;header-anchor&quot;&gt;1. &lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="완전탐색" scheme="http://gwanhyeon.github.io/tags/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Valid Parentheses</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210108-leetcode-validparentheses/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210108-leetcode-validparentheses/</id>
    <published>2021-01-08T03:42:42.000Z</published>
    <updated>2021-01-07T19:11:16.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-leetcode-validparentheses"><a href="#riskodeu-leetcode-validparentheses" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-validparentheses"></a> <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">릿코드 leetcode ValidParentheses</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Given a string s containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is valid.</p><h3 id="an-input-string-is-valid-if"><a href="#an-input-string-is-valid-if" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#an-input-string-is-valid-if"></a> An input string is valid if:</h3><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: s = “()”<br>Output: true</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: s = “()[]{}”<br>Output: true</p><h3 id="example-3"><a href="#example-3" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: s = “(]”<br>Output: false</p><h3 id="example-4"><a href="#example-4" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3><p>Input: s = “([)]”<br>Output: false</p><h3 id="example-5"><a href="#example-5" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#example-5"></a> Example 5:</h3><p>Input: s = “{[]}”<br>Output: true</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1). 스택을 이용하여 스택에 담긴 맨위에 값과 현재 들어오는 값과의 비교를 진행한다.</li><li>(2). 만약 괄호쌍의 짝은 맞으니 올바른 괄호가 아닐 경우에는 false를 리턴한다.</li><li>(3). 마지막으로 스택이 비어있다는것은 현재 모든값의 짝이 맞는것을 의미하므로 true를 리턴한다.</li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_ValidParentheses_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isValidStack(<span class="string">"([)]"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidStack</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">boolean</span> answer = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray() )&#123;</span><br><span class="line">            <span class="comment">// 값을 집어 넣어준다</span></span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'('</span> || c == <span class="string">'['</span> || c == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == <span class="string">'('</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == <span class="string">'['</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'&#125;'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = stack.empty() ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-leetcode-validparentheses&quot;&gt;&lt;a href=&quot;#riskodeu-leetcode-validparentheses&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="완전탐색" scheme="http://gwanhyeon.github.io/tags/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 3/E Item 42 익명클래스 보다는 람다를 사용하라</title>
    <link href="http://gwanhyeon.github.io/EffectiveJava-20210103-%EC%95%84%EC%9D%B4%ED%85%9C42-%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC/"/>
    <id>http://gwanhyeon.github.io/EffectiveJava-20210103-%EC%95%84%EC%9D%B4%ED%85%9C42-%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC/</id>
    <published>2021-01-03T09:32:06.000Z</published>
    <updated>2021-01-03T11:10:27.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="igmyeongkeulraeseu-bodaneun-ramdareul-sayonghara"><a href="#igmyeongkeulraeseu-bodaneun-ramdareul-sayonghara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#익명클래스-보다는-람다를-사용하라"></a> 익명클래스 보다는 람다를 사용하라</h1><p>자바에서 함수 타입을 표현할 때 추상 메서드를 하나만 담은 인터페이스를 사용했습니다. 이러한 인터페이스의 인스턴스를 함수 객체(function object)라고 하여, 특정 함수나 동작을 나타내는 데 썼습니다.</p><p>1997년 JDK1.1 이 등장하면서 함수 객체를 만드는 주요 수단은 익명 클래스가 되었습니다.<br><code>문자열을 길이순</code>으로 <code>정렬</code>하는데, 정렬을 위한 비교 함수로 <code>익명 클래스</code>로 사용하였습니다.(과거)</p><blockquote><p>익명 클래스의 인스턴스를 함수 객체로 사용합니다.(낡은 기법)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// comment 익명 클래스의 인스턴스를 함수 객체로 사용 - 낡은 기법!!!!</span></span><br><span class="line">Collections.sort(words, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(s1.length(), s2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>전략 패턴처럼, 함수 객체를 사용하는 <code>과거 객체 지향 디자인 패턴</code>에는 <code>익명 클래스</code>면 충분하였습니다. 위의 코드는 <code>Comparator 인터페이스</code>가 <code>정렬</code>을 담당하는 <code>추상전략</code>을 뜻하며, 문자열을 정렬하는 구체적인 전략을 <code>익명 클래스로 구현</code>했습니다.</p><p><code>하지만, 익명클래스 방식은 코드가 너무 길기 때문에 자바는 함수형 프로그래밍에 적합하지 않게 되었습니다.</code></p><blockquote><p>자바 8에서는 어떻게 변화되었을까요?</p></blockquote><p>추상 메서드 하나짜리 인터페이스는 특별한 의미를 인정받아 특별한 대우를 받게 되었습니다. 지금은 함수형 인터페이스라 부르는 이 인터페이스들의 인스턴스를 람다식(lambda expression, 람다)을 사용하여 만들수 있게 된 것입니다. 람다는 함수나 익명 클래스와 개념은 비슷하지만 코드는 훨씬 간결하게 처리할 수 있습니다.</p><blockquote><p>람다식을 함수 객체로 사용(익명 클래스 대체)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// comment 람다식을 함수 객체로 사용 - 익명 클래스 대체</span></span><br><span class="line"><span class="comment">// comment 타입을 명시해야 코드가 더 명확할때마 제외하고는 람다의 모든 매개변수 타입은 생략하자</span></span><br><span class="line">Collections.sort(words, (s1,s2) -&gt; Integer.compare(s1.length(), s2.length()));</span><br></pre></td></tr></table></figure><p>여기서 람다, 매개변수(s1, s2) 반환값 타입은 각각 <code>Comparator&lt;String&gt;, String, int</code> 이지만 코드에서는 언급이 없습니다. 상황에 따라 컴파일러가 타입을 결정하지 못하는 경우가 있는데 그럴때는 프로그래머가 직접 명시를 해야합니다.</p><p><strong>타입을 명시해야 코드가 더 명확할 때만 제외하고는, 람다의 모든 매개변수 타입은 생략하도록 합니다.</strong></p><p>컴파일러가 타입을 추론하는데 필요한 정보는 대부분 제네릭에서 얻기 때문에 컴파일러는 람다의 타입을 추론할 수 없게 되어, 결국 우리가 일일이 명시해야합니다.</p><blockquote><p>비교자 생성 메서드를 사용하여 이 코드를 더 간결하게 만들어봅시다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(words, comparingInt(String::length));</span><br></pre></td></tr></table></figure><blockquote><p>더 나아가 자바 8때 List 인터페이스에 추가된 sort 메서드를 이용하면 더욱더 짧아집니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words.sort(comparingInt(String::length));</span><br></pre></td></tr></table></figure><p>람다를 언어 차원에서 지원하면서 기존에는 적합하지 않았던 곳에서도 함수 객체를 실용적으로 사용할 수 있게 되었습니다.</p><p>아이템 34의 Operation 열거타입을 예로 들어봅시다. apply 메서드의 동작이 상수마다 달라야해서 상수별 클래스 몸체를 사용해 각 상수에서 apply 메서드를 재정의합니다.</p><blockquote><p>상수별 클래스 몸체와 데이터를 사용한 열거 타입</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// comment 상수별 클래스 몸체와 데이터를 사용한 열거 타입</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation&#123;</span><br><span class="line"></span><br><span class="line">    PLUS(<span class="string">"+"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">"-"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">"*"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    Operation(String symbol)&#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>아이템 34</strong>에서는 상수별 클래스 몸체를 구현하는 방식보다는 <code>열거 타입에 인스턴스 필드를 두는 편이 낫습니다.</code> 람다를 이용하면 후자의 방식, 즉 열거타입의 인스턴스 필드를 이용하는 방식으로 상수별로 다르게 동작하는 코드를 쉽게 구현할 수 있습니다.</p><p>단순히 각 열거 타입의 동작을 람다로 구현해 생성자에 넘기고, 생성자는 이 람다를 인스턴스 필드로 저장해둡니다. 그런 다음 <code>apply 메서드에서 필드에 저장된 람다를 호출하기만 하면 됩니다.</code></p><blockquote><p>함수객체(람다)를 인스턴스 필드에 저장해 상수별 동작을 구현한 열거타입</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation_lambda&#123;</span><br><span class="line">    PLUS(<span class="string">"+"</span>, (x,y) -&gt; x+y),</span><br><span class="line">    MINUS(<span class="string">"-"</span>, (x,y) -&gt; x-y),</span><br><span class="line">    TIMES(<span class="string">"*"</span>, (x,y) -&gt; x*y),</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>, (x,y) -&gt; x/y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator op;</span><br><span class="line"></span><br><span class="line">    Operation_lambda(String symbol, DoubleBinaryOperator op)&#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.op = op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> op.applyAsDouble(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수 객체 람다를 인스턴스 필드에 저장해 상수별 동작을 구현한 열거타입입니다. 열거 타입 상수의 동작을 표현한 람다를 <code>DoubleBinaryOperator 인터페이스</code>변수에 할당하였습니다. <code>java.util.function 패키지가 제공하는 다양한 함수</code> 인터페이스(아이템 44) 중 하나 인수를 받아서 결과를 반환시켜줍니다(double)</p><blockquote><p>핵심 정리</p></blockquote><p>람다 기반 Operation 열거 타입을 보면 상수별 클래스 몸체는 더 이상 사용할 이유가 없다고 느낄지 모르지만, 꼭 그렇지는 않습니다. 메서드나 클래스와 달리 <code>람다는 이름이 없고 문서화도 못한다. 따라서 코드 자체로 동작이 명확히 설명되지 않거나 코드 줄수가 많아지면 람다를 쓰지 말아야합니다</code></p><p><code>람다는 한줄일 때 가장 좋고 길어야 세줄</code> 안에 끝내는게 좋습니다. 열거 타입 생성자 안의 람다는 타입의 인스턴스 멤버에 접근을 할 수 없습니다. 따라서, 상수별 동작을 단 몇줄로 구현하기 어렵거나, <code>인스턴스 필드나 메서드를 사용해야만 하는 상황</code>이라면 <code>상수별 클래스 몸체를 사용</code>해야합니다.</p><p><code>추상클래스의 인스턴스를 만들 때 람다를 쑬 수 없으니, 익명 클래스</code>를 써야합니다. 비슷하게 추상 메서드가 여러 개인 인터페이스의 인스턴스를 만들 때도 익명 클래스를 쓸 수 있습니다.</p><p>마지막으로 람다는 자신을 참조할 수 없습니다. 람다에서의 <code>this 키워드는 바깥 인스턴스</code>를 가리킵니다. 그래서 함수 객체가 자신을 참조해야 한다면 반드시 익명 클래스를 써야합니다. 따라서 람다를 직렬화하는 일은 극히 삼가해야합니다.</p><blockquote><p>요약</p></blockquote><p>자바가 8로 판올림 되면서 작은 함수 객체를 구현하는데 적합한 람다가 도입되었습니다. <code>익명 클래스는(함수형 인터페이스가 아닌) 타입의 인스턴스를 만들 때만 사용해야합니다.</code> 람다는 작은 함수 객체를 아주 쉽게 표현할 수 있어서 함수형 프로그래밍의 지평을 열게 되었습니다.</p><p><a href="https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item42" target="_blank" rel="noopener">https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item42</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;igmyeongkeulraeseu-bodaneun-ramdareul-sayonghara&quot;&gt;&lt;a href=&quot;#igmyeongkeulraeseu-bodaneun-ramdareul-sayonghara&quot; class=&quot;header-anchor&quot;&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://gwanhyeon.github.io/categories/java/"/>
    
    
      <category term="EffectiveJava3/E" scheme="http://gwanhyeon.github.io/tags/effectivejava3-e/"/>
    
      <category term="람다" scheme="http://gwanhyeon.github.io/tags/%EB%9E%8C%EB%8B%A4/"/>
    
      <category term="익명클래스" scheme="http://gwanhyeon.github.io/tags/%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 3/E Item 43 람다보다는 메서드 참조를 사용하라</title>
    <link href="http://gwanhyeon.github.io/EffectiveJava-20210103-%EC%95%84%EC%9D%B4%ED%85%9C43-%EB%9E%8C%EB%8B%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC/"/>
    <id>http://gwanhyeon.github.io/EffectiveJava-20210103-%EC%95%84%EC%9D%B4%ED%85%9C43-%EB%9E%8C%EB%8B%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC/</id>
    <published>2021-01-03T09:32:06.000Z</published>
    <updated>2021-01-03T11:10:16.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ramdabodaneun-meseodeu-camjoreul-sayonghara"><a href="#ramdabodaneun-meseodeu-camjoreul-sayonghara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#람다보다는-메서드-참조를-사용하라"></a> 람다보다는 메서드 참조를 사용하라</h1><p><code>람다가 익명 클래스보다 나은 점 중에서 가장 큰 특징은 간결함</code>입니다. 그런데 자바에는 함수객체를 심지어 람다보다도 더 간결하게 만드는 방법이 있습니다. 바로 <code>메서드 참조(Method reference)</code>입니다.</p><p>다음 코드는 임의의 키와 Integer 값의 매핑을 관리하는 프로그램의 일부입니다.</p><p>키의 인스턴스 개수로 해석된다면, 이 프로그램은 멀티셋(multiset)을 구현한게 됩니다.<br><code>이 코드는 키가 맵 안에 없다면 키와 숫자 1을 매핑하고 이미 존재한다면 기존 매핑 값을 증가시킵니다.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//comment 람다보다도 더 간결하게 만드는 방법은 -&gt; 메서드 참조</span></span><br><span class="line">Map&lt;String,Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//comment java 8 추가된 Map merge 메서드를 사용하기 (키가 없다면 &#123;키,쌍&#125; 그대로저장, 있다면 현재값과 주어진값에 적용후 그 결과로 현재값을 덮어쓴다</span></span><br><span class="line">m.merge(<span class="string">"1"</span>,<span class="number">1</span>,(count, increment)-&gt;count+increment);</span><br><span class="line">System.out.println(m.get(<span class="string">"1"</span>)); <span class="comment">// 1</span></span><br><span class="line">m.merge(<span class="string">"1"</span>,<span class="number">1</span>,(count, increment)-&gt;count+increment);</span><br><span class="line">System.out.println(m.get(<span class="string">"1"</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>자바 8때 Map에 추가된 merge메서드를 사용하였습니다. merge 메서드는 키,값,함수를 인자로 받으며, 주어진 키가 이미 있다면(세번째 인수로 받은) 함수를 현재 값과 주어진 값에 적용한 후에, 그 결과로 현재 값을 덮어씌웁니다.<br><code>즉, 맵에 {키,함수의 결과} 쌍을 저장합니다</code> 이코드는 merge 메서드의 전형적인 쓰임을 잘 보여주고 있습니다.</p><blockquote><p>조금 더 최적화는 어떻게 시킬 수 있을까요?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// comment 위와 같은 merge기능은 count, increment가 공간을 꽤나 차지하기때문에 이것을 더 쉽게 람다로 바꾸어보자.</span><br><span class="line">m.merge(&quot;1&quot;, 1, Integer::sum);</span><br><span class="line">System.out.println(m.get(&quot;1&quot;)); // 3</span><br></pre></td></tr></table></figure><p>매개변수는 직접적으로 크게 하는일이 없기때문에 일 없이 공간을 차지하는 경우가 많습니다. 이때, <code>자바 8이 되면서 Integer 클래스(와 모든 기본타입의 박싱 타입)</code>는 이 람다와 기능이 같은 <code>정적 메서드 sum을 제공</code>하기 시작하였습니다.<br><code>따라서, 람다 대신 이 메서드의 참조를 전달하면 똑같은 결과를 더 보기 좋게 얻을 수 있습니다.</code></p><blockquote><p>람다로 할 수 없는 일이라면 메서드 참조로도 할 수 없다.</p></blockquote><p>메서드 참조를 사용하는편이 보통 더 짧고 간결하므로, <code>람다로 구현했을 때 너무 길거나 복잡하다면 메서드 참조가 더 좋은 대안</code>이 되어줍니다. 즉, <code>람다로 작성할 코드를 새로운 메서드</code>에 담은 다음, <code>람다 대신 그 메서드 참조</code>를 사용하는 식입니다.</p><blockquote><p>때론 람다가 메서드 참조보다 간결할 때가 있다.</p></blockquote><p>주로 메서드와 람다가 같은 클래스에 있을때 그렇습니다. goshThisClassNameIsHumongous::action 클래스 안에 있다고 가정하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Item43;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoshThisClassNameIsHumongous</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Executor service = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 메서드 참조</span></span><br><span class="line">        service.execute( GoshThisClassNameIsHumongous::action);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 람다</span></span><br><span class="line">        service.execute(()-&gt;action());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>메서드 참조 쪽도 더 짧지도, 더 명확하지도 않습니다. 따라서 람다 쪽이 더 낫다고 할 수 있습니다.</code><br>같은 선상에서 <code>java.util.function</code> 패키지가 제공하는 제네릭 정적 팩터리 메서드인 <code>Function.identity()</code>를 사용하기 보다는 똑같은 기능의 람다를 직접 사용하는 편이 더 낫다고 할 수 있습니다.</p><h1 id="meseodeu-camjoyuhyeongyi-daseosgaji"><a href="#meseodeu-camjoyuhyeongyi-daseosgaji" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#메서드-참조유형의-다섯가지"></a> 메서드 참조유형의 다섯가지</h1><blockquote><ol><li>정적 메서드를 가리키는 메서드입니다.</li></ol></blockquote><p><code>인스턴스 메서드를 참조하는 유형</code>은 <code>수신 객체(receiving object: 참조 대상 인스턴스)</code>를 특정하는 <code>한정적(bound)인스턴스 메서드 참조</code>이고, 다른 하나는 <code>수신 객체를 특정하지 않은 비한정적(unbound) 인스턴스 메서드 참조</code>입니다.</p><blockquote><ol start="2"><li>한정적 참조<br>근본적으로 <code>정적 참조</code>와 비슷합니다. <code>즉, 함수 객체가 받는 인수와 참조되는 메서드가 받는 인수가 똑같습니다.</code></li></ol></blockquote><blockquote><ol start="3"><li>비한정적 참조<br><code>비한정적 참조</code>에서는 <code>함수 객체를 적용하는 시점에 수신 객체</code>를 알려줍니다. 이를 위해 수신 객체 전달용 매개변수가 매개변수 목록의 첫 번째로 추가되며, 그 뒤로는 참조되는 메서드 선언에 정의된 매개변수들이 뒤따릅니다.<br><code>비한정적 참조는 주로 스트림 파이프라인에서 매핑과 필터 함수</code>에 쓰입니다.</li></ol></blockquote><blockquote><p>4,5. 클래스 생성자를 가리키는 메서드 참조, 배열 생성자를 가리키는 메서드 참조<br>마지막으로, 클래스 생성자를 가리키는 메서드 참조와 배열 생성자를 가리키는 메서드 참조가 있습니다. 생성자 참조는 팩터리 객체로 사용됩니다.</p></blockquote><table><thead><tr><th>인터페이스</th><th>함수 시그니처</th><th>예</th></tr></thead><tbody><tr><td>UnaryOperator</td><td>T apply(T t)</td><td>String::toLowerCase</td></tr><tr><td>BinaryOperator</td><td>T apply(T t1, T t2)</td><td>BigInteger::add</td></tr><tr><td>Predicate</td><td>boolean test(T t)</td><td>Collection::isEmpty</td></tr><tr><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td><td>Arrays::asList</td></tr><tr><td>Supplier</td><td>T get()</td><td>Instant::now</td></tr><tr><td>Consumer</td><td>void accept(T t)</td><td>System.out::println</td></tr></tbody></table><blockquote><p>핵심 정리</p></blockquote><p><code>메서드 참조</code>는 람다의 간단명료한 대안이 될 수 있습니다. <code>메서드 참조 쪽이 짧고 명확하다면 메서드 참조를 쓰고, 그렇지 않을 때만 람다를 사용하라</code></p><p><a href="https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item43" target="_blank" rel="noopener">https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item42</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ramdabodaneun-meseodeu-camjoreul-sayonghara&quot;&gt;&lt;a href=&quot;#ramdabodaneun-meseodeu-camjoreul-sayonghara&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://gwanhyeon.github.io/categories/java/"/>
    
    
      <category term="EffectiveJava3/E" scheme="http://gwanhyeon.github.io/tags/effectivejava3-e/"/>
    
      <category term="람다" scheme="http://gwanhyeon.github.io/tags/%EB%9E%8C%EB%8B%A4/"/>
    
      <category term="익명클래스" scheme="http://gwanhyeon.github.io/tags/%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4/"/>
    
      <category term="메서드참조" scheme="http://gwanhyeon.github.io/tags/%EB%A9%94%EC%84%9C%EB%93%9C%EC%B0%B8%EC%A1%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC @ResponseBody의 역할</title>
    <link href="http://gwanhyeon.github.io/Spring-20201231-responsebody%EC%9D%98-%EC%97%AD%ED%95%A0/"/>
    <id>http://gwanhyeon.github.io/Spring-20201231-responsebody%EC%9D%98-%EC%97%AD%ED%95%A0/</id>
    <published>2020-12-31T10:08:47.000Z</published>
    <updated>2021-01-14T08:17:49.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="responsebody"><a href="#responsebody" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#responsebody"></a> @ResponseBody</h1><p>스프링환경에서 개발을 진행하다보면 컨트롤러에서 <code>@ResponseBody</code>를 사용하는일이 많습니다. <code>@ResponseBody</code>를 사용하는것과 사용하지 않는것은 어떤차이점이 있을까요?</p><p>기본적으로 <code>Spring은 MVC</code> 환경에서 동작을 합니다. 이때 MVC의 동작을 간략하게 말씀드리겠습니다.</p><p>만약 사용자가 웹브라우저상에서 서버에게 <code>localhost:8080/mvc</code> 라는 경로로 요청을 진행한다고 가정하겠습니다.<br>이때 Spring 내부의 <code>내장 톰캣 서버</code>가 해당 요청을 받아 들여 스프링 컨테이너는 해당 요청을 가지고 있는 <code>@Controller</code> 어노테이션이 붙여진 컨트롤러를 찾아주게됩니다.</p><blockquote><p>@Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Component</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "component".</span></span><br><span class="line"><span class="comment"> * Such classes are considered as candidates for auto-detection</span></span><br><span class="line"><span class="comment"> * when using annotation-based configuration and classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Other class-level annotations may be considered as identifying</span></span><br><span class="line"><span class="comment"> * a component as well, typically a special kind of component:</span></span><br><span class="line"><span class="comment"> * e.g. the &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125; annotation or AspectJ's</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.aspectj.lang.annotation.Aspect <span class="doctag">@Aspect</span>&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Fisher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Repository</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 컨트롤러를 타고 들어가면 다음과 같은 구조를 볼 수 있습니다. 자세히 살펴보시면 <code>@Component</code> 어노테이션을 살펴보실 수 있습니다. 과연 이것의 어노테이션의 역할은 무엇일까요?<br>즉, 기존의 Spring에서는 <code>@Bean</code>을 붙여 빈을 등록하던 것처럼 빈 클래스에 <code>@Component</code> 애노테이션을 붙여 빈을 등록할 수 있습니다. 따라서 <code>@Controller</code> 어노테이션 내부에는 해당 컨트롤러를 <code>@Bean</code> 으로 등록하는 역할도 하고 있다는 뜻입니다.<br>@Component를 붙여 빈을 등록하면 클래스 이름의 첫 문자를 소문자로 바꾼 것이 빈의 이름(id)이 됩니다. 그리고 빈 객체가 생성되는 시점은 ApplicationContext 객체가 생성되는 시점이며 기본적으로 singleton scope 입니다.</p><p><code>localhost:8080/mvc</code>의 요청경로에 맞는 컨트롤러를 @Bean 컴포넌트 스캔을 통하여 해당 경로를 가지고 있는 컨트롤러를 찾아주게 됩니다.  만약 <code>@ResponseBody</code> 가 붙여져 있지 않다면 해당 모델에 값을 넘겨줄 수도 있고, String을 반환하게 되면 데이터를 넘겨주는것이 아니라 해당 View의 Path값에 맞게  모델값과 함께 반환시켜주게 됩니다.</p><p>간단한 예제로는</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/mvc"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>, <span class="string">"kgh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"root"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>형식을 들 수 있습니다. 모델값을 가져와 거기에 <code>&lt;Key,value&gt;</code> 형식으로 값을 넣어주고 반환값을 String으로 한 <code>'root' View Path</code>를 반환시켜주게 됩니다. 즉, 컨트롤러에서 리턴 값으로 문자를 반환하면 <code>뷰 리졸버( viewResolver )</code>가 화면을 찾아서 처리를 진행합니다.</p><blockquote><p>@ResponseBody를 붙여주면 무슨일이 발생할까요?</p></blockquote><p><code>@ResponseBody</code>의 역할은 <code>HTTP BODY</code>문자내용을 반환하는 <code>api</code>라고 할 수 있습니다. 즉, 기존에 <code>@ResponseBody</code>가 없는 경우에 <code>viewResolver</code> 대신에 <code>httpMessageConverter</code>가 동작하여 문자일 경우에는 <code>StringHttpMessageConverter</code> 객체일 경우에는 <code>MappingJackson2HttpMessageConverter</code>로 이루어져있습니다. 클라이언트의 HTTP Accept헤더와 서버 컨트롤러의 반환 타입 정보 둘을 조합해서 HttpMessageConverter가 동작되게 됩니다. 기본으로 동작되는 데이터반환형식은 Default JSON형식으로 동작되게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/mvc"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloString</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"kgh"</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;responsebody&quot;&gt;&lt;a href=&quot;#responsebody&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#responsebody&quot;&gt;&lt;/a&gt; @ResponseB
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="ResponseBody" scheme="http://gwanhyeon.github.io/tags/responsebody/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Gradle 빠르게 설정하기</title>
    <link href="http://gwanhyeon.github.io/Spring-20201231-springboot-gradle-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/Spring-20201231-springboot-gradle-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</id>
    <published>2020-12-31T09:57:27.000Z</published>
    <updated>2020-12-31T10:04:22.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seupeuringbuteueseo-gradle-bbareuge-seoljeonghagi"><a href="#seupeuringbuteueseo-gradle-bbareuge-seoljeonghagi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#스프링부트에서-gradle-빠르게-설정하기"></a> 스프링부트에서 Gradle 빠르게 설정하기</h1><p><code>IntellJ</code> 로 프로젝트를 생성하고나면 IntellJ에서 Gradle을 통해서 파일들을 컴파일하는것을 알 수 있습니다.<br>하지만, 이 방식은 실행속도에 있어서 많은 차이점을 가져다주게 됩니다.</p><blockquote><p>이것을 어떻게 변경할 수 있을까요?</p></blockquote><p>Java진영에서 직접 컴파일을 실행시킬 수 있도록 처리해주는 것이 빠른 속도를 가져올 수 있습니다.<br><code>MacOS</code> 기준 왼쪽 상단에 <code>IntellJ IDEA</code>를 클릭하시고<br><code>Preferences Build -&gt; Execution -&gt; Deployment Build Tools Gradle</code> 의 위치에서 다음과 같이 설정을 진행합니다.</p><p>또 다른 방식으로는 Shift를 두번눌러서 전체 검색을 통해서 <code>Deployment Build Tools Gradle</code>을 입력하시면 해당 설정하는 곳으로 바로 이동하실 수 있습니다.</p><ul><li><code>Build and run using: Gradle -&gt; IntelliJ IDEA</code></li><li><code>Run tests using: Gradle -&gt; IntelliJ IDEA</code></li></ul><p>모두 Gradle로 되어있는 것을 IntellJ IDEA로 변경을 진행하면 조금 더 빠른 환경에서 개발을 진행할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;seupeuringbuteueseo-gradle-bbareuge-seoljeonghagi&quot;&gt;&lt;a href=&quot;#seupeuringbuteueseo-gradle-bbareuge-seoljeonghagi&quot; class=&quot;header-anchor
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="SpringBoot" scheme="http://gwanhyeon.github.io/tags/springboot/"/>
    
      <category term="Gradle" scheme="http://gwanhyeon.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 프로젝트 환경설정</title>
    <link href="http://gwanhyeon.github.io/Spring-20201231-springboot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/"/>
    <id>http://gwanhyeon.github.io/Spring-20201231-springboot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</id>
    <published>2020-12-31T09:35:01.000Z</published>
    <updated>2020-12-31T10:03:23.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-peurojegteu-hwangyeongseoljeonghagi"><a href="#springboot-peurojegteu-hwangyeongseoljeonghagi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#springboot-프로젝트-환경설정하기"></a> Springboot 프로젝트 환경설정하기</h1><p>이번시간부터 스프링부트 프로젝트생성부터 스프링 개념에 대해서 정리를 진행하려고합니다.</p><p>프로젝트 생성을 위한 환경은 다음과 같습니다.</p><ul><li><code>Intellj IDEA</code></li><li><code>Springboot 2.4.1 버전</code></li><li><code>Gradle</code></li><li><code>Java 11</code></li></ul><p>스프링 프로젝트를 진행하기 위해서는 <a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a> 에서 생성하는 방법과<br>인텔리제이 프로젝트 생성에서 만들 수 있는 방법이 있습니다.</p><blockquote><p>build Gradle의 전체 설정</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.4.1'</span></span><br><span class="line">    id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.10.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.kgh'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-thymeleaf'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    runtimeOnly <span class="string">'com.h2database:h2'</span>            </span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>springboot-starter-we, spring-boot-starter 에는 다음과 같은 의존성 라이브러리가 추가됩니다.</p></blockquote><ul><li>spring-boot-starter-tomcat 톰캣</li><li>spring-webmvc 스프링 웹 MVC</li><li>spring-boot -&gt; spring-core</li><li>spring-boot-starter-logging -&gt; logback, slf4j</li></ul><p>springboot-starter-web은 다음과 같은 라이브러리를 포함하고 있기때문에 따로 톰캣설정과 MVC에 대한 설정을 따로 해줄 필요가 없습니다. 즉, 매우 편리하게 설정들을 진행해준다는 장점이 있습니다.</p><blockquote><p>테스트 라이브러리 의존성 라이브러리는 다음과 같습니다.</p></blockquote><p><code>junit: 테스트 프레임워크</code><br><code>mockito: Mock 라이브러리</code><br><code>assertj: 테스트코드를 손쉽게 작성할 수 있도록 도와줍니다.</code><br><code>spring-test: 스프링 통합 테스트 지원</code></p><p>이러한 역할을 한다는것을 알고 계신후 위의 코드를 작성후 프로젝트를 생성한 뒤 Run을 통해서 <code>localhost:8080</code>에 접속하시면<br>에러가 발생하는 화면이 나오는것을 확인하실 수 있는데 그러면 <code>정상적으로 서버가 가동</code>된 것입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot-peurojegteu-hwangyeongseoljeonghagi&quot;&gt;&lt;a href=&quot;#springboot-peurojegteu-hwangyeongseoljeonghagi&quot; class=&quot;header-anchor&quot;&gt;1. &lt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="환경설정" scheme="http://gwanhyeon.github.io/tags/%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/"/>
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="IntelliJ" scheme="http://gwanhyeon.github.io/tags/intellij/"/>
    
  </entry>
  
</feed>
