<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>GWAN IT Blog</title>
  
  <subtitle>GWAN IT Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2021-04-22T08:08:28.241Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>gwanhyeon Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 사다리조작 15684</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210422-ladder-fake/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210422-ladder-fake/</id>
    <published>2021-04-22T08:05:52.000Z</published>
    <updated>2021-04-22T08:08:28.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje"><a href="#samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-사다리조작-15684문제"></a> <a href="https://www.acmicpc.net/problem/15684" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 사다리조작 15684문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>n은 열의 개수, m은 가로선의 추가될 개수, h는 열의 개수입력을 받습니다.</li><li>그리고 가로선의 추가될 x,y좌표의 값을 체크를 하여 맵에 넣어주는데 조심해야할 부분이 있습니다. 저 같은경우에는 x,y의 좌표값이 들어왔을때 x,y의 좌표는 1로 놓고 x,y+1의 좌표는 2로 놓았습니다. 이렇게 좌표로 놓은이유는 추후에 모든 가로선들을 놓고나서 모든 사다리들을 위에서부터 순회하는 과정에서 이동을 하기 위함입니다. 즉, x,y의 좌표 1의 경우에는 오른쪽으로 이동을 하게 되고, x,y+1의 좌표 2의 경우에는 왼쪽으로 이동하게 처리하였습니다.</li><li>n,m,n의 변수를 헷갈려했는데, 다시 한번 문제를 읽고 이해하는 문제가 되었습니다. 시간소요가 많이 된 부분이라 천천히 잘 읽으면서 진행해야겠습니다.</li><li>map의 행,열의 idx값이 1부터 진행되므로 배열할당을 [h+1][n+1]의 범위만큼 할당하여 진행하였습니다.</li><li>사다리 즉, 가로선의 개수는 3개를 넘을 수 없다 라는 조건을 처음에 간과하였습니다. 출력부분에 자세히보면 다리를 놓는것은 3개만 가능하고 그 이상이 될 경우 -1을 출력하라라는 조건을 제대로 확인을 못하였습니다.</li><li>가로선을 최대 3개까지만 구할 수 있기때문에 0,1,2,3개를 선택하는 조합의 경우로 생각할 수 있습니다. 따라서 for(0-3의 범위)를 하나씩 순회하면서 선택되는 경우를 구할 수 있습니다.(3C0, 3C1,3C2, 3C3) 의 경우라고 생각을 합니다.</li><li>이제 DFS를 수행하여 Basement조건을 수립합니다.</li><li>모든 가로선을 놓았을때 종료하는 Basement조건을 수립하고 현재 0~3개의 값을 선택하는 경우로 진행되고 있기 때문에 해당되는 조건은 cnt == len의 범위를 만족할때 사다리를 찾는 로직을 구현하면 됩니다.</li><li>모든 가로선을 아직 놓지 못하였을때는 1번행부터 h+1의 길이까지 모든 행 ~ 열을 순회하면서 현재 위치와 다음위치의 값이 0) 즉, (x,y), (x,y+1)의 값이 모두 0일 경우이자 가로선을 놓을 수 있는 경우에 가로선을 넣게 하였습니다. 가로선은 (x,y)는 1, (x,y+1)은 2로 넣어 1일 경우 오른쪽으로 이동, 2일경우 왼쪽으로 이동의 경우로 맵에 값을 갱신시켜나갔습니다.</li><li>만약 가로선의 개수가 DFS의 종료조건에 걸렸을 경우에 현재 선택된 가로선을 다시 (x,y = 0), (x,y+1 = 0)으로 값들을 해제시켜주었습니다. 그래야지 다른 경우의 가로선을 탐색할 수 있기때문입니다.</li><li>이제 모든 가로선들을 놓고, 사다리를 (1~n) 인덱스부터 순차적으로 진행하면서 해당 사다리를 타고 내려가면서 최종적으로 타고 내려온 열의 값이 현재 시작한 열의 값과 같은지 다른지를 체크합니다. 예를 들면, 1번 세로선에서 시작하여 모든 사다리를 타고나서, 최종적으로 끝의 행에 도달하였을때의 y의 값이 같다면 성공적으로 사다리를 타고 내려와서 사다리를 조작한것으로 볼 수 있습니다.</li><li>사다리를 타고 내려오는 과정은 다음과 같습니다.<ol><li>현재 map의 값이 1이면 오른쪽으로 이동시킵니다.(my++)</li><li>현재 map의 값이 2이면 왼쪽으로 이동시킵니다.(my—)</li><li>가로, 세로를 모두 움직이고나서 아래로 한칸 내려와서 사다리를 이동시킵니다.(mx++)</li><li>최종적으로 my와 현재 출발하는 j값이 같지 않다면 사다리를 제대로 타고내려와서 속인게 아니므로 false를 리턴합니다.</li></ol></li></ol><ul><li>실수한점: 모든 사다리가 세로선 i선에서 i까지 도달하는것이 아니라 하나의 그 개수만 찾으면 되는 문제였습니다. 이 부분에서 조합+DFS+BFS으로 모든 경우를 고민하게 되면서 잘못된 로직을 구현하게 되면서 시간이 소요된 문제였습니다.</li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 사다리조작<span class="title">_15684</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m, h;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        h = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[h+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            x = Integer.parseInt(st.nextToken());</span><br><span class="line">            y = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="comment">// 가로선 왼쪽: 1, 오른쪽 2</span></span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            map[x][y+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 가로선을 최대3개까지만 놓을 수 있기때문에 nCi의 경우를 모두 구해준다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// i는 몇개 선택된지 여부</span></span><br><span class="line">            answer = i;</span><br><span class="line">            <span class="comment">// dfs(시작점, 선택된 갯수)</span></span><br><span class="line">            dfs(<span class="number">1</span>, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span>(isCheck) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(isCheck ? answer : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> cnt, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// i번 세로선의 결과가 i번이 나온경우 종료!</span></span><br><span class="line">        <span class="keyword">if</span>(isCheck) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt == len)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arriveAtDestination()) &#123;</span><br><span class="line">                isCheck = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 모든 경우에 대해서 가로선 경우를 모두 놓아본다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;h+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 가로선 j+1까지 확인을 하기 때문에 n까지만 진행합니다.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">0</span> &amp;&amp; map[i][j+<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 해당점을 선택하는 경우</span></span><br><span class="line">                    map[i][j] = <span class="number">1</span>;</span><br><span class="line">                    map[i][j+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    dfs(i, cnt+<span class="number">1</span>, len);</span><br><span class="line">                    <span class="comment">// 해당점을 선택하지 않는 경우</span></span><br><span class="line">                    map[i][j] = <span class="number">0</span>;</span><br><span class="line">                    map[i][j+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">arriveAtDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 세로선을 확인하면서 나간다.(열)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="comment">// 맨위에서 부터 시작하므로 x = 1, y는 해당 세로선부터 순차적으로 확인하므로 i</span></span><br><span class="line">            <span class="keyword">int</span> mx = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> my = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;h; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[mx][my] == <span class="number">1</span>)&#123;</span><br><span class="line">                    my++;        <span class="comment">//열 움직이기 오른쪽으로</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map[mx][my] == <span class="number">2</span>)&#123;</span><br><span class="line">                    my--;        <span class="comment">//열 움직이기 왼쪽으로</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//인접한 값이 존재할 수 없으므로 세로로 밑으로 내려간다.</span></span><br><span class="line">                mx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// y값이 계속해서 사다리를 타고 내려오다가 결국 자신이 출발한 지점과 같지 않게되면 i번 세로선이 i로 도착한게 된게 아니므로 종료</span></span><br><span class="line">            <span class="keyword">if</span>(my != i)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje
      
    
    </summary>
    
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 치킨배달 15686</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210216-chicken-delivery/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210216-chicken-delivery/</id>
    <published>2021-04-21T10:26:34.000Z</published>
    <updated>2021-04-22T11:02:15.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 치킨배달 15686</a></p><h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1><p>0은 빈 칸, 1은 집, 2는 치킨집이다.</p><p>(2, 1)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |2-1| + |1-2| = 2, (5, 5)에 있는 치킨집과의 거리는 |2-5| + |1-5| = 7이다. 따라서, (2, 1)에 있는 집의 치킨 거리는 2이다.</p><p>(5, 4)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |5-1| + |4-2| = 6, (5, 5)에 있는 치킨집과의 거리는 |5-5| + |4-5| = 1이다. 따라서, (5, 4)에 있는 집의 치킨 거리는 1이다.</p><p>이 도시에 있는 치킨집은 모두 같은 프랜차이즈이다. 프렌차이즈 본사에서는 수익을 증가시키기 위해 일부 치킨집을 폐업시키려고 한다. 오랜 연구 끝에 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.</p><p>도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다. 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li><code>0은 빈칸, 1은 집, 2는 치킨집</code>을 갖는 하나의 맵이 주어진다.</li><li>간혹 이것을 <code>BFS로 생각하여 풀이를 할 수 있는 경우</code>가 있을 텐데, 문제를 자세히 읽어보면 상하좌우의 방향이 주어지긴하지만 결국 우리에겐 필요한 것은 집과 치킨과의 치킨거리를 구하는것입니다. 즉 <code>DFS 브루트포스</code> 방법을 사용할 것입니다.</li><li>집과 치킨집과의 거리의 좌표값을 기반으로 <code>|집 X - 치킨 X| + |집 Y - 치킨 Y|</code>의 값을 구하는것이라고 생각하면 됩니다.</li><li>집에서 치킨집중 <code>최대 M개</code>를 고르는 문제가 여기서 <code>핵심 포인트</code>입니다. 집하나에서 M개의 치킨집을 고를 수 있습니다. 즉, <code>브루트포스로 치킨집 M개를 선택</code>하는 <code>basement의 조건</code>을 가질 수 있습니다.</li><li>치킨집을 1개를 골랐을때의 치킨거리의 최솟값, 치킨집 2개를 골랐을때의 최솟값…M개를 골랐을때의 <code>최솟값</code>을 구하는것입니다.</li><li>치킨집은 좌표상 <code>고를 수도 있고 안고를수도 있는 브루트포스 호출조건</code>을 잘생각해야합니다. 치킨집에 <code>3개 A,B,C</code>가 있다고 가정했을때 <code>A / AB / AC / BC / ABC</code> 의 경우를 고른다고 생각을 하셔야합니다.  이때, <code>M개를 선택해야하므로 가능한 선택의 수는 AB,AC,BC</code>가 될 것입니다.</li></ul><blockquote><p>치킨 배달 순서</p></blockquote><ol><li>좌표에서 <code>집인경우</code> 집의 좌표를 담을 벡터를 선언합니다.</li><li>좌표에서 <code>치킨집인</code> 경우 치킨집의 좌표를 담을 벡터를 선언합니다.</li><li><code>DFS(0,0)</code> 을 호출합니다. 첫번째 파라미터는 <code>현재 치킨집의 순서</code>, 두번째 파라미터는 <code>현재 선택된 치킨집의 개수</code>를 뜻합니다.</li><li>치킨집은 <code>M개까지 선택</code>하였을때 <code>집과 치킨거리를 계산</code>하여 <code>최솟값</code>으로 <code>업데이트 시켜줍니다.</code> 치킨이 선택된 것을 체크해주기 위한 <code>check배열을 선언</code>해줍니다.<br>아직 M개가 선택되지 않았더라면</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">check[idx] = <span class="literal">true</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">check[idx] = <span class="literal">false</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt);</span><br></pre></td></tr></table></figure><p><code>치킨을 선택한 경우와 치킨을 선택하지 않은 경우</code>로 나누어주면서 <code>DFS를 모두 수행</code>해줍니다.<br>5. M개를 선택하였을때 모든 치킨거리값을 ans의 값과 갱신하여 최솟값을 구해줍니다.<br>주의 해야할점은 <code>치킨거리의 거리</code>와 <code>모든 집의 치킨거리</code>는 다릅니다.<br>6. 만약 <code>idx값이 치킨값보다 클경우 종료</code>시켜줍니다. 조건에 위배됩니다.</p><h1 id="javareul-hwalyonghan-munje-jaepuli"><a href="#javareul-hwalyonghan-munje-jaepuli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#java를-활용한-문제-재풀이"></a> Java를 활용한 문제 재풀이</h1><h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고-2"></a> 컴퓨팅 사고</h2><ol><li>N*N(2&lt;=N&lt;=50)의 지도가 주어집니다.</li><li>치킨거리는 집과 치킨집사이의 거리를 뜻합니다.</li><li>모든집의 치킨거리의 합은 각집당 모든치킨집사이의 거리중 가장 작은 값들의 합을 뜻합니다.</li><li>지도상에 0: 빈칸, 1:집, 2: 치킨집을 뜻합니다.<br>예를 들면, (2,1) 집 (1,2) 치킨집이 있으면 치킨 거리 = |2-1| + |1-2| = 2를 뜻하게 됩니다. 각 도시의 치킨거리는 = 하나의 집을 기준으로 나머지 치킨집의 치킨거리를 구한 값중 가장작은값의 합들을 뜻합니다. 처음에 문제를 제대로 읽지 않아서 헷갈리는 부분이었습니다.</li><li>최대 M개의 치킨집의 개수를 고를 수 있으므로 결국, 치킨배달의 문제는 N개중 M개를 선택하는 문제인 순열과 조합을 떠올릴 수 있습니다.</li><li>문제에서 뜻하는 바로는 도시의 치킨거리가 가장작은 값을 구하는것이므로 치킨집 리스트중에서 M개를 선택하였을때의 최솟값을 구해주면됩니다.</li></ol><h2 id="aidieo"><a href="#aidieo" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#아이디어"></a> 아이디어</h2><ol><li>입력 N이 주어지고 R, C의 길이를 뜻합니다. N(치킨집)개의 중에서 M개를 선택할지를 구하는 M을 입력받습니다.</li><li>입력으로 주어진 값이 ‘1’일 경우 집 -&gt; house의 리스트에 담습니다.</li><li>입력으로 주어진 값이 ‘2’일 경우 집 -&gt; chicken의 리스트에 담습니다.</li><li>DFS를 수행하여 모든 조합을 구해줍니다.<ol><li>종료조건: 종료조건은 N개의 치킨집중에서 M개를 선택한 조건이 됩니다. 즉, 선택된 개수(CNT) == 선택해야할 개수(M)이 종료조건이 됩니다. 치킨 거리는 집에서 가장 가까운거리를 구하는것이므로 처음에는 BFS를 떠올렸지만, 전혀 문제풀이와 상관이 없는 지도맵이였습니다. 도시의 치킨거리는 모든집의 치킨거리의 합을 나타내므로 종료조건에 걸렸을때 모든집의 치킨거리를 구해줍니다.</li><li>예를 들면, 각집(x,y) , 치킨집1,2,3 이 있으면 Math.min((집 X - 치킨집 X) + (집 Y - 치킨집 Y))의 최솟값을 구하여서 하나의 sum 변수에 더해나갑니다. 이렇게 모든하우스의 경우와 모든 치킨집의 경우를 모두 찾아내게 되면 하나의 조합의 경우로 만들 수 있는 모든도시의 치킨거리의 합을 하나 구하게 됩니다. 하나의 재귀 종료조건에 걸리게 되면 이떄 하나의 모든도시의 치킨거리의 합을 구하는것과 같습니다.</li><li>수행조건: 처음에는 순열로 모든값을 구해주었지만 시간초과가 나오는 불상사가 발생하였습니다. 조합을 사용하여 중복값을 제거하여 통과를 시켰습니다.</li><li>예를 들면, [1,2,3,4]라는 배열에서 1,2,3의 값을 뽑았으면 [1,2,3],[2,3,1],[3,2,1]과 같이 순열은 이전의 값들도 쳐다보는게 됩니다. 따라서 조합의 경우를 구하면 [1,2,3],[2,3,1],[3,2,1]은 다 같이 하나의 조건으로 생각하기때문에 순열에 비해 시간복잡도가 줄어들게 됩니다. 따라서 ,순열의 경우를 조합으로 변경하니 시간초과를 해결할 수 있었습니다.</li></ol></li></ol><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 순열로 돌리니까 시간초과, 조합으로 돌리니까 통과</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 치킨배달<span class="title">_15686</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; houseList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; chickenList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; selectChickenList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        houseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        chickenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        selectChickenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span> (map[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    houseList.add(<span class="keyword">new</span> Graph(i, j));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    chickenList.add(<span class="keyword">new</span> Graph(i, j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[chickenList.size()];</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">            <span class="comment">// 모든 도시의 치킨집</span></span><br><span class="line">            <span class="keyword">int</span> totalChickenPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;houseList.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = Integer.MAX_VALUE;</span><br><span class="line">                Graph houseGraph = houseList.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; selectChickenList.size(); j++) &#123;</span><br><span class="line">                    Graph chickenGraph = selectChickenList.get(j);</span><br><span class="line">                    sum = Math.min(sum,Math.abs(houseGraph.x - chickenGraph.x) + Math.abs(houseGraph.y - chickenGraph.y));</span><br><span class="line">                &#125;</span><br><span class="line">                totalChickenPrice += sum;</span><br><span class="line">            &#125;</span><br><span class="line">            answer = Math.min(answer, totalChickenPrice);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;chickenList.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isCheck[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheck[i] = <span class="keyword">true</span>;</span><br><span class="line">            selectChickenList.add(<span class="keyword">new</span> Graph(chickenList.get(i).x, chickenList.get(i).y));</span><br><span class="line">            dfs(cnt+<span class="number">1</span>,i);</span><br><span class="line">            selectChickenList.remove(selectChickenList.size()-<span class="number">1</span>);</span><br><span class="line">            isCheck[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  치킨배달15686.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/21.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; house;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; chicken;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> ans = MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 치킨 사이즈를 넘게되었을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx &gt; chicken.size())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨집 m개를 선택하였을때</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">        <span class="keyword">int</span> chicken_street = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;house.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> dist = MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;chicken.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] == <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> ax = house[i].first;</span><br><span class="line">                    <span class="keyword">int</span> ay = house[i].second;</span><br><span class="line">                    <span class="keyword">int</span> bx = chicken[j].first;</span><br><span class="line">                    <span class="keyword">int</span> by = chicken[j].second;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> distance = <span class="built_in">abs</span>(ax-bx) + <span class="built_in">abs</span>(ay-by);</span><br><span class="line">                    dist = min(dist,distance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chicken_street += dist;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, chicken_street);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨 선택</span></span><br><span class="line">    check[idx] = <span class="literal">true</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 치킨 미선택</span></span><br><span class="line">    check[idx] = <span class="literal">false</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                house.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                chicken.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 스타트와링크 15561</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210421-start-and-link/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210421-start-and-link/</id>
    <published>2021-04-21T05:33:33.000Z</published>
    <updated>2021-04-21T05:38:12.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15561" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 스타트와 링크 15561</a></p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>(1) N은 20까지 주어지므로 시간복잡도가 충분히 주어지므로 DFS를 통한 모든 경우를 구해주었다. 그리고 짝수인 팀원들을 구해야한다.<br>(2) 가장중요한점은 팀을 어떻게 분리시킬 것인가를 잘 생각해야한다. 하나의 팀을 나누는 변수를 두어 스타트팀은 true, 링크팀은 false로 두고 나누어준다. 그리고 DFS종료조건은 N/2명으로 나눌 수 있는 경우에 처리를 한다. 팀을 두개로 분리하기때문에 이와 같은 처리를 하게 되는 것이다.<br>(3) 조합을 사용하여 모든 경우의 수를 찾아준다. (idx변수를 선언하여 이전의값은 쳐다보지 않는다.) 문제에서 Sij, Sji를 동시에 계산하고 있으므로 같은것으로 보고 있기때문에 순열을 구할 필요가 없다.<br>(4) 홀수처리와 짝수처리를 따로따로 분리해야하는 것으로 착각을 하게 된 문제였다. 각 팀의 인원이 홀수가 되면 그 처리를 따로 처리를 해줄 필요가 없었다.<br>(5) 이제 체크된 값 True False에 따라 팀을 분리하고 True인 경우에는 스타트팀, False인 경우에는 링크팀의 능력치를 더해나가면서 팀원의 능력치의 최소를 구해주고, 음수가 나올 수 있으므로 절댓값을 처리한다.</p><blockquote><p>예를 들어보면,</p></blockquote><p>n=6 일 경우로 가정하고 스타트팀이 3명(1,2,3) , 링크팀이 3명(4,5,6) 이라고 가정하면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">스타트팀의 능력치 = S12 + S21 + S13 + S31 + S23 + S32</span><br><span class="line">링크팀의 능력치 = S45 + S54 + S46 + S64 + S56 + S65</span><br></pre></td></tr></table></figure><p>와 같이 홀수팀으로 구성되어도 모든 능력치를 구할 수 있는것을 알 수 있다.</p><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 링크와스타트<span class="title">_15561</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; arrList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        n = Integer.parseInt(br.readLine());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"answer = "</span> + answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 조합</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// == n개를 선택된 경우</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> startTeamScore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> linkTeamScore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(isChecked[i] &amp;&amp; isChecked[j])&#123;</span><br><span class="line">                        startTeamScore += map[i][j];</span><br><span class="line">                        System.out.println(map[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(!isChecked[i] &amp;&amp; !isChecked[j]) linkTeamScore += map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">            answer = Math.min(answer, Math.abs(startTeamScore - linkTeamScore));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// == 스타트팀: true, 링크팀 false</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isChecked[i]) <span class="keyword">continue</span>;;</span><br><span class="line">            isChecked[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">            isChecked[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 연구소 14502</title>
    <link href="http://gwanhyeon.github.io/Samsung-20200908-BOJ-beakjoon-laboratory-14502/"/>
    <id>http://gwanhyeon.github.io/Samsung-20200908-BOJ-beakjoon-laboratory-14502/</id>
    <published>2021-04-21T05:33:31.000Z</published>
    <updated>2021-04-22T11:02:31.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 연구소 14502</a></p><h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1><ul><li>연구소는 크기가 <code>N×M</code>입니다.</li><li>연구소에서 <code>빈곳 0, 벽 1, 바이러스 2</code>의 값이 주어지게 됩니다.</li><li>벽을 3개만 세운 뒤 바이러스가 퍼질 수 없는 안전영역의 최댓값을 구하는 문제입니다.</li><li>지도의 세로 크기 N과 가로 크기 M (3 ≤ N, M ≤ 8)</li></ul><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p><code>0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</code> 라는 조건이 있는 문제입니다.</p><p>이 문제를 풀때 가장 중요한점은 DFS로 접근해야 하는가? BFS로 접근해야 하는가를 많이 고민하였던 문제였습니다.</p><p>Basement  조건이 <code>벽을 3개</code> 세울 때 조합의 경우의 수를 사용하기 위해서 DFS를 사용하였으며, 연구소에서 바이러스들이 전염시키는 과정은 BFS로 풀이를 진행하였습니다.</p><ul><li>값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 됩니다.</li><li>빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</li><li>DFS 에서의 수행은 빈칸의 개수가 기준이 되므로 empty_size를 선언해서 받아오게 하였습니다.</li><li>CNT 값이 3일 경우 3개의 벽을 모두 세운 경우이므로 기존의 값은 변화가 되면 안되기때문에 맵을 Copy시켜줍니다.</li><li>이제 BFS를 수행하기위해 각각의 경우에 있어서 Check변수가 1일 경우에만 벽을 세워주게 됩니다.</li><li>바이러스가 전파시에 <code>현재 바이러스의 값 2</code>인 좌표 (x,y)의 점을 기준으로 <code>BFS</code>를 수행합니다.</li><li>모든 BFS경우를 돌고나서 아직 전염되지 않은 값이 있는곳이 <code>안전지대</code>입니다. 그 곳의 값을 <code>safe_size 카운팅</code> 시켜줍니다.</li><li>각 경우마다 안전영역의 최대의 값을 구해주어야하므로 최댓값을 갱신시켜줍니다.</li><li>각 경우마다 경우의 수가 달라지므로 visited 변수를 초기화 시켜줍니다.</li></ul><blockquote><p>즉, DFS 반복 → basement 확인 → BFS (x,y)좌표로 부터 바이러스 전염 → 안전영역의 최댓값</p></blockquote><h3 id="dasi-puleoboassseubnida"><a href="#dasi-puleoboassseubnida" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#다시-풀어보았습니다"></a> 다시 풀어보았습니다.</h3><p>(1) N*M의 보드가 주어집니다. (3 ≤ N, M ≤ 8)의 범위를 갖습니다.</p><p>바이러스의 확산의 벽을 3개를 세워야합니다.<br>맵에서 벽을 3개를 세우는 경우를 어떻게 찾아낼까가 가장 핵심이 되는 문제였습니다. 저 같은 경우는 하나의 리스트에 x,y좌표를 담고있는 Graph클래스를 하나 선언하여 ‘0’ 즉, 빈칸의 좌표값을 모두 리스트에 담아주었습니다. 그리고나서 DFS 백트래킹을 통하여 N개(모든 빈칸의 리스트)중에서 M개(3개를 선택) 하는 경우의 순열의 값들을 모두 구해주게 하였습니다. 예를 들어, 안전영역리스트에 1,2,3,4,5 가 주어졌다고 가정하면 여기서 벽을 세우는 경우는 어떻게 될까요? (1,2,3), (1,2,4),(1,2,5),(2,3,4) …. 등 다양한 경우의수가 나올 수 있게됩니다. 이 경우를 모두 체크해나갈 수 있습니다. 그리고 주의해야할 경우는 벽을 3개 모두세웠을 경우 현재 맵의 정보들이 변화하면 안되기때문에 각 경우의수마다 새로 배열들을 copy하여 갱신시켜서 매 경우를 체크해나가야합니다.</p><p>(2) 0:빈칸, 1:벽, 2:바이러스 벽이 세워지고 바이러스가 상하좌우로 퍼져나가게 합니다.</p><p>(3) 최종적인 프로세스는 벽을 3개 세우는 모든 경우의 수를 찾아주고 각 경우마다 벽을 세우고나서 바이러스를 퍼트립니다. 그리고 안전영역에 있는 최댓값 갱신해나가면 정답을 노출해낼 수 있습니다. 전반적으로 한번 풀어봤던 경험이 있었던지라 30분정도 소요되었던 문제였습니다.</p><p>(4) 순열과 조합을 각각 돌려서 테스트해보았더니 큰 차이를 얻을 수 있었습니다.<br>￼<br>약 공간복잡도 메모리차이가 2배이상차이가나고, 시간복잡도 차이에서는 1.5배이상 차이가 나게되었습니다. 확실히 순열로 돌리게 될 경우 상당히 많은 경우의 수가 나타난다는것을 알 수 있었습니다.</p><p>제출 번호    아이디    문제    결과    메모리    시간    언어    코드 길이<br>28575832    kgh940525    14502    맞았습니다!!    149348    636    Java 8 / 수정    5431<br>28575134    kgh940525    14502    맞았습니다!!    303684    1000    Java 8 / 수정    4086</p><h1 id="puli-kodeu"><a href="#puli-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이-코드"></a> 풀이 코드</h1><blockquote><p>JAVA 재풀이 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소<span class="title">_14502</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copyMap;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;       <span class="comment">// 북동남서</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheckSafe;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] isCheckVirus;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; safeAreaList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; safeAreaSelectList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        answer = <span class="number">0</span>;</span><br><span class="line">        safeAreaList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        safeAreaSelectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safeAreaList.add(<span class="keyword">new</span> Graph(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isCheckSafe = <span class="keyword">new</span> <span class="keyword">boolean</span>[safeAreaList.size()];</span><br><span class="line">        dfs_combination(<span class="number">0</span>,<span class="number">0</span>);                    <span class="comment">//조합으로 풀기</span></span><br><span class="line">        <span class="comment">// dfs_permutation(0);                   //순열으로 돌리기</span></span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs_combination</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 벽을 세개 다 세운 경우</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map copy</span></span><br><span class="line">            copyMap = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">            isCheckVirus = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    copyMap[i][j] = map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 복사된 맵에 벽 세우기</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; safeAreaList.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(isCheckSafe[i])&#123;</span><br><span class="line">                    <span class="keyword">int</span> safeX = safeAreaList.get(i).x;</span><br><span class="line">                    <span class="keyword">int</span> safeY = safeAreaList.get(i).y;</span><br><span class="line">                    copyMap[safeX][safeY] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 바이러스 전파</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(copyMap[i][j] == <span class="number">2</span> &amp;&amp; !isCheckVirus[i][j]) &#123;</span><br><span class="line">                        virusSpread(i,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 안전영역 구하기</span></span><br><span class="line">            getSafeAreaSize();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;safeAreaList.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isCheckSafe[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfs_combination(i,cnt+<span class="number">1</span>);</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs_permutation</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 벽을 세개 다 세운 경우</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map copy</span></span><br><span class="line">            copyMap = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">            isCheckVirus = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    copyMap[i][j] = map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 복사된 맵에 벽 세우기</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; safeAreaSelectList.size(); i++) &#123;</span><br><span class="line">                Graph graph = safeAreaSelectList.get(i);</span><br><span class="line">                <span class="keyword">int</span> x = graph.x;</span><br><span class="line">                <span class="keyword">int</span> y = graph.y;</span><br><span class="line">                copyMap[x][y] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 바이러스 전파</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(copyMap[i][j] == <span class="number">2</span> &amp;&amp; !isCheckVirus[i][j]) &#123;</span><br><span class="line">                        virusSpread(i,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 안전영역 구하기</span></span><br><span class="line">            getSafeAreaSize();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;safeAreaList.size(); i++)&#123;</span><br><span class="line">            Graph graph = safeAreaList.get(i);</span><br><span class="line">            <span class="keyword">if</span>(isCheckSafe[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">true</span>;</span><br><span class="line">            safeAreaSelectList.add(<span class="keyword">new</span> Graph(graph.x, graph.y));</span><br><span class="line">            dfs_permutation(cnt+<span class="number">1</span>);</span><br><span class="line">            safeAreaSelectList.remove(safeAreaSelectList.size()-<span class="number">1</span>);</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSafeAreaSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> areaSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copyMap[i][j] == <span class="number">0</span>) areaSize++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = Math.max(answer, areaSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpread</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Graph&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(<span class="keyword">new</span> Graph(x,y));</span><br><span class="line">        isCheckVirus[x][y] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            Graph graph = q.remove();</span><br><span class="line">            <span class="keyword">int</span> dx = graph.x;</span><br><span class="line">            <span class="keyword">int</span> dy = graph.y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(isCheckRange(mx, my)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(copyMap[mx][my] == <span class="number">0</span> &amp;&amp; !isCheckVirus[mx][my])&#123;</span><br><span class="line">                    copyMap[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    isCheckVirus[mx][my] = <span class="keyword">true</span>;</span><br><span class="line">                    q.add(<span class="keyword">new</span> Graph(mx,my));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>C++</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  연구소14502.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/07.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> copy_map[MAX][MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; empty;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> empty_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> check[MAX*MAX];     <span class="comment">// size를 MAX * MAX를 해준이유는 빈칸이 N*M까지 나올 수 있기 때문입니다.</span></span><br><span class="line"><span class="keyword">int</span> visited[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    visited[x][y] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[mx][my] == <span class="number">0</span> &amp;&amp; copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    visited[mx][my] = <span class="number">1</span>;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    q.push(&#123;mx,my&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">        <span class="comment">// 기존의 맵을 변경시키면 안되기때문에 값을 카피시켜줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 벽을 세우기 하나의 경우마다의 벽을 세워야함.</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;empty_size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = empty[i].first;</span><br><span class="line">                <span class="keyword">int</span> y = empty[i].second;</span><br><span class="line">                copy_map[x][y] = <span class="number">1</span>;</span><br><span class="line">                count +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// virus 전염시키기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;virus.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = virus[i].first;</span><br><span class="line">            <span class="keyword">int</span> y = virus[i].second;</span><br><span class="line">            bfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> safe_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe_size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans &lt; safe_size)&#123;</span><br><span class="line">            ans = safe_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 조합의 형식으로 3개가 뽑힐때까지 뽑았다가 종료되는 시점에 그 값을 다시 false로 만들고 다시 조합의 경우를 뽑습니다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;empty_size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 된다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 0: 빈칸</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                empty.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2: 바이러스</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                virus.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</span></span><br><span class="line">    empty_size = empty.<span class="built_in">size</span>();</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JAVA</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copy_map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Dot&gt; virusList = <span class="keyword">new</span> ArrayList&lt;Dot&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir =&#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wallDfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map Copy</span></span><br><span class="line">            copyMapFunc();</span><br><span class="line">            <span class="comment">// virus spread</span></span><br><span class="line">            <span class="keyword">for</span>(Dot dot : virusList)&#123;</span><br><span class="line">                virusSpreadBfs(dot.x, dot.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// safe Area</span></span><br><span class="line">            ans = Math.max(ans, getSafeArea());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n * m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i / m;</span><br><span class="line">            <span class="keyword">int</span> y = i % m;</span><br><span class="line">            <span class="keyword">if</span>(map[x][y] == <span class="number">1</span> || map[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            wallDfs(i+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">            map[x][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 맵 카</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyMapFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 바이러스 퍼트리기</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpreadBfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    virusSpreadBfs(mx,my);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 안전영역 개수 체크</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSafeArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> safe = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> safe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    4 6</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">    1 0 0 0 0 2</span></span><br><span class="line"><span class="comment">    1 1 1 0 0 2</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        copy_map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                    virusList.add(<span class="keyword">new</span> Dot(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        wallDfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 테트로미노 14500</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210420-tetromino/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210420-tetromino/</id>
    <published>2021-04-20T12:53:11.000Z</published>
    <updated>2021-04-20T12:56:31.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500"><a href="#samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-감시-14500"></a> <a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 감시 14500</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><blockquote><p>테트로미노의 모든 경우의 수를 구해기 위해서는 ?</p></blockquote><p>(1)고려해야할 사항: 좌우 반전, 90도 회전, 반전된 것들중에 또 다시 뒤집기, 90도 회전된 것들중에 다시 뒤집기<br>(2) 어떻게 이것들을 최댓값을 처리할지가 가장 중요한 문제입니다.<br>테트로미노로 만들수 있는 경우의수는 총 19개가 만들어집니다.</p><p>하나의 예를 들어보면, n=5, m=5의 직사각형의 보드가 있다고 가정을 하겠습니다.</p><blockquote><p>해당 도형:<br>ㅡㅡ<br>ㅡㅡ</p></blockquote><blockquote><p>보드:<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ</p></blockquote><blockquote><p>가로의 측면:</p></blockquote><p>가로의 측면으로 봤을때 m의 범위까지 만들수 있는 도형은 3개를 만들 수 있습니다.<br>따라서 m의 범위에 만족하는 j개수를 찾아야하는데 2,3,4의 경우가 됩니다. 이것이 어떤 말이냐하면 j의값을 몇으로 둬야지 해당 m의 범위까지 만족할 수 있는지를 찾아낼 수 있습니다.<br>j+2 &lt; m 의 경우를 살펴보면, 0+2 &lt; 5, 1+2 &lt; 5, 2+2 &lt; 5의 경우가 되니까 해당 가로로 되는 경우의 수를 찾을 수 있게 됩니다.</p><blockquote><p>세로의측면</p></blockquote><p>세로의 측면에서 봤을때 n의 범위까지 만들 수 있는 도형은 4개가 됩니다.<br>따라서 n의 범위를 만족하는 i의 개수를 찾아야하는데 1,2,3,4의 경우를 들 수 있습니다.<br>i+1 &lt; n 의 경우를 살펴보면 0+1 &lt; 5, 1+1 &lt; 5, 2+1 &lt; 5, 3+1 &lt; 5 의 총 4가지 경우가 발생합니다.</p><p>이제 이렇게 모든 19개의 경우를 찾아준 후 Math.max함수를 사용하여 해당되는 범위를 구해줄 수 있습니다.<br>위의 예시를 구해보면 Math.max(비교값, board[i][j+1] + board[i][j+2] + board[i+1][j] + board[i+1][j+1]) 의 경우로 해당 값들을 갱신해 나갈 수 있습니다.</p><p>따라서 이것을 점화식으로 해당되는 도형마다 모든 경우의 수를 찾아주게 되면 완전탐색을 진행할 수 있습니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 테트로미노<span class="title">_14500</span>번 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//==입력==//</span></span><br><span class="line">        <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//==테트로미노 경우의수 찾기==//</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="comment">/** 1</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">3</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i][j+<span class="number">1</span>]+map[i][j+<span class="number">2</span>]+map[i][j+<span class="number">3</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 2</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">3</span> &lt; n)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">2</span>][j]+map[i+<span class="number">3</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 3</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 4</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>+i &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">2</span>][j] + map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 5</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; <span class="number">2</span>+j &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i][j+<span class="number">2</span>] + map[i+<span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 6</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>+i &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j+<span class="number">1</span>] + map[i+<span class="number">2</span>][j] + map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 7</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>+i &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">2</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 8</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">1</span>][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 9</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j+<span class="number">1</span>] + map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 10</span></span><br><span class="line"><span class="comment">                   ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m) &#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j + <span class="number">1</span>] + map[i][j + <span class="number">2</span>] + map[i + <span class="number">1</span>][j] + map[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 11</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 12</span></span><br><span class="line"><span class="comment">                    ㅡ</span></span><br><span class="line"><span class="comment">                 ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 13</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n &amp;&amp; j+<span class="number">2</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer , map[i][j]+map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 14</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 15</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                | ㅡ</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span>&lt;n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 16</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i][j+<span class="number">1</span>]+map[i][j+<span class="number">2</span>]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 17</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 ㅡ |</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span>&lt;n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer,map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 18</span></span><br><span class="line"><span class="comment">                 * ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 *      |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i][j+<span class="number">1</span>]+map[i][j+<span class="number">2</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 19</span></span><br><span class="line"><span class="comment">                 *      |</span></span><br><span class="line"><span class="comment">                 * ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">2</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500&quot; class=&quot;header-anchor
      
    
    </summary>
    
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 감시 15683</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210420-watch/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210420-watch/</id>
    <published>2021-04-20T10:08:14.000Z</published>
    <updated>2021-04-21T05:36:05.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 감시 15683</a></p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>문제를 살펴보기전에 알아보아야할 것은 내가 구현하는 것들이 올바른 시간내에 들어오는지를 확인해야 합니다.</p><ul><li>최악의 경우 카메라는 총 8대이기때문에 4^8 = 65536경우가 나오게 된다.</li><li>사무실의 최대 크기 8 * 8에서 감시못하는 공간을 카운트하면 65536 * 64 = 약 400만이</li></ul><ol><li>CCTV를 담아줄 클래스 변수를 하나선언합니다.(좌표X,Y,CCTV번호, 현재방향)</li><li>입력시 1~5사이의 CCTV가 입력받게 되면 해당되는 값들을 하나의 리스트에 담아줍니다.</li><li>DFS를 수행합니다.</li></ol><ul><li>종료조건: 해당 리스트의 사이즈만큼 선택이 되면 종료조건이됩니다.<br>해당 맵이 변경되면 안되므로, 모든값들을 copyMap에 담아줍니다.<br>모든 리스트의 값들을 뺴내면서 현재점에서 부터 모든값들을 맵에 칠해주게 됩니다. CCTV감시영역을 퍼트리는 과정</li></ul><ul><li>방향 체크<br>현재 0번째 방향 (dir+1) % 4(방향의 개수로)로 체크가 가능합니다.<br>현재 1번째 방향 (dir+2) % 4 ……<br>현재 3번째 방향 (dir+3) % 4….</li></ul><p>CCTV 값의 타입 1,2,3,4,5에 따라 호출조건을 달리해줍니다. 모든경우의 수를 찾아서 진행합니다.</p><p>만약 현재 맵의 값이 6이면 종료시켜줍니다. 벽을 만난것과 같으므로 더이상 칠하는 행동을 멈추는 과정입니다.</p><blockquote><p>방향 갱신, 방향 범위 체크</p></blockquote><p>while(mx &gt;= 0 &amp;&amp; mx &lt; n &amp;&amp; my &gt;= 0 &amp;&amp; my &lt; m) 의 조건에 맞을때 까지만 반복문을 진행해 나갑니다.<br>그리고 해당 현재 방향에 따라 계속해서<br>mx += dir[currdir][0]<br>my += dir[currdir][1]<br>의 형식대로 값을 갱신해 나갑니다.</p><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 감시<span class="title">_15683</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;       <span class="comment">// 동서남북</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;CCTV&gt; cctvList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copyMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        copyMap = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        cctvList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] &gt;= <span class="number">1</span> &amp;&amp; map[i][j] &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">                    cctvList.add(<span class="keyword">new</span> CCTV(i,j,map[i][j],<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"answer = "</span> + answer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isCheck</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> currDir)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mx = dx;</span><br><span class="line">        <span class="keyword">int</span> my = dy;</span><br><span class="line">        <span class="keyword">int</span> point = map[dx][dy];</span><br><span class="line">        <span class="keyword">while</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(copyMap[mx][my] == <span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            copyMap[mx][my] = point;</span><br><span class="line">            mx += dir[currDir][<span class="number">0</span>];</span><br><span class="line">            my += dir[currDir][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//== 모든 cctv를 선택한 경우 ==//</span></span><br><span class="line">        <span class="keyword">if</span>(idx == cctvList.size())&#123;</span><br><span class="line">            copyMap = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    copyMap[i][j] = map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(CCTV cctv : cctvList)&#123;</span><br><span class="line">                <span class="keyword">int</span> cctvType = cctv.type;</span><br><span class="line">                <span class="keyword">int</span> cctvDir = cctv.dir;</span><br><span class="line">                <span class="keyword">int</span> dx = cctv.x;</span><br><span class="line">                <span class="keyword">int</span> dy = cctv.y;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (cctvType == <span class="number">1</span>) &#123;</span><br><span class="line">                    isCheck(dx,dy,cctvDir);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cctvType == <span class="number">2</span>) &#123;</span><br><span class="line">                    isCheck(dx,dy,cctvDir);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">2</span>)%<span class="number">4</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cctvType == <span class="number">3</span>) &#123;</span><br><span class="line">                    isCheck(dx,dy,cctvDir);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">1</span>)%<span class="number">4</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cctvType == <span class="number">4</span>) &#123;</span><br><span class="line">                    isCheck(dx,dy,cctvDir);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">1</span>)%<span class="number">4</span>);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">2</span>)%<span class="number">4</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cctvType == <span class="number">5</span>) &#123;</span><br><span class="line">                    isCheck(dx,dy,cctvDir);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">1</span>)%<span class="number">4</span>);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">2</span>)%<span class="number">4</span>);</span><br><span class="line">                    isCheck(dx,dy,(cctvDir+<span class="number">3</span>)%<span class="number">4</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            isCheckMinArea(copyMap);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            cctvList.get(idx).dir = i;</span><br><span class="line">            dfs(idx+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isCheckMinArea</span><span class="params">(<span class="keyword">int</span>[][] copyMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copyMap[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    cnt+=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = Math.min(answer, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CCTV</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">int</span> dir;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CCTV</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> type, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">this</span>.dir = dir;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 03 함수</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210329-chapter03-%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210329-chapter03-%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE/</id>
    <published>2021-03-29T10:13:52.000Z</published>
    <updated>2021-03-29T17:16:22.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hamsureul-jal-mandeuneun-beob"><a href="#hamsureul-jal-mandeuneun-beob" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#함수를-잘-만드는-법"></a> 함수를 잘 만드는 법</h1><p>길이가 길 뿔만 아니라 중복된 코드에, 괴상한 문자열에, 낯설고 모호한 자료 유형과 API가 많다. 함수를 읽고 이해하기 쉽게 하기위해서는 무엇이 고려되야 할까요?</p><h1 id="jagge-mandeuleora"><a href="#jagge-mandeuleora" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#작게-만들어라"></a> 작게 만들어라!</h1><p>함수를 만드는 첫째 규칙은 <code>작게</code>이다. 함수를 만드는 두번째 규칙은 <code>더 작게</code>이다.</p><p>자, 다음과 같은 코드가 주어졌는데 이것을 어떻게 짧게 만들 수 있을까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">( PageData pageData, <span class="keyword">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isTestPage = pageData.hasAttribute(<span class="string">"Test"</span>); </span><br><span class="line">    <span class="keyword">if</span> (isTestPage) &#123;</span><br><span class="line">        WikiPage testPage = pageData.getWikiPage(); </span><br><span class="line">        StringBuffer newPageContent = <span class="keyword">new</span> StringBuffer(); </span><br><span class="line">        includeSetupPages(testPage, newPageContent, isSuite); </span><br><span class="line">        newPageContent.append(pageData.getContent()); </span><br><span class="line">        includeTeardownPages(testPage, newPageContent, isSuite); </span><br><span class="line">        pageData.setContent(newPageContent.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pageData.getHtml(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>한 함수당 3-5줄 이내로 줄이는것이 좋습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">( PageData pageData, <span class="keyword">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">   <span class="keyword">if</span> (isTestPage(pageData)) </span><br><span class="line">       includeSetupAndTeardownPages(pageData, isSuite); </span><br><span class="line">   <span class="keyword">return</span> pageData.getHtml();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="beulroggwa-deulyeosseugi"><a href="#beulroggwa-deulyeosseugi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#블록과-들여쓰기"></a> 블록과 들여쓰기</h2><p>if문 else while문 등에 들어가는 블록은 한줄이여야 한다는 의미입니다. 중첩 구조가 생길만큼 함수가 커져서는 안 된다는 뜻이며 들여쓰기 수준은 1,2단을 넘어서면 안됩니다.</p><h1 id="hangajiman-haera"><a href="#hangajiman-haera" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#한가지만-해라"></a> 한가지만 해라!</h1><ul><li>함수는 한 가지를 해야한다. 그 한가지를 잘 해야한다. 그 한 가지만을 해야한다.</li><li>지정된 함수 이름 아래에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한 가지 작업만 한다.</li><li>반대로, 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.</li></ul><h1 id="hamsudang-cusanghwa-sujuneun-hanaro"><a href="#hamsudang-cusanghwa-sujuneun-hanaro" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#함수당-추상화-수준은-하나로"></a> 함수당 추상화 수준은 하나로!</h1><p>함수가 확실히 <code>한 가지</code>만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 합니다.</p><blockquote><p>추상화 수준이 높은 경우</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getHTMl();</span><br><span class="line">String pagePathName = PathParser.render(pagePath);</span><br><span class="line">Object.append(<span class="string">"\n"</span>);</span><br></pre></td></tr></table></figure><p>위의 3가지 코드는 추상화 레벨이 다릅니다.</p><ul><li><p>추상화 수준이 매우 높다<br>getHTM()</p></li><li><p>추상화 수준이 높다<br>String pagePathName = PathParser.render(pagePath);</p></li><li><p>추상화 수준이 낮다<br>Object.append(&quot;\n&quot;);</p></li></ul><p>한 함수내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다.<br>개념에 세부 구현체가 추가되면 깨진 유리창 효과로 함수가 점점 비대해지며 심각한 레거시로 발전한다.</p><h2 id="wieseo-araero-kodeu-ilggi-naeryeogagi-gyucig"><a href="#wieseo-araero-kodeu-ilggi-naeryeogagi-gyucig" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#위에서-아래로-코드-읽기-내려가기-규칙"></a> 위에서 아래로 코드 읽기: 내려가기 규칙</h2><p>코드는 위에서 아래로 이야기처럼 읽혀야 좋다. 한 함수에는 추상화 수준이 한 단계 낮은 함수가 온다.</p><h2 id="switch-case"><a href="#switch-case" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#switch-case"></a> Switch case</h2><p>switch문은 작게 만들기 어렵다. case 분기가 단 두 개인 switch문도 내 취향에는 너무 길며, 단일 블록이나 함수를 선호한다. 또한 한 가지 작업만 하는 switch문도 만들기 어렵다<br>다형성을 이용하여 switch 문을 저차원 클래스에 숨기고 드러내지 않는다.</p><p>직원 유형에 따라 다른 값 계산해 반환하는 함수</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">calculatePay</span><span class="params">(Employee e)</span> <span class="keyword">throws</span> InvalidEmployeeType </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.type) &#123; </span><br><span class="line">        <span class="keyword">case</span> COMMISSIONED:</span><br><span class="line">            <span class="keyword">return</span> calculateCommissionedPay(e); </span><br><span class="line">        <span class="keyword">case</span> HOURLY:</span><br><span class="line">            <span class="keyword">return</span> calculateHourlyPay(e); </span><br><span class="line">        <span class="keyword">case</span> SALARIED:</span><br><span class="line">            <span class="keyword">return</span> calculateSalariedPay(e); </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidEmployeeType(e.type); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같은 함수의 문제점은 무엇일까요?</p><ul><li>함수가 길다.</li><li>한 가지 작업만 수행하지 않는다.</li><li>SRP 를 위반한다. 코드를 변경할 이유가 여럿이기 때문이다.</li><li>OCP 를 위반한다. 새 직원 유형을 추가할 때마다 코드를 변경해야 한다.</li><li>위 함수와 구조가 동일한 함수가 무한정 존재한다. isPayday(Employee e, Date date); 같은 경우</li></ul><p>이것을 어떻게 유연하게 바꿀 수 있을까요?<br>switch 문을 추상 팩토리에 꽁꽁 숨긴다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isPayday</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Money <span class="title">calculatePay</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deliverPay</span><span class="params">(Money pay)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">makeEmployee</span><span class="params">(EmployeeRecord r)</span> <span class="keyword">throws</span> InvalidEmployeeType</span>; </span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeFactoryImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">makeEmployee</span><span class="params">(EmployeeRecord r)</span> <span class="keyword">throws</span> InvalidEmployeeType </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (r.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> COMMISSIONED:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CommissionedEmployee(r) ;</span><br><span class="line">            <span class="keyword">case</span> HOURLY:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HourlyEmployee(r);</span><br><span class="line">            <span class="keyword">case</span> SALARIED:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SalariedEmploye(r);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidEmployeeType(r.type);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>핵심은 로직이 퍼지지 않게 하며 일관성을 유지시키는 것이다</li><li>사용하는 곳에서 구현하는 것이 아닌 구현된 팩토리 메서드를 사용하게 하는 것이다</li><li>상속관계로 숨긴 후에는 절대로 다른 코드에 노출하지 않는다.</li></ul><h1 id="seosuljeogin-ireumeul-sayonghara"><a href="#seosuljeogin-ireumeul-sayonghara" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#서술적인-이름을-사용하라"></a> 서술적인 이름을 사용하라!</h1><p>좋은 이름이 주는 가치는 아무리 강조해도 지나치지 않는다. 함수 이름을 정할때는 여러 단어가 쉽게 읽히는 명명법을 사용한다. 그 다음에 여러 단어를 사용해 함수 기능을 잘 표현하는 이름을 선택한다. 서술적인 이름을 사용하면 개발자 머릿속에서도 설계가 뚜렷해지므로 코드를 개선하기 쉬워진다.</p><p>좋은 이름을 고른 후 코드를 더 좋게 재구성하는 사례도 없지 않다. 이름을 붙일때는 일관성이 있어야한다. 모듈내에서 함수 이름은 같은 문구, 명사, 동사를 사용한다.</p><h1 id="hamsu-insu"><a href="#hamsu-insu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#함수-인수"></a> 함수 인수</h1><p>함수에서 이상적인 인수의 개수는 0개다. 가능한 다항은 피한다. 인수는 매우 어렵다. 인수는 개념을 이해하기 어렵게 만든것이다. 이것이 내가 우리 예제에서 인수를 거의 없앤 이유이다. 갖가지 인수 조합으로 함수를 검증한다고 하면 엄청나게 많은 조합의 가지가 생긴다.</p><h2 id="manhi-sseuneun-danhang-hyeongsig"><a href="#manhi-sseuneun-danhang-hyeongsig" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#많이-쓰는-단항-형식"></a> 많이 쓰는 단항 형식</h2><blockquote><p>인수에 질문을 던지는 경우</p></blockquote><p>boolean fileExists(“MyFile”);</p><blockquote><p>인수를 뭔가로 변환해 결과를 변환하는 경우</p></blockquote><p>InputStream fileOpen(“MyFile”);</p><blockquote><p>이벤트 함수일 경우 이벤트라는 사실이 코드에 명확하게 드러나야 한다.</p></blockquote><p>passwordAttemptFailedNtimes(int attempts);</p><h2 id="peulraegeu-insu"><a href="#peulraegeu-insu" class="header-anchor">6.2. </a><a class="markdownIt-Anchor" href="#플래그-인수"></a> 플래그 인수</h2><p>함수를 넘길때 플래그 인수를 넣지마라, 함수에 여러가지 조건을 걸겠다는 의미와 같은 의미다.</p><h2 id="ihang-hamsu"><a href="#ihang-hamsu" class="header-anchor">6.3. </a><a class="markdownIt-Anchor" href="#이항-함수"></a> 이항 함수</h2><p>인수가 2개인 함수는 인수가 1개인 함수보다 이해하기 어렵다.<br>이항함수가 적절한 경우는 좌표 <code>Point p = new Point(0,0)</code>가 있다.</p><h2 id="samhang-hamsu"><a href="#samhang-hamsu" class="header-anchor">6.4. </a><a class="markdownIt-Anchor" href="#삼항-함수"></a> 삼항 함수</h2><p>인수가 3개인 함수는 인수가 2개인 함수보다 훨씬 더 이해하기 어렵다. 삼항 함수를 만들때는 신중히 고려해야한다.</p><h2 id="insu-gaegce"><a href="#insu-gaegce" class="header-anchor">6.5. </a><a class="markdownIt-Anchor" href="#인수-객체"></a> 인수 객체</h2><p>인수가 2-3개 필요하다면 독자적인 크래스 변수로 선언할 가능성을 짚어본다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, dobule radius)</span></span></span><br><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(Point center, <span class="keyword">double</span> radius)</span></span></span><br></pre></td></tr></table></figure><h2 id="insu-mogrog"><a href="#insu-mogrog" class="header-anchor">6.6. </a><a class="markdownIt-Anchor" href="#인수-목록"></a> 인수 목록</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.format(<span class="string">"%s worked %.2f hours."</span>, name, hours);</span><br></pre></td></tr></table></figure><p>가변 인수를 모두 동등하게 취급하면 List형 인수 하나로 취급할 수 있다.이로인해 사실상 이항 함수가 된다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(String format, Object... args)</span></span></span><br></pre></td></tr></table></figure><p>가변 인수를 취하는 모든 함수에 같은 원리가 적용된다.</p><h2 id="dongsawa-kiweodeu"><a href="#dongsawa-kiweodeu" class="header-anchor">6.7. </a><a class="markdownIt-Anchor" href="#동사와-키워드"></a> 동사와 키워드</h2><p>단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writeField(name);</span><br></pre></td></tr></table></figure><p>함수이름에 키워드(인수 이름)을 추가하면 인수 순서를 기억할 필요가 없어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assertExpectedEqualsActual(expected, actual);</span><br></pre></td></tr></table></figure><h1 id="busu-hyogwareul-ileukiji-mara"><a href="#busu-hyogwareul-ileukiji-mara" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#부수-효과를-일으키지-마라"></a> 부수 효과를 일으키지 마라!</h1><p>부수효과는 거짓말이다. 때로는 예상치 못하게 클래스 변수를 수정한다. 때로는 함수로 넘어온 이눗나 시스템 전역 변수를 수정한다.</p><blockquote><p>부수효과</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cryptographer cryptographer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPassword</span><span class="params">(String userName, String password)</span> </span>&#123; </span><br><span class="line">        User user = UserGateway.findByName(userName);</span><br><span class="line">        <span class="keyword">if</span> (user != User.NULL) &#123;</span><br><span class="line">            String codedPhrase = user.getPhraseEncodedByPassword(); </span><br><span class="line">            String phrase = cryptographer.decrypt(codedPhrase, password); </span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"Valid Password"</span>.equals(phrase)) &#123;</span><br><span class="line">                Session.initialize();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부수효과는 시간적인 결합을 초래한다. 특히, 부수 효과로 숨겨진 경우에는 더더욱 혼란이 커진다. Session.initialize() 는 함수명과 맞지 않는 부수 효과이다. 이름 그대로 암호를 확인한다.</p><h2 id="culryeoginsu"><a href="#culryeoginsu" class="header-anchor">7.1. </a><a class="markdownIt-Anchor" href="#출력인수"></a> 출력인수</h2><p>일반적으로 출력인수는 피해야한다. 함수에서 상태를 변경해야 한다면 함수가 속한 객체 상태를 변경하는 방식을 취한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendFooter</span><span class="params">(StringBuffer report)</span></span></span><br><span class="line"><span class="function">report.<span class="title">appendFooter</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="myeongryeonggwa-johoereul-bunrihara"><a href="#myeongryeonggwa-johoereul-bunrihara" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#명령과-조회를-분리하라"></a> 명령과 조회를 분리하라</h1><p>함수는 뭔가를 수행하거나 뭔가를 답하거나 둘중 하나만 해야한다.<br>set 이라는 함수가 굉장히 모호하다. setAndCheckIfExists 라고 하는게 훨씬 좋지만, 명령과 조회를 분리해 애초에 혼란이 일어나지 않도록 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String attribute, String value)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(set(<span class="string">"username"</span>, <span class="string">"unclebob"</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (attributeExists(<span class="string">"username"</span>)) &#123;</span><br><span class="line">  setAttribute(<span class="string">"username"</span>, <span class="string">"unclebob"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떤 의미를 하는지 의미가 모호하다.</p><h1 id="oryu-kodeuboda-yeoereul-sayonghara"><a href="#oryu-kodeuboda-yeoereul-sayonghara" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#오류-코드보다-예외를-사용하라"></a> 오류 코드보다 예외를 사용하라!</h1><p>명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (deletePage(page) === E_OK)</span><br></pre></td></tr></table></figure><p>상태 코드의 종속을 유발하고 중첩되는 if문과 여러 상태코드의 조합이 이루어지게 됩니다.<br>유지보수에 치명적이고 비즈니스 로직을 한 눈에 알기 어렵다. 또한 오류 코드를 만났을 경우 바로 해결해야만 하는 문제가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (deletePage(page) == E_OK) &#123;</span><br><span class="line">    <span class="keyword">if</span> (registry.deleteReference(page.name) == E_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (configKeys.deleteKey(page.name.makeKey()) == E_OK) &#123;</span><br><span class="line">            logger.log(<span class="string">"page deleted"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.log(<span class="string">"configKey not deleted"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(<span class="string">"deleteReference from registry failed"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.log(<span class="string">"delete failed"</span>); <span class="keyword">return</span> E_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정상 동작과 오류 처리 동작이 뒤섞이므로 굉장히 모호해진다. 오류 코드 대신 예외를 사용 하면 오류 처리 코드가 원래 코드에서 분리되므로 코드가 깔끔해진다.</p><h2 id="try-catch-beulrog-bbobanaegi"><a href="#try-catch-beulrog-bbobanaegi" class="header-anchor">9.1. </a><a class="markdownIt-Anchor" href="#trycatch-블록-뽑아내기"></a> Try/Catch 블록 뽑아내기</h2><p>Try/Catch 블록은 추하고 코드 구조에 혼란을 일으키며 정상동작과 오류 처리 동작을 뒤 섞는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        deletePageAndAllReferences(page);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          logError(e);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deletePageAndAllReferences</span><span class="params">(Page page)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    deletePage(page);</span><br><span class="line">    registry.deleteReference(page.name); </span><br><span class="line">    configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logError</span><span class="params">(Exception e)</span> </span>&#123; </span><br><span class="line">    logger.log(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정상 동작과 오류 처리 동작을 분리하면 코드를 이해하고 수정하기 쉬워진다.</p><h2 id="oryu-ceorido-han-gaji-jageobida"><a href="#oryu-ceorido-han-gaji-jageobida" class="header-anchor">9.2. </a><a class="markdownIt-Anchor" href="#오류-처리도-한-가지-작업이다"></a> 오류 처리도 한 가지 작업이다.</h2><p>함수는 <code>한 가지</code> 작업만 해야한다. 오류 처리도 <code>한 가지</code> 작업에 속한다. 즉, 함수에 키워드 try가 있다면 함수는 try문으로 시작해 catch/finally문으로 끝나야한다는 말이다.</p><h2 id="error-java-yijonseong-jaseog"><a href="#error-java-yijonseong-jaseog" class="header-anchor">9.3. </a><a class="markdownIt-Anchor" href="#errorjava-의존성-자석"></a> Error.java 의존성 자석</h2><p>오류 코드를 반환한다는 이야기는 클래스든 열거형 변수든 어디선가 오류 코드를 정의한다는 뜻이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Error &#123; </span><br><span class="line">    OK,</span><br><span class="line">    INVALID,</span><br><span class="line">    NO_SUCH,</span><br><span class="line">    LOCKED,</span><br><span class="line">    OUT_OF_RESOURCES,     </span><br><span class="line">    WAITING_FOR_EVENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>오류를 처리하는 곳곳에서 오류코드를 사용하게 되면 enum class를 쓰게 되는데 이런 클래스는 의존성 자석이 된다. 재컴파일 및 재배치 등 새 오류코드를 추가하거나 변경할 때 코스트가 많이 필요하다.그러므로 예외를 사용하는 것이 더 안전하다.</p><h1 id="gujojeog-peurogeuraeming"><a href="#gujojeog-peurogeuraeming" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#구조적-프로그래밍"></a> 구조적 프로그래밍</h1><p>함수는 return문이 하나여야한다. 루프 안에서 break나 continue를 사용해선 안되며 goto는 절대로 절대로 안된다.<br>함수를 작게 만든다면 return, break, continue를 여러 차례 사용해도 괜찮다. goto는 피해라</p><h1 id="hamsureul-eoddeohge-jjajyo"><a href="#hamsureul-eoddeohge-jjajyo" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#함수를-어떻게-짜죠"></a> 함수를 어떻게 짜죠?</h1><ol><li>서투른 코드를 작성한다.</li><li>이러한 코드에도 단위 테스트 케이스를 만든다.</li><li>코드를 다듬고 함수를 만들고 이름을 변경한다.</li><li>위의 과정에서 항상 단위 테스트를 통과해야한다.</li><li>반복을 진행한다.</li></ol><h1 id="gyeolron"><a href="#gyeolron" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1><p>모든 시스템은 특정 응용 분야 시스템을 기술할 목적으로 프로그래머가 설계한 도메인 특화 언어로 만들어진다. 함수는 그 언어에서 동사며, 클래스는 명사다. 프로그래밍 기술은 언제나 언어 설계의 기술이다. 결론적으로 작성한 함수가 분명하고 정확한 언어로 되어 있을 때 이야기를 풀어가기가 쉬워진다는 사실을 기억하라.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hamsureul-jal-mandeuneun-beob&quot;&gt;&lt;a href=&quot;#hamsureul-jal-mandeuneun-beob&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="함수" scheme="http://gwanhyeon.github.io/tags/%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 02 의미있는이름</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210323-chapter02-%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94%EC%9D%B4%EB%A6%84/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210323-chapter02-%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94%EC%9D%B4%EB%A6%84/</id>
    <published>2021-03-23T01:33:06.000Z</published>
    <updated>2021-03-23T03:42:44.725Z</updated>
    
    <content type="html"><![CDATA[<p>소프트웨어 이름은 변수, 함수, 인수, 클래스, 패키지, 소스코드, 디렉터리, jar, war 등 여러 이름을 붙입니다. 이번 장에서는 이름을 잘 짓는 규칙을 알아보도록 하겠습니다.</p><h1 id="yidoreul-bunmyeonghi-balghyeora"><a href="#yidoreul-bunmyeonghi-balghyeora" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#의도를-분명히-밝혀라"></a> 의도를 분명히 밝혀라</h1><p><strong>의도가 분명하게 이름을 지으라</strong> 라고는 말하기는 쉽지만 생각보다 이름을 짓는것은 쉽지 않다. 좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 시간을 절약하는 시간이 훨씬 큽니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d; <span class="comment">// 경과시간(단위: 날짜)</span></span><br></pre></td></tr></table></figure><p>위의 코드는 변수명 이름을 잘 지은것일까? 라는 의문이 들게됩니다. 위의 코드는 변수명에 아무런 의미도 드러나지 않고 경과시간이나 날짜라는 느낌이 전혀들지 않습니다.</p><blockquote><p>그러면 어떻게 지어야할까요?</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> elaspsedTimeInDays;</span><br><span class="line"><span class="keyword">int</span> daysSinceCreation;</span><br><span class="line"><span class="keyword">int</span> daysSinceModification</span><br><span class="line"><span class="keyword">int</span> fileAgeInDays;</span><br></pre></td></tr></table></figure><p>다음과 같이 의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워집니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getThem()&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; list1 = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] x : theList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[<span class="number">0</span>] == <span class="number">4</span>)&#123;</span><br><span class="line">            list1.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 보면 코드가 하는일을 짐작하기 어렵습니다. 무슨 문제가 있는걸까요? 그렇다고 코드들이 복잡하다는것이 아닙니다.</p><blockquote><p>문제는 무엇일까요?<br>문제는 코드의 단순성이 아니라 코드의 함축성입니다. 다시 말해, 코드 맥락이 코드자체에 명시적으로 드러나있지 않습니다. 위 코드는 암암리에 독자가 다음과 같은 정보를 안다고 가정을 합니다.</p></blockquote><ol><li>theList 무슨값이?</li><li>theList 0번째 값은 무엇때문에?</li><li>값 4는 무엇을 의미하지?</li><li>함수가 반환하는 list1은 무엇이지? 어떻게 사용하지?</li></ol><p>이와 같은 성격이 드러나있지 않습니다.</p><blockquote><p>자 그러면, 이제 지뢰찾기 게임을 만든다는 가정을 해보겠습니다.</p></blockquote><p>theList : 게임판 : gameBoard로 바꾸어보겠습니다. 그러면 0번째값은 칸 상태를 뜻하고, 값 4는 깃발이 꽂힌 상태를 가리킨다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getFlaggedCells()&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] cell : gameBoard)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cell[STATUS_VALUE] == FLAGGED)&#123;</span><br><span class="line">            flaggedCells.add(cell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 변수만 변경해보았는데 단순성은 변하지 않고 들여쓰기도 같고, 코드는 더욱더 명확해졌습니다.<br>Int 배열을 사용하는 대신, 칸을 간단한 클래스로 만들어도 됩니다. isFlagged라는 더 명시적인 함수를 사용하여 상수를 감춰줘도 매우 괜찮은 결과가 될 것입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getFlaggedCells()&#123;</span><br><span class="line">    List&lt;Cell&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Cell cell: gameBoard)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cell.isFlagged)&#123;</span><br><span class="line">            flaggedCells.add(cell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이름만 바꾸어 졌는데도 함수가 하는 일을 이해하기가 쉬워졌습니다. 깨끗한 코드가 주는 강력한 힘입니다.</p><h1 id="geureusdoen-jeongboreul-pihara"><a href="#geureusdoen-jeongboreul-pihara" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#그릇된-정보를-피하라"></a> 그릇된 정보를 피하라</h1><p>널리쓰이는 의미 있는 단어를 다른의미로 사용하면 안됩니다. 예를 들면, hp, aix, sco 변수이름입니다.<br>hypotenuse(빗변) = hp 가 훌륭한 약어일지라도 독자들에게 그릇된 정보를 야기시킬 수 있습니다.<br>List라는 변수는 매우 특수한 의미를 가지고 있다. 여러 계정을 담는 리스트면 accountGroup, buchOfAccounts아니면 Accounts라 명명하는 식으로 처리합니다.</p><blockquote><p>흡사한 이름을 버려라</p></blockquote><p>XYZControllerForEfficientHandlingOfString, XYZControllerForEfficientStorageOfString 이라는 이름을 사용하면 두 단어는 매우 겁나 비슷하다.</p><blockquote><p>유사한 표기법</p></blockquote><p>일관성이 떨어지는 표기법은 그릇된 정보이다. 소문자 L은 1처럼보이고 대문자 O는 숫자0처럼 보인다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(O == <span class="number">1</span>)&#123;</span><br><span class="line">    a = <span class="number">01</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    l = <span class="number">01</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>같은 변수를 실무에서 사용하는 코드가 실제로 있을 수 있다. 문서나 구전으로 미래 개발자 모두에게 알려야하는 해결책이고, 이름만 바꾸면 문제가 해결된다.</p><h1 id="yimi-issge-gubunhara"><a href="#yimi-issge-gubunhara" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#의미-있게-구분하라"></a> 의미 있게 구분하라</h1><p>컴파일러나 인터프리터만 통과하려는 생각으로 코드를 구현하는 프로그래머는 스스로 문제를 일으킨다. 컴파일러를 통과할지라도 연속된 숫자를 덧붙이거나 불용어를 추가하는 방식은 적절하지 못한다.</p><p>a1,a2,a3…aN과 같은 의미를 띄는 이름을 지양해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> a1[], <span class="keyword">char</span> a2[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++)&#123;</span><br><span class="line">        a2[i] = a1[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수 인수 이름으로 source와 destination을 사용한다면 코드읽기가 더 쉬워집니다.<br>불용어를 추가한 이름 역시 아무런 정보도 제공하지 못합니다. Product라는 클래스가 있다고 가정하면 다른 클래스를 ProductInfo or ProductData라 부릅니다. Info나 Data는 a, an, the와 마찬가지로 의미가 불분명한 불용어이다.</p><p>접두어를 사용하지말라는것이 아니다. 의미가 분명히 다르다면 사용해도 무방하다.<br>지역변수 a를 사용하고 모든 함수 인수는 the를 사용하면 된다. zork라는 변수가 있다는 이유만으로 theZork라는 이름을 지어서는 안된다는 의미이다.</p><blockquote><p>NameString VS Name 둘중 뭐가 더 나은 코드일까?</p></blockquote><p>Name이 부동소수가 될 가능성이 있는지를 확인하고 그릇된 정보인지를 확인한다.</p><blockquote><p>Customer VS CustomerObject</p></blockquote><p>두개의 클래스가 있다고 가정하면 어떤 차이가 있는것 같아보이는가? 고객 급여 이력을 찾기위해서는 어떤것을 찾아야할까?</p><p>getActiveAccount(), getActiveAccounts, getActiveAccountInfo() 이 프로젝트에 참여한 프로그래머는 어떤 함수를 호출할지 어떻게 알까? 명확한 관례가 없다면 moneyAmount, money 는 구분이 되지 않는다.</p><p>즉, 읽는 사람이 차이를 알도록 이름을 지어라.</p><h1 id="baleumhagi-swiun-ireumeul-sayonghara"><a href="#baleumhagi-swiun-ireumeul-sayonghara" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#발음하기-쉬운-이름을-사용하라"></a> 발음하기 쉬운 이름을 사용하라</h1><p>genymdhms(generate,date,year,month,day,hour,minute,sec-ond) 라고 발음한다는것을 가정해보자.<br>이게 발음하기 쉬운가? 어렵다 무슨말인지도 모르겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DtaRcrd102</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date genymdhms;</span><br><span class="line">    <span class="keyword">private</span> Date modymdhms;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String pszpint = <span class="string">"102"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date generationTimestamp;</span><br><span class="line">    <span class="keyword">private</span> Date modificationTimestamp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String recordId = <span class="string">"102"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="geomsaeghagi-swiun-ireumeul-sayonghara"><a href="#geomsaeghagi-swiun-ireumeul-sayonghara" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#검색하기-쉬운-이름을-사용하라"></a> 검색하기 쉬운 이름을 사용하라</h1><p>문자 하나를 사용하는 이름과 상수는 텍스트 코드에서 쉽게 눈에 띄지 않는다는 문제점이 있습니다.</p><p>MAX_CLASSES_PER_STUDENT는 grep으로 찾기가 쉽지만, 숫자 7은 은근히 까다롭습니다. 7이 들어가는 파일 이름이나 수식이 모두 검색되기 때문입니다.</p><p>마찬가지로 e라는 문자도 변수 이름으로 적합하지 못합니다. 검색이 어렵기 때문입니다. e는 영어에서 가장 많이 쓰이는 문자이다.<br><strong>이름 길이는 범위 크기에 비례해야합니다</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">34</span>; j++)&#123;</span><br><span class="line">    s+=(t[j]*<span class="number">4</span>)/<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> realDaysPerIdeaDay = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> WORK_DAYS_PER_WEEK = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;NUMBER_OF_TASKS; j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> realTaskDays = taskEstimate[j] * realDaysPerIdeaDay;</span><br><span class="line">    <span class="keyword">int</span> realTaskWeeks = (realTaskDays) / WORK_DAYS_PER_WEEK);</span><br><span class="line">    sum += realTaskWeeks;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 WORK_DAYS_PER_WEEK 매직넘버를 사용하지 않으면 이름을 모두 찾은 후 의미를 분석해 원하는 상수를 가려내야하는 번거로움이 발생한다.</p><h1 id="inkodingeul-pihara"><a href="#inkodingeul-pihara" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#인코딩을-피하라"></a> 인코딩을 피하라</h1><p>인코딩 정보는 매우 많으므로 개발자에게 인코딩은 불필요한 정신적 부담입니다. 따라서, 유형이나 범위정보까지 인코딩에 넣으면 해독하기가 어려워진다.</p><h2 id="heonggarisig-pyogibeob"><a href="#heonggarisig-pyogibeob" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#헝가리식-표기법"></a> 헝가리식 표기법</h2><p>변수에 부가 정보를 덧붙여 표기하지 마라.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PhoneNumber phoneString;</span><br></pre></td></tr></table></figure><p>타입 시스템에서 의미없는 정보이다. 예전에는 컴파일러가 타입을 점검하지 않아 헝가리언 표기법으로 타입을 기억할 단서가 필요했다. 하지만 요즘은 컴파일러가 타입을 기억하고 강제한다.</p><h2 id="membeo-byeonsu-jeobdueo"><a href="#membeo-byeonsu-jeobdueo" class="header-anchor">6.2. </a><a class="markdownIt-Anchor" href="#멤버-변수-접두어"></a> 멤버 변수 접두어</h2><p>멤버 변수에 _m이라는 접두어를 붙일 필요가 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String m_dsc;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        m_dsc = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part</span></span>&#123;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사람들은 접두어를 무시하고 이름을 해독하는 방식을 재빨리 익히고 코드를 읽을수록 접두어는 관심 밖으로 밀려나갑니다. 접두어를 쓰면 옛날코드를 의미하는게 되어버렸다.</p><h2 id="inteopeiseu-keulraeseuwa-guhyeon-keulraeseu"><a href="#inteopeiseu-keulraeseuwa-guhyeon-keulraeseu" class="header-anchor">6.3. </a><a class="markdownIt-Anchor" href="#인터페이스-클래스와-구현-클래스"></a> 인터페이스 클래스와 구현 클래스</h2><p>ABSTRACT FACTORY 구현시에 인터페이스 이름은 접두어를 붙이지 않는편이 좋다. IShapeFactory VS ShapeFactory와 같이 접두어를 써봤자 주의를 흐트리고 과도한 정보를 제공한다.</p><p>즉, 인터페이스명은 ShapeFactoryImp나 심지어 CShapeFactory or IShapeFactory보다 좋다.</p><h1 id="jasinyi-gieogryeogeul-jaranghaji-mara"><a href="#jasinyi-gieogryeogeul-jaranghaji-mara" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#자신의-기억력을-자랑하지-마라"></a> 자신의 기억력을 자랑하지 마라</h1><p>for문에서 i,j,k와 같은것은 괜찮지만 l이나 I와 같은 변수를 사용하면 안된다.<br>똑똑한 프로그래머와 전문가 프로그래머 사이에서 나타ㄴ는 차이점 하나만 들자면, 전문가 프로그래머는 <em>명료함</em>이 최고라는 사실을 안다.</p><h1 id="keulraeseu-ireum"><a href="#keulraeseu-ireum" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#클래스-이름"></a> 클래스 이름</h1><p>클래스 이름과 객체이름은 명사나 명사구가 적합하다<br>Customer, WikePage, Account, AddressParser 와 같은것이 좋은 예이다<br>Manager, Processor,Data,Info와 같은 이름은 피하자</p><h1 id="meseodeu-ireum"><a href="#meseodeu-ireum" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#메서드-이름"></a> 메서드 이름</h1><p>메서드 이름은 동사나 동사구가 적합하다. postPayment deletePage, save등이 좋은 예이고 Accessor, Mutator, Predicate는 Javabean표준에 따라 앞에 get,set,is를 붙인다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String name = employee.getName();</span><br><span class="line">customer.setName(<span class="string">"kgh"</span>);</span><br><span class="line"><span class="keyword">if</span>(paycheck.isPosted())&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자를 중복정의 할때는 정적 팩토리 메서드를 사용합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 좋은 코드 </span></span><br><span class="line">Complex fulcrumPoint = Complex.FromRealNumber(<span class="number">23.0</span>);</span><br><span class="line"><span class="comment">// 나쁜코드</span></span><br><span class="line">Complex fulcrumPoint = <span class="keyword">new</span> Complex(<span class="number">23.0</span>);</span><br></pre></td></tr></table></figure><h1 id="gibalhan-ireumeun-pihara"><a href="#gibalhan-ireumeun-pihara" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#기발한-이름은-피하라"></a> 기발한 이름은 피하라</h1><p>HolyHandGrenade 함수가 무슨일을 하는지 알겠는가? 이것보단 DeleteItems가 더 좋다.<br>가끔, 예를 들어</p><p>kill()대신에 whack()이라 부르거나 Abort() 대신 eatMyShort()라 부릅니다. 농담을 피해라!</p><h1 id="han-gaenyeome-han-daneoman-sayonghara"><a href="#han-gaenyeome-han-daneoman-sayonghara" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#한-개념에-한-단어만-사용하라"></a> 한 개념에 한 단어만 사용하라</h1><p>똑같은 메서드를 fetch, retrieve, get으로 제각각으로 부르면 혼란스럽습니다. 어느 클래스에서 어떤 이름을 썼는지 기억하기 어렵습니다. 이름이 다르면 독자는 당연히 클래스도 다르고 타입도 다르다고 생각합니다.<br><strong>일관성있는 코드를 작성하자</strong></p><h1 id="mal-jangnaneul-haji-mara"><a href="#mal-jangnaneul-haji-mara" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#말-장난을-하지-마라"></a> 말 장난을 하지 마라</h1><p>한 단어를 두가지 목적으로 사용하지 말라.<br>한 개념에 한 단어를 사용하라 라는 규칙을 따랐더니 여러 클래스에서 add라는 메서드가 생겼다. 모든 add메서드의 매개변수와 반환값이 의미적으로 똑같다면 문제가 없지만, 같은 맥락이 아닌데도 일관성을 고려해서 add라는 단어를 선택한다.</p><p>모두가 기존값을 두개를 더하거나 새로운 값을 만든다고 가정하면 이것을 add라고 쓰고, 하나의 값만 추가하는데도 add라는 말을 쓰면 말장난이다. 즉, 하나의 값을 더할때는 insert 나 append라는 이름이 적당하다.</p><h1 id="haebeob-yeongyeogeseo-gajyeoon-ireumeul-sayonghara"><a href="#haebeob-yeongyeogeseo-gajyeoon-ireumeul-sayonghara" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#해법-영역에서-가져온-이름을-사용하라"></a> 해법 영역에서 가져온 이름을 사용하라</h1><p>모든 문제를 문제영역에서 가져오는 정책은 현명하지 못하다. 전산 용어, 알고리즘이름, 패턴 이름, 수학 용어등은 괜찮다. 프로그래머에게 익숙한 기술이 가장 적합한 선택이다</p><h1 id="munje-yeongyeogeseo-gajyeoon-ireumeul-sayonghara"><a href="#munje-yeongyeogeseo-gajyeoon-ireumeul-sayonghara" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#문제-영역에서-가져온-이름을-사용하라"></a> 문제 영역에서 가져온 이름을 사용하라</h1><p>문제 영역개념과 관련이 깊은 코드라면 문제영역에서 이름을 가져와야한다</p><h1 id="yimi-issneun-maegrageul-cugahara"><a href="#yimi-issneun-maegrageul-cugahara" class="header-anchor">15. </a><a class="markdownIt-Anchor" href="#의미-있는-맥락을-추가하라"></a> 의미 있는 맥락을 추가하라</h1><p>스스로 의미가 분명한 의름이 없지 않다. 그래서 클래스 함수, 이름 공간에 넣어 맥락을 부여한다.</p><p>예를 들면, firstName, lastName, street, houseNumber, city, state, zipcode 라는 변수가 있으면 변수를 훑어보면 주소라는 사실을 알 수 있는데, state가 일부의 주소라는 사실을 알 수 있을까?</p><p>addr접두어를 추가하여 의미를 더욱 더 명확히 할 수 있다. addrFirstName, addrLastName, addrState라 쓰면 맥락이 조금더 분명해 진다. Address클래스를 사용하는것도 하나의 방법이다.</p><blockquote><p>맥락이 불분명한 변수</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printGuessStatistics</span><span class="params">(<span class="keyword">char</span> candidate, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    String number;</span><br><span class="line">    String verb;</span><br><span class="line">    String pluralModifier;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        number = <span class="string">"no"</span>;</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">        number = <span class="string">"1"</span>;</span><br><span class="line">        verb = <span class="string">"is"</span>;</span><br><span class="line">        pluralModifier = <span class="string">""</span>;</span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">        number = Integer.toString(count);</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String guessMessage = String.format(<span class="string">"There %s %s %s%s"</span>, verb, number, candidate, pluralModifier );</span><br><span class="line"></span><br><span class="line">    print(guessMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>맥락이 명확한 변수</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessStatisticsMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String verb;</span><br><span class="line">    <span class="keyword">private</span> String pluralModifier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">make</span><span class="params">(<span class="keyword">char</span> candidate, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        createPluralDependentMessageParts(count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"There %s %s %s%s"</span>, verb, number, candidate, pluralModifier );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createPluralDependentMessageParts</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            thereAreNoLetters();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            thereIsOneLetter();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            thereAreManyLetters(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereAreManyLetters</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        number = Integer.toString(count);</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereIsOneLetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number = <span class="string">"1"</span>;</span><br><span class="line">        verb = <span class="string">"is"</span>;</span><br><span class="line">        pluralModifier = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereAreNoLetters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number = <span class="string">"no"</span>;</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bulpilyohan-maegrageul-eobsaeja"><a href="#bulpilyohan-maegrageul-eobsaeja" class="header-anchor">16. </a><a class="markdownIt-Anchor" href="#불필요한-맥락을-없애자"></a> 불필요한 맥락을 없애자</h1><p>고급 휘발유 충전소(Gas Station Deluxe) 애플리케이션일 경우 모든 이름을 GSD라고 시작하면 안된다. 일반적으로 짧은 이름이 긴 이름보다 좋습니다. 의미가 분명한 경우 accountAddress, customerAddress는 맥락이 잘 나누어져 있다면 Address 로 충분하다.<br>포트주소, MAC 주소, 웹 주소를 구분해야 한다면 PostalAddress, MAC, URI 라는 이름도 좋다.</p><h1 id="macimyeonseo"><a href="#macimyeonseo" class="header-anchor">17. </a><a class="markdownIt-Anchor" href="#마치면서"></a> 마치면서</h1><p>대다수 자신이 짠 클래스 이름 메서드 이름을 기억 못한다. 다른사람이 짠 코드를 손본다면 리팩터링 도구를 사용해서 이름을 개선해야합니다. 반대에 두려워하지 말고 코드개선 노력을 보이자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;소프트웨어 이름은 변수, 함수, 인수, 클래스, 패키지, 소스코드, 디렉터리, jar, war 등 여러 이름을 붙입니다. 이번 장에서는 이름을 잘 짓는 규칙을 알아보도록 하겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;yidoreul-bunmyeonghi-ba
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="의미있는이름" scheme="http://gwanhyeon.github.io/tags/%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94%EC%9D%B4%EB%A6%84/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 가장 큰 정사각형 찾기</title>
    <link href="http://gwanhyeon.github.io/Programmers-20210321-programmers-%EA%B0%80%EC%9E%A5%ED%81%B0%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95%EC%B0%BE%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/Programmers-20210321-programmers-%EA%B0%80%EC%9E%A5%ED%81%B0%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95%EC%B0%BE%EA%B8%B0/</id>
    <published>2021-03-21T08:53:32.000Z</published>
    <updated>2021-03-21T09:02:05.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="peurogeuraemeoseu-gajang-keun-jeongsagaghyeong-cajgi"><a href="#peurogeuraemeoseu-gajang-keun-jeongsagaghyeong-cajgi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-가장-큰-정사각형-찾기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/12905" target="_blank" rel="noopener">프로그래머스 가장 큰 정사각형 찾기</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>보드에서 0인 경우를 제외한다. 0인 경우에는 어떠한 정사각형도 만들 수가 없기때문이다.</li><li>따라서, 대각선(i-1,j-1), 위(i-1,j), 왼쪽(i,j-1)의 위치의 값중 최솟값 +1의 값을 주게해주는데 왜 이러한 값을 구해주는 것일까 잘 생각해보도록 합니다.</li><li>가장 최소가되는 값의 +1의 값으로 진행하면 하나의 정사각형의 최대 변의 길이를 구할 수 있게 되기 때문입니다.<br>이러한식으로 점화식을 도출해내면<br><strong>Math.min(map[i-1][j-1]+1, Math.min(map[i-1][j], map[i][j-1]))+1</strong></li><li>다음과 같이 구할 수 있게 됩니다.<br>결국 우리가 구한값은 가장 큰 정사각형의 변의 길이를 구한것 이므로 해당되는 변의 길이 * 변의 길이 = 넓이를 도출해낼 수 있습니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 가장큰정사각형찾기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[board.length+<span class="number">1</span>][board[<span class="number">0</span>].length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                map[i+<span class="number">1</span>][j+<span class="number">1</span>] = board[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 가장 최솟값의 + 1 괄호 주의 !</span></span><br><span class="line">                    map[i][j] = Math.min(Math.min(map[i-<span class="number">1</span>][j], map[i][j-<span class="number">1</span>]), map[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer*answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;peurogeuraemeoseu-gajang-keun-jeongsagaghyeong-cajgi&quot;&gt;&lt;a href=&quot;#peurogeuraemeoseu-gajang-keun-jeongsagaghyeong-cajgi&quot; class=&quot;header-
      
    
    </summary>
    
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/categories/programmers/"/>
    
    
      <category term="DP" scheme="http://gwanhyeon.github.io/tags/dp/"/>
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/tags/programmers/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 쿼드 압축후 개수 세기</title>
    <link href="http://gwanhyeon.github.io/Programmers-20210321-programmers-%EC%BF%BC%EB%93%9C%EC%95%95%EC%B6%95%ED%9B%84%EA%B0%9C%EC%88%98%EC%84%B8%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/Programmers-20210321-programmers-%EC%BF%BC%EB%93%9C%EC%95%95%EC%B6%95%ED%9B%84%EA%B0%9C%EC%88%98%EC%84%B8%EA%B8%B0/</id>
    <published>2021-03-21T06:01:08.000Z</published>
    <updated>2021-03-21T08:24:14.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kweodeuabcug-hu-gaesu-segi"><a href="#kweodeuabcug-hu-gaesu-segi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#쿼드압축-후-개수-세기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/68936" target="_blank" rel="noopener">쿼드압축 후 개수 세기</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>가장왼쪽위의 좌표를 기준으로 현재 탐색하고자 하는 정사각형의 한변의 길이를 통해서 탐색합니다. 가장 왼쪽지점을 기준으로 처리합니다. 분할 후도 같게 생각합니다.</li><li>3가지 경우의수: 특정 범위가 모두 '0’인 경우, 특정 범위가 모두 ‘1’ 인경우, 그게 아닌경우를 찾아냅니다.<br>이것들을 DFS로 처리하여 (x,y),(x+size,y), (x,y+size),(x+size,y+size) 총 네가지경우로 나누어서 생각을 합니다.</li><li>값을 절반씩 나누어가면서 처리하면서 진행합니다.</li></ol><p>1 0 0 0<br>0 1 0 0<br>1 1 1 0<br>1 1 0 0</p><p>테스트케이스로 다음과 같이 주어졌다고 가정하겠습니다.</p><p>1번 사각형 왼쪽 상단: (x , y) , SIZE / 2<br>2번 사각형 오른쪽 상단: (x , y + SIZE / 2) , SIZE / 2<br>3번 사각형 왼쪽 하단: (x + K / 2 , y) , SIZE / 2<br>4번 사각형 오른쪽 하단: (x + K / 2 , y + SIZE / 2) , SIZE / 2<br>의 경우로 나타낼 수 있습니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 가장왼쪽위의 좌표를 기준으로 현재 탐색하고자 하는 정사각형의 한변의 길이를 통해서 탐색</span></span><br><span class="line"><span class="comment">// 3가지 경우의수: 특정 범위가 모두 '0'인 경우, 특정 범위가 모두 '1' 인경우, 그게 아닌경우</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 쿼드압축후개수세기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span>[][] arr) &#123;</span><br><span class="line">        answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,arr.length,arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : answer) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 현재 범위의 가장 왼쪽 위의 좌표, 현재 범위의 정사각형의 한 변의 길이</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> squareSize, <span class="keyword">int</span>[][] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isOneCheck = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isZeroCheck = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;x+squareSize; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;y+squareSize; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j] == <span class="number">0</span>) isOneCheck = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j] == <span class="number">1</span>) isZeroCheck = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isZeroCheck)&#123;</span><br><span class="line">            answer[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isOneCheck)&#123;</span><br><span class="line">            answer[<span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(x,y,squareSize/<span class="number">2</span>, arr);</span><br><span class="line">        dfs(x,y+squareSize/<span class="number">2</span>,squareSize/<span class="number">2</span>, arr);</span><br><span class="line">        dfs(x+squareSize/<span class="number">2</span>,y,squareSize/<span class="number">2</span>, arr);</span><br><span class="line">        dfs(x+squareSize/<span class="number">2</span>,y+squareSize/<span class="number">2</span>,squareSize/<span class="number">2</span>, arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kweodeuabcug-hu-gaesu-segi&quot;&gt;&lt;a href=&quot;#kweodeuabcug-hu-gaesu-segi&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#쿼
      
    
    </summary>
    
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/categories/programmers/"/>
    
    
      <category term="쿼드압축" scheme="http://gwanhyeon.github.io/tags/%EC%BF%BC%EB%93%9C%EC%95%95%EC%B6%95/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 01 깨끗한코드</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210319-chapter01-%EA%B9%A8%EB%81%97%ED%95%9C%EC%BD%94%EB%93%9C/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210319-chapter01-%EA%B9%A8%EB%81%97%ED%95%9C%EC%BD%94%EB%93%9C/</id>
    <published>2021-03-19T11:21:25.000Z</published>
    <updated>2021-03-19T17:31:25.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kodeuga-jonjaeharira"><a href="#kodeuga-jonjaeharira" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#코드가-존재하리라"></a> 코드가 존재하리라</h1><p>코드는 요구사항을 표현하는 언어라는 사실을 알아야하고 요구사항에 더욱 가까운 언어를 만들수도 있고, 요구사항에서 정형 구조를 뽑아내는 도구를 만들 수도 있다. 하지만 어느순간에는 정밀한 표현이 필요하다.</p><h1 id="nabbeun-kodeu"><a href="#nabbeun-kodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#나쁜-코드"></a> 나쁜 코드</h1><p>좋은 코드의 중요성은 오랫동안 나쁜 코드에 시달려왔다. 출시에 바빠 코드를 마구짜지 말아야 한다. <code>회사가 망하는 지름길은 나쁜코드이다.</code></p><p>여러가지 바쁘다는 핑계, 상사에 치여서 나쁜코드를 작성하는 경우가 많다. 나중에 돌아와 이것을 다시 손보겠다는 망상을 하는데 <code>나중은 결코 오지 않는다.</code></p><h1 id="nabbeun-kodeuga-cireuneun-daega"><a href="#nabbeun-kodeuga-cireuneun-daega" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#나쁜-코드가-치르는-대가"></a> 나쁜 코드가 치르는 대가</h1><p>나쁜코드는 개발 속도를 크게 떨어뜨린다. 나쁜 코드가 쌓일수록 팀 생산성을 떨어진다. 그러다가 마침내 0에 근접한다.</p><h2 id="weondaehan-jaeseolgyeyi-ggum"><a href="#weondaehan-jaeseolgyeyi-ggum" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#원대한-재설계의-꿈"></a> 원대한 재설계의 꿈</h2><p>팀이 반기를 들고 관리층에게 설계를 요구하는데 생산성이 바닥이라는 사실을 부인하지 않는다. 기존 시스템을 따라잡을 즈음이면 새로운 팀원들이 새 시스템을 설계하자고하며 현재 시스템을 다시 갈아엎기를 요구한다. <code>깨끗한 코드는 비용을 절감하는 것 뿐만 아니라 전문가로 살아남는 길이라는 사실을 인정하리라.</code></p><h2 id="taedo"><a href="#taedo" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#태도"></a> 태도</h2><p>코드가 정말 엉망이라 업무가 배로 들어날 수 있는 상황이 있다. 일정이 촉박해 제대로 할 시간이 없다면서 한탄을 시작하며 전문가 답지 못한 모습을 보일때가 있다.</p><p>일정이 촉박하다는것은 전문가 답지못한 행동이다. 프로젝트의 실패는 우리에게도 커다란 책임이 있고 특히 나쁜 코드가 초래하는 실패에는 더더욱 책임감이 크다.</p><p>나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가 답지 못하다.</p><h2 id="weoncojeog-nanje"><a href="#weoncojeog-nanje" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#원초적-난제"></a> 원초적 난제</h2><p>누구나 나쁜코드가 업무속도를 늦춘다는 사실을 익히 안다. 모든 프로그래머가 기한을 맞추려면 나쁜 코드를 양산하면 기한을 맞추지못한다. 기한을 맞추는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다</p><h2 id="ggaeggeushan-kodeuraneun-yesul"><a href="#ggaeggeushan-kodeuraneun-yesul" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#깨끗한-코드라는-예술"></a> 깨끗한 코드라는 예술?</h2><p>나쁜 코드가 심각한 장애물이라는 사실을 납득했다고 가정하면 깨끗한 코드를 어떻게 작성할까?</p><p>깨끗한 코드를 구현하는 행위는 그림을 그리는 행위와 비슷하다. 깨끗한 코드와 나쁜코드를 구분 할 줄 안다고 깨끗한 코드를 작성할줄 아는 뜻은 아니다.</p><p>열쇠는 '코드 감각’이다. '코드감각’이 있으면 좋은 코드와 나쁜 코드를 구분한다. 그뿐만 아니라, 절제와 규울을 적용해 나쁜 코드를 좋은 코드로 바꾸는 전략도 파악한다.<br>깨끗한 코드를 작성하는 프로그래머는 빈 캔퍼스를 우아한 작품으로 바꿔가는 화가와 같다.</p><h2 id="ggaeggeushan-kodeuran"><a href="#ggaeggeushan-kodeuran" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#깨끗한-코드란"></a> 깨끗한 코드란?</h2><blockquote><p>비야네 스트롭스트롭 Bjame stroustrup(c++ 창시자)</p></blockquote><p>우아하고 효율적인 코드를 좋아한다. 논리가 간단해야 버그가 숨어들지 못한다. 성능을 최적으로 유지해야 사람들이 원칙 없는 최적화로 코드를 망치려는 유혹에 빠지지 않는다. 깨끗한 코드는 한 가지를 제대로 한다.</p><p>비야네는 ‘우아한’ 이라는 단어를 사용한다. 깨끗한 코드는 보는 사람들에게 즐거움을 선사해야 한다는 뜻이다.</p><p>CPU자원을 낭비하는 코드도 우아하지 못하며 보기에도 즐겁지 못하다고 말한다. 나쁜 코드는 나쁜 코드를 유혹한다. 흔히 나쁜 코드를 고치면서 오히려 더 나쁜 코드를 만든다는 뜻이다.</p><p>비야네는 철저한 오류 처리도 언급한다. 세세한 사항까지 꼼꼼하게 신경 쓰라는 말이다. 프로그래머들이 대충 넘어가는 부분 중 하나가 오류 처리이다.</p><p>메모리 누수, 경쟁 상태, 일관성 없는 명명법이 또 다른 예다. 한마디로 요약하면 깨끗한 코드는 세세한 사항까지 꼼꼼하게 처리하는 코드다.</p><p>비야네는 마지막으로 깨끗한 코드란 한 가지를 잘 한다고 단언한다. 수많은 소프트웨어 설계 원칙이 이 간단한 교훈 하나로 귀결된다는 사실은 우연이 아니다.</p><p>나쁜 코드는 너무 많은 일을 하려 애쓰다가 뒤섞이고 목적이 흐려진다. 깨끗한 코드는 한 가지에 '집중’한다.<br>각 함수와 클래스와 모듈은 주변 상황에 현혹되거나 오염되지 않은 채 한길만 걷는다.</p><blockquote><p>그레디 부치 Grady Booch</p></blockquote><p>깨끗한 코드는 단순하고 직접적이다. 깨끗한 코드는 잘 쓴 문장처럼 읽힌다. 깨끗한 코드는 결코 설계자의 의도를 숨기지 않습니다. 오히려 명쾌한 추상화와 단순한 제어문으로 가득하다.</p><blockquote><p>큰 데이브 토마스 Dave Thomas</p></blockquote><p>깨끗한 코드는 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다. 단위 테스트 케이스와 인수 테스트 케이스가 존재한다. 깨끗한 코드에는 의미있는 이름이 붙는다. 특정 목적을 달성하는 방법은 여러가지가 아니라 하나만 제공한다.</p><p>의존성은 최소이며 각 의존성을 명확히 정의한다. API는 명확하며 최소로 줄였다. 언어에 따라 필요한 모든 정보를 코드만으로 명확히 표현할 수 없기에 코드는 문학적으로 표현해야 마땅하다.</p><p>실제로 읽기 쉬운 코드와 고치기 쉬운 코드는 엄연히 다르다.</p><blockquote><p>마이클 페더스 Michael Feathers</p></blockquote><p>깨끗한 코드의 특징은 많지만 그중에서도 모두를 아우르는 특징이 하나 있다. 깨끗한 코드는 언제나 누군가 주의 깊게 짯다는 느낌을 준다. 고치려고 살펴봐도 딱히 손 댈곳이 없다. 작성자가 이미 모든 사항을 고려했으므로 고칠 궁리를 하다보면 언제나 제자리로 돌아온다. 그리고는 누군가 남겨준 코드, 누군가 주의 깊게 짜놓은 작품에 감사를 느낀다.</p><blockquote><p>론 제프리스 Ron Jeffries</p></blockquote><p>론은 스트레티직 에어 커맨드 사에서 포트란으로 프로그래밍을 시작한 이래 거의 모든 플랫폼에서 거의 모든 언어로 코드를 구현해왔다. 그러므로 그의 의견은 신중하게 고려할 가치가 있다.</p><ol><li>모든 테스트를 통과한다.</li><li>중복이 없다.</li><li>시스템 내 모든 설계 아이디어를 표현한다.</li><li>클래스, 메서드, 함수 등을 최대한 줄인다.</li></ol><p>중복에 집중한다. 같은 작업을 여러 차례 반복한다면 코드가 아이디어를 제대로 표현하지 못한다는 증거다.<br>나는 문제의 아이디어를 찾아내 좀 더 명확하게 표현하려 애쓴다.</p><p>중복 줄이기, 표현력 높이기, 초반부터 간단한 추상화 고려하기, 내게는 이 세가지가 깨긋한 코드를 만드는 비결이다.<br><strong>중복을 피하라, 한가지 기능만 수행하라, 제대로 표현하라, 작게 추상화하라</strong></p><blockquote><p>워드 커닝햄(Ward Cunningham)</p></blockquote><p>위키 창시자, 피트 창시자, 익스트림 프로그래밍 공동 창시자, 디자인 패턴을 뒤에서 움직이는 전문가, 스몰토크와 객체지향의 정신적 지도자, 코드를 사랑하는 프로그래머들의 대부분 코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드라 불러도 되겠다. 코드가 그 문제를 풀기 위한 언어처럼 보인다면 아름다운 코드라 불러도 되겠다.</p><p>깨끗한 코드는 읽으면서 놀랄 일이 없어야 한다고 위드는 말한다. 읽으면서 짐작한 대로 돌아가는 코드가 깨끗한 코드이다.</p><p><em>코드가 그 문제를 풀기위한 언어처럼 보인다면</em> 아름다운 코드라 말한다. 언어를 단순하게 보이도록 만드는 책임이 우리에게 있다는 뜻과 같다.<br>언어를 단순하게 보이도록 만드는 열쇠는 프로그래머이다.</p><h1 id="urideulyi-saenggag"><a href="#urideulyi-saenggag" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#우리들의-생각"></a> 우리들의 생각</h1><p>코드를 읽는 시간 대 코드를 짜는 시간 비율이 10대 1을 훌쩍 넘는다. 새 코드를 짜면서 우리는 끊임없이 기존 코드를 읽는다.</p><p>비율이 이렇게 높으므로 읽기 쉬운 코드가 매우 중요하다. 비록 읽기 쉬운 코드를 짜기 쉽지는 않더라도 말이다. 하지만 기존 코드를 읽어야 새 코드를 짜므로 읽기 쉽게 만들면 사실은 짜기도 쉬워진다.<br>주변 코드를 읽지 않으면 새 코드를 짜지 못한다. 주변 코드가 읽기 쉬우면 새 코드를 짜기도 쉽다. 주변 코드가 어려우면 새 코드를 짜기도 어렵다. 그러므로 급하다면, 서둘러 끝내려면, 쉽게 짜려면 읽기 쉽게 만들면 된다.</p><h1 id="boiseukauteu-gyucig"><a href="#boiseukauteu-gyucig" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#보이스카우트-규칙"></a> 보이스카우트 규칙</h1><p>잘 짠 코드가 전부는 아니다. 시간이 지나도 언제나 깨끗하게 유지해야 한다. 시간이 지나면서 엉망으로 전락하는 코드가 한둘이 아니다. 그러므로 우리는 적극적으로 코드의 퇴보를 막아야한다.</p><p>체크아웃할때 보다 좀 더 깨끗한 코드를 체크인한다면 코드는 절대 나빠지지 않는다. 한꺼번에 많은 시간과 노력을 투자해 코드를 정리할 필요가 없다. 변수 이름 하나를 개선하고, 조금 긴 함수를 분할하고 약간의 중복을 제거하고 복잡한 if문 하나를 정리하면 충분하다.</p><p>시간이 지날수록 코드가 좋아지는 프로젝트에서 작업을 한다고 상상해보면 지속적인 개선이야 말로 전문가 정신의 본질이다.</p><h1 id="peurikweolgwa-weoncig"><a href="#peurikweolgwa-weoncig" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#프리퀄과-원칙"></a> 프리퀄과 원칙</h1><p>2002에 출판한 PPP의 프리퀄의 책은 객체 지향 설계의 원칙을 설명하고 전문 개발자들이 사용하는 실무 기법을 소개한다. PPP를 읽지 않았다면 PPP에서 표명한 의견을 여기서 코드로 재 발견하리라.</p><h1 id="gyeolron"><a href="#gyeolron" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1><p>예술에 대한 책을 읽는다고 예술가가 된다는 보장이 없다. 책은 단지 다른 예술가가 사용하는 도구와 기법, 그리고 생각하는 방식을 소개할 뿐이다. 예술에 대한 책과 마찬가지로 이 책 역시 세세한 정보로 가득하다. 코드도 많다. 좋은 코드도 소개하고 나쁜 코드도 소개한다.</p><p>나쁜 코드를 좋은 코드로 바꾸는 방법도 소개한다. 다양한 경험적 교훈과 체계와 절차와 기법도 열거한다.</p><p><strong>연습해 연습!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kodeuga-jonjaeharira&quot;&gt;&lt;a href=&quot;#kodeuga-jonjaeharira&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#코드가-존재하리라&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="cleancode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="깨끗한코드" scheme="http://gwanhyeon.github.io/tags/%EA%B9%A8%EB%81%97%ED%95%9C%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Partition Labels</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210315-leetcode-partitionlabels/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210315-leetcode-partitionlabels/</id>
    <published>2021-03-15T14:05:05.000Z</published>
    <updated>2021-03-15T14:07:21.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="partition-labels"><a href="#partition-labels" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#partition-labels"></a> <a href="https://leetcode.com/problems/partition-labels/" target="_blank" rel="noopener">partition labels</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>(1)LastIdx[알파벳을 아스키코드로 표현된 값] = 현재 위치의 값을 구해줍니다.<br>예) ‘c’ 일 경우 LastIdx[‘c’-‘a’=2] = 현재 위치(i)<br>(2) S문자열을 모두 수행하면서 나오는 알파벳들의 위치와 비교하여 최대로 위치해있는 인덱스값을 구해줍니다.<br>(3) 만약 S문자열값을 모두 수행하면서 진행되는값이 S문자열에 최대로 위치해있는 인덱스값과 같을 경우<br>파티셔닝 포인터를 현재 진행되는값+1로 갱신해줍니다. 이것이 뜻하는 바는 하나의 파티션이 생성되어 다음 파티션의 첫번째 인덱스값으로 초기화 시켜주는것을 뜻합니다.<br>그리고, 현재까지 진행된 i번째 위치에서 - 파티션된 위치 + 1 을 처리합니다. 이렇게 처리하면 현재까지 하나의 파티션의 길이값을 구할 수 있습니다.<br>즉, (최대로 진행된 위치 - 시작된 위치) + 1를 뜻합니다.<br>(4) 2,3번을 차례대로 진행하면 해당되는 최대길이의 파티션을 나눌 수 있게됩니다.</p><blockquote><p>시간복잡도</p></blockquote><p>O(N)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_PartitionLabels_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        partitionLabels(<span class="string">"ababcbacadefegdehijhklij"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;Integer&gt; <span class="title">partitionLabels</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] lastIdx = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">// 문자의 마지막인덱스에 해당하는값을 구해줍니다. 소문자의 갯수는 26개이므로 알파벳의 위치가 idx가 되고, 값이 몇번째 인덱스의 값인지를 넣어줍니다.</span></span><br><span class="line">        <span class="comment">// lastIdx[a-z 알파벳의 인덱스] = 몇번째 위치에 해당되는지</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            lastIdx[S.charAt(i) - <span class="string">'a'</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> partitionPoint = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; arrList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            maxIdx = Math.max(maxIdx, lastIdx[S.charAt(i) - <span class="string">'a'</span>]);</span><br><span class="line">            <span class="comment">// i가 파티션의 끝에 있는 경우 해당 i 인덱스의 값에서 파티셔닝 시작값을 빼주면 해당되는 길이가 리턴됩니다. +1을 해주는 이유는 인덱스가 0부터 시작하기 때문입니다.</span></span><br><span class="line">            <span class="keyword">if</span> (i == maxIdx) &#123;</span><br><span class="line">                <span class="comment">// 최대 위치 - 시작 위치 + 1</span></span><br><span class="line">                arrList.add(i-partitionPoint+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 하나의 파티션이 생성되었으므로 파티션 포인터값을 그 다음 파티션의 첫번째값으로 갱신합니다.</span></span><br><span class="line">                partitionPoint = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;partition-labels&quot;&gt;&lt;a href=&quot;#partition-labels&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#partition-labels&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://gwanhyeon.github.io/tags/leetcode/"/>
    
      <category term="그리디" scheme="http://gwanhyeon.github.io/tags/%EA%B7%B8%EB%A6%AC%EB%94%94/"/>
    
  </entry>
  
  <entry>
    <title>03 클라우드네이티브의 이해(CI/CD, Docker, Container)</title>
    <link href="http://gwanhyeon.github.io/MSA-20210310-03-cloud-native/"/>
    <id>http://gwanhyeon.github.io/MSA-20210310-03-cloud-native/</id>
    <published>2021-03-10T03:34:51.000Z</published>
    <updated>2021-03-10T04:41:03.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keulraudeu-neitibeu-cloud-native-ran"><a href="#keulraudeu-neitibeu-cloud-native-ran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#클라우드-네이티브cloud-native란"></a> 클라우드 네이티브(Cloud Native)란?</h1><p>클라우드 환경에서 Application, Architecture, Infrastructure 등의 환경을 뜻합니다.<br>클라우드 네이티브 애플리케이션은 환경 변화에 민첩하고 능동적으로 대응하기 위해서 네이티브 환경에서 Saas(Software as a service)나 Faas(Function as a Service)형태로 서비스 되는 애플리케이션을 뜻합니다.</p><p>마이크로서비스는 2주안에 독립적으로 개발해서 배포할 수 있는 정도의 크기를 권고하여 개발 및 배포가 요청에 따라 적절히 확장되는 구조를 가질 수 있습니다.</p><blockquote><p>SaaS(Software as a service)</p></blockquote><p>특정 기간 혹은 특정기간만 필요한 만큼 구매하여 사용하는 주문형 소포트웨어 서비스</p><blockquote><p>12팩터</p></blockquote><p>SaaS가 가져야할 특성과 지켜야할 패턴들에 대한 경험을 정리하는것을 뜻하며 클라우드 애플리케이션 플랫폼인 헤로쿠(Heroku)에 등록하여 사용한 애플리케이션의 활용을 12가지로 정리한 문서입니다.</p><blockquote><p>12팩터 종류</p></blockquote><ol><li><p><em>코드베이스</em><br>원본소스를 뜻하며 소스코드 저장소 내의 원천소스를 하나 가집니다.</p></li><li><p><em>종속성</em><br>프로그램에 사용하는 라이브러리들은 암묵적인 종속성을 가지면 안됩니다.</p></li><li><p><em>환경설정</em><br>코드에서 사용하는 환경설정 정보는 코드가 완전히 분리되어 관리되어야합니다.<br>data connection info, hostname, back-end 등</p></li><li><p><em>백엔드 서비스</em><br>백엔드 서비스는 모두 리소스로 취급하며 Database나 메시지큐가 대표적입니다. 즉, 리소스 식별자 URI(User Resource Identifier)로 접근</p></li><li><p><em>빌드,릴리즈 및 실행</em><br>소스코드는 빌드 릴리즈,실행단계로 격리되어 운영됩니다.</p></li><li><p><em>프로세스</em><br>프로세스(process)는 무상태(Stateless)로 실행되며 상태정보를 공유하지 않아야합니다.</p></li><li><p><em>포트바인딩</em><br>하나의 독립된 서비스로 동작할 수 있고 외부에서 접속할 수 있어야합니다.</p></li><li><p><em>동시성(concurrency)</em></p></li></ol><p>특정 시스템에 부하가 발생시 하드웨어 스케일업을 진행하며 수용 용량보다는 프로세스의 Workload를 수평으로 확장하여 수평적 확장(scale-out)이 가능한 프로세스 모델 형태를 가져야합니다.</p><ol start="9"><li><p><em>폐기가능(disposability)</em><br>graceful shutdown이 보장되어야 하며 비정상적인 프로세스의 종료에도 실행 중이던 작업은 안전하게 종료되어야 합니다.</p></li><li><p><em>개발,테스트,운영환경의 일관성</em><br>개발환경은 테스트나 운영 환경과도 같아야합니다. 개발에서 운영까지 배포되는 시간, 담당자, 도구의 차이로 발생하는 문제를 최소하고 지속적인 배포가 될 수 있는 환경이 되어야합니다.</p></li><li><p><em>로그</em><br>로그는 Stream Event로 취급하여 애플리케이션에서 로그처리에 관여하거나 가공 및 관리하려 해서는 안됩니다.</p></li><li><p><em>일회성 프로세스</em><br>일회성 작업은 구분하여 별도의 프로세스로 구성합니다. 예를 들면, 관리자 관련 작업이나 유지 보수 관련 작업으로 생겨나는 프로세스들은 별도로 분리하여 구성합니다.</p></li></ol><h1 id="keulraudeu-neitibeu-akitegcyeo"><a href="#keulraudeu-neitibeu-akitegcyeo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#클라우드-네이티브-아키텍쳐"></a> 클라우드 네이티브 아키텍쳐</h1><h2 id="hwagjangganeunghan-akitegceo"><a href="#hwagjangganeunghan-akitegceo" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#확장가능한-아키텍처"></a> 확장가능한 아키텍처</h2><p>클라우드에 최적화된 애플리케이션을 개발하고 운영할 수 있는 아키텍처를 제공합니다. 모놀리스 시스템 아키텍처 구조에서는 하나의 인스턴스에서 애플리케이션이 실행됩니다. (화면, 비즈니스로직, 데이터 처리)</p><h2 id="tanryeogjeog-akitegceo"><a href="#tanryeogjeog-akitegceo" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#탄력적-아키텍처"></a> 탄력적 아키텍처</h2><p>Resliense Architecture란 서비스 생성-통합-배포, 비즈니스 환경 변화에 대응 시간을 단축, 오류를 예측하고 적절히 대응할 수 있는 아키텍처 구조입니다. 분산 병렬처리, 수평적 확장, 무상태 통신방식, 오류를 예측하여 실행 상태를 유지하기 위한 자동 복원 능력이 지원되어야 합니다.</p><blockquote><p>장애 격리<br>Fault isolation은 오류 및 장애에 대한 격리이며 특정 서비스의 오류로 인해 다른 서비스까지 영향이 도달하는 것을 없애는 것입니다.</p></blockquote><h1 id="keulraudeu-neitibeu-inpeura"><a href="#keulraudeu-neitibeu-inpeura" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#클라우드-네이티브-인프라"></a> 클라우드 네이티브 인프라</h1><blockquote><p>컨테이너 기반 패키지(Container based package)란?<br>컨테이너 단위의 패키지입니다. 패키지 단위가 시스템 단위일 수도 있고, 서비스 애플리케이션 단위일 수도 있습니다. 컨테이너로 패키지된 단위가 실행 단위입니다.</p></blockquote><p>즉, 컨테이너 단위로 독립적인 인터페이스와 물리적으로 접속이 가능한 IP와 포트를 가집니다.</p><p>리눅스 컨테이너 기술을 응용한 도커 컨테이너는 PasS(Platform as a Service) 영역에 큰 변화와 발전을 가져왔다고 해도 과언이 아닙니다. 보통 jar,war 형태로 배포를 처리했지만, 이제는 도커이미지로 컨테이너를 실행하면 쉽게 배포가 가능합니다.</p><blockquote><p>동적 관리<br>시스템은 서비스와 추가와 삭제를 자동으로 감지하여 새롭게 추가된 서비스로 서비스 요청을 라우팅할 수 있습니다.</p></blockquote><h1 id="jisogjeog-tonghabgwa-baepo"><a href="#jisogjeog-tonghabgwa-baepo" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#지속적-통합과-배포"></a> 지속적 통합과 배포</h1><blockquote><p>CI(Continuous Integration)<br>소스코드의 지속적인 통합과 배포는 클라우드 네이티브환경 구축을 위하여 중요한 요소입니다. 지속적 통합은 개발 환경에서 개발 중인 코드를 통합하고 필요에 따라 테스트로 병행 수행하는 일련의 프로세스를 발합니다.</p></blockquote><p>주로, CI(Continuous Integration) 서버, 소스 관리(SCM, Soruce Code Managemet), 빌드도구(tool), 테스트 도구가 있으며 CI 서버는 빌드 프로세스가 관리하는 서버입니다. 예를 들면, 젠킨스를 들 수 있습니다.</p><p>소스 저장소는 소스코드의 형상을 관리하는 시스템으로 Git을 들 수 있습니다.</p><blockquote><p>지속적 배포</p></blockquote><p>지속적 배포에는 Continuous Delivery와 Continous Deployment 두가지 유형으로 나뉘고 실행 환경으로 배포하기 직전상태인 배포형태와 실행환경까지 자동으로 배포하는 환경입니다.</p><blockquote><p>카나리배포와 블루그린배포</p></blockquote><p>빌드된 소스를 릴리스하는 데에는 카나리(Canary) 배포와 블루그린(Blue-Green) 배포의 두가지 대표적인 유형이 있습니다.</p><p>카나리 배포같은 경우 새 버전의 서비스를 일부 사용자들에게만 배포하여 정상 유무를 확인하는 전략이고, 블루그린 배포는 운영과 같은 환경이 하나 더 있고 한쪽 새로운 버전을 배포하여 사용자의 연결 요청을 새버전 서비스로 라우팅을 유도하여 문제가 없으면 이전 환경의 사용을 중지하는 방식입니다.</p><h1 id="debeu-obseu-devops"><a href="#debeu-obseu-devops" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#데브-옵스devops"></a> 데브 옵스(DevOps)</h1><p>데브옵스(DevOps)는 애플리케이션과 서비스의 개발에서 배포 운영까지 바르게 제공되는 조직의 협업문화를 뜻합니다.</p><h1 id="keonteineo-container"><a href="#keonteineo-container" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#컨테이너container"></a> 컨테이너(Container)</h1><p>컨테이너(Container)는 운엉체제상에서 독립된 공간을 할당하고 독립된 공간끼리는 서로 격리되어 독립된 자원을 할당받고 프로세스 간 간섭이 없다면 애플리케이션 입장에서는 자신만의 공간을 가지게 되고 용도에 맞게 안전하게 실행됩니다.</p><p>즉, 마이크로서비스는 컨테이너를 단위로 묶어서 즉시 필요한 시점에 배포할 수 있는 장점을 가지고 있습니다.</p><blockquote><p>프로세스 격리</p></blockquote><p>격리된 공간에서 수행하는 프로세스는 다른 공간에서 동작하는 프로세스의 영향을 받지 않습니다. 네트워크자원을 분할하면 별도의 IP 어드레스를 할당하여 액세스가 가능합니다.</p><blockquote><p>가상화와 컨테이너</p></blockquote><p>가상화는 하이퍼바이저(Hypervisor)라는 소프트웨어를 이용하여 하나의 시스템에서 여러 개의 운영체제를 사용할 수 있게 지원하는 기술입니다. 반면에 컨테이너는 하이퍼바이저 없이 컨테이너 엔진을 통해서 가상의 격리된 공간을 생성하는 기술입니다.</p><h1 id="rinugseu-keonteineo"><a href="#rinugseu-keonteineo" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#리눅스-컨테이너"></a> 리눅스 컨테이너</h1><p>리눅스 컨테이너는 컨테이너 기술을 적용하고 잇고, 하나의 호스트 운영체제 위에 여러개의 격리된 시스템 환경을 구성할 수 있는 운영체제 수준의 가상화 기술입니다.<br>네임스페이스(namespace), 컨트롤그룹(cgroups)이라는 커널기능을 사용하여 격리된 공간을 관리합니다.</p><h1 id="neimseupeiseu"><a href="#neimseupeiseu" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#네임스페이스"></a> 네임스페이스</h1><p>네임스페이스는 컨테이너별로 격리된 공간을 가질 수 있도록 지원하는 기술입니다.<br>“PID”,“NET”, “MNT”, “UID”, “UTS”, “IPC” 여섯가지의 네임스페이스를 제공합니다.</p><p>PID(Process ID): 각 프로세스에 할당된 고유한 ID<br>NET(NETWORK): 네트워크 디바이스(device), IP, 포트(port), IP 테이블(table) 등<br>MNT(Mount): 컴퓨터 시스템에 접속되어 있는 디바이스 정보를 운영체제로 인식<br>UID: 네임스페이스별로 userID, group ID를 할당<br>UTS: 네임스페이스별로 호스트명(host name)과 도메인(domain)을 독자적으로 가집니다.<br>IPC(Inter Process Communication): 프로세스간 통신객체(Object)를 네임스페이스별로 할당합니다.</p><h1 id="dokeo-keonteineo"><a href="#dokeo-keonteineo" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#도커-컨테이너"></a> 도커 컨테이너</h1><p>도커 이미지(docker image)는 하나 혹은 여러개의 이미지 레이어로 구성되어있고 도커엔진에서 사용하는 기본 단위입니다. 도커 컨테이너를 생성하는 요소로 가상 머신의 이미지 파일과 비슷하다고 생각하면됩니다.</p><p>도커는 이미지와 컨테이너라는 개념을 제시하고 있으며 이미지는 베이스 이미지(base iamge)와 도커 이미지로 개념적으로 구분할 수 있습니다.</p><blockquote><p>도커 컨테이너</p></blockquote><p>도커 컨테이너(docker container)는 도커 이미지를 독립된 공간을 할당하여 실행한 런타임 개체(runtime object)입니다. 도커 엔진(docker engine)위에서 기동되며 가상의 IP와 포트, 이름을 가질 수 있습니다.</p><blockquote><p>도커 레지스트리</p></blockquote><p>도커 레지스트리(docker registry)는 도커 이미지를 관리 할 수 있게 제공된 저장공간입니다.</p><blockquote><p>도커 네트워크</p></blockquote><p>도커 네트워크(docker network)는 도커 컨테이너 단위로 서비스 할 수 있도록 네트워크 환경을 제공하는 가상의 네트워크 환경입니다. 이를 가능하게 하는것은 가상의 브릿지인 docker()가 담당하며 도커 데몬이(docker demon)이 가동된후 ip가 할당되고, 도커 컨테이너별로 컨테이너별 eth()에 IP가 자동으로 할당됩니다. NIC(eth0)는 도커 내부 네트워크와 브리지 역할을 하는 docker()와 연결됩니다.</p><p>docker()은 도커 내부 컨테이너들의 가상의 NIC(veth)와 연결되어 접속할 수 있습니다. 도커 내부 컨테이너들은 각자 가상의 eth()에 IP가 자동으로 할당되어서 docker()에서는 컨테이너의 IP를 확인하여 연결 할 수 있습니다.</p><p>도커 네트워크는 NAPT(Network Address Port Translation) 기능을 사용합니다.</p><blockquote><p>NAPT란?</p></blockquote><p>하나의 IP를 가지고 가상의 여러 IP 및 포트와 변환하는 기능입니다. NAT(Network Address Translation)과 차이를 가지고 있는데, NAT는 공용 IP와 사설 IP와의 관계, 즉 public IP : Private IP 관계가 1:1로 변환하는 방식이라면 NAPT는 포트까지 변환하여 1:N으로 변환하는 방식입니다.</p><blockquote><p>서비스 요청이 컨테이너까지 전달되는 과정</p></blockquote><p>사용자 <a href="http://www.kgh.com:8080" target="_blank" rel="noopener">http://www.kgh.com:8080</a> -&gt; eth0 8080 -&gt; docker() -&gt; 컨테이너 1번(80 port)</p><p>도커 컨테이너가 80번 포트로 서비스 되고 있는데 NAPT 8080 -&gt; 80 으로 변환하는 설정이 되어 있다면 외부 사용자의 요청을 8080 호출은 NAPT 설정에 의해 80 도커 컨테이너에 연결하여 결과를 반환해줄 것입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;keulraudeu-neitibeu-cloud-native-ran&quot;&gt;&lt;a href=&quot;#keulraudeu-neitibeu-cloud-native-ran&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="MSA" scheme="http://gwanhyeon.github.io/categories/msa/"/>
    
    
      <category term="MSA" scheme="http://gwanhyeon.github.io/tags/msa/"/>
    
  </entry>
  
  <entry>
    <title>Network Header 개요 및 쿠키 세션</title>
    <link href="http://gwanhyeon.github.io/Network-20210309-network-10-header-summary/"/>
    <id>http://gwanhyeon.github.io/Network-20210309-network-10-header-summary/</id>
    <published>2021-03-09T08:44:05.000Z</published>
    <updated>2021-03-10T04:45:54.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-hedeo"><a href="#http-hedeo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#http-헤더"></a> HTTP 헤더</h1><p>HTTP 헤더의 구성은 다음과 같이 구성됩니다.<br>header-field = field-name “:” OWS field-value OWS<br>보통 fieldname은 대소문자 구분을 따로 하지않으며 OWS(optional whitespace)는 띄어쓰기를 허용시킵니다.</p><blockquote><p>reference RFC7230</p></blockquote><p><a href="http://www.bizcoder.com/everything-you-need-to-know-about-http-header-syntax-but-were-afraid-to-ask" target="_blank" rel="noopener">HTTP RFC7230 </a></p><blockquote><p>Request Header</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /search?q=hello&amp;hl=ko HTTP/1.1</span><br><span class="line">Host: www.google.com</span><br></pre></td></tr></table></figure><blockquote><p>Response Header</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Content-Length: 3423</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>...<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="http-hedeoneun-museun-yeoghaleul-haneungeosilggayo"><a href="#http-hedeoneun-museun-yeoghaleul-haneungeosilggayo" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#http-헤더는-무슨-역할을-하는것일까요"></a> HTTP 헤더는 무슨 역할을 하는것일까요?</h2><p>HTTP 헤더는 HTTP전송에 필요한 모든 부가정보들을 담고있습니다. 예를 들면, 메시지 바디 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보등을 가지고 있습니다.(표준헤더의 수는 방대합니다.)<br>직접 사용자가 HTTP 헤더를 사용할 수 있기때문에 추가를 할 수 있습니다.</p><h2 id="hedeoyi-bunryu"><a href="#hedeoyi-bunryu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#헤더의-분류"></a> 헤더의 분류</h2><ol><li>General Header : 메시지 전체에 적용되는 정보를 담고 있으며 연결정보를 가지고 있습니다.</li><li>Request Header: 요청 정보-User-Agent와 같은 정보를 가지고 있습니다.</li><li>Response Header: 응답 정보, 아파치</li><li>Entity Header: Entity Body 정보 Content-Type:text/html, Content-Length: 3423</li></ol><h2 id="hedeoyi-yeogsa"><a href="#hedeoyi-yeogsa" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#헤더의-역사"></a> 헤더의 역사</h2><p>1999년 RFC2616버전에서 2014년 RFC7230~7235가 등장하게 됩니다.<br>RFC7230 최신 버전으로 오게되면서 메시지 본문을 통해 표현 데이터들을 전달하게 됩니다.</p><p>메시지본문을 payload라고 일컫는데, 표현은 요청이나 응답에서 전달할 실제 데이터입니다.<br>표현 헤더는 표현 데이터를 해석할 수 있는 정보를 제공합니다. (HTML,JSON,데이터정보)</p><h1 id="hedeoyi-teugjing"><a href="#hedeoyi-teugjing" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#헤더의-특징"></a> 헤더의 특징</h1><blockquote><p>Representation Header</p></blockquote><p>HTTP/1.1 200OK<br>Content-Type:text/html;charset=UTF-8</p><blockquote><p>Representation Data</p></blockquote><html> <body> </body> </html><blockquote><p>Representation</p></blockquote><ol><li>Content-Type: 표현 데이터형식<br>미디어 타입, 문자 인코딩 형식(text/html; charset=utf-8, application/json, image/png)</li><li>Content-Encoding: 표현 데이터의 압축 방식<br>표현 데이터를 압축하기 위해 사용되며 인코딩 헤더의 정보로 압축을 해제합니다.<br>(gzip, deflate, identity)</li><li>Content-Language: 표현 데이터의 자연언어<br>표현 데이터의 자연언어를 표현합니다.(ko,en,en-US)</li><li>Content-Length: 표현 데이터의 길이<br>바이트 단위로 이루어져있으며 Transfer-Encoding 을 사용하면 Content-Length사용을 하면 안됩니다.<br>동일정보가 들어가있기때문입니다.</li></ol><p>표현헤더는 전송과 응답에 모두 사용됩니다.</p><blockquote><p>Content negotiation</p></blockquote><ol><li>Accept: 클라이언트가 선호하는 미디어 타입 전달</li><li>Accept-Charset: 클라이언트가 선호하는 문자 인코딩</li><li>Accept-Encoding: 클라이언트가 선호하는 압축 인코딩</li><li>Accept-Language: 클라이언트가 선호하는 자연 언어</li></ol><p>클라이언트가 요청을 하는것이다. 만약 해당되는 Accept가 없을 경우 우선순위를 부여합니다.<br>우선순위는 (0-1)까지 우선순위로 처리할 수 있습니다. 그리고, Quality Values를 사용하면 구체적인것들을 먼저 처리합니다.<br>(1.text/plain;format=flowed, 2.<em>/</em>) 우선순위가 더 높은것을 사용합니다.</p><blockquote><p>전송방식</p></blockquote><p>Transfer-Encoding, Range, Content-Range</p><p>전송 방식 4가지</p><ol><li>단순전송<br>Content-Length를 전송합니다.</li><li>압축전송<br>Content-Encoding을 전송합니다.</li><li>분할전송<br>Transfer-Encoding을 전송합니다. (transfer-Encoding: chunked) 바이트를 쪼개서 전송</li><li>범위전송<br>바이트 범위를 설정하여 전송합니다. (Range: bytes=500-1000) 해당 바이트만큼 쪼개서 전송받음.</li></ol><blockquote><p>일반정보</p></blockquote><ol><li>From: User Agent E-Mail<br>검색엔진, 요청</li><li>Referer: 이전 웹 페이지 주소<br>이전 웹 페이지 주소 A-&gt; B요청시 Referer 선언후 A포함해서 요청(중요), 유입경로 분석</li><li>User-Agent: 유저 에이전트 애플리케이션 정보<br>웹 브라우저 정보, 특정 브라우저 장애발생시 통계 정보 추출</li><li>Server: 요청을 처리하는 오리진 서버의 소프트웨어 정보<br>요청을 처리하는 Origin 서버의 소프트웨어 정보(nginx)</li><li>Date: 메시지가 생성된 날짜<br>메시지 발생 날짜 시간, 응답에 사용</li><li>Host: 요청한 호스트 정보(도메인) - 요청 필수값</li><li>Location: 페이지 리다이렉션<br>응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동(리다이렉트)</li><li>Allow: 허용 가능한 HTTP 메서드<br>Allow값을 다음과 같이 설정하여 허용가능한 메소드를 설정합니다.(GET, HEAD, PUT)</li><li>Retry-After: 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간<br>서비스가 언제까지 불능인지 처리하기</li></ol><blockquote><p>인증</p></blockquote><ol><li>Authorization: 클라이언트 인증 정보를 서버에 전달합니다.</li><li>WWW-Authenticate: 리소스 접근시 필요한 인증 방법 정의합니다.</li><li>Set-Cookie: 서버에서 클라이언트로 쿠키 전달하고 응답을 처리합니다.</li><li>Cookie: 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달합니다.</li></ol><h1 id="kuki-cookies-vs-sesyeon-session"><a href="#kuki-cookies-vs-sesyeon-session" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#쿠키cookies-vs-세션session"></a> 쿠키(Cookies) VS 세션(Session)</h1><p>이번에 살펴볼 내용은 &quot;세션&quot;과 &quot; 쿠키&quot;입니다.</p><blockquote><ol><li>쿠키, 세션 이란?<br>인터넷을 사용하시다 보면 흔히 접했던 말입니다. 가끔 홈페이지 접속이 되지 않거나, 에러가 나는 경우</li></ol></blockquote><p>&quot; 인터넷 옵션에 들어가서 쿠키를 삭제하고 다시 시도해보시길 바랍니다. &quot;</p><p>혹은, 로그인을 하였는데 아이디와 비밀번호를 저장하시겠습니까? 라는 글을 보셨을 겁니다.</p><blockquote><p>쿠키 세션 왜 써요?</p></blockquote><p>서버와 클라이언트가 통신을 할 때 통신이 연속적으로 이어지지 않고 한 번 통신이 되면 끊어진다. 따라서 서버는 클라이언트가 누구인지 계속 인증을 해주어야 하는데, 여기서 쿠키와 세션을 이용하여 인증을 하게 된다.</p><blockquote><p>쿠키란?</p></blockquote><p>클라이언트 웹 브라우저에서 관리 되는 작은 기록의 텍스트 파일(정보 파일) 입니다. 특정 시간 동안에 유효한 시간을 설정하여, 브라우저를 다시 재부팅하여도 인증이 되는 경우 입니다.</p><blockquote><p>쿠키 동작 방식</p></blockquote><ol><li><p>클라이언트가 로그인을 하기 위해 웹 페이지를 요청합니다.</p></li><li><p>쿠키는 HTTP 통신 헤더에서 전송 됩니다. 따라서, 통신 헤더에 쿠키값이 들어가게 되며, 응답 헤더에 쿠키 값을 웹 서버에 전송 시킵니다.</p></li><li><p>이제, 웹 서버에서 쿠키를 생성 시킵니다.</p></li><li><p>현재 HTTP 헤더에는 쿠키값을 가지고 있기 때문에, 나중에 로그인을 다시 요청하여도 그 값을 읽어 이전상태의 정보를 변경 시킵니다.</p></li><li><p>쿠키 값을 새로 발급 받거나 변화가 있을 경우 새로운 쿠키 값을 HTTP 헤더에 포함시켜 응답하게 됩니다.</p></li></ol><blockquote><p>쿠키 사용 예제</p></blockquote><ol><li>티스토리 블로그를 방문하였다고 가정 할때, 로그인을 하고 나면 아이디와 비밀번호르 저장하시겠습니까? 라는 문구를 확인 할 수 있습니다.</li><li>E-commerce b2c 플랫폼인 쇼핑몰이나 전자상거래 사이트등에서 장바구나 같은것들을 예로 들 수 있겠습니다.</li></ol><p>쿠키는 모든 요청에 쿠키 정보를 자동으로 포함시킵니다.<br>예) Cookie: user=kgh</p><p>쿠키는 생명 주기를 가지고 있습니다. expires를 지정하여 만료일이 되면 쿠키를 삭제할 수 있습니다. 아니면 max-age=3600초를 주어서 쿠키를 처리할 수 있습니다.</p><p>쿠키 도메인은 보통 명시한 문서기준의 도메인과 서브도메인을 포함합니다.<br>domain = kgh.org를 지정하여 쿠키를 생성합니다.</p><p>쿠키의 경로는 이당 경로를 포함한 하위 경로 페이지만 쿠키에 접근이 가능하고 보통 path를 root로 처리하는 경우가 많습니다.</p><p>쿠키는 http, https를 구분하지 않고 전송하며 Secure시에만 https인 경우에만 전송하게 됩니다. http만 접근이 가능하게 하여 XSS공격을 방지할 수 있습니다. 그리고 요청된 도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키를 전송하게 합니다.(XSRF 방지)</p><blockquote><p>세션이란?<br>세션이라고 하는것은, 쿠키 값을 이용하여 사용자 정보 파일을 서버측에서 관리 하게 됩니다.<br>쿠키와의 차이점은 쿠키는 클라이언트쪽에서 관리를 하였습니다. 쿠키 값을 이용한 세션 값들이 서버측에 저장되어 그 값을 이용하여 사용자 인증을 받는 구조입니다.</p></blockquote><blockquote><p>세션 동작 방식</p></blockquote><ol><li>클라이언트가 서버에 접속 시 세션 ID 값을 발급을 받게 됩니다.</li><li>그 이후에 서버에서는 발급 받은 세션 ID값을 이용하여 쿠키를 사용해서 세션을 저장하게 됩니다.</li><li>로그인을 진행한다면, 클라이언트쪽에서 요청 받은 경로에 대한 세션 ID 값을 다시 전달하여 인증하는 방식입니다.</li></ol><blockquote><p>세션의 특징</p></blockquote><ol><li>각 클라이언트에게 고유 ID를 부여 시킨다.</li><li>보안면에서 쿠키보다 우수합니다(서버측면에서 관리하기 때문)</li><li>세션 ID값으로 클라이언트를 구별 할 수 있습니다.</li><li>쿠키와 다르게, 서버측에서 메모리를 관리하기 때문에 서버측에서 용량의 과부하가 생길 수 있습니다.</li><li>이것을 해결하기 위해서 나온것이 JWT(JSON WEB TOKEN)방식 입니다. 추후에 따로 포스팅 할 계획이오니, 확인해주시면 되겠습니다.</li></ol><blockquote><p>쿠키와 세션의 차이?<br>쿠키와 세션의 큰 차이점은</p></blockquote><ol><li></li></ol><p>쿠키 = 클라이언트(웹 브라우저)<br>세션 = 서버(웹 서버)</p><ol start="2"><li><p>보안측면에 대해서는 쿠키 값 보다 세션이 조금 더 유리합니다. 이것에 대해서 추후에 자세히 설명 드리도록 하겠습니다.</p></li><li><p>쿠키와 세션의 메모리 용량에 대한 차이점입니다. 세션은 쿠키에 비해 서버쪽에서 메모리를 차지하고 있기 때문에 문제가 과부하가 걸릴 가능성이 있습니다.</p></li></ol><p>덧붙여 얘기하면, 쿠키는 사용자 로그인 세션을 관리하고 광고정보를 트래킹할 수 있습니다. 또한, 쿠키 정보는 항상 서버에 전송되기 때문에 네트워크 트래픽을 유발할 수 있으며 최소한의 정보를 사용해야합니다. 만약 서버에 저장하고 싶지 않다면, 웹 브라우저 내부에 웹 스토리지를 사용합니다(LocalStorage, sessionStorage)</p><h1 id="mamuri"><a href="#mamuri" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#마무리"></a> 마무리</h1><p>이렇게 쿠키와 세션에 대한 개념들을 알아보는 시간을 가졌고, 이러한 쿠키와 세션 방식을 대체하기 위한 방식들이 많이 나오고 있습니다.</p><p>예를 들어, 위에서 말씀드린 JWT 토큰 인증 방식이라던지, OAuth2.0 방식(Facebook, Google, Slack) 등을 사용할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-hedeo&quot;&gt;&lt;a href=&quot;#http-hedeo&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#http-헤더&quot;&gt;&lt;/a&gt; HTTP 헤더&lt;/h1&gt;
&lt;p&gt;HTT
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="Header" scheme="http://gwanhyeon.github.io/tags/header/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 외벽점검</title>
    <link href="http://gwanhyeon.github.io/Programmers-20210309-programmers-%EC%99%B8%EB%B2%BD%EC%A0%90%EA%B2%80/"/>
    <id>http://gwanhyeon.github.io/Programmers-20210309-programmers-%EC%99%B8%EB%B2%BD%EC%A0%90%EA%B2%80/</id>
    <published>2021-03-08T16:47:40.000Z</published>
    <updated>2021-03-08T16:54:42.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="peurogeuraemeoseu-oebyeogjeomgeom"><a href="#peurogeuraemeoseu-oebyeogjeomgeom" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-외벽점검"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/60062" target="_blank" rel="noopener">프로그래머스 외벽점검</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>(1) 취약점의 출발지를 설정하고 취약지점을 평면으로 생각하여 해당 N범위를 넘어갈 것을 대비하여 취약지점+N까지 값들을 넣어줍니다.<br>(2) 출발점과 다음 취약점의 거리가 사용 가능한 친구의 시간보다 크면 더이상 진행할 수 없는것이므로 다음값으로 갱신하여 진행<br>즉, 현재 친구의 시간으로 모든 외벽을 점검할 수 없다는 뜻이 됩니다.<br>(3) 만약 친구의 시간이 더 클 경우<br>점검이 가능하기 때문에 다음취약점으로 다시 점검을 체크합니다.<br>(4) 만약 모든 친구를 사용하지 않고도 투입이 가능하다면 최솟값을 갱신하여 진행합니다.<br>(5) 친구를 모두 투입했지만 성공하지 못하였으면 -1을 리턴해줍니다. 즉, 최솟값을 구하기 위해 설정한 Integer.MAX_VALUE 값과 같은지를 확인합니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">programmers_</span>외벽점검<span class="title">_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; circleWeakList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> LinkedList&lt;Integer&gt; friendDistList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = Integer.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">12</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>&#125;,<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] weak, <span class="keyword">int</span>[] dist)</span> </span>&#123;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[dist.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 취약지점 넣어주기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;weak.length; i++)&#123;</span><br><span class="line">            circleWeakList.add(weak[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 원형을 평면으로 생각하여 +n만큼 더 진행</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;weak.length; i++)&#123;</span><br><span class="line">            circleWeakList.add(weak[i]+n);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>,weak,dist);</span><br><span class="line">        answer = (answer == Integer.MAX_VALUE) ? -<span class="number">1</span> : answer;</span><br><span class="line">        <span class="comment">// System.out.println("answer =&gt; " + answer);</span></span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span>[] weak, <span class="keyword">int</span>[] dist)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == dist.length)&#123;</span><br><span class="line">            distCheck(weak);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 친구가 투입되는 거리의 조합 예: 1,2,3,4 -&gt; 2,3,4,1 ... 해당거리만큼을 먼저 방문해야하는지를 체크를 진행</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;dist.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            check[i] = <span class="keyword">true</span>;</span><br><span class="line">            friendDistList.add(dist[i]);</span><br><span class="line">            dfs(cnt+<span class="number">1</span>, weak, dist);</span><br><span class="line">            friendDistList.removeLast();</span><br><span class="line">            check[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distCheck</span><span class="params">(<span class="keyword">int</span>[] weak)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;weak.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">boolean</span> friendSizeCheck = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> startPoint = circleWeakList.get(i);</span><br><span class="line">            <span class="comment">// 들어가있는 취약지점을 하나씩 밀면서 처리하기 예: 123456</span></span><br><span class="line">            <span class="comment">// 123456 -&gt; 23456 -&gt; 3456 -&gt; 456 ....</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;i+weak.length; j++)&#123;</span><br><span class="line">                <span class="comment">// 두점 사이의 거리가 검사 가능한 친구거리보다 크다면 더이상 진행이 불가능하므로 갱신</span></span><br><span class="line">                <span class="keyword">if</span>(friendDistList.get(idx) &lt; circleWeakList.get(j) - startPoint)&#123;</span><br><span class="line">                    startPoint = circleWeakList.get(j);</span><br><span class="line">                    idx++;</span><br><span class="line">                    <span class="comment">// 모든친구를 방문하였을 경</span></span><br><span class="line">                    <span class="keyword">if</span>(idx == friendDistList.size())&#123;</span><br><span class="line">                        friendSizeCheck = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 모든 친구를 사용하지 않고도 투입이 가능한 경우</span></span><br><span class="line">            <span class="keyword">if</span>(!friendSizeCheck)&#123;</span><br><span class="line">                answer = Math.min(answer, idx+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;peurogeuraemeoseu-oebyeogjeomgeom&quot;&gt;&lt;a href=&quot;#peurogeuraemeoseu-oebyeogjeomgeom&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-An
      
    
    </summary>
    
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/categories/programmers/"/>
    
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 야근지수</title>
    <link href="http://gwanhyeon.github.io/Programmers-20210305-programmers-%EC%95%BC%EA%B7%BC%EC%A7%80%EC%88%98/"/>
    <id>http://gwanhyeon.github.io/Programmers-20210305-programmers-%EC%95%BC%EA%B7%BC%EC%A7%80%EC%88%98/</id>
    <published>2021-03-05T05:22:52.000Z</published>
    <updated>2021-03-05T05:34:49.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="peurogeuraemeoseu-yageun-jisu-level03"><a href="#peurogeuraemeoseu-yageun-jisu-level03" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-야근-지수-level03"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/12927" target="_blank" rel="noopener">프로그래머스 야근 지수 Level03</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>priorityQueue를 사용하여 가장 야근이 많은것부터 하나씩 처리합니다.1시간당 1의 일을 소모하니 가장높은것부터 -1을 처리해줍니다.</li><li>TestCase03의 경우 처리한값중에 -1 0보다 작은 값이 존재할 경우 가장 최솟값이 0이되기 때문에 조건을 걸어 해당 로직을 빠져나오게 하였습니다.</li><li>PriorityQueue의 Collections.reverseOrder()를 사용하면 가장 높은 우선순위부터 처리할 수 있습니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 야근지수 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//solution(4, new int[]&#123;4,3,3&#125;);</span></span><br><span class="line">        solution(<span class="number">3</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] works)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0</span>;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue(Collections.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> work : works) &#123;</span><br><span class="line">            pq.add(work);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.add(pq.poll()-<span class="number">1</span>);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : pq) &#123;</span><br><span class="line">            <span class="keyword">if</span>(value &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                answer = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            answer += Math.pow(value, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;peurogeuraemeoseu-yageun-jisu-level03&quot;&gt;&lt;a href=&quot;#peurogeuraemeoseu-yageun-jisu-level03&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markd
      
    
    </summary>
    
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/categories/programmers/"/>
    
    
      <category term="프로그래머스" scheme="http://gwanhyeon.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
      <category term="힙" scheme="http://gwanhyeon.github.io/tags/%ED%9E%99/"/>
    
  </entry>
  
  <entry>
    <title>OS 트랜잭션(transaction), 격리수준(Isolation Level)</title>
    <link href="http://gwanhyeon.github.io/OS-20210303-os-transaction/"/>
    <id>http://gwanhyeon.github.io/OS-20210303-os-transaction/</id>
    <published>2021-03-03T09:12:15.000Z</published>
    <updated>2021-03-03T09:35:45.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="transaction-teuraenjaegsyeon"><a href="#transaction-teuraenjaegsyeon" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#transaction트랜잭션"></a> Transaction(트랜잭션)</h1><blockquote><p>트랜잭션의 성질</p></blockquote><ol><li><p>원자성(Atomicity)</p><p>한 트랜잭션 내에서 실행한 작업들을 하나로 간주한다. 즉, 모두 성공 또는 실패를 뜻합니다.</p></li><li><p>일관성(Consistency)</p><p>트랜잭션은 일관성 있는 데이터베이스 상태를 유지합니다. (Data Integrity)</p></li><li><p>격리성(Isolation)</p><p>동시에 실행되는 트랜잭션들이 서로 영향을 미치지 않도록 격리해야합니다.</p></li><li><p>지속성(Durability)</p><p>트랜잭션을 성공적으로 마치면 결과가 항상 저장되어야 합니다.</p></li></ol><blockquote><p>트랜잭션이란 무엇인가?</p></blockquote><p>스프링에서는 트랜잭션을 처리를 지원하는데 그 중 어노테이션 방식으로 @Transcational을 선언하여 사용하는 방법이 일반적입니다. 즉, 선언적 트랜잭션이라 불리어옵니다.</p><p>클래스나 메서드 위에서 @Transaction이 추가되면, 이 클래스에 트랜잭션 기능이 적용된 프록시 객체가 생성됩니다.</p><p>이 프록시 객체는 @Transcation이 포함된 메소드가 호출 될 경우, PlatformTranscationManager를 사용하여 트랜잭션을 시작하고, 정상 여부에 따라 Commit or Rollback을 진행합니다.</p><h1 id="teuraenjaegsyeon-gyeongjaengsi-munjejeom"><a href="#teuraenjaegsyeon-gyeongjaengsi-munjejeom" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#트랜잭션-경쟁시-문제점"></a> 트랜잭션 경쟁시 문제점</h1><p>다수의 트랜잭션이 동시에 실행되는 상황에서는 트랜잭션 처리방식을 고려해야합니다.</p><h3 id="munje-1dirty-read"><a href="#munje-1dirty-read" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제-1dirty-read"></a> 문제 1Dirty Read</h3><p>트랜잭션 A가 어떤 값을 1에서 2로 변경하고 아직 커밋되지 않은 상황에서 트랜잭션 B가 같은 값을 읽는 경우 트랜잭션 B는 2가 조회됩니다.</p><p>트랜잭션 B가 2를 조회한 후 A가 롤백이 된다면 결국 트랜잭션 B는 잘못된 값을 읽게됩니다. 즉, 트랜잭션이 완료되지 않은 시점에서 데이터에 접근을 허용할 경우 발생할 수 있는 데이터 불일치가 발생할 수 있습니다.</p><h3 id="munje-2-non-repeatable-read"><a href="#munje-2-non-repeatable-read" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#문제-2-non-repeatable-read"></a> 문제 2 Non Repeatable Read</h3><p>트랜잭션 A가 어떤값을 1을 읽은후 A는 같은 쿼리를 또 실행할 예정이면 그 사이에 트랜잭션 B가 값 1을 2로 바꾸고 커밋해버리면서 A가 같은 쿼리 두번을 날리는 사이 두 쿼리의 결과가 다르게 되어버립니다.</p><p>즉, 트랜잭션에서 같은 쿼리를 두번 실행했을 때 발생할 수 있는 데이터 불일치 입니다.</p><p>Dirty Read에 비해서 발생할 확률은 적습니다.</p><h3 id="munje-3-phantom-read"><a href="#munje-3-phantom-read" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#문제-3-phantom-read"></a> 문제 3 Phantom Read</h3><p>트랜잭션 A가 어떤 조건을 사용하여 특정 범위의 값 [0,1,2,3,4]를 읽었을 때, 이후 A가 같은 쿼리를 실행예정이라면 그 사이에 트랜잭션 B가 같은 테이블에 값[5,6,7]을 추가해버리면 A가 같은 쿼리 두번을 날리는 사이에 두 쿼리의 결과가 다르게 되어버립니다.</p><p>즉, 한 트랜잭션에서  일정 범위의 레코드를 두번 이상 읽을 때 발생하는 데이터 불일치라고 할 수 있습니다.</p><h1 id="teuraenjaegsyeon-gyeogri-sujun"><a href="#teuraenjaegsyeon-gyeogri-sujun" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#트랜잭션-격리-수준"></a> 트랜잭션 격리 수준</h1><p>격리수준이란 일관성이 없는 데이터를 허용하는 수준을 말합니다.</p><h3 id="default"><a href="#default" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#default"></a> DEFAULT</h3><p>기본 격리수준을 뜻하며 기본값을 뜻합니다. = Database의 Isolation Level을 따릅니다.</p><h3 id="read-uncommited-level-01"><a href="#read-uncommited-level-01" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#read_uncommitedlevel-01"></a> READ_UNCOMMITED(level 01)</h3><p>커밋되지 않은(트랜잭션  처리)중인 데이터에 대한 읽기를 허용</p><p>즉 어떤 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 B라는 아직 완료되지 않은(Uncommited 혹은 Dirty) 데이터 B를 읽을 수 있습니다.</p><p>Problem1 - Dirty Read가 발생할 수 있습니다.</p><p>Transaction 레벨을 허용하지 않아[ READ_COMMITTED와 SERIALIZABLE만이 적합한 트랜잭션 레벨입니다 ] 라는 오류가 발생한다. 다른 옵션들은 문제 발생하지 않습니다.</p><h3 id="read-commited-level01"><a href="#read-commited-level01" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#read_commitedlevel01"></a> READ_COMMITED(Level01)</h3><p>트랜잭션 커밋이 된 확정 데이터만 읽기를 허용합니다. 그리고 어떤 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른사용자는 해당 데이터에 접근할 수 없습니다.</p><p>Problem1 - Dirty Read방지</p><h3 id="repeatable-read-level02"><a href="#repeatable-read-level02" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#repeatable_readlevel02"></a> REPEATABLE_READ(Level02)</h3><p>트랜잭션이 완료될 때까지 SELECT 문장이 사용하는 모든 데이터에 shared lock이 걸리므로 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정이 불가능합니다.</p><p>선행 트랜잭션이 읽은 데이터는 트랜잭션이 종료될 때까지 후행 트랜잭션이 갱신하거나 삭제가 불가능 하기때문에 같은 데이터를 두 번 쿼리했을 때 일관성 있는 결과를 리턴합니다.</p><p>Problems2 - Non Repeatable Read 방지</p><h3 id="serializable-level-03"><a href="#serializable-level-03" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#serializablelevel-03"></a> SERIALIZABLE(Level 03)</h3><p>데이터의 일관성 및 동시성을 위해 MVCC(Multi Version COncurrency Control)을 사용하지 않습니다.</p><p>트랜잭션이 완료될 때까지 SELECT 문장이 사용하는 모든 데이터에 shared lock이 걸리므로 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정 및 입력이 불가능합니다.</p><p>problem3 - phantom READ 방지</p><blockquote><p>주의 할점</p></blockquote><p>격리 수준이 올라갈 수록 성능 저하의 우려를 가지고 있습니다.</p><blockquote><p>MVCC?</p></blockquote><p>MVCC는 다중 사용자 데이터베이스 성능을 위한 기술로 데이터 조회시 LOCK을 사용하지 않고 데이터의 버전을 관리해 데이터의 일관성 및 동시성을 높이는 기술입니다.</p><p>트랜잭션이 완료 될 때까지 SELECT 문장이 사용하는 모든 데이터에 shared lock이 걸리므로 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정 및 입력이 불가능합니다.</p><blockquote><p>REFERENCE</p></blockquote><p><a href="https://goddaehee.tistory.com/167" target="_blank" rel="noopener">https://goddaehee.tistory.com/167</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;transaction-teuraenjaegsyeon&quot;&gt;&lt;a href=&quot;#transaction-teuraenjaegsyeon&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="OS" scheme="http://gwanhyeon.github.io/categories/os/"/>
    
    
      <category term="트랜잭션" scheme="http://gwanhyeon.github.io/tags/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/"/>
    
      <category term="Transaction" scheme="http://gwanhyeon.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>Codility FrogRiverOne</title>
    <link href="http://gwanhyeon.github.io/Codility-20210302-codility-frogriverone/"/>
    <id>http://gwanhyeon.github.io/Codility-20210302-codility-frogriverone/</id>
    <published>2021-03-02T09:26:18.000Z</published>
    <updated>2021-03-02T09:32:37.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codility-frogriverone"><a href="#codility-frogriverone" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-frogriverone"></a> <a href="https://app.codility.com/programmers/lessons/4-counting_elements/frog_river_one/" target="_blank" rel="noopener">Codility FrogRiverOne</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>해당 문제는 개구리가 강 반대편으로 점프할 수 있는 가장 빠른 시간을 찾아야 합니다. 즉, 1-X까지의 값이 모두 주여졌을때의 현재 인덱스값을 반환하면 되는 문제였습니다.</p><ol><li>set을 사용하여 모든 개구리가 점프하는 시간들을 담아줍니다.</li><li>시간들이1-X까지의 값 즉, set.size()값이 같은경우에 현재 해당하는 idx값을 리턴시켜줍니다.</li></ol><p>처음에 문제를 제대로 이해를 하지못하여 시간을 쓴 문제였습니다…</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrogRiverOne_lesson04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">5</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> X, <span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> answer = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++)&#123;</span><br><span class="line">            s.add(A[i]);</span><br><span class="line">            <span class="keyword">if</span>(s.size() == X)&#123;</span><br><span class="line">                answer = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;codility-frogriverone&quot;&gt;&lt;a href=&quot;#codility-frogriverone&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#codility-fr
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://gwanhyeon.github.io/categories/codility/"/>
    
    
      <category term="Codility" scheme="http://gwanhyeon.github.io/tags/codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility PermMissingElem</title>
    <link href="http://gwanhyeon.github.io/Codility-20210228-codility-permmissingelem/"/>
    <id>http://gwanhyeon.github.io/Codility-20210228-codility-permmissingelem/</id>
    <published>2021-02-28T10:56:15.000Z</published>
    <updated>2021-02-28T10:58:35.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codility-permmissingelem"><a href="#codility-permmissingelem" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-permmissingelem"></a> <a href="https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/" target="_blank" rel="noopener">codility PermMissingElem</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>check변수를 선언하여 나온 elements를 모두 체크를 시켜줍니다.</li><li>값은 1부터 range까지 진행되므로 1부터 진행하여 check값까지 진행하면서 false인값일때 해당 엘리먼트의 값을 반환시켜줍니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermMissingElem_lesson03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[A.length+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 0, 1, 2, 3</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++)&#123;</span><br><span class="line">            check[A[i]] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=check.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                answer = i;</span><br><span class="line">                System.out.println(answer);</span><br><span class="line">                <span class="keyword">return</span> answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;codility-permmissingelem&quot;&gt;&lt;a href=&quot;#codility-permmissingelem&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#codil
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://gwanhyeon.github.io/categories/codility/"/>
    
    
      <category term="Codility" scheme="http://gwanhyeon.github.io/tags/codility/"/>
    
      <category term="TimeComplexity" scheme="http://gwanhyeon.github.io/tags/timecomplexity/"/>
    
  </entry>
  
  <entry>
    <title>Codility Frog Jump</title>
    <link href="http://gwanhyeon.github.io/Codility-20210228-codility-frog-jump/"/>
    <id>http://gwanhyeon.github.io/Codility-20210228-codility-frog-jump/</id>
    <published>2021-02-28T07:39:43.000Z</published>
    <updated>2021-02-28T07:48:36.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codility-frog-jump"><a href="#codility-frog-jump" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-frog-jump"></a> <a href="https://app.codility.com/programmers/lessons/3-time_complexity/frog_jmp/" target="_blank" rel="noopener">Codility frog jump</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>최대한 Y의 범위까지 몇번을 점프할 수 있는지를 확인하는 문제입니다.<br>처음에 range를 제대로 보지못하고 while문으로 처리를 하였는데 시간초과가 나왔습니다.<br>이분탐색으로 풀어야하나라는 생각을 했지만 단순히 생각하면 매우 간단한 문제였습니다.</li><li>전체 범위 - 현재 위치를 빼주고 해당 점프의 value만큼을 나누어주면 몇번뛰었는지 개수를 알 수 있습니다.<br>즉, Y-X -&gt; Y-X / D 의 값으로 나눈값을 처리하였습니다. 나머지가 0이면 해당점프까지만 진행할 수 있고, 나머지가 그것보다 크다면 그것보다 한번더 점프가 가능합니다.</li></ol><blockquote><p>시간복잡도</p></blockquote><p>O(1)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">frogjmp_lesson03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">10</span>,<span class="number">85</span>,<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> X, <span class="keyword">int</span> Y, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        <span class="comment">// 단순히 반복문으로 터지는 로직</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int jump = X;</span></span><br><span class="line"><span class="comment">        int answer = 0;</span></span><br><span class="line"><span class="comment">        while(jump &lt; Y)&#123;</span></span><br><span class="line"><span class="comment">            jump += D;</span></span><br><span class="line"><span class="comment">            answer++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println("answer = " + answer);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> jumpValue = Y-X;</span><br><span class="line">        <span class="keyword">int</span> jumpSize = jumpValue / D;</span><br><span class="line">        <span class="keyword">int</span> answer = (jumpSize % D) == <span class="number">0</span>? jumpSize : jumpSize+<span class="number">1</span>;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;codility-frog-jump&quot;&gt;&lt;a href=&quot;#codility-frog-jump&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#codility-frog-jum
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://gwanhyeon.github.io/categories/codility/"/>
    
    
      <category term="Codility" scheme="http://gwanhyeon.github.io/tags/codility/"/>
    
      <category term="TimeComplexity" scheme="http://gwanhyeon.github.io/tags/timecomplexity/"/>
    
  </entry>
  
</feed>
