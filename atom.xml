<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>GWAN IT Blog</title>
  
  <subtitle>GWAN IT Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2021-05-13T07:20:45.349Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>gwanhyeon Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13. SQL CASE문과 NULL 처리</title>
    <link href="http://gwanhyeon.github.io/section-13-sql-case%EB%AC%B8/"/>
    <id>http://gwanhyeon.github.io/section-13-sql-case%EB%AC%B8/</id>
    <published>2021-05-13T07:04:06.000Z</published>
    <updated>2021-05-13T07:20:45.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-sql-casemungwa-null-ceori"><a href="#13-sql-casemungwa-null-ceori" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#13-sql-case문과-null-처리"></a> 13. SQL CASE문과 NULL 처리</h1><blockquote><p>임의의 조건에 따라서 독자적으로 변환 처리를 지정해서 데이터를 변환하고 싶을 때 CASE문을 사용할 수 있다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CASE WHEN 조건식1 THEN 식1   </span><br><span class="line">  [WHEN 조건식2 THEN 식2...]   </span><br><span class="line">  [ELSE 식3]   </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>예를 들어, <strong>NULL값을 0으로 간주해서 계산하고 싶을 때는 어떻게 해야 할까?</strong><br>NULL값으로 연산한 결과는 모두 NULL이 되는데?<br>이 경우에 <strong>CASE문</strong>을 이용해서 처리할 수 있다.</p><p>RDBMS에서는 사용자가 함수를 작성할 수 있다.<br>간단한 처리의 경우에는 사용자 정의 함수를 작성하지 않고 CASE문으로 처리할 수 있다.</p><p><code>WHEN절</code>: 참과 거짓을 반환하는 조건식을 적어준다.<br>해당 조건을 만족해서 참이 되는 경우, THEN절에 있는 식이 처리된다.<br>이때 WHEN과 THEN을 한데 조합해 지정할 수 있다.<br>WHEN절의 조건식을 차례로 평가해 나가게 되는데,<br>가장 먼저 조건을 만족한 WHEN절과 대응하는 THEN절 식의 결과를 CASE문의 결과값으로 반환한다.</p><p>만약, 그 어떤 조건식도 만족하지 못할 경우에는 ELSE절의 식이 CASE문의 결과값으로 반환된다.<br><code>ELSE절</code>은 생략 가능하고 생략했을 경우에는 기본값으로 <strong>ELSE NULL</strong>로 처리된다.</p><h3 id="1-casemuneul-iyonghayeo-nullgabseul-0euro-byeonhwanhagi"><a href="#1-casemuneul-iyonghayeo-nullgabseul-0euro-byeonhwanhagi" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1-case문을-이용하여-null값을-0으로-변환하기"></a> 1) CASE문을 이용하여 NULL값을 0으로 변환하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column, CASE WHEN column IS NULL THEN 0 ELSE column END &quot;column(null=0)&quot; </span><br><span class="line">FROM table;</span><br></pre></td></tr></table></figure><p>column값이 NULL일 때 WHEN column IS NULL은 참이 되므로<br>CASE문은 THEN절의 ‘0’을 반환한다.<br>NULL이 아닌 경우에는 ELSE절의 <code>column</code>, 즉 column의 값을 반환한다.</p><h3 id="2-coalesce"><a href="#2-coalesce" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2-coalesce"></a> 2) COALESCE</h3><p><strong>NULL값을 변환하는 경우에는 COALESCE 함수를 사용하는 편이 더 쉬울 수 있다</strong>.<br>위의 CASE문을 이용해 NULL값을 0으로 변환하는 예제를 COALESCE 함수를 이용하면<br>아래와 같이 바꿀 수 있다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, <span class="keyword">COALESCE</span>(<span class="keyword">column</span>, <span class="number">0</span>) <span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure><p>COALESCE 함수는 여러 개의 인수를 지정할 수 있다. 주어진 인수 가운데 NULL이 아닌 값에 대해서는 가장 먼저 지정된 인수의 값을 반환한다.<br>앞의 예문은 column이 NULL이 아니면 column값을 그대로 출력하고, 그렇지 않으면(column이 NULL이면) 0을 출력한다.</p><h1 id="2-ddo-hanayi-casemun"><a href="#2-ddo-hanayi-casemun" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#2-또-하나의-case문"></a> 2. 또 하나의 CASE문</h1><p>숫자로 이루어진 코드를 알아보기 더 쉽게 문자열로 변환하고 싶은 경우 CASE문을 많이 사용한다.<br>수치 데이터를 문자화하는 것을 <code>디코드</code>라고 부르고, 반대로 문자를 수치화하는 것을 <code>인코드</code>라고 부른다.</p><h2 id="1-dansun-casero-seongbyeol-kodeureul-namja-yeojaro-byeonhwanhagi"><a href="#1-dansun-casero-seongbyeol-kodeureul-namja-yeojaro-byeonhwanhagi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#1단순-case로-성별-코드를-남자-여자로-변환하기"></a> 1)단순 CASE로 성별 코드를 남자, 여자로 변환하기</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my sql&gt; SELECT column명 AS "코드",</span><br><span class="line">CASE column명   </span><br><span class="line">  WHEN 1 THEN '남자'   </span><br><span class="line">  WHEN 2 THEN '여자'   </span><br><span class="line">  ELSE '미지정'   </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">"성별"</span> <span class="keyword">FROM</span> <span class="keyword">table</span>명;</span><br></pre></td></tr></table></figure><p>단순 CASE문에서 CASE 뒤에는 대상을 적고 WHEN 뒤에는 값을 적는다.</p><h1 id="3-casereul-sayonghal-gyeongu-juyisahang"><a href="#3-casereul-sayonghal-gyeongu-juyisahang" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#3-case를-사용할-경우-주의사항"></a> 3. CASE를 사용할 경우 주의사항</h1><h2 id="1-else-saengryag"><a href="#1-else-saengryag" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#1-else-생략"></a> 1) ELSE 생략</h2><p>CASE문에서 ELSE는 생략할 경우,<code>ELSE NULL</code>이 되는 것에 주의하자. 대응되는 WHEN이 하나도 없는 경우 ELSE절이 사용된다.<br>이때, ELSE를 생략한 경우 NULL이 반환되게 된다. <code>CASE문의 ELSE는 생략하지 않는 편이 낫다.</code></p><h2 id="2-whene-null-jijeonghagi"><a href="#2-whene-null-jijeonghagi" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#2-when에-null-지정하기"></a> 2) WHEN에 NULL 지정하기</h2><p>여기에서 데이터가 NULL인 경우를 고려해서 WHEN NULL THEN ‘데이터 없음’과 같이 지정해도 문법적으로는 문제가 없지만 정상적으로 처리되지 않는다.</p><h3 id="dansun-casemuneseo-whenjeole-null-jijeonghagi"><a href="#dansun-casemuneseo-whenjeole-null-jijeonghagi" class="header-anchor">3.2.1. </a><a class="markdownIt-Anchor" href="#단순-case문에서-when절에-null-지정하기"></a> 단순 CASE문에서 WHEN절에 NULL 지정하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE a   </span><br><span class="line">  WHEN 1 THEN &apos;남자&apos;   </span><br><span class="line">  WHEN 2 THEN &apos;여자&apos;   </span><br><span class="line">  WHEN NULL THEN &apos;데이터 없음&apos;   </span><br><span class="line">  ELSE &apos;미지정&apos;   </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>이 예제에서 조건식이 처리되는 순서는 아래와 같다.</p><p>a = 1<br>a = 2<br>a = NULL</p><p>그런데 문제는 비교 연산자 <code>=로는 NULL값과 같은지 아니지를 비교할 수 없다는 것</code>이다. 따라서 a열의 값이 NULL이라고 해도 a = NULL은 참이 되지 않는다.<br>즉, ‘데이터 없음’ 대신 ELSE절에 있는 ‘미지정’이라는 결과값이 나온다. 이때 NULL값인지 아닌지를 판정하기 위해서는 IS NULL을 사용한다.<br>다만, 단순 CASE문은 특성상 =연산자로 비교하는 만큼, NULL값인지를 판정하기 위해서는 검색 CASE문을 사용해야 한다.</p><h3 id="geomsaeg-casemuneuro-null-jijeonghagi"><a href="#geomsaeg-casemuneuro-null-jijeonghagi" class="header-anchor">3.2.2. </a><a class="markdownIt-Anchor" href="#검색-case문으로-null-지정하기"></a> 검색 CASE문으로 NULL 지정하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE   </span><br><span class="line">  WHEN a = 1 THEN &apos;남자&apos;   </span><br><span class="line">  WHEN a = 2 THEN &apos;여자&apos;   </span><br><span class="line">  WHEN a IS NULL THEN &apos;데이터 없음&apos;   </span><br><span class="line">  ELSE &apos;미지정&apos;   </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>단순 CASE문으로는 NULL값을 비교할 수 없다!</p><ol start="3"><li>DECODE NVL</li></ol><p>Oracle에는 디코드를 수행하는 DECODE함수가 내장되어 있어서 CASE문과 같은 용도로 사용할 수 있다.<br>단, DECODE 함수는 Oracle에서만 지원하는 함수인 만큼 다른 데이터베이스 제품에서는 사용할 수 없다.</p><p>NULL값을 변환하는 함수도 있는데, Oracle에서는 NVL 함수, SQL Server에서는 ISNULL 함수가 이에 해당한다.<br>다만, 이 함수들은 특정 데이터베이스에 국한된 함수이기 때문에 NULL값을 변환할 때는 표준 SQL로 지정되어 있는 <code>COALESCE</code>함수를 사용한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;13-sql-casemungwa-null-ceori&quot;&gt;&lt;a href=&quot;#13-sql-casemungwa-null-ceori&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>12. SQL 날짜 연산</title>
    <link href="http://gwanhyeon.github.io/section-12-sql-%EB%82%A0%EC%A7%9C%EC%97%B0%EC%82%B0/"/>
    <id>http://gwanhyeon.github.io/section-12-sql-%EB%82%A0%EC%A7%9C%EC%97%B0%EC%82%B0/</id>
    <published>2021-05-13T07:03:50.000Z</published>
    <updated>2021-05-13T07:15:51.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-sql-naljja-yeonsan"><a href="#12-sql-naljja-yeonsan" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#12-sql-날짜-연산"></a> 12. SQL 날짜 연산</h1><h2 id="1-siseutem-naljja-hwaginhagi"><a href="#1-siseutem-naljja-hwaginhagi" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1-시스템-날짜-확인하기"></a> 1. 시스템 날짜 확인하기</h2><p>CURRENT-TIMESTAMP로 시스템 날짜 확인</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_TIMESTAMP</span>;</span><br></pre></td></tr></table></figure><h2 id="2-naljja-seosig"><a href="#2-naljja-seosig" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2-날짜-서식"></a> 2. 날짜 서식</h2><p>날짜 데이터를 데이터베이스에 저징할 경우 CURRENT TIMESTAMP를 사용해 시스템 상의 날짜를 저장할 수 있습니다.<br>다만 임의의 날짜를 저장하고 싶을 경우에는 직접 날짜 데이터를 지정해야 합니다</p><p>oracle의 경우 TO_DATE 함수를 사용해 문자열 데이터를 날짜형 데이터로 변환할 수 있으며 서식 또한 별도로 지정할 수 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TO_DATE ( '2014/01 /25 ' , 'YYYY/MM/DD')</span><br></pre></td></tr></table></figure><p>반대로 날짜형 데이터를 서식에 맞춰 변환해 문자열 데이터로 출력하는 함수도 존재합니다. oracle의 경우 TO_CHAR 함수가 그에 해딩합니다</p><h2 id="3-naljjayi-deossemgwa-bbaelsem"><a href="#3-naljjayi-deossemgwa-bbaelsem" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#3-날짜의-덧셈과-뺄셈"></a> 3. 날짜의 덧셈과 뺄셈</h2><p>1일 후를 계산하고 싶다면 a +1 DAY 라는 식으로 계산할 수 있습니다. 1일 전이라면 a - 1 DAY로 하면 됩니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURRENIDATE + <span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>;</span><br></pre></td></tr></table></figure><p>날짜형 간의 뺄셈<br>ex) 2014-02-28에서 2014-01-01을 뺄때</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATEDIFF('2014=<span class="comment">--02-28', '2014-01-01')</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;12-sql-naljja-yeonsan&quot;&gt;&lt;a href=&quot;#12-sql-naljja-yeonsan&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#12-sql-날짜-연
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>11. SQL 문자열 연산</title>
    <link href="http://gwanhyeon.github.io/section-11-sql-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%97%B0%EC%82%B0/"/>
    <id>http://gwanhyeon.github.io/section-11-sql-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%97%B0%EC%82%B0/</id>
    <published>2021-05-13T07:03:36.000Z</published>
    <updated>2021-05-13T07:14:04.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-munjayeol-yeonsan"><a href="#11-munjayeol-yeonsan" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#11-문자열-연산"></a> 11. 문자열 연산</h1><h2 id="1-munjayeol-gyeolhab"><a href="#1-munjayeol-gyeolhab" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1-문자열-결합"></a> 1. 문자열 결합</h2><ul><li>문자열 결합 사례</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'ABC' || '1234' -&gt; 'ABC1234'</span><br></pre></td></tr></table></figure><ul><li>데이터베이스별 문자열 결합의 차이</li></ul><table><thead><tr><th>연산자/함수</th><th>연산</th><th>DB</th></tr></thead><tbody><tr><td>+</td><td>문자열결합</td><td>SQL Server</td></tr><tr><td>||</td><td>문자열결합</td><td>Oracle, PostgreSQL</td></tr><tr><td>CONCAT</td><td>문자열결합</td><td>Mysql</td></tr></tbody></table><ul><li>문자열 결합 예제</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sample35;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CONCAT</span>(quantity, unit) <span class="keyword">from</span> sample35;</span><br></pre></td></tr></table></figure><ul><li>unit열은 문자열형이고, quantity 열은 INTEGER행의 열입니다.</li><li>문자열 결합시 <code>Mysql</code>에서는 <code>CONCAT</code>을 사용합니다. <code>Oracle은 문자열 결합 ||</code></li></ul><h2 id="2-substring-hamsu"><a href="#2-substring-hamsu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2-substring-함수"></a> 2 SUBSTRING 함수</h2><ul><li>정의</li></ul><p>문자열의 일부분을 계산해서 반환해주는 함수</p><ul><li>SUBSTRING 함수 예시</li></ul><p>블로그 시스템 업로드 특정 데이터 파싱<br>날짜 데이터 포맷 형식의 YYYYMMDD 문자열 데이터 파싱(YYYY, MM, DD)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SUBSTRING('20140125001',1,4) -&gt; '2014'앞 4자리(년) 추출</span><br><span class="line"></span><br><span class="line">SUBSTRING('20140125001',5,2) -&gt; '01' 5째 자리부터 2자리(월) 추출</span><br></pre></td></tr></table></figure><h2 id="3-trim-hamsu"><a href="#3-trim-hamsu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#3-trim-함수"></a> 3 TRIM 함수</h2><ul><li>정의</li></ul><p>문자열의 앞뒤로 여분의 스페이스가 있을 경우 공백 제거 함수입니다. 그러나, 문자열 도중에 존재하는 스페이스는 제거되지 않습니다.<br>고정길이 문자열에 많이 사용하는 함수(CHAR 문자열형)<br><code>12 45</code> 와 같은 경우를 예를 들 수 있습니다.</p><ul><li>TRIM 함수 예시</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRIM('ABC    ') -&gt; 'ABC'</span><br></pre></td></tr></table></figure><h2 id="4-character-length-hamsu"><a href="#4-character-length-hamsu" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#4-character_length-함수"></a> 4 CHARACTER_LENGTH 함수</h2><ul><li>정의</li></ul><p>문자열의 길이를 계산해 돌려주는 함수입니다. VARCHAR형의 문자열은 가변 길이이므로 길이가 서로 다릅니다.<br>이에 따라 <code>CHARACTER_LENGTH</code> 함수를 사용하면 문자열의 길이를 계산할 수 있습니다.<br><code>CHARACTER_LENGTH → CHAR_LENGTH</code>로 함수를 줄여서 사용도 가능합니다.</p><ul><li>OCTET_LENGTH 함수</li></ul><p>문자열의 길이를 바이트 단위로 계산해주는 함수</p><ul><li>문자열 데이터의 특징</li><li>데이터단위는 <code>바이트</code> 단위이며 하나의 데이터가 몇 바이트의 저장공간을 필요로 하는지는 <code>인코드 방식</code> or <code>인코딩 방식</code> 에 따라 결정됩니다.</li><li>즉, 문자를 수치화(인코딩) 하는 방식에 따라서 저장공간의 크기가 달라질 수 있습니다.</li></ul><p>예) 한글 2byte, 알파벳 1byte</p><ul><li>간혹 문자세트(Character set)에 따라 길이가 문자 수로 간주될 수도 있습니다.</li><li>문자 세트(character set)</li><li><code>알파벳 반각문자, 한글 전각문자</code></li><li>반각문자는 전각문자 폭의 절반이며 저장용량 또한 전각문자쪽이 더 크다. 반각의 알파벳이나 숫자의 기호(ASCII 문자)라고 일컫음.</li><li>한글은 <code>EUC-KR, UTF-8</code>등의 <code>인코딩 방식</code>을 사용한다.</li><li>즉, RDBMS에서는 이러한 것들을 <code>문자세트</code>라고 부릅니다.</li><li>CHAR_LENGTH() 함수는 ASCII 문자든 <code>문자 수</code>로 계산되기때문에 사용하는데 큰 지장이 없다. 하지만, OCTET_LENGTH() 함수의 경우 문자수가 아닌 <code>바이트 단위</code>로 길이를 <code>계산</code>하므로 주의가 필요합니다.</li><li>문자세트에서 문자수와 바이트 수</li></ul><table><thead><tr><th>문자세트</th><th>문자수</th><th>바이트 수</th></tr></thead><tbody><tr><td>EUC-KR</td><td>12</td><td>19</td></tr><tr><td>UTF-8</td><td>12</td><td>26</td></tr></tbody></table><ul><li>EUC-KR ASCII 문자는 1바이트 한글은 2바이트의 용량</li><li>UTF-8에서는 ASCII 문자는 1바이트, 한글은 3바이트의 용량</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;11-munjayeol-yeonsan&quot;&gt;&lt;a href=&quot;#11-munjayeol-yeonsan&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11-문자열-연산&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>10. SQL 사칙연산</title>
    <link href="http://gwanhyeon.github.io/section-10-sql-%EC%82%AC%EC%B9%99%EC%97%B0%EC%82%B0/"/>
    <id>http://gwanhyeon.github.io/section-10-sql-%EC%82%AC%EC%B9%99%EC%97%B0%EC%82%B0/</id>
    <published>2021-05-13T07:03:24.000Z</published>
    <updated>2021-05-13T07:12:04.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-sacigyeonsan"><a href="#10-sacigyeonsan" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#10-사칙연산"></a> 10. 사칙연산</h1><h2 id="1-sacigyeonsan"><a href="#1-sacigyeonsan" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1사칙연산"></a> 1.사칙연산</h2><table><thead><tr><th>연산자</th><th>연산</th><th>예</th></tr></thead><tbody><tr><td>+</td><td>덧셈(가산)</td><td>1+2-&gt;3</td></tr><tr><td>-</td><td>뺄셈(감산)</td><td>1-2-&gt;-1</td></tr><tr><td>*</td><td>곱셈(승산)</td><td>1*2-&gt;2</td></tr><tr><td>/</td><td>나눗셈(제산)</td><td>1/2-&gt;05</td></tr><tr><td>%</td><td>나머지</td><td>1%2-&gt;1</td></tr></tbody></table><ul><li>연산자 우선순위</li></ul><table><thead><tr><th>우선순위</th><th>연산자</th></tr></thead><tbody><tr><td>1</td><td>*/%</td></tr><tr><td>2</td><td>±</td></tr></tbody></table><ul><li><p>산술 연산자는 곱셈,나눗셈,나머지 그룹과 덧셈,뺄셈 그룹으로 나뉩니다.</p></li><li><p>계산순서는 연산자에 따라 왼쪽에서 오른쪽으로 진행합니다. 우선순위가 같은 연산자들 끼리 연산하는 경우 문제가 되지 않지만 우선순위가 다른 연산자들이 섞여있는 경우는 <code>우선순위가 더 높은쪽</code>으로 계산합니다.</p></li><li><p>우선순위가 같은 경우</p></li></ul><pre class="highlight"><code class="sql">1-2+3=2 (우선순위가 같다면 왼쪽에서 오른쪽으로 계산합니다.)    </code></pre><ul><li>우선순위가 다른 경우</li></ul><pre class="highlight"><code class="sql">1+2*3=7 (+보다 *의 우선순위가 높습니다.)    </code></pre><h2 id="2-selectguro-yeonsanhagi"><a href="#2-selectguro-yeonsanhagi" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2select구로-연산하기"></a> 2.select구로 연산하기</h2><pre class="highlight"><code class="sql"><span class="keyword">select</span> 식<span class="number">1</span>, 식<span class="number">2</span> ... <span class="keyword">from</span> 테이블명    </code></pre><ul><li>이 식은 <code>열명, 연산자, 상수</code>로 구성</li><li>가격과 수량으로 금액을 계산하는 경우<br>주문금액 = 단가 * 개수</li></ul><p>예) 100원 상품 10개 주문 상품금액 1000원</p><pre class="highlight"><code class="sql"><span class="keyword">select</span> *, price * quantity <span class="keyword">from</span> sample34    </code></pre><h2 id="3-yeolyi-byeolmyeong"><a href="#3-yeolyi-byeolmyeong" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#3-열의-별명"></a> 3. 열의 별명</h2><pre class="highlight"><code class="sql"><span class="keyword">select</span> *, price * quantity <span class="keyword">AS</span> amount <span class="keyword">from</span> sample34    </code></pre><ul><li>열의 별명을 붙일때는 예약어 <code>AS</code> 를 사용한다. AS의 약어는 에일리어스(alias)입니다.</li><li>별명은 중복이 되지 않도록 처리 한다.</li><li>AS 예약어 별명은 <code>영어, 숫자, 한글</code> 등으로 지정 가능합니다.</li><li>단, 한글로 지정하는경우 더블쿼트 <code>&quot;&quot;</code> 를 지정해서 사용합니다</li><li>다음과 같이 쓸 수 있습니다.</li></ul><pre class="highlight"><code class="sql"><span class="keyword">select</span> price * quantity <span class="string">"금액"</span> <span class="keyword">from</span> sample34    </code></pre><p>이 룰은 ASCII 문자 이외의 것을 포함할 경우 <code>더블쿼트</code>로 둘러싸서 지정합니다.</p><ul><li>문자열 상수는 <code>' '</code> 싱글쿼트로 감싸주고, 데이터베이스 객체명은 <code>&quot; &quot;</code> 더블쿼트로 감싸줍니다.</li></ul><pre class="highlight"><code class="sql">문자열 상수 'ABC', 'KGH' -&gt; 싱글 쿼트    데이터베이스 객체명 "sample21" "sample34" -&gt; 더블쿼트    </code></pre><ul><li>예약어 같은 경우는 별명을 지정해서 사용할 수 없는데, 그래도 사용해야한다면 <code>&quot; &quot;</code> 더블쿼트를 사용하면 가능합니다.</li></ul><pre class="highlight"><code class="sql"><span class="keyword">select</span> price * quantity <span class="keyword">AS</span> <span class="keyword">select</span> <span class="keyword">from</span> sample34; (예약어 지정 X)    <span class="keyword">select</span> price * quantity <span class="keyword">AS</span> <span class="string">"select"</span> <span class="keyword">from</span> sample34; (예약어 지정 O)    </code></pre><ul><li>숫자의 경우도 예약어와 겹칠때와 마찬가지로 <code>&quot; &quot;</code> 더블쿼트를 사용하면 피할 수 있습니다.</li><li>오라클 기준으로 이름을 지정하는 할 수 없습니다. 이에 따라 <code>숫자로 객체명이 시작되지 않도록 합니다.</code>(단, mysql에서는 숫자로 시작하는 객체명이 허용됩니다.)</li></ul><h2 id="4-where-gueseo-yeonsanhagi"><a href="#4-where-gueseo-yeonsanhagi" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#4-where-구에서-연산하기"></a> 4. where 구에서 연산하기</h2><ul><li>where 구에서 <code>가격 * 수량</code> 금액을 계산하여 <code>2000원 이상</code>에 해당하는 행을 검색하는 쿼리</li></ul><pre class="highlight"><code class="sql"><span class="keyword">select</span> *, price * quantity <span class="keyword">AS</span> amount <span class="keyword">from</span> sample34;    <span class="keyword">select</span> *, price * quantity <span class="keyword">AS</span> amount <span class="keyword">from</span> sample34    <span class="keyword">where</span> price * quantity &gt;= <span class="number">2000</span>;    </code></pre><ul><li>price * quantity 대신에 amount를 사용하면 어떻게 될까요?</li></ul><pre class="highlight"><code class="sql"><span class="keyword">select</span> *, price * quantity <span class="keyword">AS</span> amount <span class="keyword">from</span> sample34    <span class="keyword">where</span> amount &gt;= <span class="number">2000</span>;    </code></pre><ul><li>AS 를 써서 별명을 지어줬으니 에러가 발생하지 않을까? 라는 생각을 할 수도 있습니다. 하지만, amount가 존재하지 않는다라는 에러가 발생하게 됩니다.</li><li>데이터베이스 처리순서는 <code>(where구 → select구)</code> 의 순서로 진행됩니다. 즉, where 구의 처리는 select구보다 선행되므로 where 구에서 사용한 별칭을 인식하지 못하게 됩니다.</li><li>다시 말해, <code>where amount &gt;= 2000;</code> 를 실행하고 나서 <code>select *, price * quantity AS amount from sample34</code> 를 실행하기 때문에 amount를 인식하지 못하게 되는 상황이 발생하게 됩니다.</li><li>표준 SQL에서는 내부처리 순서가 따로 정해져 있지 않습니다.</li></ul><h2 id="5-null-gabsyi-yeonsan"><a href="#5-null-gabsyi-yeonsan" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#5-null-값의-연산"></a> 5. NULL 값의 연산</h2><ul><li><p>만약 <code>NULL값</code>을 이용해 <code>NULL+1</code> 과 같은 연산을 사용하면 결과는 어떻게 될까요?</p></li><li><p>어느 정도 짐작을 하셨겠지만, SQL에서는 NULL값을 0으로 인식하지 않습니다. 잘못 생각한 경우라면 NULL값을 1로 생각하여 <code>1</code> 이라는 결과를 얻을 수 있다고 생각하셨을 수도 있습니다.</p></li><li><p>결과적으로, <code>NULL+1</code> 은 1이 아닌 <code>NULL</code> 입니다.</p></li><li><p>다음 연산결과도 같은 결과를 나타냅니다.</p></li></ul><pre class="highlight"><code class="sql">NULL+1    1+NULL    1+2*NULL    1/NULL    </code></pre><p>NULL은 0으로 처리 되지 않고, 0을 1로 나누면 <code>'division by zero'</code> 라는 에러를 나타내게 할 것입니다.</p><p>하지만, 1/NULL의 경우는 NULL이 0으로 처리 되지 않아 에러가 발생하지 않고 <code>NULL</code> 의 값을 나타내게 될 것입니다.</p><h2 id="6-order-bygueseo-yeonsanhagi"><a href="#6-order-bygueseo-yeonsanhagi" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#6-order-by구에서-연산하기"></a> 6. order by구에서 연산하기</h2><ul><li>금액을 오름차순, 내림차순을 구현하기 위해서는 어떠한  예약어를 사용하면 될까요?</li></ul><pre class="highlight"><code class="sql"><span class="keyword">select</span> *, price * quantity <span class="keyword">AS</span> amount <span class="keyword">from</span> sample34;    <span class="keyword">select</span> *, price * quantity <span class="keyword">AS</span> amount <span class="keyword">from</span> sample34 <span class="keyword">order</span> <span class="keyword">by</span> price * quantity <span class="keyword">DESC</span>;    </code></pre><ul><li>order by구를 사용하고 옵션으로 <code>DESC(descending)</code>키워드를 사용하면 <code>내림차순 정렬</code>이 되는것을 볼 수 있습니다. <code>오름차순(ascending)</code> 정렬은 예약어 <code>ASC</code>로 사용하면 됩니다.</li><li>order by는 서버에서 내부적으로 가장 나중에 처리 됩니다.</li></ul><h2 id="7-hamsu"><a href="#7-hamsu" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#7-함수"></a> 7. 함수</h2><ul><li>MOD 함수</li></ul><pre class="highlight"><code class="sql">10 % 3 -&gt; 1    MOD(10,3) -&gt; 1    </code></pre><ul><li>MOD함수를 사용하면 나머지를 쉽게 구할 수 있습니다.</li><li>MOD() 함수는 함수명이 <code>MOD</code>, 인수로 <code>(나누어질 수, 나눌 수)</code>의 형태를 띄게 됩니다.</li></ul><p>예) MOD(10,3)</p><h2 id="8-round-hamsu"><a href="#8-round-hamsu" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#8-round-함수"></a> 8. ROUND 함수</h2><ul><li>부가세나 부가세포함된 금액을 계산할 때 어떤 함수를 사용하면 좋을까요?</li><li>ROUND()함수를 사용하면 단위를 고려한 반올림 처리를 손쉽게 할 수 있습니다.</li></ul><pre class="highlight"><code class="sql"><span class="keyword">select</span> * <span class="keyword">from</span> sample341;    <span class="keyword">select</span> amount, <span class="keyword">ROUND</span>(amount) <span class="keyword">from</span> sample341;    </code></pre><ul><li>INTEGER형: 정수만 저장 가능 amount열은 DECIMAL형으로 정의되었습니다.</li><li>DECIMAL형은 정수부와 소수부의 자릿수를 지정할 수 있는 자료형입니다. 즉, 소수점을 포함하는 수치를 저장하는 자료형이 됩니다.</li><li>ROUND함수는 <code>소수점 첫째 자리 기준</code>으로 <code>반올림</code> 한 값을 반환합니다. 함수의 두번째 인수로 반올림할 <code>자릿수를 지정</code>할 수도 있습니다.</li></ul><p>단, 인수를 생략할 경우 0으로 간주되고 첫째 자리를 반올림합니다. 1을 지정하면 소수점 둘째 자리를 반올림합니다.</p><ul><li>음수의 경우는 어떻게 할 수 있을까요?</li></ul><p><code>-1 지정시 1단위</code> , <code>-2을 지정하면 10단위</code>를 <code>반올림</code>할 수 있습니다.</p><pre class="highlight"><code class="sql"><span class="keyword">select</span> amount, <span class="keyword">ROUND</span>(amount,<span class="number">-2</span>) <span class="keyword">from</span> sample341;    </code></pre><p>인수에 -2를 입력하였으니 10단위를 반올림합니다. 예) 5961.69 → 6000(10단위 반올림)</p><ul><li>버림 함수는 어떤것이 있을까요?</li></ul><p>반올림 이외에도 버림을 할 경우가 생길 수 있는데 TRUNCATE() 함수로 계산이 가능합니다.</p><ul><li>그 외 함수</li><li>SIN, COS 삼각함수</li><li>SQRT 루트를 계산하는 함수</li><li>LOG 대수를 계산하는 함수</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;10-sacigyeonsan&quot;&gt;&lt;a href=&quot;#10-sacigyeonsan&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#10-사칙연산&quot;&gt;&lt;/a&gt; 10. 사칙연산&lt;
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>09. SQL 결과 행 제한하기 LIMIT구</title>
    <link href="http://gwanhyeon.github.io/section-09-sql-%EA%B2%B0%EA%B3%BC%ED%96%89%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/section-09-sql-%EA%B2%B0%EA%B3%BC%ED%96%89%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0/</id>
    <published>2021-05-13T07:03:15.000Z</published>
    <updated>2021-05-13T07:08:40.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="09-gyeolgwa-haeng-jehanhagi-limit"><a href="#09-gyeolgwa-haeng-jehanhagi-limit" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#09-결과-행-제한하기-limit"></a> 09. 결과 행 제한하기 - LIMIT</h1><blockquote><p>SELECT 명령에서는 결과값으로 변환되는 행을 제한할 수 있습니다.</p></blockquote><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> 열명 <span class="keyword">FROM</span> 테이블명 <span class="keyword">WHERE</span> 조건식 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 열명 <span class="keyword">LIMIT</span> 행수 [<span class="keyword">OFFSET</span> 시작행]    </code></pre><h2 id="1-haengsu-jehan"><a href="#1-haengsu-jehan" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1행수-제한"></a> 1.행수 제한</h2><ul><li><p>LIMIT 구는 표준 SQL이 아니다.</p></li><li><p>MySQL, PostgreSQL등에서 사용되는 문법이다.</p></li></ul><blockquote><p>SELECT * FROM sample33;</p></blockquote><table><thead><tr><th style="text-align:right">no</th></tr></thead><tbody><tr><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2</td></tr><tr><td style="text-align:right">3</td></tr><tr><td style="text-align:right">4</td></tr><tr><td style="text-align:right">5</td></tr><tr><td style="text-align:right">6</td></tr><tr><td style="text-align:right">7</td></tr></tbody></table><blockquote><p>SELECT * FROM sample33 LIMIT 3;</p></blockquote><table><thead><tr><th style="text-align:right">no</th></tr></thead><tbody><tr><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2</td></tr><tr><td style="text-align:right">3</td></tr></tbody></table><ul><li>정렬한 후 제한하기<br>WHERE no &lt;= 3 vs LIMIT 3의 차이점은 LIMIT는 반환할 행수를 제한하는 기능으로, WHERE 구로 검색한 뒤,  ORDER BY로 정렬한 뒤 최종적으로 처리 된다.</li></ul><blockquote><p>SELECT * FROM sample33 ORDER BY no DESC LIMIT 3;</p></blockquote><table><thead><tr><th style="text-align:right">no</th></tr></thead><tbody><tr><td style="text-align:right">7</td></tr><tr><td style="text-align:right">6</td></tr><tr><td style="text-align:right">5</td></tr></tbody></table><ul><li>다른 데이터베이스에서는 어떻게 사용할까?</li></ul><ol><li>SQL Server : TOP사용</li></ol><ul><li>LIMIT과 유사</li></ul><ol start="2"><li>ORACLE : ROWNUM 사용</li></ol><ul><li><p>SELECT * FROM sample33 WHERE ROWNUM &lt;= 3;</p></li><li><p>ROWNUM은 클라이언트에게 결과가 반환될 때 각 행에 할당되는 행 번호</p></li><li><p>ROWNUM으로 행을 제한할 경우</p></li><li><p>WHERE 구로 지정하므로 정렬하기전에 처리된다.<br>-&gt; LIMIT로 행을 제한한 경우와 결과값이 다르다.</p></li></ul><h2 id="2-opeuses-jijeong"><a href="#2-opeuses-jijeong" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2-오프셋-지정"></a> 2. 오프셋 지정</h2><ul><li>웹 시스템에서는 클라이언트의 브라우저를 통해 페이지 단위로 화면에 표시할 내용 처리.</li><li>대량의 데이터를 하나의 페이지에 표시하는 것은 기능적으로도 속도 측면에서 효율적이지 못한다.</li><li>일반적으로 페이지 나누기(pagination)기능을 사용한다.</li></ul><p>ex) 게시판 하단 부분</p><ul><li>위치 지정은 0부터 시작</li><li><code>시작할 행 -1</code>로 기억</li></ul><blockquote><p>SELECT * FROM sample33 LIMIT 3 OFFSET 3;</p></blockquote><table><thead><tr><th style="text-align:right">no</th></tr></thead><tbody><tr><td style="text-align:right">4</td></tr><tr><td style="text-align:right">5</td></tr><tr><td style="text-align:right">6</td></tr></tbody></table><p>4행 부터 3건의 데이터 표시!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;09-gyeolgwa-haeng-jehanhagi-limit&quot;&gt;&lt;a href=&quot;#09-gyeolgwa-haeng-jehanhagi-limit&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-An
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>04. SQL 검색 조건 지정하기</title>
    <link href="http://gwanhyeon.github.io/section-04-%EA%B2%80%EC%83%89%EC%A1%B0%EA%B1%B4%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/section-04-%EA%B2%80%EC%83%89%EC%A1%B0%EA%B1%B4%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0/</id>
    <published>2021-05-13T06:42:01.000Z</published>
    <updated>2021-05-13T06:46:08.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04gang-geomsaeg-jogeon-jijeonghagi"><a href="#04gang-geomsaeg-jogeon-jijeonghagi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#04강-검색-조건-지정하기"></a> 04강 검색 조건 지정하기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 열1, 열2 FROM 테이블명 WHERE 조건식</span><br></pre></td></tr></table></figure><p>통상적인 데이터베이스의 테이블에는 저장된 행이 많을 것이다. 화면에 표시하여 데이터를 확인할 수 있는데, 한번에 볼 수 있는 데이터양은 한정되어 있다. 화면에 표시할 때는 행이나<br>열을 선택하여 데이터베이스에서 데이터를 읽어오는, 다시 말해 '<strong>검색</strong>’이 빈번하게 일어난다. 행을 선택할 때는 <strong>WHERE</strong> 구를 사용하여, 열을 선택할 때는 <strong>SELECT</strong> 구를 사용한다.</p><h2 id="1-select-gueseo-yeol-jijeonghagi"><a href="#1-select-gueseo-yeol-jijeonghagi" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1-select-구에서-열-지정하기"></a> 1. SELECT 구에서 열 지정하기</h2><p>데이터를 선택할 때는 열이나 행을 한정한다. SELECT 명령어 *를 사용해서 sample 테이블의 모든 열을 취득했다. 열을 한정하기 위해서는 * 부분에 열명을 지정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 열1, 열2 FROM 테이블명</span><br></pre></td></tr></table></figure><p>열을 위의 구문처럼 콤마(,)를 이용하여 구분 지으며 여러 개를 지정할 수 있다. 지정한 열만 결과값으로 표시된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FROM sample; // ERROR</span><br></pre></td></tr></table></figure><p>위와 같이 열을 전혀 지정하지 않으면 구문 에러가 발생한다. 또한 테이블에 존재하지 않는 열을 지정해도 에러가 발생한다. 열 지정 순서는 임의로 정할 수 있다.<br>테이블에서 열이 정의된 순서와 동일한 순으로 지정할 필요는 없다. 결과는 지정한 열의 순서대로 표시된다. 동일한 열을 중복해서 지정해도 무관하다. <br></p><h2 id="2-where-gueseo-haeng-jijeonghagi"><a href="#2-where-gueseo-haeng-jijeonghagi" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2-where-구에서-행-지정하기"></a> 2. WHERE 구에서 행 지정하기</h2><p>테이블의 열은 많아야 몇십 개 정도지만 행은 열에 비해 훨씬 많을 수 있다. 데이터베이스의 규모에 따라 다르지만 일반적으로 수백 건에서 대규모의 경우 수천만 건의 행에 달하는 경우도 있다.<br>이처럼 많은 행 속에서 필요한 데이터만 검색하기 위해서는 <strong>WHERE</strong> 구를 사용한다. <br><br><strong>WHERE</strong> 구는 <strong>FROM</strong> 구의 뒤에 표기한다. 예약어 ‘WHERE’ 뒤에 검색 조건을 표기한다. 조건에 일치하는 행만 SELECT의 결과로 반환된다.</p><h3 id="where-guro-haeng-cucul"><a href="#where-guro-haeng-cucul" class="header-anchor">1.2.1. </a><a class="markdownIt-Anchor" href="#where-구로-행-추출"></a> WHERE 구로 행 추출</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 열 FROM 테이블명 WHERE 조건식</span><br></pre></td></tr></table></figure><h3 id="guyi-sunseowa-saengryag"><a href="#guyi-sunseowa-saengryag" class="header-anchor">1.2.2. </a><a class="markdownIt-Anchor" href="#구의-순서와-생략"></a> 구의 순서와 생략</h3><p>SQL에서는 구의 순서가 정해져 있어 바꿔서 적을 수 없다. FROM 구 뒤에 WHERE 구를 표기한다. 예를들어 'SELECT 구 -&gt; WHERE 구 -&gt; FROM 구’의 순으로 적으면 에러가 발생한다.<br>구에는 WHERE 구를 생략한 경우는 테이블 내의 모든 행이 검색 대상이 된다.</p><h3 id="where-gu"><a href="#where-gu" class="header-anchor">1.2.3. </a><a class="markdownIt-Anchor" href="#where-구"></a> WHERE 구</h3><p>조건식은 ‘열과 연산자, 상수로 구성되는 식’ 이다. WHERE 구로 행만 추출하지만 SELECT 구로 열 지정을 동시에 할 수도 있다. 구체적인 예는 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>박준용</td><td>1976-10-18</td><td>대구광역시 수성구</td></tr><tr><td>2</td><td>김재진</td><td>NULL</td><td>대구광역시 동구</td></tr><tr><td>3</td><td>홍길동</td><td>NULL</td><td>서울특별시 마포구</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample WHERE no = 2;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>2</td><td>김재진</td><td>NULL</td><td>대구광역시 동구</td></tr></tbody></table><h3 id="jogeonsig"><a href="#jogeonsig" class="header-anchor">1.2.4. </a><a class="markdownIt-Anchor" href="#조건식"></a> 조건식</h3><p>'no = 2’은 ‘np’ ‘=’ '2’의 세 개 항목으로 나눌 수 있다. 첫 번째 항목인 'no’는 열 이름이다. 두 번째 항목 '='는 연산자이다. 연산자란 어떤 계산을 할지 지정하는 것으로 보통 기호로<br>표기한다. =의 경우, 좌우로 2개 항목이 필요한 '이항 연산자’에 해당하며 일반적으로 많이 쓰이는 기호이다. = 연산자를 기준으로 좌변과 우변의 항목을 비교하고, 서로 같은 값이면 참을,<br>다른 값이면 거짓을 반환한다. no = 2의 조건식에서 no 열 값이 2인 행은 참이되며 1이나 3인 행은 거짓이 된다. 조건식을 만족한 (참) 행만 결괏값으로 반환된다.<br>= 연산자는 비교한 결괏값이 참인지 거짓인지를 반환하므로 '비교 연산자’라 부른다.</p><h3 id="gabsi-seoro-dareun-gyeongu-lt-gt"><a href="#gabsi-seoro-dareun-gyeongu-lt-gt" class="header-anchor">1.2.5. </a><a class="markdownIt-Anchor" href="#값이-서로-다른-경우"></a> 값이 서로 다른 경우 ‘&lt;&gt;’</h3><p>비교 연산자는 = 외에도 존재한다. 조건식에서 사용하는 연산자를 바꾸거나 복수의 연산자를 조합하면 복잡한 조건식을 만들 수 있다. 검색 조건으로 &lt;&gt; 연산자를 사용하는 예를 살펴보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>박준용</td><td>1976-10-18</td><td>대구광역시 수성구</td></tr><tr><td>2</td><td>김재진</td><td>NULL</td><td>대구광역시 동구</td></tr><tr><td>3</td><td>홍길동</td><td>NULL</td><td>서울특별시 마포구</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample WHERE no &lt;&gt; 2; // WHERE 구로 no 열 값이 2가 아닌 행만 추출</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>박준용</td><td>1976-10-18</td><td>대구광역시 수성구</td></tr><tr><td>3</td><td>홍길동</td><td>NULL</td><td>서울특별시 마포구</td></tr></tbody></table><p>이전의 조건식에서 연산자를 = 에서 &lt;&gt;로 바꾸었다. = 연산자가 서로 같은 값인지를 비교하는 연산자인데 반해, &lt;&gt; 연산자는 서로 다른 값인지를 비교하는 연산자이다. 여기서는 no 열 값이 2가 아닐 경우<br>참이 되므로, 값이 1과 3인 행이 화면에 표시되었다. 이와 같이 WHERE 구에서 지정한 조건식에 따라 복수의 행이 반환되는 경우도 있다. 반드시 하나의 행만 반환되는 것은 아니다. 조건식에 일치하는 행이<br>전혀 없는 경우에는 아무것도 반환되지 않는다.</p><h2 id="3-munjayeolhyeongyi-sangsu"><a href="#3-munjayeolhyeongyi-sangsu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#3-문자열형의-상수"></a> 3. 문자열형의 상수</h2><p>이번에는 name 열을 사용해 동일한 조건으로 검색해본다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>박준용</td><td>1976-10-18</td><td>대구광역시 수성구</td></tr><tr><td>2</td><td>김재진</td><td>NULL</td><td>대구광역시 동구</td></tr><tr><td>3</td><td>홍길동</td><td>NULL</td><td>서울특별시 마포구</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample WHERE name = &apos;박준용&apos;; // WHERE 구로 name 열 값이 &apos;박준용&apos;인 행만 검색</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>박준용</td><td>1976-10-18</td><td>대구광역시 수성구</td></tr></tbody></table><p>no 열이 수치형 열인 반면에, name 열은 문자열 형이다. 수치형 조건식의 경우 비교할 숫자를 그대로 조건식에 표기한다. 하지만 문자열형을 비교할 경우는 '박준용’처럼 <strong>싱글쿼트(’’)로 둘러싸 표기</strong>해야한다. 날짜시간형의 경우에도 싱글쿼트로 둘러싸 표기한다. 이때 연월일을 하이픈(-)으로 구분한다. 시간은 시분초를 콜론(:)으로 구분하여 표기한다. 문자열형의 열과 비교하기 위해서는 조건으로 지정할 값도 그 자료형에 맞춰 지정해야 한다. 한편 자료형에 맞게 표기한 상수값을 '리터럴(literal)'이라 부른다. 문자열 리터럴은 싱글쿼트로 둘러싸 표기한다.</p><h2 id="4-nullgabs-geomsaeg"><a href="#4-nullgabs-geomsaeg" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#4-null값-검색"></a> 4. NULL값 검색</h2><p>'검색’이라고는 해도 조건식을 표기하는 것뿐이므로 간단하다. 하지만 NULL 값을 검색할 경우에는 주의해야 한다. 앞에서 배운방식대로 NULL 조건을 추가하여 조회해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>박준용</td><td>1976-10-18</td><td>대구광역시 수성구</td></tr><tr><td>2</td><td>김재진</td><td>NULL</td><td>대구광역시 동구</td></tr><tr><td>3</td><td>홍길동</td><td>NULL</td><td>서울특별시 마포구</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample WHERE birthday = NULL;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody></tbody></table><p>birthday 열 값이 NULL인 행이 있지만 birthday = NULL과 같은 조건식으로는 검색할 수 없었다. 즉, = 연산자로 NULL을 검색할 수 없다!</p><h3 id="is-null"><a href="#is-null" class="header-anchor">1.4.1. </a><a class="markdownIt-Anchor" href="#is-null"></a> IS NULL</h3><p>NULL 값을 검색할 때는 = 연산자가 아닌 'IS NULL’을 사용해야 한다. IS NULL은 술어로 연산자의 한 종류로 생각하라. <br><br><strong>birthday</strong> IS NULL 과 같이 사용하면 원하는 조회가 가능하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample WHERE birthday **IS NULL**;</span><br></pre></td></tr></table></figure><table><thead><tr><th>no</th><th>name</th><th>birthday</th><th>address</th></tr></thead><tbody><tr><td>2</td><td>김재진</td><td>NULL</td><td>대구광역시 동구</td></tr><tr><td>3</td><td>홍길동</td><td>NULL</td><td>서울특별시 마포구</td></tr></tbody></table><p>이제 NULL 값에 해당하는 행이 표시되었다. 반대로 NULL 값이 아닌 행을 검색하고 싶다면 <em>IS NOT NULL</em>을 사용하면 된다.</p><h2 id="5-bigyo-yeonsanja"><a href="#5-bigyo-yeonsanja" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#5비교-연산자"></a> 5.비교 연산자</h2><p>= 연산자와 &lt;&gt; 연산자, IS NULL로 검색하는 방법에 관해 알아봤다. WHERE 구로 지정하는 조건식은 참고 거짓을 반환하는 비교 연산자나 술어를 사용해서 표기할 수 있다. SQL에서는 많은 연산자 술어를 사용할 수 있다. 여기에서는 대표적인 비교 연산자에 어떤 것이 있는지를 소개한다.</p><hr><ul><li>=연산자<br>좌변과 우변의 값이 같을 경우 참이 된다.</li><li>&lt;&gt; 연산자<br>좌변과 우변의 값이 같지 않을 경우 참이 된다.</li><li><blockquote><p>연산자<br>좌변의 값이 우변의 값보다 클 경우 참이 된다. 같거나 작을 경우는 거짓이 된다.</p></blockquote></li><li><blockquote><p>=연산자<br>좌변의 값이 우변의 값보다 크거나 같을 경우 참이 된다. 작을 경우는 거짓이 된다.</p></blockquote></li><li>&lt;연산자<br>좌변의 값이 우변의 값보다 작을 경우 참이 된다. 같거나 클 경우는 거짓이 된다.</li><li>&lt;=연산자<br>좌변의 값이 우변의 값보다 작거나 같은 경우 참이 된다. 클 경우는 거짓이 된다.</li></ul><hr><p>&lt; 연산자와 &gt; 연산자는 대소관계를 비교하는 연산자이지만 =을 붙임으로써 서로 값이 같은 경우도 비교할 수 있다.  =은 &lt; 과 &gt;의 뒤에 붙인다. &lt;= 나 &gt;=와 같이 사용해야 한다. 또한 &lt;, &gt;와 = 사이에 스페이스를 넣으면 &lt;(또는 &gt;)와 = 로 연산자가 두 개라고 판단하여 에러가 난다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;04gang-geomsaeg-jogeon-jijeonghagi&quot;&gt;&lt;a href=&quot;#04gang-geomsaeg-jogeon-jijeonghagi&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>03. SQL 테이블 구조 참조 및 자료형</title>
    <link href="http://gwanhyeon.github.io/section-03-%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B5%AC%EC%A1%B0%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B8%B0/"/>
    <id>http://gwanhyeon.github.io/section-03-%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B5%AC%EC%A1%B0%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B8%B0/</id>
    <published>2021-05-13T06:36:25.000Z</published>
    <updated>2021-05-13T07:08:06.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="03-teibeul-gujo-camjo-mic-jaryohyeong"><a href="#03-teibeul-gujo-camjo-mic-jaryohyeong" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#03-테이블-구조-참조-및-자료형"></a> 03. 테이블 구조 참조 및 자료형</h1><h2 id="1-desc-myeongryeong"><a href="#1-desc-myeongryeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1desc-명령"></a> 1.DESC 명령</h2><p>앞의 4강에서 <strong>SELECT</strong> 명령으로 테이블의 데이터를 읽어왔다. 테이블은 한 개 이상의 열로 구성되고, 열을 지정하여 조건을 붙이거나 특정 열의 값을 읽어올 수 있다. 테이블에 어떤 열이 있는지 참조할 수 있다면 SELECT 명령을 작성하기 쉬워진다. 여기에서는 <strong>DESC</strong> 명령으로 테이블 구조를 참조하는 방법을 알아본다.</p><blockquote><p>아래의 명령을 실행하면 다음과 같은 결과가 나타난다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC sample;</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>no</td><td>int(11)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>name</td><td>varchar(20)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>birthday</td><td>data</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>address</td><td>varchar(40)</td><td>YES</td><td></td><td>NULL</td><td></td></tr></tbody></table><p>이와 같이 DESC 명령으로 테이블에 어떤 열이 정의되어 있는지 알 수 있다. (DESC는 SQL 명령이 아니다)<br>간단하게 표시된 내용에 대한 설명을 아래와 같이 요약하였다.</p><blockquote><p><strong>Filed</strong></p></blockquote><p>열 이름이 표시된다.</p><blockquote><p><strong>Type</strong></p></blockquote><p>해당 열의 '<strong>자료형</strong>’을 나타낸다. intsms Integer(정수)를 의미한다. 괄호 안의 숫자는 최대 길이를 나타내는데, 예를 들어 int(11)은 '11자리의 정수값을 저장할 수 있는 자료형’을 의미한다.</p><blockquote><p><strong>Null</strong></p></blockquote><p>NULL 값을 허용할 것인지 아닌지를 나타내는 <strong>제약사항</strong>으로 Yes로 지정하면 NULL 값을 허용하게 된다.</p><blockquote><p><strong>Key</strong></p></blockquote><p>해당 열이 '키’로 지정되어 있는지를 나타낸다.</p><blockquote><p><strong>Default</strong></p></blockquote><p>그 열에 주어진 ‘기본값’ 즉, 생략했을 경우 적용되는 값이다. 테이블에 행을 추가할 때 열의 데이터 값을 생략하면 이 기본값으로 채워진다.</p><h2 id="2-jaryohyeong"><a href="#2-jaryohyeong" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2자료형"></a> 2.자료형</h2><p>테이블은 하나 이상의 열로 구성되며 DESC 명령으로 그 구조를 참조할 수 있다. 열에는 몇 가지 속성을 지정할 수 있고, 그중 가장 중요한 속성은 <em>자료형</em>이다.</p><h3 id="integer-hyeong"><a href="#integer-hyeong" class="header-anchor">1.2.1. </a><a class="markdownIt-Anchor" href="#integer-형"></a> INTEGER 형</h3><p>INTEGER 형은 수치형의 하나로 정수값을 저장할 수 있는 자료형이다. 소수점은 포함할 수 없다.(오라클의 경우 NUMBER(P,S) S가 0인 경우와 같다고 볼 수 있다. P는 소숫점을 포함한 전체 자릿수, S는 소수점 자릿수 의미)</p><h3 id="char-hyeong"><a href="#char-hyeong" class="header-anchor">1.2.2. </a><a class="markdownIt-Anchor" href="#char-형"></a> CHAR 형</h3><p>CHAR 형은 문자열형의 하나로 문자열을 저장할 수 있는 자료형이다. 문자열형에서는 열의 최대 길이를 지정해야 한다. CHAR(10)으로 자료형을 지정했을 경우 최대 10문자로 된 문자열을 저장할 수 있으면 11문자로 된 문자열을 저장할 수 없다. 다음으로 설명할 VARCHAR 형은 저장할 문자열의 길이에 맞춰 저장공간을 가변적으로 사용하여 저장한다. 반면 CHAR 형은 언제나 고정된 길이로 데이터가 저장된다. <br><br>그에 따라 ‘고정 길이 문자열’ 자료형이라고 한다. CHAR 형에서는 길이가 고정되기 때문에 최대 길이보다 작은 문자열을 저장할 경우 <strong>공백문자</strong>로 나머지를 채운 후 저장한다. (오라클도 동일)</p><h3 id="varchar-hyeong"><a href="#varchar-hyeong" class="header-anchor">1.2.3. </a><a class="markdownIt-Anchor" href="#varchar-형"></a> VARCHAR 형</h3><p>VARCHAR 형 역시 문자열을 저장할 수 있는 자료형이다. 최대 길이를 지정하는 점은 CHAR 형과 같지만 앞서 말한 것 처럼 데이터 크기에 맞춰 저장공간의 크기도 변경된다.<br>그에 따라 ‘가변 길이 문자열’ 자료형이라고 한다. (오라클에서는 VARCHAR2(n) : 오라클에도 VARCHAR가 있지만 사용하지 않음)</p><h3 id="date-hyeong"><a href="#date-hyeong" class="header-anchor">1.2.4. </a><a class="markdownIt-Anchor" href="#date-형"></a> DATE 형</h3><p>DATE 형은 날짜값을 저장할 수 있는 자료형이다. 날짜값이란 '2013년3월23일’과 같이 연월일의 데이터를 저장할 수 있는 형이다. (오라클도 동일 오라클은 DATE에 시분초 까지 포함되어 있다)</p><h3 id="time-hyeong"><a href="#time-hyeong" class="header-anchor">1.2.5. </a><a class="markdownIt-Anchor" href="#time-형"></a> TIME 형</h3><p>TIME 형은 시간을 저장할 수 있는 자료형이다. ex) '12시 30분 20초’와 같이 시분초의 데이터를 저장할 수 있는 형이다. <em>문자열형에는 고정 길이와 가변 길이가 있다</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;03-teibeul-gujo-camjo-mic-jaryohyeong&quot;&gt;&lt;a href=&quot;#03-teibeul-gujo-camjo-mic-jaryohyeong&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markd
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>02. SQL 데이터베이스 기초 명령어</title>
    <link href="http://gwanhyeon.github.io/section-02-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EA%B8%B0%EC%B4%88/"/>
    <id>http://gwanhyeon.github.io/section-02-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EA%B8%B0%EC%B4%88/</id>
    <published>2021-05-13T06:27:52.000Z</published>
    <updated>2021-05-13T07:07:57.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="select-myeongryeong"><a href="#select-myeongryeong" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#select-명령"></a> SELECT 명령</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 테이블명</span><br></pre></td></tr></table></figure><h1 id="select-from-teibeulmyeong-silhaeng"><a href="#select-from-teibeulmyeong-silhaeng" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#select-from-테이블명-실행"></a> ‘SELECT * FROM 테이블명’ 실행</h1><p>FROM 사이에는 <strong>스페이스</strong>를 넣어 구분한다. 예를 들어 sample 테이블의 모든 데이터를 조회한다면 아래와 같이 SELECT 명령을 입력해야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sample;</span><br></pre></td></tr></table></figure><blockquote><p>주의</p></blockquote><p>만약 SELECT*FROMsample;과 같이 붙여서 입력하면 에러가 발생한다.<br>입력이 끝나면 명령의 마지막을 나타내는 세미콜론(;)을 넣은 뒤 Enter키를 누른다. Enter 키를 누르면 입력한 SQL 명령이 서버에 전달되며 서버는 이를 실행한 후 결과를 반환한다.</p><h1 id="select-myeongryeong-gumun"><a href="#select-myeongryeong-gumun" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#select-명령-구문"></a> SELECT 명령 구문</h1><p>SELECT는 <strong>DML</strong>(Database Manipulation Language)에 속하는 명령으로 SQL에서 자주 사용된다.<br>SELECT 명령으로 데이터베이스의 데이터를 읽어올 수 있다. SELECT 명령은 <em>질의</em>나 <em>쿼리</em>라 불리기도 한다.</p><p>지금까지 실행한 SQL 명령을 다시 한 번 살펴보자.</p><p><em>SELECT</em> : 먼저 맨 앞의 SELECT는 SQL 명령의 한 종류로 ‘SELECT 명령을 실행하세요’ 라는 의미이다.<br><em>\</em> : 애스터리스크(*)는 '모든 열(column)'을 의미하는 메타문자이다. (해당 테이블에 *라는 이름의 열이 존재하는 것이 아니다)</p><p><em>FROM</em> : FROM은 처리 대상 테이블을 지정하는 키워드이다.</p><p>SQL 명령은 키워드에 의해 <em>구</em>라는 단위로 나눌 수 있다. 위의 ‘SELECT * FROM sample’ 에서는 크게 SELECT 구와 FROM 구로 나눌 수 있다.</p><h1 id="yeyageowa-deiteobeiseu-gaegcemyeong"><a href="#yeyageowa-deiteobeiseu-gaegcemyeong" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#예약어와-데이터베이스-객체명"></a> 예약어와 데이터베이스 객체명</h1><p>앞의 SELECT 구문에서 sample 테이블의 내용을 확인했었다. 혹시라도 다른 테이블의 내용을 보고 싶은 경우에는 FROM 뒤의 테이블명을 재지정하면 된다.</p><p><em>SELECT * FROM</em>: 예약어<br><em>sample</em> : 테이블명</p><p><em>SELECT</em>와 <em>FROM</em>이 구를 결정하는 키워드이자 <em>예약어</em>이다. sample은 테이블 이름으로, 예제 데이터베이스의 이름이다.<br>데이터베이스에는 테이블 외에 다양한 데이터를 저장하거나 관리하는 '어떤 것’을 만들 수 있다. 이것을 <em>데이터베이스 객체</em>라고 부르는데, 예를 들면 '뷰(view)'가 그에 해당한다.<br>데이터베이스 객체는 이름을 붙여 관리한다. 같은 이름으로 다른 데이터베이스 객체는 만들 수 없다. (이런 경우 ‘이미 테이블이 정의되어 있다’ 라는 에러가 발생한다)<br>통상적으로 데이터베이스 객체명에는 예약어와 동일한 이름을 사용할 수 없다. 가령 'SELECT’라는 이름의 테이블을 만들 수 없다. 이것이 예약어의 유래이다.</p><h1 id="daesomunja-gubyeol"><a href="#daesomunja-gubyeol" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#대소문자-구별"></a> 대소문자 구별</h1><blockquote><p>예약어와 데이터베이스 객체명은 대소문자를 구별하지 않는다.</p></blockquote><p>SQL 명령과 달리 많은 데이터베이스 제품들은 데이터의 대소문자를 구별한다. 단, 설정에 따라 구별하지 않는 경우도 있다. 이 책에서는 알아보기 쉽도록 예약어는 대문자로, 데이터베이스 객체명은 소문자로 표기한다.</p><h2 id="silhaenghan-gyeolgwa-teibeul"><a href="#silhaenghan-gyeolgwa-teibeul" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#실행한-결과-테이블"></a> 실행한 결과 = 테이블</h2><p>SELECT 명령을 실행하면 표 형식의 데이터가 출력된다. 표 형식의 데이터는 <code>행(레코드)와 열(컬럼/필드)</code>로 구성된다. 행은 모두 동일한 형태로 되어 있으며 옆으로 '열(컬럼/필드)'이 나열되는데, 열마다 이름이 지정되어 있다. 각각의 행과 열이 만나는 부분을 '셀’이라고 부른다. 셀에는 하나의 데이터 값이 저장되어 있다.</p><p>열은 하나의 자료형만 가질 수 있다. 그리고 수치형의 열에 문자형의 데이터를 저장할 수 없다. 데이터를 자료형으로 분류할 수 있다. 그리고 열은 하나의 자료형만 가질 수 있다.</p><h2 id="gabsi-eobsneun-deiteo-null"><a href="#gabsi-eobsneun-deiteo-null" class="header-anchor">5.2. </a><a class="markdownIt-Anchor" href="#값이-없는-데이터-null"></a> 값이 없는 데이터 = NULL</h2><p>SELECT의 결과를 잘 살펴보면 셀의 값이 <em>NULL</em>로 표시된 부분이 있다. NULL은 특별한 데이터 값으로 아무것도 저장되어 있지 않은 상태를 의미한다. 다시 말해, NULL이라는 데이터가 저장되어 있는 것이 아닌,<br>'아무 것도 저장되어 있지 않은 상태’라는 뜻이다. NULL은 SQL에서 <em>대단히 중요한 개념</em>으로, 자세한 것은 뒤에서 설명한다.  <code>NULL은 데이터가 들어있지 않은 것을 의미하는 특별한 값이다</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;select-myeongryeong&quot;&gt;&lt;a href=&quot;#select-myeongryeong&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#select-명령&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>1. SQL 데이터베이스 개요</title>
    <link href="http://gwanhyeon.github.io/section-01-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%99%80sql/"/>
    <id>http://gwanhyeon.github.io/section-01-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%99%80sql/</id>
    <published>2021-05-13T06:10:12.000Z</published>
    <updated>2021-05-13T07:07:52.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1gang-deiteobeiseuwa-sql"><a href="#1gang-deiteobeiseuwa-sql" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#1강-데이터베이스와-sql"></a> 1강. 데이터베이스와 SQL</h1><p>데이터란 컴퓨터 안에 기록되어 있는 숫자를 의미하여, 이러한 데이터의 집합을 <code>데이터베이스</code>라고 한다. 넓은 의미에서는 '컴퓨터 안에 기록된 모든 것’을 데이터베이스라고 할 수 있다.</p><p>데이터 베이스 내의 데이터는 영구적으로 보존되어야 한다. 주기억장치(컴퓨터 메모리, RAM)에만 데이터를 저장한다면, 전원을 끄는 순간 모든 데이터는 사라져 버린다. 이런 상태에서는 영구적이라 말할 수 없다.  따라서 데이터베이스의 데이터는 하드디스크나 플래시메모리(SSD) 등 비휘발성 저장장치에 저장한다.</p><h2 id="1-dbwa-dbms"><a href="#1-dbwa-dbms" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1-db와-dbms"></a> 1. DB와 DBMS</h2><p>데이터베이스는 <code>DB</code>라는 약자로 통용된다. 데이터베이스는 저장장치 내에 정리되어 저장된 데이터의 집합이고, 이를 효율적으로 관리하는 소프트웨어를 <code>데이터베이스 관리 시스템(Database Management System)</code><br>약자로 <em>DBMS</em>라 부른다. DBMS가 필요한 이유는 다음과 같다.</p><h3 id="saengsanseong"><a href="#saengsanseong" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#생산성"></a> 생산성</h3><p>시스템 개발 과정에서의 생산성 향상을 도모할 수 있다. 어떤 시스템에서든지 데이터 검색, 추가, 삭제, 갱신과 같은 처리가 이루어지게 된다. 이와 같은 기본 기능을 DBMS가 제공한다. 시스템을 구축할 때<br>기본 기능부터 구현하는 것은 비용측면에서 효율적이지 않다.</p><h3 id="gineungseong"><a href="#gineungseong" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#기능성"></a> 기능성</h3><p>DBMS는 데이터베이스를 다루는 기능을 많이 제공한다. 복수 유저의 요청에 대응하거나, 대용량의 데이터를 저장하고 고속으로 검색하는 기능을 제공하기도 한다. 나아가 데이터베이스 관리 기능을 유저가<br>확장할 수도 있어 유연하게 시스템을 개발할 수 있다.</p><h3 id="sinroeseong"><a href="#sinroeseong" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#신뢰성"></a> 신뢰성</h3><p>대규모 데이터베이스는 많은 요청에 대응할 수 있도록 만들어져 있다. 이를위해 하드웨어를 여러 대로 구성하여 신뢰성을 높이는 동시에 성능 향상을 꾀하기도 한다. 실제로 일부 DBMS는 컴퓨터 여러 대를 두고, 소프트웨어를 통해 확장성(Scalability)과 부하 분산(load balancing)을 구현한다. 이를 보통 ‘클러스터 구성’ 또는 '스케일 아웃’이라 부른다.</p><p>또한 많은 DBMS가 데이터베이스의 데이터를 다른 저장장치로 내보내거나(export), 반대로 데이터베이스 안에 데이터를 집어넣는 import 기능을 갖췄다. 이때 집어넣기 및 내보내기 기능을 통해 데이터베이스를<br>간단하게 백업할 수 있다.</p><h2 id="3-deiteobeiseureul-jojaghaneun-eoneo-sql"><a href="#3-deiteobeiseureul-jojaghaneun-eoneo-sql" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#3-데이터베이스를-조작하는-언어-sql"></a> 3. 데이터베이스를 조작하는 언어 SQL</h2><p>DBMS를 이용하면 간접적으로 데이터베이스를 참조할 수 있고, 혹은 데이터를 추가하거나 삭제, 갱신할 수도 있다. SQL은 IBM이 개발한 SEQUEL이라는 관계형 데이터베이스 조작용 언어를 기반으로 만들어졌다. 현재 ISO등에 의해 표준화가 진행되어, C 언어나 자바와 마찬가지로 표준 언어이다.</p><h3 id="sql-myeongryeongyi-jongryu"><a href="#sql-myeongryeongyi-jongryu" class="header-anchor">1.2.1. </a><a class="markdownIt-Anchor" href="#-sql-명령의-종류"></a> - SQL 명령의 종류</h3><p>SQL 명령은 다음과 같이 3가지로 나뉠 수 있다.</p><blockquote><p>DML(Data Manipulation Language)</p></blockquote><p><code>데이터베이스에 새롭게 데이터를 CRUD 할 때 사용한다</code>. SQL의 가장 기본이 되는 명령셋(set) 이다.</p><p><em>SELECT</em><br>데이터베이스에 들어 있는 데이터를 조회하거나 검색하기 위한 명령어를 말하는 것으로 RETRIEVE 라고도 함</p><p><em>INSERT, UPDATE, DELETE</em><br>데이터베이스의 테이블에 들어 있는 데이터에 변형을 가하는 종류(데이터 삽입, 수정, 삭제)의 명령어들을 말함.</p><blockquote><p>DDL(Data Definition Language)</p></blockquote><p><code>데이터를 정의하는 명령어</code>. 데이터베이스는 <code>데이터 베이스 객체(object)</code>라는 데이터 그릇을 이용하여 데이터를 관리하는데, 이 같은 객체를 만들거나 삭제하는 명령어이다.</p><p><em>CREATE, ALTER,DROP,RENAME,TRUNCATE</em><br>테이블과 같은 데이터 구조를 정의하는데 사용되는 명령어들로 (생성, 변경, 삭제, 이름변경) 데이터 구조와 관련된 명령어들을 말함.</p><blockquote><p>DCL(Data Control Language)</p></blockquote><p><code>데이터를 제어하는 명령어</code>. DCL에는 트랜잭션을 제어하는 명령과 데이터 접근권한을 제어하는 명령이 포함되어 있다.</p><p><em>GRANT,REVOKE</em><br>데이터베이스에 접근하고 객체들을 사용하도록 권한을 주고 회수하는 명령어들을 말함.</p><blockquote><p>TCL(Transaction Control Language)</p></blockquote><p>트랜잭션 제어어라 칭한다.</p><ul><li>COMMIT, ROLLBACK,SAVEPOINT*<br>논리적인 작업의 단위를 묶어서 DML에 의해 조작된 결과를 작업단위(트랜잭션) 별로 제어하는 명령어를 말함.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1gang-deiteobeiseuwa-sql&quot;&gt;&lt;a href=&quot;#1gang-deiteobeiseuwa-sql&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1강-데이
      
    
    </summary>
    
    
      <category term="Database" scheme="http://gwanhyeon.github.io/categories/database/"/>
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/categories/database/sql/"/>
    
    
      <category term="SQL" scheme="http://gwanhyeon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 04 주석</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210502-chapter04-%EC%A3%BC%EC%84%9D/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210502-chapter04-%EC%A3%BC%EC%84%9D/</id>
    <published>2021-05-02T14:15:54.000Z</published>
    <updated>2021-05-02T15:44:14.129Z</updated>
    
    <content type="html"><![CDATA[<p>이번에 살펴볼 파트는 주석파트입니다. 처음에 살펴볼 내용중에서 첫장부터 제게 크게 다가온 명언중 하나는</p><blockquote><p>나쁜 코드에 주석을 달지 마라. 새로 짜라.</p></blockquote><ul><li>브라이언 W. 커니핸,P.J 플라우거</li></ul><p>잘 달린 주석은 그 어떤 정보보다 유용하지만, 경솔하고 근거없는 주석은 코드를 이해하기 어렵게 만든다고 합니다. 우리는 코드로 의도를 표현하지 못해, 실패를 만회하기 위해 주석을 사용한다.</p><p>주석을 무시하는 이유중 가장 무서운것은 <code>거짓말</code>을 한다는것이다. 오래되면 오래될 수록 그릇될 가능성이 있다.</p><p><em>진실은 한곳에만 존재한다. 바로 코드이다</em> 우리는 주석을 가능한 줄이도록 해야한다.</p><h1 id="juseogeun-nabbeun-kodeureul-bowanhaji-moshanda"><a href="#juseogeun-nabbeun-kodeureul-bowanhaji-moshanda" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#주석은-나쁜-코드를-보완하지-못한다"></a> 주석은 나쁜 코드를 보완하지 못한다.</h1><p>코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다. 표현력이 풍부하고 깔끔하며 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다.</p><h1 id="kodeuro-yidoreul-pyohyeonhara"><a href="#kodeuro-yidoreul-pyohyeonhara" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#코드로-의도를-표현하라"></a> 코드로 의도를 표현하라</h1><p>확실히 코드만으로 의도를 설명하기가 어려운 경우가 있다. 몇초만 더 생각하면 더 좋은 코드를 짤 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 직원에게 복지 혜택을 받을 자격이 있는지 검사한다. </span></span><br><span class="line"><span class="keyword">if</span> ((emplotee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>주석으로 의도를 표현하지 말고 코드로 표현하라.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (employee.isEligibleForFullBenefits())</span><br></pre></td></tr></table></figure><h1 id="joheun-juseog"><a href="#joheun-juseog" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#좋은-주석"></a> 좋은 주석</h1><p>정말로 좋은 주석은, 주석을 달지 않을 방법을 찾아낸 주석이라는 사실이다.</p><h2 id="beobjeogin-juseog"><a href="#beobjeogin-juseog" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#법적인-주석"></a> 법적인 주석</h2><p>회사가 정립한 구현 표준에 맞춰 법적인 이유로 특정 주식을 넣으라고 명시한다. 각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보는 필요하고도 타당하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright (C) 2003, 2004, 2005 by Object Montor, Inc. All right reserved.</span></span><br><span class="line"><span class="comment">// GNU General Public License</span></span><br></pre></td></tr></table></figure><h2 id="jeongboreul-jegonghaneun-juseog"><a href="#jeongboreul-jegonghaneun-juseog" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#정보를-제공하는-주석"></a> 정보를 제공하는 주석</h2><p>때로는 기본적인 정보를 주석으로 제공하면 편리하다. 예를 들면, 다음 주석은 추상 메서드가 반환할 값을 설명한다. 물론 이 또한 <code>responderBeingTested</code> 로 바꾸면 주석이 필요 없어진다. 이왕이면 시각과 날짜를 변환해주는 클래스를 만들어 코드를 옮겨주면 더 좋고 깔끔하겠다. 주석이 그러면 필요 없어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 테스트 중인 Responder 인스턴스를 반환</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Responder <span class="title">responderInstance</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="yidoreul-seolmyeonghaneun-juseog"><a href="#yidoreul-seolmyeonghaneun-juseog" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#의도를-설명하는-주석"></a> 의도를 설명하는 주석</h2><p>주석은 구현을 이해하게 도와주는 선을 넘어 결정에 깔린 의도까지 설명한다. 다음은 주석으로 흥미로운 결정을 기록한 예제이다. 두 객체를 비교할 때 저자는 다른 어떤 객체보다 자기 객체에 높은 순위를 주기로 결정했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 스레드를 대량 생성하는 방법으로 어떻게든 경쟁 조건을 만들려 시도한다.  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &gt; <span class="number">2500</span>; i++) &#123;</span><br><span class="line">    WidgetBuilderThread widgetBuilderThread = </span><br><span class="line">        <span class="keyword">new</span> WidgetBuilderThread(widgetBuilder, text, parent, failFlag);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(widgetBuilderThread);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yimireul-myeongryohage-balghineun-juseog"><a href="#yimireul-myeongryohage-balghineun-juseog" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#의미를-명료하게-밝히는-주석"></a> 의미를 명료하게 밝히는 주석</h2><p>떄때로 모호한 인수나 반환값은 그 의미를 읽기 좋게 표현하면 이해하기 쉬워진다. 일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋곗지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미는 명로하게 밝히는 주석이 용이하다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertTru(a.compareTo(a) == <span class="number">0</span>); <span class="comment">// a == a</span></span><br><span class="line">assertTru(a.compareTo(b) == -<span class="number">1</span>); <span class="comment">// a &lt; a</span></span><br><span class="line">assertTru(a.compareTo(aa) == <span class="number">1</span>); <span class="comment">// a &gt; aa</span></span><br></pre></td></tr></table></figure><h2 id="gyeolgwareul-gyeonggohaneun-juseog"><a href="#gyeolgwareul-gyeonggohaneun-juseog" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#결과를-경고하는-주석"></a> 결과를 경고하는 주석</h2><p>때로 다른 프로그래머에게 결과를 경고할 목적으로 주석을 사용한다. 경고할 목적으로 주석을 사용한다. 예를 들어, 다음은 특정 테스트 케이스를 꺼야하는 이유를 설명하는 주석이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 여유 시간이 충분하지 않다면 실행하지 마십시오.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_testWithReallyBigFile</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> simpleDateFormat <span class="title">makeStandardHttpDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// SimpleDateFormat 은 스레드에 안전하지 못하다.</span></span><br><span class="line">  <span class="comment">// 그러므로 각 인스턴스를 독립적으로 생성해야 한다.</span></span><br><span class="line">  SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"EEE, dd MMM  yyyy HH:mm:ss z"</span>);</span><br><span class="line">  df.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</span><br><span class="line">  <span class="keyword">return</span> df;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="todo-juseog"><a href="#todo-juseog" class="header-anchor">3.6. </a><a class="markdownIt-Anchor" href="#todo-주석"></a> TODO 주석</h2><p>앞으로 할 일은 <code>TODO</code> 로 남겨두면 편하다. 하지만, 너무 많아지면 좋지 않다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO-MdM 현재 필요하지 않다.</span></span><br><span class="line"><span class="comment">// 체크아웃 모델을 도입하면 함수가 필요 없다.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> VersionInfo <span class="title">makeVersion</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jungyoseongeul-gangjohaneun-juseog"><a href="#jungyoseongeul-gangjohaneun-juseog" class="header-anchor">3.7. </a><a class="markdownIt-Anchor" href="#중요성을-강조하는-주석"></a> 중요성을 강조하는 주석</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String listItemContent = match.group(<span class="number">3</span>).trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다.</span></span><br><span class="line"><span class="comment">// 문자열에 시작 공백이 있으면 다른 문자열로 인식되기 때문이다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ListItemWidget(<span class="keyword">this</span>, listItemContent, <span class="keyword">this</span>.level + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> buildList(text.substring(match.end()));</span><br></pre></td></tr></table></figure><h2 id="gonggae-apieseo-javadocs"><a href="#gonggae-apieseo-javadocs" class="header-anchor">3.8. </a><a class="markdownIt-Anchor" href="#공개-api에서-javadocs"></a> 공개 API에서 Javadocs</h2><p>공개 API를 구현하고 싶으면 반드시 훌륭한 Javadocs를 작성한다.</p><h2 id="nabbeun-juseog"><a href="#nabbeun-juseog" class="header-anchor">3.9. </a><a class="markdownIt-Anchor" href="#나쁜-주석"></a> 나쁜 주석</h2><p>대다수의 주석이 이 범주에 속한다. 엉성한 코드를 변명하거나 허술한 코드를 지탱하려 한다.</p><h2 id="jujeolgeorineun-juseog"><a href="#jujeolgeorineun-juseog" class="header-anchor">3.10. </a><a class="markdownIt-Anchor" href="#주절거리는-주석"></a> 주절거리는 주석</h2><p>주석을 달기로 결정했다면 충분한 시간을 들여 최고의 주석을 달도록 노력한다. 주석은 독자와 제대로 소통하지 못하는 주석이다. 주석은 바이트만낭비할뿐이다.<br>주석의 의미를 알아내려면 다른 코드를 봐야한다. 이해가 안되어 다른 모듈까지 뒤져야 하는 주석은 제대로 된 주석이 아니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String propertiesPath = propertiesLocation + <span class="string">"/"</span> + PROPERTIES_FILE;</span><br><span class="line">    FileInputStream propertiesStream = <span class="keyword">new</span> FileInputStream(propertiesPath);</span><br><span class="line">    loadedProperties.load(propertiesStream);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 속성 파일이 없다면 기본값을 모두 메모리로 읽어 들였다는 의미다. </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gateun-iyagireul-jungboghaneun-juseog"><a href="#gateun-iyagireul-jungboghaneun-juseog" class="header-anchor">3.11. </a><a class="markdownIt-Anchor" href="#같은-이야기를-중복하는-주석"></a> 같은 이야기를 중복하는 주석</h2><p>주석이 같은 코드의 내용을 그대로 중복하면 코드보다 주석을 읽는 시간이 더 오래걸린다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this.closed가 true일 때 반환되는 유틸리티 메서드다.</span></span><br><span class="line"><span class="comment">// 타임아웃에 도달하면 예외를 던진다. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForClose</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!closed) &#123;</span><br><span class="line">    wait(timeoutMillis);</span><br><span class="line">    <span class="keyword">if</span> (!closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"MockResponseSender could not be closed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ohaehal-yeojiga-issneun-juseog"><a href="#ohaehal-yeojiga-issneun-juseog" class="header-anchor">3.12. </a><a class="markdownIt-Anchor" href="#오해할-여지가-있는-주석"></a> 오해할 여지가 있는 주석</h2><p>의도는 좋았으나 프로그래머가 딱 맞을 정도로 엄밀하게는 주석을 달지 못하기도 한다. 예를 들면 위의 코드에서 <code>this.closed</code> 가 <code>true</code> 로 *변하는 순간에 반환하지 않는다.  <code>this.closed</code> 가 <code>true</code> 여야 메서드를 반환한다.<br>즉, wait 의 타임아웃을 무조건 기다렸다가 에러를 통해 확인하게 된다. 잘못된 정보로 인해 자기코드가 굼벵이 기어가듯 돌아가는 이유를 찾느라 골머리를 앓는다.</p><h2 id="yimujeogeuro-daneun-juseog"><a href="#yimujeogeuro-daneun-juseog" class="header-anchor">3.13. </a><a class="markdownIt-Anchor" href="#의무적으로-다는-주석"></a> 의무적으로 다는 주석</h2><p>모든 함수에 Javadocs를 달거나 모든 변수에 주석을 달아야한다는 규칙은 어리석기 그지없다. 이런주석은 코드를 복잡하게 맏늘며, 거짓말을 퍼뜨리고, 혼동과 무질서를 초래한다. 예를 들어, 코드만 헷갈리게 만들며 거짓말할 가능성을 높이며 잘못된 정보를 제공할 여지를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> title CD 제목</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> author CD 저자</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tracks CD 트랙 숫자</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> durationInMinutes CD 길이(단위: 분)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCD</span><span class="params">(String title, String author, <span class="keyword">int</span> tracks, <span class="keyword">int</span> durationInMinutes)</span> </span>&#123;</span><br><span class="line">    CD cd = <span class="keyword">new</span> CD();</span><br><span class="line">    cd.title = title;</span><br><span class="line">    cd.author = author;</span><br><span class="line">    cd.tracks = tracks;</span><br><span class="line">    cd.duration = durationInMinutes;</span><br><span class="line">    cdList.add(cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iryeogeul-giroghaneun-juseog"><a href="#iryeogeul-giroghaneun-juseog" class="header-anchor">3.14. </a><a class="markdownIt-Anchor" href="#이력을-기록하는-주석"></a> 이력을 기록하는 주석</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>변경 이력 (11-Oct-2001부터)</span><br><span class="line"><span class="bullet">* </span>------------------------------------------------</span><br><span class="line"><span class="bullet">* </span>11-Oct-2001 : 클래스를 다시 정리하고 새로운 패키징</span><br><span class="line"><span class="bullet">* </span>05-Nov-2001: getDescription() 메소드 추가</span><br><span class="line"><span class="bullet">* </span>... 등등</span><br></pre></td></tr></table></figure><p>해당 정보들은 소스 코드 관리시스템(Git,SVN)과 같은 것들이 해준다.</p><h2 id="isseuna-mana-han-juseog"><a href="#isseuna-mana-han-juseog" class="header-anchor">3.15. </a><a class="markdownIt-Anchor" href="#있으나-마나-한-주석"></a> 있으나 마나 한 주석</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 기본 생성자</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AnnualDateRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>너무 당연한 사실은 주석으로 새로운 정보를 제공해주지 못한다. 지나친 주석을 무시하는 습관에 빠진다. 코드를 읽으며 자동으로 주석을 건너뛴다.</p><h2 id="museoun-jabeum"><a href="#museoun-jabeum" class="header-anchor">3.16. </a><a class="markdownIt-Anchor" href="#무서운-잡음"></a> 무서운 잡음</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The licenceName. */</span></span><br><span class="line"><span class="keyword">private</span> String licenceName;</span><br></pre></td></tr></table></figure><p>오타가 발생하면 애매한 코드가 되어버린다.</p><h2 id="hamsuna-byeonsuro-pyohyeonhal-su-issdamyeon-juseogeul-dalji-mara"><a href="#hamsuna-byeonsuro-pyohyeonhal-su-issdamyeon-juseogeul-dalji-mara" class="header-anchor">3.17. </a><a class="markdownIt-Anchor" href="#함수나-변수로-표현할-수-있다면-주석을-달지-마라"></a> 함수나 변수로 표현할 수 있다면 주석을 달지 마라</h2><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역 목록 &lt;smodule&gt;에 속하는 모듈이 우리가 속한 하위 시스템에 의존하는가?</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">module</span>.getDependSubsystems().contains(subSysMod.getSubSystem()))</span><br></pre></td></tr></table></figure><p>주석을 없애고 다음과 같이 표현한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList moduleDependencies = smodule.getDependSubSystems();</span><br><span class="line">String ourSubSystem = subSysMod.getSubSystem();</span><br><span class="line"><span class="keyword">if</span> (moduleDependees.contains(ourSubSystem))</span><br></pre></td></tr></table></figure><h2 id="wicireul-pyosihaneun-juseog"><a href="#wicireul-pyosihaneun-juseog" class="header-anchor">3.18. </a><a class="markdownIt-Anchor" href="#위치를-표시하는-주석"></a> 위치를 표시하는 주석</h2><p>/로 이어지는 잡음은 제거하는 편이 좋다.</p><h2 id="dadneun-gwalhoe-daneun-juseog"><a href="#dadneun-gwalhoe-daneun-juseog" class="header-anchor">3.19. </a><a class="markdownIt-Anchor" href="#닫는-괄호에-다는-주석"></a> 닫는 괄호에 다는 주석</h2><p>닫는 괄호에 특수한 주석을 달아놓지 말자. 중첩이 심하고 장황한 함수라면 의미가 있을지도 모르지만, 작고 캡슐화된 함수에는 잡음일 뿐이다.<br>그러므로 닫는 괄호에 주석을 달아야겠다는 생각이 든다면 대신에 함수를 줄이자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(state) &#123;</span><br><span class="line">    <span class="keyword">while</span>(t) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="comment">//while</span></span><br><span class="line">  &#125; <span class="comment">// if</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gongroreul-dolrigeona-jeojareul-pyosihaneun-juseog"><a href="#gongroreul-dolrigeona-jeojareul-pyosihaneun-juseog" class="header-anchor">3.20. </a><a class="markdownIt-Anchor" href="#공로를-돌리거나-저자를-표시하는-주석"></a> 공로를 돌리거나 저자를 표시하는 주석</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* kgh가 추가함 */</span></span><br></pre></td></tr></table></figure><p>소스 코드 관리시스템 Github는 모든것을 기억한다.</p><h3 id="juseogeuro-ceorihan-kodeu"><a href="#juseogeuro-ceorihan-kodeu" class="header-anchor">3.20.1. </a><a class="markdownIt-Anchor" href="#주석으로-처리한-코드"></a> 주석으로 처리한 코드</h3><p>주석으로 처리한 코드만큼 밉살스러운 관행도 드물다. 다음과 같은 코드는 작성하지 말라. 과감해지자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.bytePos = writeBytes(pngIdBytes, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//hdrPos = bytePos;</span></span><br><span class="line">writeHeader();</span><br><span class="line">writeResolution();</span><br><span class="line"><span class="comment">//dataPos = bytePos;</span></span><br><span class="line"><span class="keyword">if</span> (writeImageData()) &#123;</span><br><span class="line">    wirteEnd();</span><br><span class="line">    <span class="keyword">this</span>.pngBytes = resizeByteArray(<span class="keyword">this</span>.pngBytes, <span class="keyword">this</span>.maxPos);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.pngBytes = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pngBytes;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## HTML 주석</span><br><span class="line"></span><br><span class="line">HTML 주석은 혐오 그 자체다. `Javadocs` 와 같은 도구로 주석을 뽑아 웹 페이지에 올려야 한다면 주석에 HTML 태그를 삽입하는 것은 도구가 해야한다.</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">​&lt;p/&gt;</span><br><span class="line">​&lt;pre&gt;</span><br><span class="line">​용법:</span><br><span class="line">블라블라~</span><br></pre></td></tr></table></figure><h2 id="jeonyeog-gyeongbo"><a href="#jeonyeog-gyeongbo" class="header-anchor">3.21. </a><a class="markdownIt-Anchor" href="#전역-경보"></a> 전역 경보</h2><p>주석을 달아야 한다면 근처에 있는 코드만 기술하라. 시스템의 전반적인 형태, 정보를 담지 말아야 한다.</p><h2 id="neomu-manheun-jeongbo"><a href="#neomu-manheun-jeongbo" class="header-anchor">3.22. </a><a class="markdownIt-Anchor" href="#너무-많은-정보"></a> 너무 많은 정보</h2><p>관련 없는 정보를 장황하게 늘어놓지마라!</p><h2 id="mohohan-gwangye"><a href="#mohohan-gwangye" class="header-anchor">3.23. </a><a class="markdownIt-Anchor" href="#모호한-관계"></a> 모호한 관계</h2><p>주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야한다.</p><h2 id="hamsu-hedeo"><a href="#hamsu-hedeo" class="header-anchor">3.24. </a><a class="markdownIt-Anchor" href="#함수-헤더"></a> 함수 헤더</h2><p>짧은 함수는 긴 설명이 필요없다. 짧고 한가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다.</p><h2 id="bigonggae-kodeueseo-javadocs"><a href="#bigonggae-kodeueseo-javadocs" class="header-anchor">3.25. </a><a class="markdownIt-Anchor" href="#비공개-코드에서-javadocs"></a> 비공개 코드에서 Javadocs</h2><p>공개할 API 가 아니라면 쓸모가 없다. 코드만 보기싫고 산만해질 가능성이 높다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번에 살펴볼 파트는 주석파트입니다. 처음에 살펴볼 내용중에서 첫장부터 제게 크게 다가온 명언중 하나는&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나쁜 코드에 주석을 달지 마라. 새로 짜라.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;브라이언 W.
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="주석" scheme="http://gwanhyeon.github.io/tags/%EC%A3%BC%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 주사위 굴리기 14499</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210423-dice-roll/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210423-dice-roll/</id>
    <published>2021-04-22T16:22:59.000Z</published>
    <updated>2021-05-13T04:48:49.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-14499munje"><a href="#samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-14499munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-주사위-굴리기-14499문제"></a> <a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 주사위 굴리기 14499문제</a></h1><h2 id="aidieo"><a href="#aidieo" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#아이디어"></a> 아이디어</h2><ol><li>N*M의 상하좌우의 지도가 주어진다.</li><li>주사위 전개도를 살펴보면 다음과 같다.<br>2(top)<br>4(left) 1(up) 3(right)<br>5(bottom)<br>6(down)</li></ol><p>해당 문제에서는 다음과 같은 변수명으로 주사위 문제를 풀어볼 예정이다.</p><ol start="3"><li>주사위의 문제 조건을 살펴보면 다음과 같다.<br>(1) 가장 처음 주사위 모든면에 ‘0’의 값으로 초기화가 된 상태로 진행한다.<br>(2) 지도 각 칸에 N*M 가로, 세로 형태의 값을 입력받는다.<br>(3) 좌표는 X,Y값으로 구분한다.<br>(4) 지도가 ‘0’일 경우</li></ol><ul><li>주사위 바닥을 지도칸에 복사시킨다.<br>(5) 지도가 ‘0’이 아닐 경우</li><li>지도칸 숫자를 주사위바닥에 복사한다.</li><li>지도칸에 쓰여진 수를 ‘0’으로 초기화 한다.<br>(6) 지도의 N*M범위를 벗어날 수 없다. 즉, 이동하면 안되고 명령을 무시해야한다.<br>(7) 명령은 동 1 서 2 북 3 남 4의 형태로 값의 입력이 주어진다.<br>(8) 입력은 세로N, 가로M, 주사위 놓은곳의 좌표 X Y 명령어의 개수 K가 주어진다.<br>(9) 명령어의 개수만큼 명령어들을 입력받는다.</li></ul><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>가로n ,세로 m, 주사위 좌표 x/y, 명령어의 개수 k를 입력받는다.</li><li>command로 주어진 1,2,3,4 방향에 대한 리스트를 담는 List를 선언하여 저장한다.</li><li>현재 주사위의 상태를 가지고 있는 주사위 클래스 Dice클래스를 선언한다.</li><li>현재 주사위의 상태를 가지고 있는 x,y 초기에 주어지는 주사위의 비용은 0이므로 모든값들을 생성자로 초기화를 진행한다.</li><li>명령어의 순서대로 주사위를 굴린다.</li></ol><ul><li>다음 이동 위치 = 현재 위치 + 명령어 이동 방향에 따른 값 X,Y</li></ul><ol start="6"><li>주사위의 상태를 복사하여 주사위를 굴릴때 값을 변경시킨다.</li></ol><ul><li>값을 담고있는 하나의 변수를 선언하여 주사위에 쓰여진 비용값들을 담아 놓는다.</li></ul><ol start="7"><li>현재 이동된 값이 지도 범위에 만족하는지 확인한다.</li></ol><ul><li>지도의 범위를 만족하면 False, 만족하지못하면 True를 리턴한다. True를 리턴할 경우 문제의 조건에 나와있듯이 값을 출력하지 않고 다음의 경우로 이동한다. 따라서 continue를 통해 해당 경우를 뛰어넘는다.</li></ul><ol start="8"><li>지도의 값이 ‘0’ 일 경우</li></ol><ul><li>주사위바닥수가 칸에 복사된다.</li></ul><ol start="9"><li>지도의 값이 ‘0’이 아닐경우 칸에 쓰여진 수가 주사위 바닥면으로 복사한다. 그리고 칸에 쓰여진 수를 0으로 변경한다.</li></ol><blockquote><p>주사위 회전의 경우</p></blockquote><p>사용할 변수</p><p>지금 부터 말하는 값들의 기준은 내가 앞에서 바라봤을때의 기준으로 설명을 진행하겠다. top 기준 위 bottom 기준 아래 left 기준 왼쪽 right 기준 오른쪽 up 주사위 맨위  down 주사위 맨 바닥의 총 6가지의 주사위의 경우를 사용한다.</p><p>CASE1) 오른쪽으로 주사위를 굴릴 경우</p><ol><li>UP -&gt; RIGHT</li><li>RIGHT -&gt; DOWN</li><li>DOWN -&gt; LEFT</li><li>LEFT -&gt; UP</li></ol><p>CASE2) 왼쪽으로 주사위를 굴릴 경우</p><ol><li>UP -&gt; LEFT</li><li>LEFT -&gt; DOWN</li><li>DOWN -&gt; RIGHT</li><li>RIGHT -&gt; UP</li></ol><p>CASE3) 위로 주사위를 굴릴 경우</p><ol><li>UP -&gt; TOP</li><li>TOP -&gt; DOWN</li><li>DOWN -&gt; BOTTOM</li><li>BOTTOM -&gt; UP</li></ol><p>CASE4) 아래로 주사위를 굴릴 경우</p><ol><li>TOP -&gt; UP</li><li>UP -&gt; BOTTOM</li><li>BOTTOM -&gt; DOWN</li><li>DOWN -&gt; TOP</li></ol><p>총 4가지의 오른쪽, 왼쪽, 위로, 아래로 주사위를 굴리는 경우를 처리할 수 있습니다. 해당 사항에서는 문제에서 주어진대로 동서북남의 경우로 처리를 진행합니다.<br>그리고, 해당 경우의 수를 모두 지나고나서 맨위의 주사위에 있는 비용값을 출력해주고, Dice의 객체의 currX, currY의 값을 현재 이동된 값으로 갱신하여 값을 출력시켜주면 해당 문제를 해결 할 수 있습니다. 약 40분정도 소요되었던 문제였고, 대표적인 시뮬레이션 문제라고 생각합니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주사위굴리기<span class="title">_14499</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m,x,y,k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;       <span class="comment">// 동서북</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; commandList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> upCopy;      <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> topCopy;     <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> rightCopy;   <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> leftCopy;    <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> bottomCopy;  <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> downCopy;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        x = Integer.parseInt(st.nextToken());</span><br><span class="line">        y = Integer.parseInt(st.nextToken());</span><br><span class="line">        k = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        commandList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            commandList.add(Integer.parseInt(st.nextToken()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 현재 주사위 상태 객체</span></span><br><span class="line">        Dice dice = <span class="keyword">new</span> Dice(x,y,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 명령어 대로 주사위를 돌린다.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commandList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> dx = dice.currX;</span><br><span class="line">            <span class="keyword">int</span> dy = dice.currY;</span><br><span class="line">            <span class="comment">// 현재 주사위 방향</span></span><br><span class="line">            <span class="keyword">int</span> currDir = commandList.get(i)-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[currDir][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[currDir][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 주사위 이동방향 체크하기</span></span><br><span class="line">            <span class="keyword">if</span>(isCheckRange(mx,my)) <span class="keyword">continue</span>;</span><br><span class="line">            diceStateSave(dice);</span><br><span class="line">            diceTumble(dice, currDir);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 지도가 0일 경우</span></span><br><span class="line">            <span class="keyword">if</span>(map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                map[mx][my] = dice.down;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 지도가 0이 아닐 경우</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dice.down = map[mx][my];</span><br><span class="line">                map[mx][my] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dice.up);</span><br><span class="line">            dice.currX = mx;</span><br><span class="line">            dice.currY = my;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diceTumble</span><span class="params">(Dice dice, <span class="keyword">int</span> currDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(currDir == <span class="number">0</span>)&#123;</span><br><span class="line">            dice.right = upCopy;</span><br><span class="line">            dice.down = rightCopy;</span><br><span class="line">            dice.left = downCopy;</span><br><span class="line">            dice.up = leftCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">1</span>)&#123;</span><br><span class="line">            dice.left = upCopy;</span><br><span class="line">            dice.down = leftCopy;</span><br><span class="line">            dice.right = downCopy;</span><br><span class="line">            dice.up = rightCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">2</span>)&#123;</span><br><span class="line">            dice.top = upCopy;</span><br><span class="line">            dice.down = topCopy;</span><br><span class="line">            dice.bottom = downCopy;</span><br><span class="line">            dice.up = bottomCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">3</span>)&#123;</span><br><span class="line">            dice.up = topCopy;</span><br><span class="line">            dice.bottom = upCopy;</span><br><span class="line">            dice.down = bottomCopy;</span><br><span class="line">            dice.top = downCopy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diceStateSave</span><span class="params">(Dice dice)</span> </span>&#123;</span><br><span class="line">        upCopy = dice.up;</span><br><span class="line">        topCopy = dice.top;</span><br><span class="line">        rightCopy = dice.right;</span><br><span class="line">        leftCopy = dice.left;</span><br><span class="line">        bottomCopy = dice.bottom;</span><br><span class="line">        downCopy = dice.down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= m) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currX;</span><br><span class="line">        <span class="keyword">int</span> currY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 윗면, 아랫면</span></span><br><span class="line">        <span class="keyword">int</span> up;      <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">int</span> top;     <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">int</span> right;   <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">int</span> left;    <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">int</span> bottom;  <span class="comment">// 5</span></span><br><span class="line">        <span class="keyword">int</span> down;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dice</span><span class="params">(<span class="keyword">int</span> currX, <span class="keyword">int</span> currY, <span class="keyword">int</span> up, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> left, <span class="keyword">int</span> bottom, <span class="keyword">int</span> down)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currX = currX;</span><br><span class="line">            <span class="keyword">this</span>.currY = currY;</span><br><span class="line">            <span class="keyword">this</span>.up = up;</span><br><span class="line">            <span class="keyword">this</span>.top = top;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.bottom = bottom;</span><br><span class="line">            <span class="keyword">this</span>.down = down;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-14499munje&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-jusawi-gulrigi-1449
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>백준 숫자판별하기 22101</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210422-number-board-valid/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210422-number-board-valid/</id>
    <published>2021-04-22T12:02:29.000Z</published>
    <updated>2021-05-13T05:01:39.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-susjapanbyeolhagi-22101beon"><a href="#baegjun-susjapanbyeolhagi-22101beon" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-숫자판별하기-22101번"></a> <a href="https://www.acmicpc.net/problem/2210" target="_blank" rel="noopener">백준 숫자판별하기 22101번</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>하나의 그래프 클래스를 만들어서 모든 맵의 x,y좌표로 생성한다</li><li>DFS를 수행하여 모든맵의 x,y좌표를 순회한다.</li><li>종료조건은 cnt의 개수가 6개가 만족되면 종료한다.</li><li>총 4가지 방향으로 동서남북의 direction 변수로 핸들링을 진행한다.</li><li>isCheckRange함수에 맞게 이동한 값이 범위에 맞지 않으면 다음값으로 진행한다.</li><li>DFS 다음 재귀호출은 (다음 X, 다음 Y, 선택된 개수 + 1, 현재값 * 10 + 추가할 값)을 수행한다</li><li>종료조건시에 정답을 구하기 위해 하나의 Set 자료구조를 선언하여 현재까지 진행된 값을 add해준다.</li><li>문자열로 추가하지 않고 num의 값으로 추가해 나가는 방식은 (현재 값 * 10 + 추가하는 값)으로 구해줄 수 있다. 복잡도면에서 우수할 것으로 생각한다 단순히 O(1)을 가질 것이라고 생각하기 때문이다.</li></ol><h2 id="siganbogjabdo"><a href="#siganbogjabdo" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#시간복잡도"></a> 시간복잡도</h2><p>N의 범위는 5이고 모든 맵의 범위는 5*5=25를 가지고 있다. 그리고 총 이동할 수 있는 경우의수는 자기자신의 범위를 제외한 5번이므로 4^5 * 25의 시간복잡도를 가질 수 있다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.Practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 숫자판점프<span class="title">_2210</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; arrList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; selectList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> Set&lt;Integer&gt; s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        n = <span class="number">5</span>;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">        arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        selectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                arrList.add(<span class="keyword">new</span> Graph(i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrList.size(); i++) &#123;</span><br><span class="line">            Graph graph = arrList.get(i);</span><br><span class="line">            dfs(graph.x,graph.y,<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> cnt, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">6</span>)&#123;</span><br><span class="line">            s.add(num);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (isCheckRange(mx, my)) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(mx, my, cnt + <span class="number">1</span>, num * <span class="number">10</span> + map[mx][my]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-susjapanbyeolhagi-22101beon&quot;&gt;&lt;a href=&quot;#baegjun-susjapanbyeolhagi-22101beon&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 사다리조작 15684</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210422-ladder-fake/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210422-ladder-fake/</id>
    <published>2021-04-22T08:05:52.000Z</published>
    <updated>2021-05-13T04:49:01.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje"><a href="#samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-사다리조작-15684문제"></a> <a href="https://www.acmicpc.net/problem/15684" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 사다리조작 15684문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>n은 열의 개수, m은 가로선의 추가될 개수, h는 열의 개수입력을 받습니다.</li><li>그리고 가로선의 추가될 x,y좌표의 값을 체크를 하여 맵에 넣어주는데 조심해야할 부분이 있습니다. 저 같은경우에는 x,y의 좌표값이 들어왔을때 x,y의 좌표는 1로 놓고 x,y+1의 좌표는 2로 놓았습니다. 이렇게 좌표로 놓은이유는 추후에 모든 가로선들을 놓고나서 모든 사다리들을 위에서부터 순회하는 과정에서 이동을 하기 위함입니다. 즉, x,y의 좌표 1의 경우에는 오른쪽으로 이동을 하게 되고, x,y+1의 좌표 2의 경우에는 왼쪽으로 이동하게 처리하였습니다.</li><li>n,m,n의 변수를 헷갈려했는데, 다시 한번 문제를 읽고 이해하는 문제가 되었습니다. 시간소요가 많이 된 부분이라 천천히 잘 읽으면서 진행해야겠습니다.</li><li>map의 행,열의 idx값이 1부터 진행되므로 배열할당을 [h+1][n+1]의 범위만큼 할당하여 진행하였습니다.</li><li>사다리 즉, 가로선의 개수는 3개를 넘을 수 없다 라는 조건을 처음에 간과하였습니다. 출력부분에 자세히보면 다리를 놓는것은 3개만 가능하고 그 이상이 될 경우 -1을 출력하라라는 조건을 제대로 확인을 못하였습니다.</li><li>가로선을 최대 3개까지만 구할 수 있기때문에 0,1,2,3개를 선택하는 조합의 경우로 생각할 수 있습니다. 따라서 for(0-3의 범위)를 하나씩 순회하면서 선택되는 경우를 구할 수 있습니다.(3C0, 3C1,3C2, 3C3) 의 경우라고 생각을 합니다.</li><li>이제 DFS를 수행하여 Basement조건을 수립합니다.</li><li>모든 가로선을 놓았을때 종료하는 Basement조건을 수립하고 현재 0~3개의 값을 선택하는 경우로 진행되고 있기 때문에 해당되는 조건은 cnt == len의 범위를 만족할때 사다리를 찾는 로직을 구현하면 됩니다.</li><li>모든 가로선을 아직 놓지 못하였을때는 1번행부터 h+1의 길이까지 모든 행 ~ 열을 순회하면서 현재 위치와 다음위치의 값이 0) 즉, (x,y), (x,y+1)의 값이 모두 0일 경우이자 가로선을 놓을 수 있는 경우에 가로선을 넣게 하였습니다. 가로선은 (x,y)는 1, (x,y+1)은 2로 넣어 1일 경우 오른쪽으로 이동, 2일경우 왼쪽으로 이동의 경우로 맵에 값을 갱신시켜나갔습니다.</li><li>만약 가로선의 개수가 DFS의 종료조건에 걸렸을 경우에 현재 선택된 가로선을 다시 (x,y = 0), (x,y+1 = 0)으로 값들을 해제시켜주었습니다. 그래야지 다른 경우의 가로선을 탐색할 수 있기때문입니다.</li><li>이제 모든 가로선들을 놓고, 사다리를 (1~n) 인덱스부터 순차적으로 진행하면서 해당 사다리를 타고 내려가면서 최종적으로 타고 내려온 열의 값이 현재 시작한 열의 값과 같은지 다른지를 체크합니다. 예를 들면, 1번 세로선에서 시작하여 모든 사다리를 타고나서, 최종적으로 끝의 행에 도달하였을때의 y의 값이 같다면 성공적으로 사다리를 타고 내려와서 사다리를 조작한것으로 볼 수 있습니다.</li><li>사다리를 타고 내려오는 과정은 다음과 같습니다.<ol><li>현재 map의 값이 1이면 오른쪽으로 이동시킵니다.(my++)</li><li>현재 map의 값이 2이면 왼쪽으로 이동시킵니다.(my—)</li><li>가로, 세로를 모두 움직이고나서 아래로 한칸 내려와서 사다리를 이동시킵니다.(mx++)</li><li>최종적으로 my와 현재 출발하는 j값이 같지 않다면 사다리를 제대로 타고내려와서 속인게 아니므로 false를 리턴합니다.</li></ol></li></ol><ul><li>실수한점: 모든 사다리가 세로선 i선에서 i까지 도달하는것이 아니라 하나의 그 개수만 찾으면 되는 문제였습니다. 이 부분에서 조합+DFS+BFS으로 모든 경우를 고민하게 되면서 잘못된 로직을 구현하게 되면서 시간이 소요된 문제였습니다.</li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 사다리조작<span class="title">_15684</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m, h;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        h = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[h+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            x = Integer.parseInt(st.nextToken());</span><br><span class="line">            y = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="comment">// 가로선 왼쪽: 1, 오른쪽 2</span></span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            map[x][y+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 가로선을 최대3개까지만 놓을 수 있기때문에 nCi의 경우를 모두 구해준다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// i는 몇개 선택된지 여부</span></span><br><span class="line">            answer = i;</span><br><span class="line">            <span class="comment">// dfs(시작점, 선택된 갯수)</span></span><br><span class="line">            dfs(<span class="number">1</span>, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span>(isCheck) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(isCheck ? answer : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> cnt, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// i번 세로선의 결과가 i번이 나온경우 종료!</span></span><br><span class="line">        <span class="keyword">if</span>(isCheck) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt == len)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arriveAtDestination()) &#123;</span><br><span class="line">                isCheck = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 모든 경우에 대해서 가로선 경우를 모두 놓아본다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;h+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 가로선 j+1까지 확인을 하기 때문에 n까지만 진행합니다.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">0</span> &amp;&amp; map[i][j+<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 해당점을 선택하는 경우</span></span><br><span class="line">                    map[i][j] = <span class="number">1</span>;</span><br><span class="line">                    map[i][j+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    dfs(i, cnt+<span class="number">1</span>, len);</span><br><span class="line">                    <span class="comment">// 해당점을 선택하지 않는 경우</span></span><br><span class="line">                    map[i][j] = <span class="number">0</span>;</span><br><span class="line">                    map[i][j+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">arriveAtDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 세로선을 확인하면서 나간다.(열)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="comment">// 맨위에서 부터 시작하므로 x = 1, y는 해당 세로선부터 순차적으로 확인하므로 i</span></span><br><span class="line">            <span class="keyword">int</span> mx = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> my = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;h; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[mx][my] == <span class="number">1</span>)&#123;</span><br><span class="line">                    my++;        <span class="comment">//열 움직이기 오른쪽으로</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map[mx][my] == <span class="number">2</span>)&#123;</span><br><span class="line">                    my--;        <span class="comment">//열 움직이기 왼쪽으로</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//인접한 값이 존재할 수 없으므로 세로로 밑으로 내려간다.</span></span><br><span class="line">                mx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// y값이 계속해서 사다리를 타고 내려오다가 결국 자신이 출발한 지점과 같지 않게되면 i번 세로선이 i로 도착한게 된게 아니므로 종료</span></span><br><span class="line">            <span class="keyword">if</span>(my != i)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-sadarijojag-15684munje
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 치킨배달 15686</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210216-chicken-delivery/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210216-chicken-delivery/</id>
    <published>2021-04-21T10:26:34.000Z</published>
    <updated>2021-05-13T04:49:58.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 치킨배달 15686</a></p><h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1><p>0은 빈 칸, 1은 집, 2는 치킨집이다.</p><p>(2, 1)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |2-1| + |1-2| = 2, (5, 5)에 있는 치킨집과의 거리는 |2-5| + |1-5| = 7이다. 따라서, (2, 1)에 있는 집의 치킨 거리는 2이다.</p><p>(5, 4)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |5-1| + |4-2| = 6, (5, 5)에 있는 치킨집과의 거리는 |5-5| + |4-5| = 1이다. 따라서, (5, 4)에 있는 집의 치킨 거리는 1이다.</p><p>이 도시에 있는 치킨집은 모두 같은 프랜차이즈이다. 프렌차이즈 본사에서는 수익을 증가시키기 위해 일부 치킨집을 폐업시키려고 한다. 오랜 연구 끝에 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.</p><p>도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다. 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li><code>0은 빈칸, 1은 집, 2는 치킨집</code>을 갖는 하나의 맵이 주어진다.</li><li>간혹 이것을 <code>BFS로 생각하여 풀이를 할 수 있는 경우</code>가 있을 텐데, 문제를 자세히 읽어보면 상하좌우의 방향이 주어지긴하지만 결국 우리에겐 필요한 것은 집과 치킨과의 치킨거리를 구하는것입니다. 즉 <code>DFS 브루트포스</code> 방법을 사용할 것입니다.</li><li>집과 치킨집과의 거리의 좌표값을 기반으로 <code>|집 X - 치킨 X| + |집 Y - 치킨 Y|</code>의 값을 구하는것이라고 생각하면 됩니다.</li><li>집에서 치킨집중 <code>최대 M개</code>를 고르는 문제가 여기서 <code>핵심 포인트</code>입니다. 집하나에서 M개의 치킨집을 고를 수 있습니다. 즉, <code>브루트포스로 치킨집 M개를 선택</code>하는 <code>basement의 조건</code>을 가질 수 있습니다.</li><li>치킨집을 1개를 골랐을때의 치킨거리의 최솟값, 치킨집 2개를 골랐을때의 최솟값…M개를 골랐을때의 <code>최솟값</code>을 구하는것입니다.</li><li>치킨집은 좌표상 <code>고를 수도 있고 안고를수도 있는 브루트포스 호출조건</code>을 잘생각해야합니다. 치킨집에 <code>3개 A,B,C</code>가 있다고 가정했을때 <code>A / AB / AC / BC / ABC</code> 의 경우를 고른다고 생각을 하셔야합니다.  이때, <code>M개를 선택해야하므로 가능한 선택의 수는 AB,AC,BC</code>가 될 것입니다.</li></ul><blockquote><p>치킨 배달 순서</p></blockquote><ol><li>좌표에서 <code>집인경우</code> 집의 좌표를 담을 벡터를 선언합니다.</li><li>좌표에서 <code>치킨집인</code> 경우 치킨집의 좌표를 담을 벡터를 선언합니다.</li><li><code>DFS(0,0)</code> 을 호출합니다. 첫번째 파라미터는 <code>현재 치킨집의 순서</code>, 두번째 파라미터는 <code>현재 선택된 치킨집의 개수</code>를 뜻합니다.</li><li>치킨집은 <code>M개까지 선택</code>하였을때 <code>집과 치킨거리를 계산</code>하여 <code>최솟값</code>으로 <code>업데이트 시켜줍니다.</code> 치킨이 선택된 것을 체크해주기 위한 <code>check배열을 선언</code>해줍니다.<br>아직 M개가 선택되지 않았더라면</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">check[idx] = <span class="literal">true</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">check[idx] = <span class="literal">false</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt);</span><br></pre></td></tr></table></figure><p><code>치킨을 선택한 경우와 치킨을 선택하지 않은 경우</code>로 나누어주면서 <code>DFS를 모두 수행</code>해줍니다.<br>5. M개를 선택하였을때 모든 치킨거리값을 ans의 값과 갱신하여 최솟값을 구해줍니다.<br>주의 해야할점은 <code>치킨거리의 거리</code>와 <code>모든 집의 치킨거리</code>는 다릅니다.<br>6. 만약 <code>idx값이 치킨값보다 클경우 종료</code>시켜줍니다. 조건에 위배됩니다.</p><h1 id="javareul-hwalyonghan-munje-jaepuli"><a href="#javareul-hwalyonghan-munje-jaepuli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#java를-활용한-문제-재풀이"></a> Java를 활용한 문제 재풀이</h1><h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고-2"></a> 컴퓨팅 사고</h2><ol><li>N*N(2&lt;=N&lt;=50)의 지도가 주어집니다.</li><li>치킨거리는 집과 치킨집사이의 거리를 뜻합니다.</li><li>모든집의 치킨거리의 합은 각집당 모든치킨집사이의 거리중 가장 작은 값들의 합을 뜻합니다.</li><li>지도상에 0: 빈칸, 1:집, 2: 치킨집을 뜻합니다.<br>예를 들면, (2,1) 집 (1,2) 치킨집이 있으면 치킨 거리 = |2-1| + |1-2| = 2를 뜻하게 됩니다. 각 도시의 치킨거리는 = 하나의 집을 기준으로 나머지 치킨집의 치킨거리를 구한 값중 가장작은값의 합들을 뜻합니다. 처음에 문제를 제대로 읽지 않아서 헷갈리는 부분이었습니다.</li><li>최대 M개의 치킨집의 개수를 고를 수 있으므로 결국, 치킨배달의 문제는 N개중 M개를 선택하는 문제인 순열과 조합을 떠올릴 수 있습니다.</li><li>문제에서 뜻하는 바로는 도시의 치킨거리가 가장작은 값을 구하는것이므로 치킨집 리스트중에서 M개를 선택하였을때의 최솟값을 구해주면됩니다.</li></ol><h2 id="aidieo"><a href="#aidieo" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#아이디어"></a> 아이디어</h2><ol><li>입력 N이 주어지고 R, C의 길이를 뜻합니다. N(치킨집)개의 중에서 M개를 선택할지를 구하는 M을 입력받습니다.</li><li>입력으로 주어진 값이 ‘1’일 경우 집 -&gt; house의 리스트에 담습니다.</li><li>입력으로 주어진 값이 ‘2’일 경우 집 -&gt; chicken의 리스트에 담습니다.</li><li>DFS를 수행하여 모든 조합을 구해줍니다.<ol><li>종료조건: 종료조건은 N개의 치킨집중에서 M개를 선택한 조건이 됩니다. 즉, 선택된 개수(CNT) == 선택해야할 개수(M)이 종료조건이 됩니다. 치킨 거리는 집에서 가장 가까운거리를 구하는것이므로 처음에는 BFS를 떠올렸지만, 전혀 문제풀이와 상관이 없는 지도맵이였습니다. 도시의 치킨거리는 모든집의 치킨거리의 합을 나타내므로 종료조건에 걸렸을때 모든집의 치킨거리를 구해줍니다.</li><li>예를 들면, 각집(x,y) , 치킨집1,2,3 이 있으면 Math.min((집 X - 치킨집 X) + (집 Y - 치킨집 Y))의 최솟값을 구하여서 하나의 sum 변수에 더해나갑니다. 이렇게 모든하우스의 경우와 모든 치킨집의 경우를 모두 찾아내게 되면 하나의 조합의 경우로 만들 수 있는 모든도시의 치킨거리의 합을 하나 구하게 됩니다. 하나의 재귀 종료조건에 걸리게 되면 이떄 하나의 모든도시의 치킨거리의 합을 구하는것과 같습니다.</li><li>수행조건: 처음에는 순열로 모든값을 구해주었지만 시간초과가 나오는 불상사가 발생하였습니다. 조합을 사용하여 중복값을 제거하여 통과를 시켰습니다.</li><li>예를 들면, [1,2,3,4]라는 배열에서 1,2,3의 값을 뽑았으면 [1,2,3],[2,3,1],[3,2,1]과 같이 순열은 이전의 값들도 쳐다보는게 됩니다. 따라서 조합의 경우를 구하면 [1,2,3],[2,3,1],[3,2,1]은 다 같이 하나의 조건으로 생각하기때문에 순열에 비해 시간복잡도가 줄어들게 됩니다. 따라서 ,순열의 경우를 조합으로 변경하니 시간초과를 해결할 수 있었습니다.</li></ol></li></ol><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 순열로 돌리니까 시간초과, 조합으로 돌리니까 통과</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 치킨배달<span class="title">_15686</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; houseList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; chickenList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; selectChickenList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        houseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        chickenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        selectChickenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span> (map[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    houseList.add(<span class="keyword">new</span> Graph(i, j));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    chickenList.add(<span class="keyword">new</span> Graph(i, j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[chickenList.size()];</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">            <span class="comment">// 모든 도시의 치킨집</span></span><br><span class="line">            <span class="keyword">int</span> totalChickenPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;houseList.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = Integer.MAX_VALUE;</span><br><span class="line">                Graph houseGraph = houseList.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; selectChickenList.size(); j++) &#123;</span><br><span class="line">                    Graph chickenGraph = selectChickenList.get(j);</span><br><span class="line">                    sum = Math.min(sum,Math.abs(houseGraph.x - chickenGraph.x) + Math.abs(houseGraph.y - chickenGraph.y));</span><br><span class="line">                &#125;</span><br><span class="line">                totalChickenPrice += sum;</span><br><span class="line">            &#125;</span><br><span class="line">            answer = Math.min(answer, totalChickenPrice);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;chickenList.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isCheck[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheck[i] = <span class="keyword">true</span>;</span><br><span class="line">            selectChickenList.add(<span class="keyword">new</span> Graph(chickenList.get(i).x, chickenList.get(i).y));</span><br><span class="line">            dfs(cnt+<span class="number">1</span>,i);</span><br><span class="line">            selectChickenList.remove(selectChickenList.size()-<span class="number">1</span>);</span><br><span class="line">            isCheck[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  치킨배달15686.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/21.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; house;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; chicken;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> ans = MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 치킨 사이즈를 넘게되었을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx &gt; chicken.size())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨집 m개를 선택하였을때</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">        <span class="keyword">int</span> chicken_street = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;house.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> dist = MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;chicken.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] == <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> ax = house[i].first;</span><br><span class="line">                    <span class="keyword">int</span> ay = house[i].second;</span><br><span class="line">                    <span class="keyword">int</span> bx = chicken[j].first;</span><br><span class="line">                    <span class="keyword">int</span> by = chicken[j].second;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> distance = <span class="built_in">abs</span>(ax-bx) + <span class="built_in">abs</span>(ay-by);</span><br><span class="line">                    dist = min(dist,distance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chicken_street += dist;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, chicken_street);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨 선택</span></span><br><span class="line">    check[idx] = <span class="literal">true</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 치킨 미선택</span></span><br><span class="line">    check[idx] = <span class="literal">false</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                house.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                chicken.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 스타트와링크 15561</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210421-start-and-link/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210421-start-and-link/</id>
    <published>2021-04-21T05:33:33.000Z</published>
    <updated>2021-05-13T04:49:11.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15561" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 스타트와 링크 15561</a></p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>(1) N은 20까지 주어지므로 시간복잡도가 충분히 주어지므로 DFS를 통한 모든 경우를 구해주었다. 그리고 짝수인 팀원들을 구해야한다.<br>(2) 가장중요한점은 팀을 어떻게 분리시킬 것인가를 잘 생각해야한다. 하나의 팀을 나누는 변수를 두어 스타트팀은 true, 링크팀은 false로 두고 나누어준다. 그리고 DFS종료조건은 N/2명으로 나눌 수 있는 경우에 처리를 한다. 팀을 두개로 분리하기때문에 이와 같은 처리를 하게 되는 것이다.<br>(3) 조합을 사용하여 모든 경우의 수를 찾아준다. (idx변수를 선언하여 이전의값은 쳐다보지 않는다.) 문제에서 Sij, Sji를 동시에 계산하고 있으므로 같은것으로 보고 있기때문에 순열을 구할 필요가 없다.<br>(4) 홀수처리와 짝수처리를 따로따로 분리해야하는 것으로 착각을 하게 된 문제였다. 각 팀의 인원이 홀수가 되면 그 처리를 따로 처리를 해줄 필요가 없었다.<br>(5) 이제 체크된 값 True False에 따라 팀을 분리하고 True인 경우에는 스타트팀, False인 경우에는 링크팀의 능력치를 더해나가면서 팀원의 능력치의 최소를 구해주고, 음수가 나올 수 있으므로 절댓값을 처리한다.</p><blockquote><p>예를 들어보면,</p></blockquote><p>n=6 일 경우로 가정하고 스타트팀이 3명(1,2,3) , 링크팀이 3명(4,5,6) 이라고 가정하면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">스타트팀의 능력치 = S12 + S21 + S13 + S31 + S23 + S32</span><br><span class="line">링크팀의 능력치 = S45 + S54 + S46 + S64 + S56 + S65</span><br></pre></td></tr></table></figure><p>와 같이 홀수팀으로 구성되어도 모든 능력치를 구할 수 있는것을 알 수 있다.</p><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 링크와스타트<span class="title">_15561</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; arrList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        n = Integer.parseInt(br.readLine());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"answer = "</span> + answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 조합</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// == n개를 선택된 경우</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> startTeamScore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> linkTeamScore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(isChecked[i] &amp;&amp; isChecked[j])&#123;</span><br><span class="line">                        startTeamScore += map[i][j];</span><br><span class="line">                        System.out.println(map[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(!isChecked[i] &amp;&amp; !isChecked[j]) linkTeamScore += map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">            answer = Math.min(answer, Math.abs(startTeamScore - linkTeamScore));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// == 스타트팀: true, 링크팀 false</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isChecked[i]) <span class="keyword">continue</span>;;</span><br><span class="line">            isChecked[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">            isChecked[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 연구소 14502</title>
    <link href="http://gwanhyeon.github.io/Samsung-20200908-BOJ-beakjoon-laboratory-14502/"/>
    <id>http://gwanhyeon.github.io/Samsung-20200908-BOJ-beakjoon-laboratory-14502/</id>
    <published>2021-04-21T05:33:31.000Z</published>
    <updated>2021-05-13T04:50:12.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 연구소 14502</a></p><h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1><ul><li>연구소는 크기가 <code>N×M</code>입니다.</li><li>연구소에서 <code>빈곳 0, 벽 1, 바이러스 2</code>의 값이 주어지게 됩니다.</li><li>벽을 3개만 세운 뒤 바이러스가 퍼질 수 없는 안전영역의 최댓값을 구하는 문제입니다.</li><li>지도의 세로 크기 N과 가로 크기 M (3 ≤ N, M ≤ 8)</li></ul><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p><code>0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</code> 라는 조건이 있는 문제입니다.</p><p>이 문제를 풀때 가장 중요한점은 DFS로 접근해야 하는가? BFS로 접근해야 하는가를 많이 고민하였던 문제였습니다.</p><p>Basement  조건이 <code>벽을 3개</code> 세울 때 조합의 경우의 수를 사용하기 위해서 DFS를 사용하였으며, 연구소에서 바이러스들이 전염시키는 과정은 BFS로 풀이를 진행하였습니다.</p><ul><li>값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 됩니다.</li><li>빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</li><li>DFS 에서의 수행은 빈칸의 개수가 기준이 되므로 empty_size를 선언해서 받아오게 하였습니다.</li><li>CNT 값이 3일 경우 3개의 벽을 모두 세운 경우이므로 기존의 값은 변화가 되면 안되기때문에 맵을 Copy시켜줍니다.</li><li>이제 BFS를 수행하기위해 각각의 경우에 있어서 Check변수가 1일 경우에만 벽을 세워주게 됩니다.</li><li>바이러스가 전파시에 <code>현재 바이러스의 값 2</code>인 좌표 (x,y)의 점을 기준으로 <code>BFS</code>를 수행합니다.</li><li>모든 BFS경우를 돌고나서 아직 전염되지 않은 값이 있는곳이 <code>안전지대</code>입니다. 그 곳의 값을 <code>safe_size 카운팅</code> 시켜줍니다.</li><li>각 경우마다 안전영역의 최대의 값을 구해주어야하므로 최댓값을 갱신시켜줍니다.</li><li>각 경우마다 경우의 수가 달라지므로 visited 변수를 초기화 시켜줍니다.</li></ul><blockquote><p>즉, DFS 반복 → basement 확인 → BFS (x,y)좌표로 부터 바이러스 전염 → 안전영역의 최댓값</p></blockquote><h3 id="dasi-puleoboassseubnida"><a href="#dasi-puleoboassseubnida" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#다시-풀어보았습니다"></a> 다시 풀어보았습니다.</h3><p>(1) N*M의 보드가 주어집니다. (3 ≤ N, M ≤ 8)의 범위를 갖습니다.</p><p>바이러스의 확산의 벽을 3개를 세워야합니다.<br>맵에서 벽을 3개를 세우는 경우를 어떻게 찾아낼까가 가장 핵심이 되는 문제였습니다. 저 같은 경우는 하나의 리스트에 x,y좌표를 담고있는 Graph클래스를 하나 선언하여 ‘0’ 즉, 빈칸의 좌표값을 모두 리스트에 담아주었습니다. 그리고나서 DFS 백트래킹을 통하여 N개(모든 빈칸의 리스트)중에서 M개(3개를 선택) 하는 경우의 순열의 값들을 모두 구해주게 하였습니다. 예를 들어, 안전영역리스트에 1,2,3,4,5 가 주어졌다고 가정하면 여기서 벽을 세우는 경우는 어떻게 될까요? (1,2,3), (1,2,4),(1,2,5),(2,3,4) …. 등 다양한 경우의수가 나올 수 있게됩니다. 이 경우를 모두 체크해나갈 수 있습니다. 그리고 주의해야할 경우는 벽을 3개 모두세웠을 경우 현재 맵의 정보들이 변화하면 안되기때문에 각 경우의수마다 새로 배열들을 copy하여 갱신시켜서 매 경우를 체크해나가야합니다.</p><p>(2) 0:빈칸, 1:벽, 2:바이러스 벽이 세워지고 바이러스가 상하좌우로 퍼져나가게 합니다.</p><p>(3) 최종적인 프로세스는 벽을 3개 세우는 모든 경우의 수를 찾아주고 각 경우마다 벽을 세우고나서 바이러스를 퍼트립니다. 그리고 안전영역에 있는 최댓값 갱신해나가면 정답을 노출해낼 수 있습니다. 전반적으로 한번 풀어봤던 경험이 있었던지라 30분정도 소요되었던 문제였습니다.</p><p>(4) 순열과 조합을 각각 돌려서 테스트해보았더니 큰 차이를 얻을 수 있었습니다.<br>￼<br>약 공간복잡도 메모리차이가 2배이상차이가나고, 시간복잡도 차이에서는 1.5배이상 차이가 나게되었습니다. 확실히 순열로 돌리게 될 경우 상당히 많은 경우의 수가 나타난다는것을 알 수 있었습니다.</p><p>제출 번호    아이디    문제    결과    메모리    시간    언어    코드 길이<br>28575832    kgh940525    14502    맞았습니다!!    149348    636    Java 8 / 수정    5431<br>28575134    kgh940525    14502    맞았습니다!!    303684    1000    Java 8 / 수정    4086</p><h1 id="puli-kodeu"><a href="#puli-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이-코드"></a> 풀이 코드</h1><blockquote><p>JAVA 재풀이 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소<span class="title">_14502</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copyMap;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;       <span class="comment">// 북동남서</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheckSafe;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] isCheckVirus;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; safeAreaList;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Graph&gt; safeAreaSelectList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        answer = <span class="number">0</span>;</span><br><span class="line">        safeAreaList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        safeAreaSelectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safeAreaList.add(<span class="keyword">new</span> Graph(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isCheckSafe = <span class="keyword">new</span> <span class="keyword">boolean</span>[safeAreaList.size()];</span><br><span class="line">        dfs_combination(<span class="number">0</span>,<span class="number">0</span>);                    <span class="comment">//조합으로 풀기</span></span><br><span class="line">        <span class="comment">// dfs_permutation(0);                   //순열으로 돌리기</span></span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs_combination</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 벽을 세개 다 세운 경우</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map copy</span></span><br><span class="line">            copyMap = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">            isCheckVirus = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    copyMap[i][j] = map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 복사된 맵에 벽 세우기</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; safeAreaList.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(isCheckSafe[i])&#123;</span><br><span class="line">                    <span class="keyword">int</span> safeX = safeAreaList.get(i).x;</span><br><span class="line">                    <span class="keyword">int</span> safeY = safeAreaList.get(i).y;</span><br><span class="line">                    copyMap[safeX][safeY] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 바이러스 전파</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(copyMap[i][j] == <span class="number">2</span> &amp;&amp; !isCheckVirus[i][j]) &#123;</span><br><span class="line">                        virusSpread(i,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 안전영역 구하기</span></span><br><span class="line">            getSafeAreaSize();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;safeAreaList.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isCheckSafe[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfs_combination(i,cnt+<span class="number">1</span>);</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs_permutation</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 벽을 세개 다 세운 경우</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map copy</span></span><br><span class="line">            copyMap = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">            isCheckVirus = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    copyMap[i][j] = map[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 복사된 맵에 벽 세우기</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; safeAreaSelectList.size(); i++) &#123;</span><br><span class="line">                Graph graph = safeAreaSelectList.get(i);</span><br><span class="line">                <span class="keyword">int</span> x = graph.x;</span><br><span class="line">                <span class="keyword">int</span> y = graph.y;</span><br><span class="line">                copyMap[x][y] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 바이러스 전파</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(copyMap[i][j] == <span class="number">2</span> &amp;&amp; !isCheckVirus[i][j]) &#123;</span><br><span class="line">                        virusSpread(i,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 안전영역 구하기</span></span><br><span class="line">            getSafeAreaSize();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;safeAreaList.size(); i++)&#123;</span><br><span class="line">            Graph graph = safeAreaList.get(i);</span><br><span class="line">            <span class="keyword">if</span>(isCheckSafe[i]) <span class="keyword">continue</span>;</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">true</span>;</span><br><span class="line">            safeAreaSelectList.add(<span class="keyword">new</span> Graph(graph.x, graph.y));</span><br><span class="line">            dfs_permutation(cnt+<span class="number">1</span>);</span><br><span class="line">            safeAreaSelectList.remove(safeAreaSelectList.size()-<span class="number">1</span>);</span><br><span class="line">            isCheckSafe[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSafeAreaSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> areaSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copyMap[i][j] == <span class="number">0</span>) areaSize++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = Math.max(answer, areaSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpread</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Graph&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(<span class="keyword">new</span> Graph(x,y));</span><br><span class="line">        isCheckVirus[x][y] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            Graph graph = q.remove();</span><br><span class="line">            <span class="keyword">int</span> dx = graph.x;</span><br><span class="line">            <span class="keyword">int</span> dy = graph.y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(isCheckRange(mx, my)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(copyMap[mx][my] == <span class="number">0</span> &amp;&amp; !isCheckVirus[mx][my])&#123;</span><br><span class="line">                    copyMap[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    isCheckVirus[mx][my] = <span class="keyword">true</span>;</span><br><span class="line">                    q.add(<span class="keyword">new</span> Graph(mx,my));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>C++</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  연구소14502.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/07.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> copy_map[MAX][MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; empty;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> empty_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> check[MAX*MAX];     <span class="comment">// size를 MAX * MAX를 해준이유는 빈칸이 N*M까지 나올 수 있기 때문입니다.</span></span><br><span class="line"><span class="keyword">int</span> visited[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    visited[x][y] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[mx][my] == <span class="number">0</span> &amp;&amp; copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    visited[mx][my] = <span class="number">1</span>;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    q.push(&#123;mx,my&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">        <span class="comment">// 기존의 맵을 변경시키면 안되기때문에 값을 카피시켜줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 벽을 세우기 하나의 경우마다의 벽을 세워야함.</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;empty_size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = empty[i].first;</span><br><span class="line">                <span class="keyword">int</span> y = empty[i].second;</span><br><span class="line">                copy_map[x][y] = <span class="number">1</span>;</span><br><span class="line">                count +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// virus 전염시키기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;virus.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = virus[i].first;</span><br><span class="line">            <span class="keyword">int</span> y = virus[i].second;</span><br><span class="line">            bfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> safe_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe_size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans &lt; safe_size)&#123;</span><br><span class="line">            ans = safe_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 조합의 형식으로 3개가 뽑힐때까지 뽑았다가 종료되는 시점에 그 값을 다시 false로 만들고 다시 조합의 경우를 뽑습니다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;empty_size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 된다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 0: 빈칸</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                empty.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2: 바이러스</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                virus.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</span></span><br><span class="line">    empty_size = empty.<span class="built_in">size</span>();</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JAVA</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copy_map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Dot&gt; virusList = <span class="keyword">new</span> ArrayList&lt;Dot&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir =&#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wallDfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map Copy</span></span><br><span class="line">            copyMapFunc();</span><br><span class="line">            <span class="comment">// virus spread</span></span><br><span class="line">            <span class="keyword">for</span>(Dot dot : virusList)&#123;</span><br><span class="line">                virusSpreadBfs(dot.x, dot.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// safe Area</span></span><br><span class="line">            ans = Math.max(ans, getSafeArea());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n * m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i / m;</span><br><span class="line">            <span class="keyword">int</span> y = i % m;</span><br><span class="line">            <span class="keyword">if</span>(map[x][y] == <span class="number">1</span> || map[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            wallDfs(i+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">            map[x][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 맵 카</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyMapFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 바이러스 퍼트리기</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpreadBfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    virusSpreadBfs(mx,my);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 안전영역 개수 체크</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSafeArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> safe = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> safe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    4 6</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">    1 0 0 0 0 2</span></span><br><span class="line"><span class="comment">    1 1 1 0 0 2</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        copy_map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                    virusList.add(<span class="keyword">new</span> Dot(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        wallDfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 테트로미노 14500</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210420-tetromino/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210420-tetromino/</id>
    <published>2021-04-20T12:53:11.000Z</published>
    <updated>2021-05-13T04:49:38.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500"><a href="#samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#삼성-sw-역량테스트-백준-감시-14500"></a> <a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 감시 14500</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><blockquote><p>테트로미노의 모든 경우의 수를 구해기 위해서는 ?</p></blockquote><p>(1)고려해야할 사항: 좌우 반전, 90도 회전, 반전된 것들중에 또 다시 뒤집기, 90도 회전된 것들중에 다시 뒤집기<br>(2) 어떻게 이것들을 최댓값을 처리할지가 가장 중요한 문제입니다.<br>테트로미노로 만들수 있는 경우의수는 총 19개가 만들어집니다.</p><p>하나의 예를 들어보면, n=5, m=5의 직사각형의 보드가 있다고 가정을 하겠습니다.</p><blockquote><p>해당 도형:<br>ㅡㅡ<br>ㅡㅡ</p></blockquote><blockquote><p>보드:<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ<br>ㅡ ㅡ ㅡ ㅡ ㅡ</p></blockquote><blockquote><p>가로의 측면:</p></blockquote><p>가로의 측면으로 봤을때 m의 범위까지 만들수 있는 도형은 3개를 만들 수 있습니다.<br>따라서 m의 범위에 만족하는 j개수를 찾아야하는데 2,3,4의 경우가 됩니다. 이것이 어떤 말이냐하면 j의값을 몇으로 둬야지 해당 m의 범위까지 만족할 수 있는지를 찾아낼 수 있습니다.<br>j+2 &lt; m 의 경우를 살펴보면, 0+2 &lt; 5, 1+2 &lt; 5, 2+2 &lt; 5의 경우가 되니까 해당 가로로 되는 경우의 수를 찾을 수 있게 됩니다.</p><blockquote><p>세로의측면</p></blockquote><p>세로의 측면에서 봤을때 n의 범위까지 만들 수 있는 도형은 4개가 됩니다.<br>따라서 n의 범위를 만족하는 i의 개수를 찾아야하는데 1,2,3,4의 경우를 들 수 있습니다.<br>i+1 &lt; n 의 경우를 살펴보면 0+1 &lt; 5, 1+1 &lt; 5, 2+1 &lt; 5, 3+1 &lt; 5 의 총 4가지 경우가 발생합니다.</p><p>이제 이렇게 모든 19개의 경우를 찾아준 후 Math.max함수를 사용하여 해당되는 범위를 구해줄 수 있습니다.<br>위의 예시를 구해보면 Math.max(비교값, board[i][j+1] + board[i][j+2] + board[i+1][j] + board[i+1][j+1]) 의 경우로 해당 값들을 갱신해 나갈 수 있습니다.</p><p>따라서 이것을 점화식으로 해당되는 도형마다 모든 경우의 수를 찾아주게 되면 완전탐색을 진행할 수 있습니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.ing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 테트로미노<span class="title">_14500</span>번 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//==입력==//</span></span><br><span class="line">        <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//==테트로미노 경우의수 찾기==//</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="comment">/** 1</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">3</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i][j+<span class="number">1</span>]+map[i][j+<span class="number">2</span>]+map[i][j+<span class="number">3</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 2</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">3</span> &lt; n)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">2</span>][j]+map[i+<span class="number">3</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 3</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 4</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>+i &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">2</span>][j] + map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 5</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; <span class="number">2</span>+j &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i][j+<span class="number">2</span>] + map[i+<span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 6</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>+i &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j+<span class="number">1</span>] + map[i+<span class="number">2</span>][j] + map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 7</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>+i &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">2</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 8</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i+<span class="number">1</span>][j] + map[i+<span class="number">1</span>][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 9</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; n &amp;&amp; j+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j] + map[i][j+<span class="number">1</span>] + map[i+<span class="number">1</span>][j+<span class="number">1</span>] + map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 10</span></span><br><span class="line"><span class="comment">                   ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m) &#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j + <span class="number">1</span>] + map[i][j + <span class="number">2</span>] + map[i + <span class="number">1</span>][j] + map[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 11</span></span><br><span class="line"><span class="comment">                ㅡ</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 12</span></span><br><span class="line"><span class="comment">                    ㅡ</span></span><br><span class="line"><span class="comment">                 ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span> &lt; n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 13</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n &amp;&amp; j+<span class="number">2</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer , map[i][j]+map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 14</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 15</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                | ㅡ</span></span><br><span class="line"><span class="comment">                |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span>&lt;n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 16</span></span><br><span class="line"><span class="comment">                ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i][j+<span class="number">1</span>]+map[i][j+<span class="number">2</span>]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 17</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 ㅡ |</span></span><br><span class="line"><span class="comment">                   |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">2</span>&lt;n &amp;&amp; j+<span class="number">1</span>&lt;m)&#123;</span><br><span class="line">                    answer = Math.max(answer,map[i][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">2</span>][j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 18</span></span><br><span class="line"><span class="comment">                 * ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 *      |</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j]+map[i][j+<span class="number">1</span>]+map[i][j+<span class="number">2</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 19</span></span><br><span class="line"><span class="comment">                 *      |</span></span><br><span class="line"><span class="comment">                 * ㅡ ㅡ ㅡ</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; j+<span class="number">2</span> &lt; m)&#123;</span><br><span class="line">                    answer = Math.max(answer, map[i][j+<span class="number">2</span>]+map[i+<span class="number">1</span>][j]+map[i+<span class="number">1</span>][j+<span class="number">1</span>]+map[i+<span class="number">1</span>][j+<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500&quot;&gt;&lt;a href=&quot;#samseong-sw-yeogryangteseuteu-baegjun-gamsi-14500&quot; class=&quot;header-anchor
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>삼성 SW 역량테스트 백준 감시 15683</title>
    <link href="http://gwanhyeon.github.io/Samsung-20210420-watch/"/>
    <id>http://gwanhyeon.github.io/Samsung-20210420-watch/</id>
    <published>2021-04-20T10:08:14.000Z</published>
    <updated>2021-05-13T04:49:18.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1><p><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="noopener">삼성 SW 역량테스트 백준 감시 15683</a></p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>문제를 살펴보기전에 알아보아야할 것은 내가 구현하는 것들이 올바른 시간내에 들어오는지를 확인해야 합니다.</p><ul><li>최악의 경우 카메라는 총 8대이기때문에 4^8 = 65536경우가 나오게 된다.</li><li>사무실의 최대 크기 8 * 8에서 감시못하는 공간을 카운트하면 65536 * 64 = 약 400만이</li></ul><ol><li>CCTV를 담아줄 클래스 변수를 하나선언합니다.(좌표X,Y,CCTV번호, 현재방향)</li><li>입력시 1~5사이의 CCTV가 입력받게 되면 해당되는 값들을 하나의 리스트에 담아줍니다.</li><li>DFS를 수행합니다.</li></ol><ul><li>종료조건: 해당 리스트의 사이즈만큼 선택이 되면 종료조건이됩니다.<br>해당 맵이 변경되면 안되므로, 모든값들을 copyMap에 담아줍니다.<br>모든 리스트의 값들을 뺴내면서 현재점에서 부터 모든값들을 맵에 칠해주게 됩니다. CCTV감시영역을 퍼트리는 과정</li></ul><ul><li>방향 체크<br>현재 0번째 방향 (dir+1) % 4(방향의 개수로)로 체크가 가능합니다.<br>현재 1번째 방향 (dir+2) % 4 ……<br>현재 3번째 방향 (dir+3) % 4….</li></ul><p>CCTV 값의 타입 1,2,3,4,5에 따라 호출조건을 달리해줍니다. 모든경우의 수를 찾아서 진행합니다.</p><p>만약 현재 맵의 값이 6이면 종료시켜줍니다. 벽을 만난것과 같으므로 더이상 칠하는 행동을 멈추는 과정입니다.</p><blockquote><p>방향 갱신, 방향 범위 체크</p></blockquote><p>while(mx &gt;= 0 &amp;&amp; mx &lt; n &amp;&amp; my &gt;= 0 &amp;&amp; my &lt; m) 의 조건에 맞을때 까지만 반복문을 진행해 나갑니다.<br>그리고 해당 현재 방향에 따라 계속해서<br>mx += dir[currdir][0]<br>my += dir[currdir][1]<br>의 형식대로 값을 갱신해 나갑니다.</p><h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Samsung.done;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주사위굴리기<span class="title">_14499</span>번 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m,x,y,k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;       <span class="comment">// 동서북</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; commandList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> upCopy;      <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> topCopy;     <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> rightCopy;   <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> leftCopy;    <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> bottomCopy;  <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> downCopy;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        x = Integer.parseInt(st.nextToken());</span><br><span class="line">        y = Integer.parseInt(st.nextToken());</span><br><span class="line">        k = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        commandList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            commandList.add(Integer.parseInt(st.nextToken()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 현재 주사위 상태 객체</span></span><br><span class="line">        Dice dice = <span class="keyword">new</span> Dice(x,y,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 명령어 대로 주사위를 돌린다.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commandList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> dx = dice.currX;</span><br><span class="line">            <span class="keyword">int</span> dy = dice.currY;</span><br><span class="line">            <span class="comment">// 현재 주사위 방향</span></span><br><span class="line">            <span class="keyword">int</span> currDir = commandList.get(i)-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[currDir][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[currDir][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 주사위 이동방향 체크하기</span></span><br><span class="line">            <span class="keyword">if</span>(isCheckRange(mx,my)) <span class="keyword">continue</span>;</span><br><span class="line">            diceStateSave(dice);</span><br><span class="line">            rollDice(dice, currDir);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 지도가 0일 경우</span></span><br><span class="line">            <span class="keyword">if</span>(map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                map[mx][my] = dice.down;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 지도가 0이 아닐 경우</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dice.down = map[mx][my];</span><br><span class="line">                map[mx][my] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dice.up);</span><br><span class="line">            dice.currX = mx;</span><br><span class="line">            dice.currY = my;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollDice</span><span class="params">(Dice dice, <span class="keyword">int</span> currDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(currDir == <span class="number">0</span>)&#123;</span><br><span class="line">            dice.right = upCopy;</span><br><span class="line">            dice.down = rightCopy;</span><br><span class="line">            dice.left = downCopy;</span><br><span class="line">            dice.up = leftCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">1</span>)&#123;</span><br><span class="line">            dice.left = upCopy;</span><br><span class="line">            dice.down = leftCopy;</span><br><span class="line">            dice.right = downCopy;</span><br><span class="line">            dice.up = rightCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">2</span>)&#123;</span><br><span class="line">            dice.top = upCopy;</span><br><span class="line">            dice.down = topCopy;</span><br><span class="line">            dice.bottom = downCopy;</span><br><span class="line">            dice.up = bottomCopy;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currDir == <span class="number">3</span>)&#123;</span><br><span class="line">            dice.up = topCopy;</span><br><span class="line">            dice.bottom = upCopy;</span><br><span class="line">            dice.down = bottomCopy;</span><br><span class="line">            dice.top = downCopy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diceStateSave</span><span class="params">(Dice dice)</span> </span>&#123;</span><br><span class="line">        upCopy = dice.up;</span><br><span class="line">        topCopy = dice.top;</span><br><span class="line">        rightCopy = dice.right;</span><br><span class="line">        leftCopy = dice.left;</span><br><span class="line">        bottomCopy = dice.bottom;</span><br><span class="line">        downCopy = dice.down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCheckRange</span><span class="params">(<span class="keyword">int</span> mx, <span class="keyword">int</span> my)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; <span class="number">0</span> || mx &gt;= n || my &lt; <span class="number">0</span> || my &gt;= m) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currX;</span><br><span class="line">        <span class="keyword">int</span> currY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 윗면, 아랫면</span></span><br><span class="line">        <span class="keyword">int</span> up;      <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">int</span> top;     <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">int</span> right;   <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">int</span> left;    <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">int</span> bottom;  <span class="comment">// 5</span></span><br><span class="line">        <span class="keyword">int</span> down;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dice</span><span class="params">(<span class="keyword">int</span> currX, <span class="keyword">int</span> currY, <span class="keyword">int</span> up, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> left, <span class="keyword">int</span> bottom, <span class="keyword">int</span> down)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currX = currX;</span><br><span class="line">            <span class="keyword">this</span>.currY = currY;</span><br><span class="line">            <span class="keyword">this</span>.up = up;</span><br><span class="line">            <span class="keyword">this</span>.top = top;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.bottom = bottom;</span><br><span class="line">            <span class="keyword">this</span>.down = down;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje-ringkeu&quot;&gt;&lt;a href=&quot;#munje-ringkeu&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제-링크&quot;&gt;&lt;/a&gt; 문제 링크&lt;/h1&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="SW역량테스트" scheme="http://gwanhyeon.github.io/categories/algorithm/sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="알고리즘" scheme="http://gwanhyeon.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/tags/boj/"/>
    
      <category term="삼성SW역량테스트" scheme="http://gwanhyeon.github.io/tags/%EC%82%BC%EC%84%B1sw%EC%97%AD%EB%9F%89%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 03 함수</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210329-chapter03-%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210329-chapter03-%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE/</id>
    <published>2021-03-29T10:13:52.000Z</published>
    <updated>2021-03-29T17:16:22.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hamsureul-jal-mandeuneun-beob"><a href="#hamsureul-jal-mandeuneun-beob" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#함수를-잘-만드는-법"></a> 함수를 잘 만드는 법</h1><p>길이가 길 뿔만 아니라 중복된 코드에, 괴상한 문자열에, 낯설고 모호한 자료 유형과 API가 많다. 함수를 읽고 이해하기 쉽게 하기위해서는 무엇이 고려되야 할까요?</p><h1 id="jagge-mandeuleora"><a href="#jagge-mandeuleora" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#작게-만들어라"></a> 작게 만들어라!</h1><p>함수를 만드는 첫째 규칙은 <code>작게</code>이다. 함수를 만드는 두번째 규칙은 <code>더 작게</code>이다.</p><p>자, 다음과 같은 코드가 주어졌는데 이것을 어떻게 짧게 만들 수 있을까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">( PageData pageData, <span class="keyword">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isTestPage = pageData.hasAttribute(<span class="string">"Test"</span>); </span><br><span class="line">    <span class="keyword">if</span> (isTestPage) &#123;</span><br><span class="line">        WikiPage testPage = pageData.getWikiPage(); </span><br><span class="line">        StringBuffer newPageContent = <span class="keyword">new</span> StringBuffer(); </span><br><span class="line">        includeSetupPages(testPage, newPageContent, isSuite); </span><br><span class="line">        newPageContent.append(pageData.getContent()); </span><br><span class="line">        includeTeardownPages(testPage, newPageContent, isSuite); </span><br><span class="line">        pageData.setContent(newPageContent.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pageData.getHtml(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>한 함수당 3-5줄 이내로 줄이는것이 좋습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">( PageData pageData, <span class="keyword">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">   <span class="keyword">if</span> (isTestPage(pageData)) </span><br><span class="line">       includeSetupAndTeardownPages(pageData, isSuite); </span><br><span class="line">   <span class="keyword">return</span> pageData.getHtml();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="beulroggwa-deulyeosseugi"><a href="#beulroggwa-deulyeosseugi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#블록과-들여쓰기"></a> 블록과 들여쓰기</h2><p>if문 else while문 등에 들어가는 블록은 한줄이여야 한다는 의미입니다. 중첩 구조가 생길만큼 함수가 커져서는 안 된다는 뜻이며 들여쓰기 수준은 1,2단을 넘어서면 안됩니다.</p><h1 id="hangajiman-haera"><a href="#hangajiman-haera" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#한가지만-해라"></a> 한가지만 해라!</h1><ul><li>함수는 한 가지를 해야한다. 그 한가지를 잘 해야한다. 그 한 가지만을 해야한다.</li><li>지정된 함수 이름 아래에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한 가지 작업만 한다.</li><li>반대로, 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.</li></ul><h1 id="hamsudang-cusanghwa-sujuneun-hanaro"><a href="#hamsudang-cusanghwa-sujuneun-hanaro" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#함수당-추상화-수준은-하나로"></a> 함수당 추상화 수준은 하나로!</h1><p>함수가 확실히 <code>한 가지</code>만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 합니다.</p><blockquote><p>추상화 수준이 높은 경우</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getHTMl();</span><br><span class="line">String pagePathName = PathParser.render(pagePath);</span><br><span class="line">Object.append(<span class="string">"\n"</span>);</span><br></pre></td></tr></table></figure><p>위의 3가지 코드는 추상화 레벨이 다릅니다.</p><ul><li><p>추상화 수준이 매우 높다<br>getHTM()</p></li><li><p>추상화 수준이 높다<br>String pagePathName = PathParser.render(pagePath);</p></li><li><p>추상화 수준이 낮다<br>Object.append(&quot;\n&quot;);</p></li></ul><p>한 함수내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다.<br>개념에 세부 구현체가 추가되면 깨진 유리창 효과로 함수가 점점 비대해지며 심각한 레거시로 발전한다.</p><h2 id="wieseo-araero-kodeu-ilggi-naeryeogagi-gyucig"><a href="#wieseo-araero-kodeu-ilggi-naeryeogagi-gyucig" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#위에서-아래로-코드-읽기-내려가기-규칙"></a> 위에서 아래로 코드 읽기: 내려가기 규칙</h2><p>코드는 위에서 아래로 이야기처럼 읽혀야 좋다. 한 함수에는 추상화 수준이 한 단계 낮은 함수가 온다.</p><h2 id="switch-case"><a href="#switch-case" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#switch-case"></a> Switch case</h2><p>switch문은 작게 만들기 어렵다. case 분기가 단 두 개인 switch문도 내 취향에는 너무 길며, 단일 블록이나 함수를 선호한다. 또한 한 가지 작업만 하는 switch문도 만들기 어렵다<br>다형성을 이용하여 switch 문을 저차원 클래스에 숨기고 드러내지 않는다.</p><p>직원 유형에 따라 다른 값 계산해 반환하는 함수</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">calculatePay</span><span class="params">(Employee e)</span> <span class="keyword">throws</span> InvalidEmployeeType </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.type) &#123; </span><br><span class="line">        <span class="keyword">case</span> COMMISSIONED:</span><br><span class="line">            <span class="keyword">return</span> calculateCommissionedPay(e); </span><br><span class="line">        <span class="keyword">case</span> HOURLY:</span><br><span class="line">            <span class="keyword">return</span> calculateHourlyPay(e); </span><br><span class="line">        <span class="keyword">case</span> SALARIED:</span><br><span class="line">            <span class="keyword">return</span> calculateSalariedPay(e); </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidEmployeeType(e.type); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같은 함수의 문제점은 무엇일까요?</p><ul><li>함수가 길다.</li><li>한 가지 작업만 수행하지 않는다.</li><li>SRP 를 위반한다. 코드를 변경할 이유가 여럿이기 때문이다.</li><li>OCP 를 위반한다. 새 직원 유형을 추가할 때마다 코드를 변경해야 한다.</li><li>위 함수와 구조가 동일한 함수가 무한정 존재한다. isPayday(Employee e, Date date); 같은 경우</li></ul><p>이것을 어떻게 유연하게 바꿀 수 있을까요?<br>switch 문을 추상 팩토리에 꽁꽁 숨긴다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isPayday</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Money <span class="title">calculatePay</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deliverPay</span><span class="params">(Money pay)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">makeEmployee</span><span class="params">(EmployeeRecord r)</span> <span class="keyword">throws</span> InvalidEmployeeType</span>; </span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeFactoryImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">makeEmployee</span><span class="params">(EmployeeRecord r)</span> <span class="keyword">throws</span> InvalidEmployeeType </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (r.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> COMMISSIONED:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CommissionedEmployee(r) ;</span><br><span class="line">            <span class="keyword">case</span> HOURLY:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HourlyEmployee(r);</span><br><span class="line">            <span class="keyword">case</span> SALARIED:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SalariedEmploye(r);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidEmployeeType(r.type);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>핵심은 로직이 퍼지지 않게 하며 일관성을 유지시키는 것이다</li><li>사용하는 곳에서 구현하는 것이 아닌 구현된 팩토리 메서드를 사용하게 하는 것이다</li><li>상속관계로 숨긴 후에는 절대로 다른 코드에 노출하지 않는다.</li></ul><h1 id="seosuljeogin-ireumeul-sayonghara"><a href="#seosuljeogin-ireumeul-sayonghara" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#서술적인-이름을-사용하라"></a> 서술적인 이름을 사용하라!</h1><p>좋은 이름이 주는 가치는 아무리 강조해도 지나치지 않는다. 함수 이름을 정할때는 여러 단어가 쉽게 읽히는 명명법을 사용한다. 그 다음에 여러 단어를 사용해 함수 기능을 잘 표현하는 이름을 선택한다. 서술적인 이름을 사용하면 개발자 머릿속에서도 설계가 뚜렷해지므로 코드를 개선하기 쉬워진다.</p><p>좋은 이름을 고른 후 코드를 더 좋게 재구성하는 사례도 없지 않다. 이름을 붙일때는 일관성이 있어야한다. 모듈내에서 함수 이름은 같은 문구, 명사, 동사를 사용한다.</p><h1 id="hamsu-insu"><a href="#hamsu-insu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#함수-인수"></a> 함수 인수</h1><p>함수에서 이상적인 인수의 개수는 0개다. 가능한 다항은 피한다. 인수는 매우 어렵다. 인수는 개념을 이해하기 어렵게 만든것이다. 이것이 내가 우리 예제에서 인수를 거의 없앤 이유이다. 갖가지 인수 조합으로 함수를 검증한다고 하면 엄청나게 많은 조합의 가지가 생긴다.</p><h2 id="manhi-sseuneun-danhang-hyeongsig"><a href="#manhi-sseuneun-danhang-hyeongsig" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#많이-쓰는-단항-형식"></a> 많이 쓰는 단항 형식</h2><blockquote><p>인수에 질문을 던지는 경우</p></blockquote><p>boolean fileExists(“MyFile”);</p><blockquote><p>인수를 뭔가로 변환해 결과를 변환하는 경우</p></blockquote><p>InputStream fileOpen(“MyFile”);</p><blockquote><p>이벤트 함수일 경우 이벤트라는 사실이 코드에 명확하게 드러나야 한다.</p></blockquote><p>passwordAttemptFailedNtimes(int attempts);</p><h2 id="peulraegeu-insu"><a href="#peulraegeu-insu" class="header-anchor">6.2. </a><a class="markdownIt-Anchor" href="#플래그-인수"></a> 플래그 인수</h2><p>함수를 넘길때 플래그 인수를 넣지마라, 함수에 여러가지 조건을 걸겠다는 의미와 같은 의미다.</p><h2 id="ihang-hamsu"><a href="#ihang-hamsu" class="header-anchor">6.3. </a><a class="markdownIt-Anchor" href="#이항-함수"></a> 이항 함수</h2><p>인수가 2개인 함수는 인수가 1개인 함수보다 이해하기 어렵다.<br>이항함수가 적절한 경우는 좌표 <code>Point p = new Point(0,0)</code>가 있다.</p><h2 id="samhang-hamsu"><a href="#samhang-hamsu" class="header-anchor">6.4. </a><a class="markdownIt-Anchor" href="#삼항-함수"></a> 삼항 함수</h2><p>인수가 3개인 함수는 인수가 2개인 함수보다 훨씬 더 이해하기 어렵다. 삼항 함수를 만들때는 신중히 고려해야한다.</p><h2 id="insu-gaegce"><a href="#insu-gaegce" class="header-anchor">6.5. </a><a class="markdownIt-Anchor" href="#인수-객체"></a> 인수 객체</h2><p>인수가 2-3개 필요하다면 독자적인 크래스 변수로 선언할 가능성을 짚어본다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, dobule radius)</span></span></span><br><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(Point center, <span class="keyword">double</span> radius)</span></span></span><br></pre></td></tr></table></figure><h2 id="insu-mogrog"><a href="#insu-mogrog" class="header-anchor">6.6. </a><a class="markdownIt-Anchor" href="#인수-목록"></a> 인수 목록</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.format(<span class="string">"%s worked %.2f hours."</span>, name, hours);</span><br></pre></td></tr></table></figure><p>가변 인수를 모두 동등하게 취급하면 List형 인수 하나로 취급할 수 있다.이로인해 사실상 이항 함수가 된다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(String format, Object... args)</span></span></span><br></pre></td></tr></table></figure><p>가변 인수를 취하는 모든 함수에 같은 원리가 적용된다.</p><h2 id="dongsawa-kiweodeu"><a href="#dongsawa-kiweodeu" class="header-anchor">6.7. </a><a class="markdownIt-Anchor" href="#동사와-키워드"></a> 동사와 키워드</h2><p>단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writeField(name);</span><br></pre></td></tr></table></figure><p>함수이름에 키워드(인수 이름)을 추가하면 인수 순서를 기억할 필요가 없어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assertExpectedEqualsActual(expected, actual);</span><br></pre></td></tr></table></figure><h1 id="busu-hyogwareul-ileukiji-mara"><a href="#busu-hyogwareul-ileukiji-mara" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#부수-효과를-일으키지-마라"></a> 부수 효과를 일으키지 마라!</h1><p>부수효과는 거짓말이다. 때로는 예상치 못하게 클래스 변수를 수정한다. 때로는 함수로 넘어온 이눗나 시스템 전역 변수를 수정한다.</p><blockquote><p>부수효과</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cryptographer cryptographer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPassword</span><span class="params">(String userName, String password)</span> </span>&#123; </span><br><span class="line">        User user = UserGateway.findByName(userName);</span><br><span class="line">        <span class="keyword">if</span> (user != User.NULL) &#123;</span><br><span class="line">            String codedPhrase = user.getPhraseEncodedByPassword(); </span><br><span class="line">            String phrase = cryptographer.decrypt(codedPhrase, password); </span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"Valid Password"</span>.equals(phrase)) &#123;</span><br><span class="line">                Session.initialize();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부수효과는 시간적인 결합을 초래한다. 특히, 부수 효과로 숨겨진 경우에는 더더욱 혼란이 커진다. Session.initialize() 는 함수명과 맞지 않는 부수 효과이다. 이름 그대로 암호를 확인한다.</p><h2 id="culryeoginsu"><a href="#culryeoginsu" class="header-anchor">7.1. </a><a class="markdownIt-Anchor" href="#출력인수"></a> 출력인수</h2><p>일반적으로 출력인수는 피해야한다. 함수에서 상태를 변경해야 한다면 함수가 속한 객체 상태를 변경하는 방식을 취한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendFooter</span><span class="params">(StringBuffer report)</span></span></span><br><span class="line"><span class="function">report.<span class="title">appendFooter</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="myeongryeonggwa-johoereul-bunrihara"><a href="#myeongryeonggwa-johoereul-bunrihara" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#명령과-조회를-분리하라"></a> 명령과 조회를 분리하라</h1><p>함수는 뭔가를 수행하거나 뭔가를 답하거나 둘중 하나만 해야한다.<br>set 이라는 함수가 굉장히 모호하다. setAndCheckIfExists 라고 하는게 훨씬 좋지만, 명령과 조회를 분리해 애초에 혼란이 일어나지 않도록 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String attribute, String value)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(set(<span class="string">"username"</span>, <span class="string">"unclebob"</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (attributeExists(<span class="string">"username"</span>)) &#123;</span><br><span class="line">  setAttribute(<span class="string">"username"</span>, <span class="string">"unclebob"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떤 의미를 하는지 의미가 모호하다.</p><h1 id="oryu-kodeuboda-yeoereul-sayonghara"><a href="#oryu-kodeuboda-yeoereul-sayonghara" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#오류-코드보다-예외를-사용하라"></a> 오류 코드보다 예외를 사용하라!</h1><p>명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (deletePage(page) === E_OK)</span><br></pre></td></tr></table></figure><p>상태 코드의 종속을 유발하고 중첩되는 if문과 여러 상태코드의 조합이 이루어지게 됩니다.<br>유지보수에 치명적이고 비즈니스 로직을 한 눈에 알기 어렵다. 또한 오류 코드를 만났을 경우 바로 해결해야만 하는 문제가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (deletePage(page) == E_OK) &#123;</span><br><span class="line">    <span class="keyword">if</span> (registry.deleteReference(page.name) == E_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (configKeys.deleteKey(page.name.makeKey()) == E_OK) &#123;</span><br><span class="line">            logger.log(<span class="string">"page deleted"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.log(<span class="string">"configKey not deleted"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(<span class="string">"deleteReference from registry failed"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.log(<span class="string">"delete failed"</span>); <span class="keyword">return</span> E_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정상 동작과 오류 처리 동작이 뒤섞이므로 굉장히 모호해진다. 오류 코드 대신 예외를 사용 하면 오류 처리 코드가 원래 코드에서 분리되므로 코드가 깔끔해진다.</p><h2 id="try-catch-beulrog-bbobanaegi"><a href="#try-catch-beulrog-bbobanaegi" class="header-anchor">9.1. </a><a class="markdownIt-Anchor" href="#trycatch-블록-뽑아내기"></a> Try/Catch 블록 뽑아내기</h2><p>Try/Catch 블록은 추하고 코드 구조에 혼란을 일으키며 정상동작과 오류 처리 동작을 뒤 섞는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        deletePageAndAllReferences(page);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          logError(e);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deletePageAndAllReferences</span><span class="params">(Page page)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    deletePage(page);</span><br><span class="line">    registry.deleteReference(page.name); </span><br><span class="line">    configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logError</span><span class="params">(Exception e)</span> </span>&#123; </span><br><span class="line">    logger.log(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정상 동작과 오류 처리 동작을 분리하면 코드를 이해하고 수정하기 쉬워진다.</p><h2 id="oryu-ceorido-han-gaji-jageobida"><a href="#oryu-ceorido-han-gaji-jageobida" class="header-anchor">9.2. </a><a class="markdownIt-Anchor" href="#오류-처리도-한-가지-작업이다"></a> 오류 처리도 한 가지 작업이다.</h2><p>함수는 <code>한 가지</code> 작업만 해야한다. 오류 처리도 <code>한 가지</code> 작업에 속한다. 즉, 함수에 키워드 try가 있다면 함수는 try문으로 시작해 catch/finally문으로 끝나야한다는 말이다.</p><h2 id="error-java-yijonseong-jaseog"><a href="#error-java-yijonseong-jaseog" class="header-anchor">9.3. </a><a class="markdownIt-Anchor" href="#errorjava-의존성-자석"></a> Error.java 의존성 자석</h2><p>오류 코드를 반환한다는 이야기는 클래스든 열거형 변수든 어디선가 오류 코드를 정의한다는 뜻이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Error &#123; </span><br><span class="line">    OK,</span><br><span class="line">    INVALID,</span><br><span class="line">    NO_SUCH,</span><br><span class="line">    LOCKED,</span><br><span class="line">    OUT_OF_RESOURCES,     </span><br><span class="line">    WAITING_FOR_EVENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>오류를 처리하는 곳곳에서 오류코드를 사용하게 되면 enum class를 쓰게 되는데 이런 클래스는 의존성 자석이 된다. 재컴파일 및 재배치 등 새 오류코드를 추가하거나 변경할 때 코스트가 많이 필요하다.그러므로 예외를 사용하는 것이 더 안전하다.</p><h1 id="gujojeog-peurogeuraeming"><a href="#gujojeog-peurogeuraeming" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#구조적-프로그래밍"></a> 구조적 프로그래밍</h1><p>함수는 return문이 하나여야한다. 루프 안에서 break나 continue를 사용해선 안되며 goto는 절대로 절대로 안된다.<br>함수를 작게 만든다면 return, break, continue를 여러 차례 사용해도 괜찮다. goto는 피해라</p><h1 id="hamsureul-eoddeohge-jjajyo"><a href="#hamsureul-eoddeohge-jjajyo" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#함수를-어떻게-짜죠"></a> 함수를 어떻게 짜죠?</h1><ol><li>서투른 코드를 작성한다.</li><li>이러한 코드에도 단위 테스트 케이스를 만든다.</li><li>코드를 다듬고 함수를 만들고 이름을 변경한다.</li><li>위의 과정에서 항상 단위 테스트를 통과해야한다.</li><li>반복을 진행한다.</li></ol><h1 id="gyeolron"><a href="#gyeolron" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1><p>모든 시스템은 특정 응용 분야 시스템을 기술할 목적으로 프로그래머가 설계한 도메인 특화 언어로 만들어진다. 함수는 그 언어에서 동사며, 클래스는 명사다. 프로그래밍 기술은 언제나 언어 설계의 기술이다. 결론적으로 작성한 함수가 분명하고 정확한 언어로 되어 있을 때 이야기를 풀어가기가 쉬워진다는 사실을 기억하라.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hamsureul-jal-mandeuneun-beob&quot;&gt;&lt;a href=&quot;#hamsureul-jal-mandeuneun-beob&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="함수" scheme="http://gwanhyeon.github.io/tags/%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 02 의미있는이름</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210323-chapter02-%E1%84%8B%E1%85%B4%E1%84%86%E1%85%B5%E1%84%8B%E1%85%B5%E1%86%BB%E1%84%82%E1%85%B3%E1%86%AB%E1%84%8B%E1%85%B5%E1%84%85%E1%85%B3%E1%86%B7/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210323-chapter02-%E1%84%8B%E1%85%B4%E1%84%86%E1%85%B5%E1%84%8B%E1%85%B5%E1%86%BB%E1%84%82%E1%85%B3%E1%86%AB%E1%84%8B%E1%85%B5%E1%84%85%E1%85%B3%E1%86%B7/</id>
    <published>2021-03-23T01:33:06.000Z</published>
    <updated>2021-03-23T03:42:44.725Z</updated>
    
    <content type="html"><![CDATA[<p>소프트웨어 이름은 변수, 함수, 인수, 클래스, 패키지, 소스코드, 디렉터리, jar, war 등 여러 이름을 붙입니다. 이번 장에서는 이름을 잘 짓는 규칙을 알아보도록 하겠습니다.</p><h1 id="yidoreul-bunmyeonghi-balghyeora"><a href="#yidoreul-bunmyeonghi-balghyeora" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#의도를-분명히-밝혀라"></a> 의도를 분명히 밝혀라</h1><p><strong>의도가 분명하게 이름을 지으라</strong> 라고는 말하기는 쉽지만 생각보다 이름을 짓는것은 쉽지 않다. 좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 시간을 절약하는 시간이 훨씬 큽니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d; <span class="comment">// 경과시간(단위: 날짜)</span></span><br></pre></td></tr></table></figure><p>위의 코드는 변수명 이름을 잘 지은것일까? 라는 의문이 들게됩니다. 위의 코드는 변수명에 아무런 의미도 드러나지 않고 경과시간이나 날짜라는 느낌이 전혀들지 않습니다.</p><blockquote><p>그러면 어떻게 지어야할까요?</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> elaspsedTimeInDays;</span><br><span class="line"><span class="keyword">int</span> daysSinceCreation;</span><br><span class="line"><span class="keyword">int</span> daysSinceModification</span><br><span class="line"><span class="keyword">int</span> fileAgeInDays;</span><br></pre></td></tr></table></figure><p>다음과 같이 의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워집니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getThem()&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; list1 = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] x : theList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[<span class="number">0</span>] == <span class="number">4</span>)&#123;</span><br><span class="line">            list1.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 보면 코드가 하는일을 짐작하기 어렵습니다. 무슨 문제가 있는걸까요? 그렇다고 코드들이 복잡하다는것이 아닙니다.</p><blockquote><p>문제는 무엇일까요?<br>문제는 코드의 단순성이 아니라 코드의 함축성입니다. 다시 말해, 코드 맥락이 코드자체에 명시적으로 드러나있지 않습니다. 위 코드는 암암리에 독자가 다음과 같은 정보를 안다고 가정을 합니다.</p></blockquote><ol><li>theList 무슨값이?</li><li>theList 0번째 값은 무엇때문에?</li><li>값 4는 무엇을 의미하지?</li><li>함수가 반환하는 list1은 무엇이지? 어떻게 사용하지?</li></ol><p>이와 같은 성격이 드러나있지 않습니다.</p><blockquote><p>자 그러면, 이제 지뢰찾기 게임을 만든다는 가정을 해보겠습니다.</p></blockquote><p>theList : 게임판 : gameBoard로 바꾸어보겠습니다. 그러면 0번째값은 칸 상태를 뜻하고, 값 4는 깃발이 꽂힌 상태를 가리킨다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getFlaggedCells()&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] cell : gameBoard)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cell[STATUS_VALUE] == FLAGGED)&#123;</span><br><span class="line">            flaggedCells.add(cell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 변수만 변경해보았는데 단순성은 변하지 않고 들여쓰기도 같고, 코드는 더욱더 명확해졌습니다.<br>Int 배열을 사용하는 대신, 칸을 간단한 클래스로 만들어도 됩니다. isFlagged라는 더 명시적인 함수를 사용하여 상수를 감춰줘도 매우 괜찮은 결과가 될 것입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getFlaggedCells()&#123;</span><br><span class="line">    List&lt;Cell&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Cell cell: gameBoard)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cell.isFlagged)&#123;</span><br><span class="line">            flaggedCells.add(cell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이름만 바꾸어 졌는데도 함수가 하는 일을 이해하기가 쉬워졌습니다. 깨끗한 코드가 주는 강력한 힘입니다.</p><h1 id="geureusdoen-jeongboreul-pihara"><a href="#geureusdoen-jeongboreul-pihara" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#그릇된-정보를-피하라"></a> 그릇된 정보를 피하라</h1><p>널리쓰이는 의미 있는 단어를 다른의미로 사용하면 안됩니다. 예를 들면, hp, aix, sco 변수이름입니다.<br>hypotenuse(빗변) = hp 가 훌륭한 약어일지라도 독자들에게 그릇된 정보를 야기시킬 수 있습니다.<br>List라는 변수는 매우 특수한 의미를 가지고 있다. 여러 계정을 담는 리스트면 accountGroup, buchOfAccounts아니면 Accounts라 명명하는 식으로 처리합니다.</p><blockquote><p>흡사한 이름을 버려라</p></blockquote><p>XYZControllerForEfficientHandlingOfString, XYZControllerForEfficientStorageOfString 이라는 이름을 사용하면 두 단어는 매우 겁나 비슷하다.</p><blockquote><p>유사한 표기법</p></blockquote><p>일관성이 떨어지는 표기법은 그릇된 정보이다. 소문자 L은 1처럼보이고 대문자 O는 숫자0처럼 보인다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(O == <span class="number">1</span>)&#123;</span><br><span class="line">    a = <span class="number">01</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    l = <span class="number">01</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>같은 변수를 실무에서 사용하는 코드가 실제로 있을 수 있다. 문서나 구전으로 미래 개발자 모두에게 알려야하는 해결책이고, 이름만 바꾸면 문제가 해결된다.</p><h1 id="yimi-issge-gubunhara"><a href="#yimi-issge-gubunhara" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#의미-있게-구분하라"></a> 의미 있게 구분하라</h1><p>컴파일러나 인터프리터만 통과하려는 생각으로 코드를 구현하는 프로그래머는 스스로 문제를 일으킨다. 컴파일러를 통과할지라도 연속된 숫자를 덧붙이거나 불용어를 추가하는 방식은 적절하지 못한다.</p><p>a1,a2,a3…aN과 같은 의미를 띄는 이름을 지양해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> a1[], <span class="keyword">char</span> a2[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++)&#123;</span><br><span class="line">        a2[i] = a1[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수 인수 이름으로 source와 destination을 사용한다면 코드읽기가 더 쉬워집니다.<br>불용어를 추가한 이름 역시 아무런 정보도 제공하지 못합니다. Product라는 클래스가 있다고 가정하면 다른 클래스를 ProductInfo or ProductData라 부릅니다. Info나 Data는 a, an, the와 마찬가지로 의미가 불분명한 불용어이다.</p><p>접두어를 사용하지말라는것이 아니다. 의미가 분명히 다르다면 사용해도 무방하다.<br>지역변수 a를 사용하고 모든 함수 인수는 the를 사용하면 된다. zork라는 변수가 있다는 이유만으로 theZork라는 이름을 지어서는 안된다는 의미이다.</p><blockquote><p>NameString VS Name 둘중 뭐가 더 나은 코드일까?</p></blockquote><p>Name이 부동소수가 될 가능성이 있는지를 확인하고 그릇된 정보인지를 확인한다.</p><blockquote><p>Customer VS CustomerObject</p></blockquote><p>두개의 클래스가 있다고 가정하면 어떤 차이가 있는것 같아보이는가? 고객 급여 이력을 찾기위해서는 어떤것을 찾아야할까?</p><p>getActiveAccount(), getActiveAccounts, getActiveAccountInfo() 이 프로젝트에 참여한 프로그래머는 어떤 함수를 호출할지 어떻게 알까? 명확한 관례가 없다면 moneyAmount, money 는 구분이 되지 않는다.</p><p>즉, 읽는 사람이 차이를 알도록 이름을 지어라.</p><h1 id="baleumhagi-swiun-ireumeul-sayonghara"><a href="#baleumhagi-swiun-ireumeul-sayonghara" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#발음하기-쉬운-이름을-사용하라"></a> 발음하기 쉬운 이름을 사용하라</h1><p>genymdhms(generate,date,year,month,day,hour,minute,sec-ond) 라고 발음한다는것을 가정해보자.<br>이게 발음하기 쉬운가? 어렵다 무슨말인지도 모르겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DtaRcrd102</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date genymdhms;</span><br><span class="line">    <span class="keyword">private</span> Date modymdhms;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String pszpint = <span class="string">"102"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date generationTimestamp;</span><br><span class="line">    <span class="keyword">private</span> Date modificationTimestamp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String recordId = <span class="string">"102"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="geomsaeghagi-swiun-ireumeul-sayonghara"><a href="#geomsaeghagi-swiun-ireumeul-sayonghara" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#검색하기-쉬운-이름을-사용하라"></a> 검색하기 쉬운 이름을 사용하라</h1><p>문자 하나를 사용하는 이름과 상수는 텍스트 코드에서 쉽게 눈에 띄지 않는다는 문제점이 있습니다.</p><p>MAX_CLASSES_PER_STUDENT는 grep으로 찾기가 쉽지만, 숫자 7은 은근히 까다롭습니다. 7이 들어가는 파일 이름이나 수식이 모두 검색되기 때문입니다.</p><p>마찬가지로 e라는 문자도 변수 이름으로 적합하지 못합니다. 검색이 어렵기 때문입니다. e는 영어에서 가장 많이 쓰이는 문자이다.<br><strong>이름 길이는 범위 크기에 비례해야합니다</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">34</span>; j++)&#123;</span><br><span class="line">    s+=(t[j]*<span class="number">4</span>)/<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> realDaysPerIdeaDay = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> WORK_DAYS_PER_WEEK = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;NUMBER_OF_TASKS; j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> realTaskDays = taskEstimate[j] * realDaysPerIdeaDay;</span><br><span class="line">    <span class="keyword">int</span> realTaskWeeks = (realTaskDays) / WORK_DAYS_PER_WEEK);</span><br><span class="line">    sum += realTaskWeeks;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 WORK_DAYS_PER_WEEK 매직넘버를 사용하지 않으면 이름을 모두 찾은 후 의미를 분석해 원하는 상수를 가려내야하는 번거로움이 발생한다.</p><h1 id="inkodingeul-pihara"><a href="#inkodingeul-pihara" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#인코딩을-피하라"></a> 인코딩을 피하라</h1><p>인코딩 정보는 매우 많으므로 개발자에게 인코딩은 불필요한 정신적 부담입니다. 따라서, 유형이나 범위정보까지 인코딩에 넣으면 해독하기가 어려워진다.</p><h2 id="heonggarisig-pyogibeob"><a href="#heonggarisig-pyogibeob" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#헝가리식-표기법"></a> 헝가리식 표기법</h2><p>변수에 부가 정보를 덧붙여 표기하지 마라.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PhoneNumber phoneString;</span><br></pre></td></tr></table></figure><p>타입 시스템에서 의미없는 정보이다. 예전에는 컴파일러가 타입을 점검하지 않아 헝가리언 표기법으로 타입을 기억할 단서가 필요했다. 하지만 요즘은 컴파일러가 타입을 기억하고 강제한다.</p><h2 id="membeo-byeonsu-jeobdueo"><a href="#membeo-byeonsu-jeobdueo" class="header-anchor">6.2. </a><a class="markdownIt-Anchor" href="#멤버-변수-접두어"></a> 멤버 변수 접두어</h2><p>멤버 변수에 _m이라는 접두어를 붙일 필요가 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String m_dsc;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        m_dsc = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part</span></span>&#123;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사람들은 접두어를 무시하고 이름을 해독하는 방식을 재빨리 익히고 코드를 읽을수록 접두어는 관심 밖으로 밀려나갑니다. 접두어를 쓰면 옛날코드를 의미하는게 되어버렸다.</p><h2 id="inteopeiseu-keulraeseuwa-guhyeon-keulraeseu"><a href="#inteopeiseu-keulraeseuwa-guhyeon-keulraeseu" class="header-anchor">6.3. </a><a class="markdownIt-Anchor" href="#인터페이스-클래스와-구현-클래스"></a> 인터페이스 클래스와 구현 클래스</h2><p>ABSTRACT FACTORY 구현시에 인터페이스 이름은 접두어를 붙이지 않는편이 좋다. IShapeFactory VS ShapeFactory와 같이 접두어를 써봤자 주의를 흐트리고 과도한 정보를 제공한다.</p><p>즉, 인터페이스명은 ShapeFactoryImp나 심지어 CShapeFactory or IShapeFactory보다 좋다.</p><h1 id="jasinyi-gieogryeogeul-jaranghaji-mara"><a href="#jasinyi-gieogryeogeul-jaranghaji-mara" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#자신의-기억력을-자랑하지-마라"></a> 자신의 기억력을 자랑하지 마라</h1><p>for문에서 i,j,k와 같은것은 괜찮지만 l이나 I와 같은 변수를 사용하면 안된다.<br>똑똑한 프로그래머와 전문가 프로그래머 사이에서 나타ㄴ는 차이점 하나만 들자면, 전문가 프로그래머는 <em>명료함</em>이 최고라는 사실을 안다.</p><h1 id="keulraeseu-ireum"><a href="#keulraeseu-ireum" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#클래스-이름"></a> 클래스 이름</h1><p>클래스 이름과 객체이름은 명사나 명사구가 적합하다<br>Customer, WikePage, Account, AddressParser 와 같은것이 좋은 예이다<br>Manager, Processor,Data,Info와 같은 이름은 피하자</p><h1 id="meseodeu-ireum"><a href="#meseodeu-ireum" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#메서드-이름"></a> 메서드 이름</h1><p>메서드 이름은 동사나 동사구가 적합하다. postPayment deletePage, save등이 좋은 예이고 Accessor, Mutator, Predicate는 Javabean표준에 따라 앞에 get,set,is를 붙인다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String name = employee.getName();</span><br><span class="line">customer.setName(<span class="string">"kgh"</span>);</span><br><span class="line"><span class="keyword">if</span>(paycheck.isPosted())&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자를 중복정의 할때는 정적 팩토리 메서드를 사용합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 좋은 코드 </span></span><br><span class="line">Complex fulcrumPoint = Complex.FromRealNumber(<span class="number">23.0</span>);</span><br><span class="line"><span class="comment">// 나쁜코드</span></span><br><span class="line">Complex fulcrumPoint = <span class="keyword">new</span> Complex(<span class="number">23.0</span>);</span><br></pre></td></tr></table></figure><h1 id="gibalhan-ireumeun-pihara"><a href="#gibalhan-ireumeun-pihara" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#기발한-이름은-피하라"></a> 기발한 이름은 피하라</h1><p>HolyHandGrenade 함수가 무슨일을 하는지 알겠는가? 이것보단 DeleteItems가 더 좋다.<br>가끔, 예를 들어</p><p>kill()대신에 whack()이라 부르거나 Abort() 대신 eatMyShort()라 부릅니다. 농담을 피해라!</p><h1 id="han-gaenyeome-han-daneoman-sayonghara"><a href="#han-gaenyeome-han-daneoman-sayonghara" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#한-개념에-한-단어만-사용하라"></a> 한 개념에 한 단어만 사용하라</h1><p>똑같은 메서드를 fetch, retrieve, get으로 제각각으로 부르면 혼란스럽습니다. 어느 클래스에서 어떤 이름을 썼는지 기억하기 어렵습니다. 이름이 다르면 독자는 당연히 클래스도 다르고 타입도 다르다고 생각합니다.<br><strong>일관성있는 코드를 작성하자</strong></p><h1 id="mal-jangnaneul-haji-mara"><a href="#mal-jangnaneul-haji-mara" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#말-장난을-하지-마라"></a> 말 장난을 하지 마라</h1><p>한 단어를 두가지 목적으로 사용하지 말라.<br>한 개념에 한 단어를 사용하라 라는 규칙을 따랐더니 여러 클래스에서 add라는 메서드가 생겼다. 모든 add메서드의 매개변수와 반환값이 의미적으로 똑같다면 문제가 없지만, 같은 맥락이 아닌데도 일관성을 고려해서 add라는 단어를 선택한다.</p><p>모두가 기존값을 두개를 더하거나 새로운 값을 만든다고 가정하면 이것을 add라고 쓰고, 하나의 값만 추가하는데도 add라는 말을 쓰면 말장난이다. 즉, 하나의 값을 더할때는 insert 나 append라는 이름이 적당하다.</p><h1 id="haebeob-yeongyeogeseo-gajyeoon-ireumeul-sayonghara"><a href="#haebeob-yeongyeogeseo-gajyeoon-ireumeul-sayonghara" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#해법-영역에서-가져온-이름을-사용하라"></a> 해법 영역에서 가져온 이름을 사용하라</h1><p>모든 문제를 문제영역에서 가져오는 정책은 현명하지 못하다. 전산 용어, 알고리즘이름, 패턴 이름, 수학 용어등은 괜찮다. 프로그래머에게 익숙한 기술이 가장 적합한 선택이다</p><h1 id="munje-yeongyeogeseo-gajyeoon-ireumeul-sayonghara"><a href="#munje-yeongyeogeseo-gajyeoon-ireumeul-sayonghara" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#문제-영역에서-가져온-이름을-사용하라"></a> 문제 영역에서 가져온 이름을 사용하라</h1><p>문제 영역개념과 관련이 깊은 코드라면 문제영역에서 이름을 가져와야한다</p><h1 id="yimi-issneun-maegrageul-cugahara"><a href="#yimi-issneun-maegrageul-cugahara" class="header-anchor">15. </a><a class="markdownIt-Anchor" href="#의미-있는-맥락을-추가하라"></a> 의미 있는 맥락을 추가하라</h1><p>스스로 의미가 분명한 의름이 없지 않다. 그래서 클래스 함수, 이름 공간에 넣어 맥락을 부여한다.</p><p>예를 들면, firstName, lastName, street, houseNumber, city, state, zipcode 라는 변수가 있으면 변수를 훑어보면 주소라는 사실을 알 수 있는데, state가 일부의 주소라는 사실을 알 수 있을까?</p><p>addr접두어를 추가하여 의미를 더욱 더 명확히 할 수 있다. addrFirstName, addrLastName, addrState라 쓰면 맥락이 조금더 분명해 진다. Address클래스를 사용하는것도 하나의 방법이다.</p><blockquote><p>맥락이 불분명한 변수</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printGuessStatistics</span><span class="params">(<span class="keyword">char</span> candidate, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    String number;</span><br><span class="line">    String verb;</span><br><span class="line">    String pluralModifier;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        number = <span class="string">"no"</span>;</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">        number = <span class="string">"1"</span>;</span><br><span class="line">        verb = <span class="string">"is"</span>;</span><br><span class="line">        pluralModifier = <span class="string">""</span>;</span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">        number = Integer.toString(count);</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String guessMessage = String.format(<span class="string">"There %s %s %s%s"</span>, verb, number, candidate, pluralModifier );</span><br><span class="line"></span><br><span class="line">    print(guessMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>맥락이 명확한 변수</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessStatisticsMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String verb;</span><br><span class="line">    <span class="keyword">private</span> String pluralModifier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">make</span><span class="params">(<span class="keyword">char</span> candidate, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        createPluralDependentMessageParts(count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"There %s %s %s%s"</span>, verb, number, candidate, pluralModifier );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createPluralDependentMessageParts</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            thereAreNoLetters();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            thereIsOneLetter();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            thereAreManyLetters(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereAreManyLetters</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        number = Integer.toString(count);</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereIsOneLetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number = <span class="string">"1"</span>;</span><br><span class="line">        verb = <span class="string">"is"</span>;</span><br><span class="line">        pluralModifier = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereAreNoLetters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number = <span class="string">"no"</span>;</span><br><span class="line">        verb = <span class="string">"are"</span>;</span><br><span class="line">        pluralModifier = <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bulpilyohan-maegrageul-eobsaeja"><a href="#bulpilyohan-maegrageul-eobsaeja" class="header-anchor">16. </a><a class="markdownIt-Anchor" href="#불필요한-맥락을-없애자"></a> 불필요한 맥락을 없애자</h1><p>고급 휘발유 충전소(Gas Station Deluxe) 애플리케이션일 경우 모든 이름을 GSD라고 시작하면 안된다. 일반적으로 짧은 이름이 긴 이름보다 좋습니다. 의미가 분명한 경우 accountAddress, customerAddress는 맥락이 잘 나누어져 있다면 Address 로 충분하다.<br>포트주소, MAC 주소, 웹 주소를 구분해야 한다면 PostalAddress, MAC, URI 라는 이름도 좋다.</p><h1 id="macimyeonseo"><a href="#macimyeonseo" class="header-anchor">17. </a><a class="markdownIt-Anchor" href="#마치면서"></a> 마치면서</h1><p>대다수 자신이 짠 클래스 이름 메서드 이름을 기억 못한다. 다른사람이 짠 코드를 손본다면 리팩터링 도구를 사용해서 이름을 개선해야합니다. 반대에 두려워하지 말고 코드개선 노력을 보이자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;소프트웨어 이름은 변수, 함수, 인수, 클래스, 패키지, 소스코드, 디렉터리, jar, war 등 여러 이름을 붙입니다. 이번 장에서는 이름을 잘 짓는 규칙을 알아보도록 하겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;yidoreul-bunmyeonghi-ba
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
      <category term="의미있는이름" scheme="http://gwanhyeon.github.io/tags/%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94%EC%9D%B4%EB%A6%84/"/>
    
  </entry>
  
</feed>
