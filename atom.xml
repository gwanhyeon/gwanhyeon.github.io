<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Ethan Kim IT Blog</title>
  
  <subtitle>Ethan Kim IT Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2021-01-27T07:05:41.799Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>Ethan Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JPA 영속성 컨텍스트(Persistence Context)</title>
    <link href="http://gwanhyeon.github.io/JPA-20210127-jpa-02-%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/"/>
    <id>http://gwanhyeon.github.io/JPA-20210127-jpa-02-%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</id>
    <published>2021-01-27T06:05:04.000Z</published>
    <updated>2021-01-27T07:05:41.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yeongsogseong-keontegseuteu-persistence-context"><a href="#yeongsogseong-keontegseuteu-persistence-context" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#영속성-컨텍스트persistence-context"></a> 영속성 컨텍스트(Persistence Context)</h1><p>영속성 컨텍스트란 논리적인 개념(무형성)으로 엔티티를 영구 저장하는 환경이라고 할 수 있습니다. 특히, JPA를 이해하는데 가장 중요한 용어입니다. 그리고 EntityManager를 통하여 영속성 컨텍스트에 접근할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EntityManager.persist(entity);</span><br></pre></td></tr></table></figure><p>다음과 같이 EntityManagerFactory가 생성시킨 EntityManager를 사용하여 Connection pool에 접근하여 Database에 접근할 수 있습니다.</p><h1 id="j2se-standard-edition-vs-j2ee-enterprise-edition"><a href="#j2se-standard-edition-vs-j2ee-enterprise-edition" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#j2se-standard-edition-vs-j2ee-enterprise-edition"></a> J2SE (Standard Edition) VS J2EE ( Enterprise Edition)</h1><blockquote><p>J2SE</p></blockquote><p>일반 자바 프로그램 개발을 위한 용도로 이용되는 개발도구이며 각종 자료구조, 기본 유틸리티, 스윙이나 AWT와 같은 GUI도구등의 기본기능을 포함하고 있다.</p><blockquote><p>J2EE</p></blockquote><p>엔터프라이즈 환경을 위한 도구로 EJB, JSP, Servlet, JNDI같은 기능을 지원하며 웹 애플리케이션 서버를 이용하는 프로그램 개발시 많이 사용한다.</p><p>두 가지 환경에서는 어떠한 차이가 있을까요?</p><p>J2SE는 엔티티매니저와 영속성컨텍스트가 1:1로 관계를 가지고 있으며 J2EE 스프링 프레임워크 같은 컨테이너 환경은 엔티티 매니저와 영속성 컨텍스트가 N:1의 관계를 가지고 있습니다.</p><h1 id="entity-saengmyeongjugi"><a href="#entity-saengmyeongjugi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#entity-생명주기"></a> Entity 생명주기</h1><blockquote><p>생명주기</p></blockquote><p><img src="https://www.objectdb.com/files/images/manual/jpa-states.png" alt="엔티티 생명주기"></p><h2 id="biyeongsog-new-transient"><a href="#biyeongsog-new-transient" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#비영속newtransient"></a> 비영속(new/transient)</h2><p>영속성 컨텍스트와 전혀관계가 없는 새로운 상태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 생성 (비영속)</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br></pre></td></tr></table></figure><h2 id="yeongsog-managed"><a href="#yeongsog-managed" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#영속managed"></a> 영속(managed)</h2><p>영속성 컨텍스트에 관리되는 상태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 생성(비영속)</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 엔티티 매니저 팩토리로 엔티티 매니저를 생성합니다.</span></span><br><span class="line">EntityManager em = emf.createEntityManager();</span><br><span class="line"><span class="comment">// 트랙잭션위에서 동작합니다.</span></span><br><span class="line">em.getTransaction().begin();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 저장한 상태(영속) - 영속상태가 되는것 DB에 저장되는 상태가 아니며 트랜잭션 커밋시점에 해당 DB에 들어가게 됩니다.</span></span><br><span class="line"><span class="comment">// 만약 1차캐시가 있다면 1차캐시를 사용합니다.</span></span><br><span class="line">em.persist(member);</span><br></pre></td></tr></table></figure><h2 id="junyeongsog-detached"><a href="#junyeongsog-detached" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#준영속detached"></a> 준영속(detached)</h2><p>영속성 컨텍스트에 저장되었다가 분리된 상태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 엔티티를 영속성 컨텍스트에서 분리시키고 준영속상태로 만듭니다.</span></span><br><span class="line">em.detach(member);</span><br></pre></td></tr></table></figure><h2 id="sagje-removed"><a href="#sagje-removed" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#삭제removed"></a> 삭제(removed)</h2><p>삭제된 상태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체를 삭제한 상태</span></span><br><span class="line">em.remove(member);</span><br></pre></td></tr></table></figure><h1 id="yeongsogseong-keontegseuteu-teugjing"><a href="#yeongsogseong-keontegseuteu-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#영속성-컨텍스트-특징"></a> 영속성 컨텍스트 특징</h1><ol><li>1차캐시를 활용합니다.</li><li>동일성(Identity)를 보장합니다.</li><li>트랜잭션을 지원하는 쓰기 지연을 일으킵니다(Transcational write-behind)</li><li>변경 감지(Dirty Checking)이 가능합니다.</li><li>지연 로딩(Lazy Loading)을 지원합니다</li></ol><p>즉, 영속성 컨텍스트는 버퍼링과 캐싱의 기능을 가질 수 있습니다.</p><h1 id="entiti-johoe-mic-1ca-kaesi"><a href="#entiti-johoe-mic-1ca-kaesi" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#엔티티-조회-및-1차-캐시"></a> 엔티티 조회 및 1차 캐시</h1><p>1차 캐시는 Map형태로 구성되어있습니다. 예를 들면 key-@Id : value-@Entity &lt;Key,Value&gt;형식으로 구성되어있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//엔티티를 생성한 상태 비영속상태입니다.</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//엔티티를 영속하는 단계</span></span><br><span class="line">em.persist(member);</span><br></pre></td></tr></table></figure><blockquote><p>이제 이것들은 1차캐시에서 어떻게 사용될까요?</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//엔티티를 생성한 상태 비영속상태입니다.</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에 저장</span></span><br><span class="line">em.persist(member);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에서 조회</span></span><br><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br></pre></td></tr></table></figure><p>em.persist(member)를 하게 되면 1차 캐시에 값이 저장되고 그 이후에 만약 값을 조회하는 경우 현재 1차캐시에 올라간 값으로 조회해옵니다.<br>즉, 영속성 컨텍스트에서 1차캐시를 확인하고 없으면 1차캐시에 저장을 하게됩니다. 그리고 값을 조회하면 1차캐시에 저장된 저장값들을 불러와서 조회가 가능하게 됩니다.</p><blockquote><p>데이터베이스 조회</p></blockquote><p>EntityManager은 트랜잭션단위로 처리를 진행합니다. 즉, 1차 캐시도 날아가며 1차캐시는 전체적인 확인을 통해 진행됩니다.</p><ol><li>find(“gwanhyeonkim”) 1차 캐시를 확인하여 없으면 DB를 조회합니다.</li><li>DB조회후 1차캐시에 저장을 시키고 해당 member값을 반환시켜주게 됩니다.</li></ol><h1 id="yeongsogseong-entiti-dongilseong-identifier"><a href="#yeongsogseong-entiti-dongilseong-identifier" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#영속성-엔티티-동일성identifier"></a> 영속성 엔티티 동일성(Identifier)</h1><p>만약에 똑같은 값을 조회한다고 가정하면 영속성 엔티티의 동일성을 보장시켜줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line">Member member2 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line"></span><br><span class="line">(a == b) <span class="comment">// 동일성이 같습니다. true</span></span><br></pre></td></tr></table></figure><p>1차 캐시로 반복 가능한 읽기(REPEATABLE READ) 등급의 트랜잭션 격리 수준을 데이터베이스가 아닌 애플리케이션 차원에서 제공됩니다. 즉, 같은 트랜잭션내에 동일성이 보장되면 true를 리턴한다고 할 수 있습니다.</p><blockquote><p>데이터베이스에 언제 Insert를 진행할까요?</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transaction.commit(); <span class="comment">// 해당 시점에 트랜잭션 커밋을 진행하면서 insert값들을 실제 SQL쿼리를 날리게 됩니다. 즉, 쓰기지연이 일어나는 시점이며 flush SQL이 같이 동작됩니다.</span></span><br></pre></td></tr></table></figure><blockquote><p>em.persist()</p></blockquote><p>persist가 동작하면 INSERT SQL과 1차캐시에 저장을 동시에 진행합니다. INSERT SQL생성시 쓰기 지연 SQL저장소에 저장시키고 1차 캐시에서 해당 캐시가 있는지 없는지를 확인하고 있으면 해당 값을 캐시에서 가져오고<br>그게 아니라면 영속성컨텍스트가 DB에 접근하여 SQL 쓰기지연저장소에 저장된 쿼리를 날리게 됩니다. transaction.commit()으로 쓰기지연이 동작하고 flush sql이 함께 동작됩니다. 이때 해당 실제 DB에 값을 넣게 됩니다.</p><p>이것을 쓰는 이유는 무엇일까요? 버퍼링, 즉, 캐싱개념이 생기게 됩니다.</p><h1 id="entiti-sujeong"><a href="#entiti-sujeong" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#엔티티-수정"></a> 엔티티 수정</h1><p>영속성 엔티티를 조회후에 데이터를 수정한다면 어떻게 처리가 될까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//영속 엔티티 조회</span></span><br><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line"></span><br><span class="line"><span class="comment">//영속 엔티티 데이터 수정</span></span><br><span class="line">member1.setUsername(<span class="string">"kgh"</span>);</span><br><span class="line">member1.setAge(<span class="string">"20"</span>);</span><br><span class="line"></span><br><span class="line">transcation.commit(); <span class="comment">// 트랜잭션을 커밋하는 시점입니다.</span></span><br></pre></td></tr></table></figure><p>데이터수정시 em.persist를 넣을 필요는 없게 됩니다. 이미 영속성컨텍스트에 관리되어지고 있기 때문입니다.</p><h1 id="byeongyeong-gamji-dirty-checking"><a href="#byeongyeong-gamji-dirty-checking" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#변경-감지dirty-checking"></a> 변경 감지(Dirty Checking)</h1><p>변경 감지 순서에 대해서 알아보겠습니다.</p><p>영속성 컨텍스트(entity manager)안에서 transcation.commit()이 작동되게 되면 어떻게 처리될까요?</p><ol><li>flush()함수가 동작됩니다.</li><li>엔티티 스냅샷(최초 시점에만)과 비교되어 집니다.</li><li>쓰기지연 저장소에 UPDATE SQL이 생성됩니다.</li><li>다시 flush()를 수행하면서 SQL UPDATE구문이 DB에 날리게 되면서 이때, commit이 진행됩니다.</li></ol><h1 id="entiti-sagje"><a href="#entiti-sagje" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#엔티티-삭제"></a> 엔티티 삭제</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line">em.remove(member1);</span><br></pre></td></tr></table></figure><p>삭제 대상 엔티티를 조회하고 엔티티를 삭제하는 구문입니다.</p><h1 id="peulreosi-flush"><a href="#peulreosi-flush" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#플러시flush"></a> 플러시(Flush)</h1><p>영속성 컨텍스트의 변경 내용을 데이터베이스에 반영하는것을 뜻합니다. 즉, 지연 sql 스냅샷과 쓰기지연 SQL 저장소에 저장해놓은 쿼리를 데이터베이스에 반영하는 과정이라고 생각하시면 됩니다.</p><ol><li>변경 감지(dirty checking)를 진행합니다.</li><li>수정된 엔티티 쓰기 지연 SQL 저장소에 등록됩니다.</li><li>쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송합니다. (등록, 수정, 삭제)</li></ol><h1 id="yeongsogseong-keontegseuteureul-peulreosireul-eoddeohge-halggayo"><a href="#yeongsogseong-keontegseuteureul-peulreosireul-eoddeohge-halggayo" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#영속성-컨텍스트를-플러시를-어떻게-할까요"></a> 영속성 컨텍스트를 플러시를 어떻게 할까요?</h1><ol><li>em.flush()를 직접호출하여 진행합니다. 테스트를 진행할때 이러한 방식으로 새로가동하는것처럼 진행할 수 있습니다.</li><li>트랜잭션 커밋을 진행합니다. 이때 플러시가 자동으로 같이 호출되게 됩니다.</li><li>JPQL쿼리를 실행합니다. 이때 플러시가 자동으로 같이 호출되게 됩니다. JPQL쿼리실행시 1차 캐시가 사라지는것이 아니고 쓰기지연SQL, 변경감지 업데이트 쿼리들이 DB에 반영됩니다.</li></ol><h1 id="jpql-kweori-silhaengsi-peulreosiga-jadongeuro-hoculdoeneun-iyu"><a href="#jpql-kweori-silhaengsi-peulreosiga-jadongeuro-hoculdoeneun-iyu" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#jpql-쿼리-실행시-플러시가-자동으로-호출되는-이유"></a> JPQL 쿼리 실행시 플러시가 자동으로 호출되는 이유</h1><p>em.persist에 persist를 실행한다고 하였을때 persist 자체만으로 DB에 접근은 하지 못합니다. 그 이유는 JPQL을 날리게 되면 자동으로 flush()를 호출하여 DB를 가져오기때문에 현재 값들을 select해올 값이 없게 됩니다.</p><h1 id="peulreosi-modeu-obsyeon"><a href="#peulreosi-modeu-obsyeon" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#플러시-모드-옵션"></a> 플러시 모드 옵션</h1><ol><li>FlushModeType.AUTO - 커밋이나 쿼리를 실행할 때 Flush(Default)</li><li>FlushModeType.COMMIT - 커밋할때만 Flush</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.setFlushMode(FlushModeType.COMMIT)</span><br></pre></td></tr></table></figure><h1 id="peulreosi-teugjing"><a href="#peulreosi-teugjing" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#플러시-특징"></a> 플러시 특징</h1><ol><li>영속성 컨텍스트를 비우지 않습니다.</li><li>영속성 컨텍스트의 변경내용을 데이터베이스에 동기화합니다.</li><li>트랜잭션이라는 작업단위가 중요하며 커밋직전에만 동기화를 진행하면 됩니다.</li></ol><h1 id="junyeongsog-sangtae"><a href="#junyeongsog-sangtae" class="header-anchor">15. </a><a class="markdownIt-Anchor" href="#준영속-상태"></a> 준영속 상태</h1><ol><li>영속상태(1차캐시에 저장된 상태)에서 준영속상태를 만드는 상태</li><li>영속상태의 엔티티가 영속성 컨텍스트에서 분리합니다.(detached) - Dirty Checking을 사용하지 못합니다.</li><li>영속성 컨텍스트가 제공하는 기능을 사용하지 못합니다.</li></ol><blockquote><p>준영속 상태로 어떻게 만들 수 있을까?</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">em.detach(entity) 특정 엔티티만 준영속상태로 전환</span><br><span class="line">em.clear(entity) 영속성 컨텍스트를 완전히 초기화</span><br><span class="line">em.close() 영속성 컨텍스트를 종료</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;yeongsogseong-keontegseuteu-persistence-context&quot;&gt;&lt;a href=&quot;#yeongsogseong-keontegseuteu-persistence-context&quot; class=&quot;header-anchor&quot;&gt;1.
      
    
    </summary>
    
    
      <category term="JPA" scheme="http://gwanhyeon.github.io/categories/jpa/"/>
    
    
      <category term="JPA" scheme="http://gwanhyeon.github.io/tags/jpa/"/>
    
      <category term="Persistence" scheme="http://gwanhyeon.github.io/tags/persistence/"/>
    
      <category term="Entity" scheme="http://gwanhyeon.github.io/tags/entity/"/>
    
      <category term="Flush" scheme="http://gwanhyeon.github.io/tags/flush/"/>
    
  </entry>
  
  <entry>
    <title>JPA(Java Persistence API)란?</title>
    <link href="http://gwanhyeon.github.io/JPA-20210127-jpa-01-jpa%EB%9E%80/"/>
    <id>http://gwanhyeon.github.io/JPA-20210127-jpa-01-jpa%EB%9E%80/</id>
    <published>2021-01-27T05:24:24.000Z</published>
    <updated>2021-01-27T06:04:30.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jpa-database-dialect"><a href="#jpa-database-dialect" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#jpa-database-dialect"></a> JPA Database Dialect</h1><p>JPA는 특정 데이터베이스에 종속되지 않으며 각각 데이터베이스가 제공하는 SQL 문법과 함수는 차이가 있습니다.</p><p>가변문자에서 Mysql은 VARCHAR으로 선언되고 Oracle은 VARCHAR2 으로 사용되면서 문법적 차이가 존재합니다. 그리고 문자열을 자르는 함수같은 경우는 SQL 표준은 SUBSTRING(), Oracle은 SUBSTR()로 사용됩니다. 페이징 처리 같은 경우는 MySQL LIMIT을 사용하고 Oracle은 ROWNUM을 사용합니다.<br>JPA Database Dialect는 SQL 표준을 지키지 않는 특정 데이터베이스만의 고유한 기능이라고 할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">H2: org.hibernate.dialect.H2Dialect</span><br><span class="line">Oracle <span class="number">10</span>g: org.hibernate.dialect.Oracle10gDialect</span><br><span class="line">MySQL: org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure><p>다음과 같이 hibernate.dialect속성을 지정하여 사용할 수 있습니다. Hibernate는 약 40개 이상의 Dialect를 지원합니다.</p><h1 id="jpa-gudongbangsig"><a href="#jpa-gudongbangsig" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#jpa-구동방식"></a> JPA 구동방식</h1><p>Persistance(영속성)가 Maven(META-INF/persistance.xml), Gradle(application.properties,application.yml) 설정 정보를 조회한후 해당 설정정보로 EntityManagerFactory를 생성하여 EntityManagerFactory가 EntityManager를 생성하게 됩니다.</p><blockquote><p>주의 사항</p></blockquote><ol><li><p>EntitiyManagerFactory:<br>하나만 생성하여 어플리케이션 전체에 공유되는 방식을 사용합니다.</p></li><li><p>EntityManager:<br>쓰레드간에 공유를 하지 못합니다. 따라서, EntitiyManager를 선언하고 추후에 따로 해지시켜주는 방식으로 구동되어야합니다.</p></li><li><p>JPA는 모든 데이터 변경은 트랜잭션안에서 실행됩니다. 따라서, 모든 데이터변경시에  트랜잭션이 실행되어 commit과 rollback과정을 처리합니다.</p></li></ol><h1 id="entity-id"><a href="#entity-id" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#entity-id"></a> @Entity, @Id</h1><p>@Entity: Entity어노테이션은 JPA가 관리하는 객체로 선언해줍니다.<br>@Id: Id어노테이션은 데이터베이스 PK와 매핑됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String memberName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jpql-java-persistence-query-language"><a href="#jpql-java-persistence-query-language" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#jpqljava-persistence-query-language"></a> JPQL(Java Persistence Query Language)</h1><p>JPA를 사용하면 엔티티 객체를 중심으로 개발이 진행되고 만약에 검색쿼리를 진행한다고 할대, 테이블이 아닌 엔티티객체를 대상으로 검색을 진행하게 됩니다. 하지만, 모든DB데이터를 객체로 변환해서 검색하는것은 불가능합니다. 따라서, 필요한 데이터만 가져오기위해 검색조건이 포함된 SQL이 필요로 되어지는데 이때 JPQL을 사용하게 됩니다.</p><p>JPQL은 SQL을 추상화하여 JPQL이라는 객체지향 쿼리언어를 제공하는것을 말합니다. SQL문법과도 매우 유사하며 SELECT,FROM,WHERE,GROUP BY, HAVING, JOIN과 같은 문법도 지원을 해줍니다.</p><blockquote><p>SQL VS JPQL</p></blockquote><p>JPQL은 엔티티 객체를 대상으로 쿼리문을 날리고, SQL은 데이터베이스 테이블 대상으로 쿼리를 날립니다.</p><blockquote><p>정리</p></blockquote><p>테이블이 아닌 객체를 대상으로 검색하는 객체지향쿼리를 일컫는말이고 SQL을 추상화하였기때문에 특정 SQL에 의존하지 않는다는 장점을 가지고 있습니다. JPQL은 객체지향 SQL이라고 말할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jpa-database-dialect&quot;&gt;&lt;a href=&quot;#jpa-database-dialect&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jpa-database-
      
    
    </summary>
    
    
      <category term="JPA" scheme="http://gwanhyeon.github.io/categories/jpa/"/>
    
    
      <category term="JPA" scheme="http://gwanhyeon.github.io/tags/jpa/"/>
    
      <category term="JPQL" scheme="http://gwanhyeon.github.io/tags/jpql/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 3/E Item 55 옵셔널반환은 신중히 하라</title>
    <link href="http://gwanhyeon.github.io/EffectiveJava-20210126-%EC%95%84%EC%9D%B4%ED%85%9C55-%EC%98%B5%EC%85%94%EB%84%90%EB%B0%98%ED%99%98%EC%9D%80-%EC%8B%A0%EC%A4%91%ED%9E%88%ED%95%98%EB%9D%BC/"/>
    <id>http://gwanhyeon.github.io/EffectiveJava-20210126-%EC%95%84%EC%9D%B4%ED%85%9C55-%EC%98%B5%EC%85%94%EB%84%90%EB%B0%98%ED%99%98%EC%9D%80-%EC%8B%A0%EC%A4%91%ED%9E%88%ED%95%98%EB%9D%BC/</id>
    <published>2021-01-26T12:01:34.000Z</published>
    <updated>2021-01-26T16:09:38.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="obsyeoneolbanhwaneun-sinjunghi-hara"><a href="#obsyeoneolbanhwaneun-sinjunghi-hara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#옵셔널반환은-신중히-하라"></a> 옵셔널반환은 신중히 하라</h1><p>자바 8전에는 메서드가 특정조건에서 값을 반환할 수 없을때 취할 수 있는 선택지가 두가지가 있었다. 예외를 던지거나 null을 반환하는것입니다.</p><blockquote><p>예외</p></blockquote><p>예외의 경우는 스택 추적 전체를 캡처하므로 비용이 만만치 않습니다.</p><blockquote><p>null 반환</p></blockquote><p>null은 반환하면 이런 문제가 생기지 않지만 null을 반환할 수 있는 메서드를 호출할 때는 null이 반환될 일이 절대 없다고 확신하지 않는한) 별도의 null처리 코드를 추가해야합니다. null처리를 무시하고 반환된 null 값을 어딘가에 저장해두면 언젠가 NullPointerException이 발생할 수 있습니다.<br>즉, null을 반환하게 한 실제 원인과는 전혀 상관없는 코드일 경우입니다.</p><h1 id="jaba-8yi-deungjang"><a href="#jaba-8yi-deungjang" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#자바-8의-등장"></a> 자바 8의 등장</h1><p>Optional<t>는 null이 아닌 T타입 참조를 하나 담거나, 혹은 아무것도 담지 않을 수 있습니다. 아무것도 담지않은 옵셔널은 '비었다’라고 말하며 반대로 어떤값을 담은 옵셔녈은 비지않았다고 합니다. 옵셔널은 원소를 최대 1개 가질 수 있는 '불변’컬렉션입니다. Optional<t>가 Collection<t>를 구현하지는 않았지만, 원칙적으로는 그렇게 처리합니다.</t></t></t></p><p>보통은 T를 반환해야 하지만 특정 조건에서는 아무것도 반환하지 않아야할 때 T대신에 Optional<t>를 반환하도록 선언하면 됩니다. 그러면 유효한 반환값이 없을때는 빈 결과를 반환하는 메서드가 만들어집니다. 옵셔널을 반환하는 메서드는 예외를 던지는 메서드보다 유연하고 사용하기 쉬우며, null을 반환하는 메서드보다 오류 가능성이 적습니다.</t></p><h2 id="keolregsyeoneseo-coedaesgabseul-guhabnida-keolregsyeoni-bieosseumyeon-yeoereul-deonjibnida"><a href="#keolregsyeoneseo-coedaesgabseul-guhabnida-keolregsyeoni-bieosseumyeon-yeoereul-deonjibnida" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컬렉션에서-최댓값을-구합니다컬렉션이-비었으면-예외를-던집니다"></a> 컬렉션에서 최댓값을 구합니다(컬렉션이 비었으면 예외를 던집니다)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run Configuration -&gt; program arguement설정</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; words = Arrays.asList(args);</span><br><span class="line">    System.out.println(max(words));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 컬렉션에서 최댓값을 구한다 컬렉션이 비었으면 예외를 던진다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(c.isEmpty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"empty Collection"</span>);</span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida"><a href="#keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#컬렉션에서-최댓값을-구해-optionale로-반환합니다"></a> 컬렉션에서 최댓값을 구해 Optional<e>로 반환합니다.</e></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 컬렉션에서 최댓값을 구해 Optional&lt;E&gt;로 반환합니다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max1</span><span class="params">(Collection&lt;E&gt; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="keyword">null</span> || e.compareTo(result)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result = Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>옵셔널 반환하도록 구현하기는 어렵지는 않지만 적절한 정적 팩터리를 사용해 옵셔널을 생성해주기만 하면됩니다. 이 코드에서는 두 가지 팩터리를 사용했습니다.</p><p>빈 옵셔널은 Optional.empty()로 만들고, 값이 든 옵셔널은 Optional.of(value)로 생성하였습니다. Optional.of(value)에 null을 넣으면 NullPointerException을 던집니다.</p><p>null값도 허용하는 옵셔널을 만드려면 Optional.ofNullable(value)를 사용하면 됩니다. <code>옵셔널을 반환하는 메서드에서는 절대 null을 반환하면 안됩니다.</code> (취지에 어긋납니다)</p><p>스트림의 종단 연산중 상당수가 옵셔널을 반환합니다. 앞의 max메서드를 스트림 버전으로 다시 작성하면 Stream의 max연산이 우리에게 필요한 옵셔널을 생성해줄 것입니다.</p><h2 id="keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida-stream"><a href="#keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida-stream" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#컬렉션에서-최댓값을-구해-optionale로-반환합니다-stream"></a> 컬렉션에서 최댓값을 구해 Optional<e>로 반환합니다. (Stream)</e></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 컬렉션에서 최댓값을 구해 Optional&lt;E&gt;로 반환합니다. (Stream)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max2</span><span class="params">(Collection&lt;E&gt; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.stream().max(Comparator.naturalOrder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 스트림 형식으로 간단하게 처리할 수 잇으며 Null을 반환하거나 예외를 던지는 대신 옵셔널 반환을 선택하는 기준은 무엇일까요?</p><p><code>옵셔널은 검사 예외와 취지가 비슷합니다.</code> 즉, 반환값이 없을 수도 있음을 API 사용자에게 명확하게 알려주며 비검사 예외를 던지거나 null을 반환한다면 API 사용자가 그 사실을 인지하지 못해 끔찍한 결과로 이어질 수 있습니다. 하지만 검사 예외를 던지면 클라이언트에서는 반드시 이에 대처하는 코드를 작성해넣어야합니다.</p><p>비슷하게, 메서드가 옵셔널을 반환한다면 클라이언트는 값을 받지 못했을때 취할 행동을 선택해야합니다.</p><h2 id="obsyeoneol-hwalyong-1-gibongabseul-jeonghaedul-su-issda"><a href="#obsyeoneol-hwalyong-1-gibongabseul-jeonghaedul-su-issda" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#옵셔널-활용-1-기본값을-정해둘-수-있다"></a> 옵셔널 활용 1- 기본값을 정해둘 수 있다.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 코드 55-4 옵셔널 활용 1 - 기본값을 정해둘 수 있습니다.</span></span><br><span class="line">String lastWordInLexicon = max2(words).orElse(<span class="string">"단어 없음..."</span>);</span><br></pre></td></tr></table></figure><p>상황에 맞는 예외를 던질 수 있으며 다음 코드에서 실제 예외가 아니라 예외 팩터리를 건넨것에 주목해야합니다. 이렇게 하면 예외가 실제로 발생하지 않는한 예외 생성 비용은 들지 않게 됩니다.</p><h2 id="obsyeoneol-hwalyong-2-weonhaneun-yeoe-gabseul-deonjil-su-issseubnida"><a href="#obsyeoneol-hwalyong-2-weonhaneun-yeoe-gabseul-deonjil-su-issseubnida" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#옵셔널-활용-2-원하는-예외-값을-던질-수-있습니다"></a> 옵셔널 활용 2 - 원하는 예외 값을 던질 수 있습니다.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원하는 </span></span><br><span class="line">Toy myToy = max2(toys).orElseThrow(words).orElseThrow(TemperTantrumException::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><p>옵셔널이 항상 값이 채워져있다고 확신한다면 그냥 바로 꺼내 사용하는 선택지도 있습니다. 다만 잘못 판단한 것이라면 NoSuchElementException이 발생하게 됩니다.</p><h2 id="obsyeoneol-hwalyong-hangsang-gabsi-caeweojyeo-issdago-gajeonghabnida"><a href="#obsyeoneol-hwalyong-hangsang-gabsi-caeweojyeo-issdago-gajeonghabnida" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#옵셔널-활용-항상-값이-채워져-있다고-가정합니다"></a> 옵셔널 활용 - 항상 값이 채워져 있다고 가정합니다.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Element lastNobleGas = max2(Elements.NOBLE_GASES).get();</span><br></pre></td></tr></table></figure><p>기본값을 설정하는 비용이 아주 커서 부담이 될 수 있습니다. 그럴때는 Supplier<t>를 인수로 받는 orElseGet을 사용하면 값이 처음 필요할때 Supplier<t>를 사용해 생성하므로 초기 설정 비용을 낮출 수 있습니다.</t></t></p><p>filter, map, flatMap, ifPresent메서드는 기본 메서드로 처리하기 어려워보인다면 API문서를 참조해 이 고급 메서드들이 문제를 해결해줄 수 있을지 검토해보면 됩니다.</p><p>isPresent메서드는 안전 밸브역할의 메서드로, 옵셔널이; 채워져있으면 true, 비어져있으면 false를 반환합니다. 이 메서드로는 원하는 모든 작업을 수행할 수 있지만 신중히 사용해야합니다.</p><p>실제로 isPresent를 쓴 코드 중 상당수는 앞서 언급한 메서드들로 대체할 수 있으며, 그렇게 하면 더 짧고 명확하고 용법에 맞는 코드가 됩니다.</p><h2 id="ispresent-meseodeu"><a href="#ispresent-meseodeu" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#ispresent-메서드"></a> isPresent 메서드</h2><blockquote><p>java 9</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ProcessHandle ph = <span class="keyword">new</span> ProcessHandle() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">pid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;ProcessHandle&gt; <span class="title">parent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;ProcessHandle&gt; <span class="title">children</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;ProcessHandle&gt; <span class="title">descendants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Info <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;ProcessHandle&gt; <span class="title">onExit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsNormalTermination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">destroyForcibly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ProcessHandle other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Optional&lt;ProcessHandle&gt; parentProcess = ph.parent();</span><br><span class="line">System.out.println(<span class="string">"부모 PID"</span> + (parentProcess.isPresent() ? String.valueOf(parentProcess.get().pid()) : <span class="string">"N/A"</span>));</span><br><span class="line">System.out.println(<span class="string">"부모 PID"</span> + (ph.parent().map(h -&gt; String.valueOf(h.pid())).orElse(<span class="string">"N/A"</span>)));</span><br></pre></td></tr></table></figure><p>위 코드는 Optional의 map을 사용하여 다음처럼 다듬을 수 있습니다.</p><p>스트림을 사용한다면 옵셔널들을 Stream(Optional<t>&gt; 로 받아서 그중 채워진 옵셔널들에서 값을 뽑아 Stream<t>에 건네 담아 처리하는 경우가 드물지 않습니다.</t></t></p><blockquote><p>java8</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자바8 구현 </span></span><br><span class="line">streamOfOptionals</span><br><span class="line">        .filter(Optional::isPresent)</span><br><span class="line">        .map(Optional::get)</span><br></pre></td></tr></table></figure><p>옵셔널에 값이 있다면 (Optional::isPresent) 그 값을 꺼내 (Optional::get) 스트림에 매핑합니다.<br>자바9에서는 Optional에 stream()메서드가 추가되었습니다. 이 메서드는 Optional을 stream으로 변환해주는 어댑터 이며 옵셔널에 값이 있으면 그 값을 원소로 담은 스트림으로, 값이 없다면 빈 스트림으로 변환합니다. 이를 stream의 flatMap메서드와 조합하면 명료하게 바꿀 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">streamOfOptionals</span><br><span class="line">    .flatMap(Optional::stream)</span><br></pre></td></tr></table></figure><p>반환 값으로 옵셔널을 사용한다고 무조건 득이되는것이 아닙니다. 컬렉션, 스트림, 배열, 옵셔널과 같은 컨테이너 타입은 옵셔널로 감싸면 안됩니다. 빈 Optional&lt;List<t>&gt;를 반환하기 보다는 빈 List<t>를 반환하는게 더 좋습니다. 빈 컨테이너를 반환하게 되면 클라이언트에서 옵셔널 처리 코드를 넣지 않아도 됩니다.</t></t></p><ul><li>참고<br><a href="http://ProcessHandle.Info" target="_blank" rel="noopener">ProcessHandle.Info</a> 인터페이스의 arguements 메서드는 Optional&lt;String[]&gt;를 반환하는데, 이는 예외적인 경우이니 따라하지 않도록해야합니다.</li></ul><h2 id="eoddeohan-gyeongue-banhwantaibeul-tdaesin-optionalro-seoneonhaeyahalggayo"><a href="#eoddeohan-gyeongue-banhwantaibeul-tdaesin-optionalro-seoneonhaeyahalggayo" class="header-anchor">2.8. </a><a class="markdownIt-Anchor" href="#어떠한-경우에-반환타입을-t대신-optionalt로-선언해야할까요"></a> 어떠한 경우에 반환타입을 T대신 Optional<t>로 선언해야할까요?</t></h2><p>결과가 없을 수 있으며, 클라이언트가 이 상황을 특별하게 처리해야 한다면 Optional<t>를 반환하도록 합니다.</t></p><p>박싱된 기본 타입을 담는 옵셔널은 기본 타입 자체보다 무거울 수밖에 없으며 자바 API설계자는 int, long, double 전용 옵셔널 클래스들을 준비해놨습니다. 바로 OptionalInt, OptionalLong, OptionalDouble입니다. 이 옵셔널들도 Optional<t>가 제공하는 메서드를 거의 다 제공하게 됩니다.</t></p><p>결과적으로 박싱도니 기본 타입을 담은 옵셔널을 반환하는일은 없도록 해야합니다.</p><h2 id="obsyeoneoleul-maebyi-gabseuro-sayonghaji-malja"><a href="#obsyeoneoleul-maebyi-gabseuro-sayonghaji-malja" class="header-anchor">2.9. </a><a class="markdownIt-Anchor" href="#옵셔널을-맵의-값으로-사용하지-말자"></a> 옵셔널을 맵의 값으로 사용하지 말자</h2><p>옵셔널을 맵의 값으로 사용하면 절대안됩니다. 키 자체가 없는 경우나 다른키는 있지만 그 키가 속이 빈 옵셔널인 경우가 있을 수 있기때문에 혼란만 가중시킬 수 있습니다.</p><p>즉, 옵셔널을 컬렉션의 키, 값, 원소나 배열의 원소로 사용하는 게 적절한 상황은 거의 없습니다.</p><h2 id="obsyeoneoleul-inseuteonseu-pildeue-jeojanghaeduneunge-pilyohan-gyeongu"><a href="#obsyeoneoleul-inseuteonseu-pildeue-jeojanghaeduneunge-pilyohan-gyeongu" class="header-anchor">2.10. </a><a class="markdownIt-Anchor" href="#옵셔널을-인스턴스-필드에-저장해두는게-필요한-경우"></a> 옵셔널을 인스턴스 필드에 저장해두는게 필요한 경우?</h2><p>아이템2의 NutritionFacts 클래스의 예제를 보면 선택적 필드의 게터 메서드들이 옵셔널을 반환해주면 좋습니다. 따라서, 이럴때는 필드 자체를 옵셔널도 선언하는것도 좋은 방법중 하나입니다.</p><h1 id="haegsim-jeongri"><a href="#haegsim-jeongri" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#핵심-정리"></a> 핵심 정리</h1><p>값을 반환하지 못할 가능성이 있고, 호출할때마다 반환값이 없을 가능성을 염두하는 메서드라면 옵셔널을 반환해야 할 상황일 수도 있습니다. 하지만, 옵셔널 반환에는 성능저하가 뒤따르니, 성능에 민감한 메서드라면 null을 반환하거나 예외를 던지는 편이 나을 수 있습니다. 그리고 옵셔널을 반환값 이외의 용도로 쓰는 경우는 매우 드뭅니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;obsyeoneolbanhwaneun-sinjunghi-hara&quot;&gt;&lt;a href=&quot;#obsyeoneolbanhwaneun-sinjunghi-hara&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
    
      <category term="Java" scheme="http://gwanhyeon.github.io/categories/java/"/>
    
    
      <category term="EffectiveJava3/E" scheme="http://gwanhyeon.github.io/tags/effectivejava3-e/"/>
    
      <category term="Optional" scheme="http://gwanhyeon.github.io/tags/optional/"/>
    
  </entry>
  
  <entry>
    <title>Network HTTP(HyperTextTransferProtocal) API 설계</title>
    <link href="http://gwanhyeon.github.io/Network-20210126-network-07-http-api/"/>
    <id>http://gwanhyeon.github.io/Network-20210126-network-07-http-api/</id>
    <published>2021-01-26T07:27:03.000Z</published>
    <updated>2021-01-26T08:43:12.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="api-uri-uniform-resource-identifier-seolgye"><a href="#api-uri-uniform-resource-identifier-seolgye" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#api-uriuniform-resource-identifier-설계"></a> API URI(Uniform Resource Identifier) 설계</h1><h2 id="resource-risoseu-ran"><a href="#resource-risoseu-ran" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#resource리소스란"></a> Resource(리소스)란?</h2><p>API URI설계에서 중요한것은 리소스의 식별입니다.<br>리소스(Resource)라고 하는것은 단순히 조회하고 수정 등록하는것을 일컫는 말이 아니라 만약 멤버의 정보를 조회한다고 했을때 멤버의 정보를 조회하는것이 리소스가 아니라 멤버라는 자체가 리소스(Resource)라고 할 수 있습니다.</p><h2 id="risoseu-sigbyeol-bangsig"><a href="#risoseu-sigbyeol-bangsig" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#리소스-식별-방식"></a> 리소스 식별 방식</h2><p>멤버의 조회,생성,수정,삭제의 의미가 아니라 멤버자체만을 리소스로 식별하고 회원 리소스를 URI에 매핑하면 됩니다.</p><ul><li>멤버 목록조회<br>/members</li><li>멤버 개별조회<br>/members/{id}</li><li>멤버 등록<br>/members/{id}</li><li>멤버 수정<br>/members/{id}</li><li>멤버 삭제<br>/members/{id}</li></ul><p>해당 5개의 API가 있다고 가정해보겠습니다. 여기서도 가장 중요한것은 리소스를 식별하는 방식입니다.</p><p>URI는 리소스만 식별하고 리소스와 리소스를 대상으로 하는 행위를 분리하여 URI를 설계를 진행합니다.</p><p>리소스: 멤버(명사)<br>행위: 목록조회, 개별조회, 등록, 수정, 삭제(동사)</p><h1 id="http-meseodeu"><a href="#http-meseodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#http-메서드"></a> HTTP 메서드</h1><h2 id="http-method-jongryu"><a href="#http-method-jongryu" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#http-method-종류"></a> HTTP Method 종류</h2><ol><li>GET: 리소스를 조회합니다.</li><li>POST: 요청 데이터 처리, 주로 등록에 사용합니다.</li><li>PUT: 리소스를 대체하고 리소스가 없다면 생성시킵니다.</li><li>PATCH: 리소스를 부분 변경합니다.</li><li>DELETE: 리소스를 삭제합니다.</li></ol><h2 id="http-gita-meseodeu-jongryu"><a href="#http-gita-meseodeu-jongryu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#http-기타-메서드-종류"></a> HTTP 기타 메서드 종류</h2><ol><li>HEAD: GET과 유사하지만 메시지부분을 제외 하고, 상태 줄과 헤더만 반환합니다.</li><li>OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명합니다. (CORS)</li><li>CONNECT: 대상 자원으로 식별되는 서버에 대한 터널을 설정합니다.</li><li>TRACE: 대상 리소스에 대한 경로에 따라 메시지 루프백 테스트를 수행합니다.</li></ol><h1 id="get-meseodeu"><a href="#get-meseodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#get-메서드"></a> GET 메서드</h1><ol><li>리소스를 조회합니다.</li><li>서버에 전달하고 싶은 데이터는 쿼리 파라미터(쿼리스트링)을 통해서 전달됩니다.</li><li>메시지 바디를 사용하여 데이터를 전송할 수 있지만 지원하지 않는곳이 많아 권장하지않는 방식입니다. 최근에는 허용이 되었지만 실무에서는 잘 사용되지 않는 방식입니다.</li></ol><h1 id="post-meseodeu"><a href="#post-meseodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#post-메서드"></a> POST 메서드</h1><p>POST메서드는 대상리소스가 리소스의 고유 한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 하는 요청입니다.</p><ol><li>요청 데이터를 처리합니다.</li><li>메시지 바디를 통하여 서버로 요청 데이터를 전달합니다.</li><li>서버는 요청 데이터를 처리하고 메시지 바디를 통해서 들어온 데이터를 처리하는 모든 기능을 수행합니다.</li><li>주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용됩니다.</li></ol><blockquote><p>POST가 사용되는 기능</p></blockquote><ul><li><p>HTML양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공합니다.<br>(회원가입,주문)</p></li><li><p>게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그릅에 메시지를 게시합니다.<br>(글쓰기, 댓글달기)</p></li><li><p>서버가 아직 식별하지 않은 새 리소스를 생성합니다.<br>(신규주문)</p></li><li><p>기존 자원에 데이터 추가<br>(문서에 내용 추가하기)</p></li></ul><p>즉, 이 리소스 URI에 POST요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야합니다.</p><blockquote><p>POST 정리</p></blockquote><ol><li><p>새 리소스를 생성합니다.(등록)<br>서버가 아직 식별하지 않은 새 리소스를 생성합니다.</p></li><li><p>요청 데이터 처리할때 사용됩니다.<br>데이터 생성하거나 변경을 넘어서 프로세스를 변경해야할 경우 POST를 사용합니다.<br>결제 -&gt; 주문 -&gt; 완료와 같은 프로세스의 상태가 변경되는 경우에 사용합니다.<br>POST의 결과로 새로운 리소스가 생성되지 않는 경우도 있습니다. 컨트롤 URI라고 하며 동사가 포함된것들로 컨트롤되어집니다.</p></li><li><p>다른 메서드로 처리가 애매한 경우에 사용됩니다.<br>JSON 데이터 형식으로 데이터를 넘길때 GET 메서드를 사용하기 어려운 경우 POST를 사용합니다.</p></li></ol><h1 id="put-meseodeu"><a href="#put-meseodeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#put-메서드"></a> PUT 메서드</h1><ol><li><p>리소스를 대체합니다. 대체한다는 의미는 리소스가 있으면 대체하고 리소스가 없으면 리소스를 생성합니다. 즉, 리소스를 덮어버리게 됩니다.</p></li><li><p>클라이언트가 리소스를 식별합니다. 클라이언트가 리소스 위치를 알고 URI를 지정합니다.<br>(POST와 차이점)</p></li></ol><h1 id="patch-meseodeu"><a href="#patch-meseodeu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#patch-메서드"></a> PATCH 메서드</h1><ul><li>리소스를 부분만 교체합니다.</li></ul><h1 id="delete-meseodeu"><a href="#delete-meseodeu" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#delete-메서드"></a> DELETE 메서드</h1><ul><li>리소스를 제거합니다.</li></ul><h1 id="http-meseodeuyi-sogseong"><a href="#http-meseodeuyi-sogseong" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#http-메서드의-속성"></a> HTTP 메서드의 속성</h1><ol><li><p>안전(Safe Methods)<br>GET같은 경우는 안전하며 POST,PUT과 같은 변경이 많은 것들은 안전하지 않습니다. 호출해도 리소스를 변경하지 않습니다. 안전은 리소스만 고려합니다.</p></li><li><p>멱등(Idempotent Methods)<br>여러번 호출해도 결과는 같아야합니다. PUT을 호출하여 서버응답 호출을 통하여 재시도 할지 안할지를 확인할 수 있습니다. 즉, 자동 복구 매커니즘에서 많이 활용됩니다.</p></li></ol><p>만약, 재요청 중간에 다른 곳에서 리소스를 변경하게 된다면 멱등성은 외부 요인으로 중간에 리소스가 변경되는것 까지 고려하지 않습니다.</p><ul><li>멱등메서드<br>GET:여러번 조회하든 결과가 같습니다.<br>PUT: 결과를 대체하여 여러번 요청해도 최종 결과는 같습니다.<br>DELETE: 결과를 삭제합니다. 같은 요청을 여러번 해도 삭제된 결과는 같습니다.</li></ul><p>POST: 멱등성을 가진 메서드가 아닙니다. 두번 호출시 주문 중복이나 결제 중복이 발생할 수 있습니다.</p><ol start="3"><li>캐시가능(Cacheable Methods)</li></ol><ul><li>응답 결과 리소스를 캐시해서 사용할 수 있습니다. (GET, HEAD, POST, PATCH)</li><li>GET,HEAD정도만 캐시로 사용하고 POST, PATCH같은 경우는 본문 내용까지 캐싱을 진행해야하기 때문에 주로 GET,HEAD를 사용합니다.</li></ul><h1 id="keulraieonteu-seobeo-deiteo-jeondal-bangsig-2gaji"><a href="#keulraieonteu-seobeo-deiteo-jeondal-bangsig-2gaji" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#클라이언트-서버-데이터-전달-방식-2가지"></a> 클라이언트 서버 데이터 전달 방식 2가지</h1><ol><li>쿼리 파라미터를 통한 데이터 전송</li></ol><ul><li>GET, 정렬 필터 검색어 처리를 할때 사용됩니다.</li></ul><ol start="2"><li>메시지 바디를 통한 데이터 전송</li></ol><ul><li>POST, PUT, PATCH를 사용하며 리소스 등록이나 리소스 변경에 사용됩니다.</li></ul><blockquote><p>데이터 전달시 상황</p></blockquote><ol><li><p>정적 데이터 조회<br>이미지, 정적 텍스트 문서</p></li><li><p>동적 데이터 조회<br>주로 검색이나 게시판 목록에서 정렬필터에 사용됩니다(검색어)</p></li><li><p>HTML Form을 통한 데이터 전송<br>회원 가입이나 상품주문, 데이터 변경이 발생하는곳에 사용됩니다.</p></li><li><p>HTTP API를 통한 데이터 전송<br>회원 가입이나 상품주문 데이터변경시에 사용되고 서버간 통신이나, 클라이언트, 웹클라이언트 통신에 주로 사용됩니다. (Ajax, axios)</p></li></ol><h1 id="jeongjeog-deiteo-johoesi"><a href="#jeongjeog-deiteo-johoesi" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#정적-데이터-조회시"></a> 정적 데이터 조회시</h1><ol><li>이미지나 정적 텍스트 문서에 사용됩니다.</li><li>조회는 주로 GET을 사용합니다.</li><li>정적 데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능합니다.</li></ol><h1 id="dongjeog-deiteo-johoe"><a href="#dongjeog-deiteo-johoe" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#동적-데이터-조회"></a> 동적 데이터 조회</h1><p>쿼리 파라미터를 기반으로 정렬필터를 통하여 결과를 동적으로 생성하는 경우가 있습니다.</p><ol><li>검색, 목록에서 정렬 필터 및 검색어 등에 사용됩니다.</li><li>조회 조건을 줄여주는 필터나 조회 결과를 정렬하는 정렬 조건에 주로 사용됩니다.</li><li>조회는 주로 GET을 사용하고 쿼리파라미터를 통하여 데이터를 전달합니다. 메시지바디를 통하여 가능하지만 실무에서는 권장하지 않는 방식입니다.</li></ol><h1 id="html-from-deiteo"><a href="#html-from-deiteo" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#html-from-데이터"></a> HTML From 데이터</h1><ol><li>HTML Form Submit시에는 보통 POST전송을 진행합니다.</li></ol><ul><li>가입, 주문, 변경</li></ul><ol start="2"><li>Content-Type: application/x-www-form-urlencoded</li></ol><ul><li>form의 내용을 메시지 바디를 통하여 전송합니다. (쿼리파라미터)</li><li>전송 파라미터를 url encoding 처리합니다.<br>kgh -&gt; kgh%A%B%C%D%E%F%</li></ul><ol start="3"><li>HTML Form GET 전송 가능</li><li>Content-Type: multipart/form-data</li></ol><ul><li>파일 업로드 같은 바이너리 데이터 전송시 사용합니다.</li><li>다른 종류의 여러 파일의 폼 내용과 함께 전송이 가능합니다(multipart)</li></ul><ol start="5"><li>HTML Form전송은 GET,POST만 지원</li></ol><h1 id="http-api-deiteo-jeonsong"><a href="#http-api-deiteo-jeonsong" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#http-api-데이터-전송"></a> HTTP API 데이터 전송</h1><ol><li>서버간 통신</li></ol><ul><li>백엔드 시스템 통신(OPEN API)</li></ul><ol start="2"><li>앱 클라이언트</li></ol><ul><li>IOS, Android</li></ul><ol start="3"><li>웹 클라이언트</li></ol><ul><li>HTML에서 Form전송 대신 자바스크립트 통신(axios, ajax)</li></ul><ol start="4"><li>메시지 바디를 통하여 메시지 전송</li></ol><ul><li>POST,PUT,PATCH를 주로 사용합니다.</li></ul><ol start="5"><li>GET: 조회, 쿼리파라미터로 데이터전달</li></ol><ul><li>Content-Type: application/json 주로 사용</li><li>TEXT, XML, JSON</li></ul><h1 id="http-api-seolgye"><a href="#http-api-seolgye" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#http-api-설계"></a> HTTP API 설계</h1><ol><li>HTTP API 컬렉션</li></ol><ul><li>POST 기반 등록 및 회원관리 API</li></ul><ol start="2"><li>HTTP API 스토어</li></ol><ul><li>PUT 기반등록으로 진행되고 정적 컨텐츠나 원격 파일 관리에 사용됩니다.</li></ul><ol start="3"><li>HTML FORM</li></ol><ul><li>웹 페이지 회원 관리에 사용되며 GET,POST Method만 지원됩니다.</li></ul><h1 id="membeo-gwanri-siseutem-yesi"><a href="#membeo-gwanri-siseutem-yesi" class="header-anchor">15. </a><a class="markdownIt-Anchor" href="#멤버-관리-시스템-예시"></a> 멤버 관리 시스템 예시</h1><p>POST기반 멤버 관리 시스템</p><p>목록 /members :GET<br>등록 /members :POST<br>조회 /members/{id} :GET<br>수정 /members/{id} : PATCH, PUT,POST<br>리소스 덮는게 가능하면 PUT, 부분 교체하면 PATCH, 그외 POST<br>삭제 /members/{id} : DELETE</p><blockquote><p>POST 신규 자원 등록의 특징</p></blockquote><ol><li>클라이언트는 등록될 리소스의 URI의 정보를 모릅니다.</li></ol><ul><li>POST /members</li></ul><ol start="2"><li>서버가 새로 등록된 리소스 URI를 생성해줍니다.</li></ol><ul><li>HTTP/1.1 201 Created</li><li>Location: /membmer/1</li></ul><ol start="3"><li>컬렉션(Collection)</li></ol><ul><li>서버가 관리하는 리소스 디렉토리이며 리소스의 URI를 생성하고 관리합니다.</li><li>컬렉션 예: /members</li></ul><h1 id="pail-gwanri-siseutem-yesi"><a href="#pail-gwanri-siseutem-yesi" class="header-anchor">16. </a><a class="markdownIt-Anchor" href="#파일-관리-시스템-예시"></a> 파일 관리 시스템 예시</h1><p>PUT 기반 등록 시스템</p><p>목록 GET /files<br>조회 GET /files/{filename}<br>등록 PUT /files/{filename}<br>삭제 DELETE /files/{filename}<br>대량 등록 POST /files</p><blockquote><p>PUT 신규 자원 등록</p></blockquote><ol><li>클라이언트가 리소스 URI를 알고 있어야합니다.</li></ol><ul><li>등록 PUT /files/{filename}</li><li>PUT /files/hello.jpg</li></ul><ol start="2"><li>클라이언트가 직접 리소스의 URI를 지정합니다.</li><li>스토어(Store)</li></ol><ul><li>클라이언트가 관리하는 리소스 저장소이며 리소스의 URI를 알고 관리합니다.</li><li>스토어 예: /files</li></ul><h1 id="html-form-sayongsi-seolgye"><a href="#html-form-sayongsi-seolgye" class="header-anchor">17. </a><a class="markdownIt-Anchor" href="#html-form-사용시-설계"></a> HTML FORM 사용시 설계</h1><p>목록 GET /members<br>등록 폼 GET /members/new<br>등록 POST /members/new(보통 등록폼과 맞추어준다), /members<br>조회 GET /members/{id}<br>수정 폼 GET /members/{id}/edit<br>수정 POST /members/{id}/edit, /members/{id}<br>삭제 /members/{id}/delete</p><blockquote><p>특징</p></blockquote><ol><li>HTML FORM GET, POST만 지원</li><li>컨트롤 URI<br>GET,POST 제약조건을 가지고 있으며 이러한 제약을 해결하기 위해 동사로 된 리소스 경로를 사용합니다.  POST /new, /edit, /delete가 컨트롤 URI로 사용되며 HTTP메서드로 해결하기 애매한 경우 사용됩니다. (HTTP API를 포함합니다)</li></ol><blockquote><p>HTTP 설계 정리</p></blockquote><ol><li><p>HTTP API 컬렉션(서버)<br>POST기반으로 등록되며 서버가 리소스 URI를 결정합니다.</p></li><li><p>HTTP API 스토어(클라)<br>PUT기반 등록되며 클라이언트가 리소스 URI를 결정합니다.</p></li><li><p>HTML FORM<br>순수 HTML + HTML form을 사용하며 GET, POST만 지원합니다.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;api-uri-uniform-resource-identifier-seolgye&quot;&gt;&lt;a href=&quot;#api-uri-uniform-resource-identifier-seolgye&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="http" scheme="http://gwanhyeon.github.io/tags/http/"/>
    
      <category term="api" scheme="http://gwanhyeon.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 3/E Item 54 null이 아닌,빈 컬렉션이나 배열을 반환하라</title>
    <link href="http://gwanhyeon.github.io/EffectiveJava-20210125-%EC%95%84%EC%9D%B4%ED%85%9C54-null%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%B9%88-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%B4%EB%82%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EB%9D%BC/"/>
    <id>http://gwanhyeon.github.io/EffectiveJava-20210125-%EC%95%84%EC%9D%B4%ED%85%9C54-null%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%B9%88-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%B4%EB%82%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EB%9D%BC/</id>
    <published>2021-01-25T01:11:11.000Z</published>
    <updated>2021-01-25T01:42:07.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nulli-anin-bin-keolregsyeonina-baeyeoleul-banhwanhara"><a href="#nulli-anin-bin-keolregsyeonina-baeyeoleul-banhwanhara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#null이-아닌-빈-컬렉션이나-배열을-반환하라"></a> null이 아닌, 빈 컬렉션이나 배열을 반환하라</h1><h2 id="keolregsyeoni-bieosseumyeon-nulleul-banhwanhanda-ddarahajimalaya-haneun-bangbeob"><a href="#keolregsyeoni-bieosseumyeon-nulleul-banhwanhanda-ddarahajimalaya-haneun-bangbeob" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컬렉션이-비었으면-null을-반환한다-따라하지말아야-하는-방법"></a> 컬렉션이 비었으면 null을 반환한다. - 따라하지말아야 하는 방법</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 매장 안의 모든 치즈 목록을 반환한다.</span></span><br><span class="line"><span class="comment"> * 단, 재고가 하나도 없다면 null을 반환한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 절대 이렇게 처리하지말것! 서버와 클라이언트에서 모두 방어코드를 작성해야하는 불편함이 있다.</span></span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.isEmpty() ? <span class="keyword">null</span> : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 코드를 작성하면 클라이언트는 이 null 상황을 처리하는 코드를 추가로 작성해야합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cheese shop = <span class="keyword">new</span> Cheese();</span><br><span class="line">List&lt;Cheese&gt; cheeses = shop.getCheess1();</span><br><span class="line"><span class="keyword">if</span>(cheeses != <span class="keyword">null</span> &amp;&amp; cheeses.contains(Cheese.STILTON));&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello guys~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컬렉션이나 배열 같은 컨테이너(container)가 비었을 때 null을 반환하는 메서드를 사용할 때면 항시 이와 같은 방어코드를 작성해야합니다. 클라이언트에서 방어 코드를 빼먹으면 오류가 발생할 수 있다. 실제로 객체가 0개일 가능성이 거의 없는 상황에서는 수년 뒤에야 오류가 발생하기도 한다. 한편, null을 반환하려면 반환하는 쪽에서도 이 상황을 특별히 취급해줘야 해서 코드가 더 복잡해진다.</p><p>때로는 빈 컨테이너를 할당하는 데도 비용이 드니 null을 반환하는 쪽이 낫다는 주장이 있지만. 하지만 이는 두 가지면에서 틀린 주장이다.</p><ol><li>이 할당이 성능 저하의 주범이라고 확인되지 않는 한 , 이정도의 성능 차이는 신경 쓸 수준이 못 된다.</li><li>두 번째, 빈 컬렉션과 배열은 굳이 새로 할당하지 않고도 반환할 수 있다.</li></ol><h2 id="bin-keolregsyeoneul-banhwanhaneun-olbareun-ye"><a href="#bin-keolregsyeoneul-banhwanhaneun-olbareun-ye" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#빈-컬렉션을-반환하는-올바른-예"></a> 빈 컬렉션을 반환하는 올바른 예</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 빈 컬렉션을 반환하는 올바른 예</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가능성은 작지만, 사용 패턴에 따라서 빈 컬렉션 할당이 성능을 눈에 띄게 떨어뜨릴 수도 있지만, 이것에 대한 해결 방법은 매번 똑같은 빈 불변 컬렉션을 반환하면 됩니다. 불변 객체는 자유롭게 공유해도 안전합니다.</p><p>다음 코드에서 사용하는 Collections.emptyList 메서드나 집합이 필요한 경우 Collections.emptySet(), 맵이 필요하면 Collections.emptyMap()을 사용하면 됩니다. 이 역시 매우 최적화에 해당하니 되도록 꼭 필요할때만 사용하는것이 좋습니다. 반드시 성능 측정이 필요합니다.</p><h2 id="coejeoghwa-bin-keolregsyeoneul-maebeon-saero-haldanghaji-anhdorog-haessda"><a href="#coejeoghwa-bin-keolregsyeoneul-maebeon-saero-haldanghaji-anhdorog-haessda" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#최적화-빈-컬렉션을-매번-새로-할당하지-않도록-했다"></a> 최적화 - 빈 컬렉션을 매번 새로 할당하지 않도록 했다.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 최적화 - 빈 컬렉션을 매번 새로 할당하지 않도록 하였다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.isEmpty() ? Collections.emptyList() : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배열을 쓸 때도 마찬가지인데, 절대로 null을 반환하지 말고 길이가 0인 배열을 반환합니다. 보통은 단순히 정확한 길이의 배열을 반환하기만 하면 됩니다.</p><p>그 길이가 0일수도 있을뿐이고 다음코드에서 toArray메서드에 건넨 길이 0짜리 배열을 우리가 원하는 반환 타입(Cheese[])을 알려주는 역할을 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 길이가 0일수도 있는 배열을 반환하는 올바른 방법</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheess4()&#123;</span><br><span class="line">   <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당방식이 성능을 떨어뜨릴 것 같다면 0짜리 배열을 미리 선언해두고 매번 그 배열을 반환하면 됩니다. 길이가 0인 배열은 모두 불변하기 때문입니다.</p><h2 id="coejeoghwa-bin-baeyeoleul-maebeon-saero-haldanghaji-anhdoroghayeossseubnida"><a href="#coejeoghwa-bin-baeyeoleul-maebeon-saero-haldanghaji-anhdoroghayeossseubnida" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#최적화-빈-배열을-매번-새로-할당하지-않도록하였습니다"></a> 최적화 - 빈 배열을 매번 새로 할당하지 않도록하였습니다.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 최적화 - 빈배열을 매번 새로 할당하지 않도록 처리</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheess5()&#123;</span><br><span class="line">   <span class="keyword">return</span> cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 최적화 버전의 getCheeses는 항상 EMPTY_CHEESE_ARRAY를 인수로 넘겨 toArray를 호출하게 됩니다. 따라서 cheesesInStock이 비었을 때면 언제나 EMPTY_CHEESE_ARRAY를 반환하게 됩니다.</p><p>단순히 성능을 개선할 목적이라면 toArray에 넘기는 배열을 미리 할당하는 건 추천하지 않습니다. 오히려 성능을 떨어진다는 연구 결과가 있습니다.</p><h2 id="nabbeun-ye-baeyeoleul-miri-haldanghamyeon-seongneungi-nabbajinda"><a href="#nabbeun-ye-baeyeoleul-miri-haldanghamyeon-seongneungi-nabbajinda" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#나쁜-예-배열을-미리-할당하면-성능이-나빠진다"></a> 나쁜 예 - 배열을 미리 할당하면 성능이 나빠진다</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 나쁜예- 배열을 미리 할당하면 성능이 나빠진다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheess6()&#123;</span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[cheesesInStock.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jeonce-kodeu"><a href="#jeonce-kodeu" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#전체-코드"></a> 전체 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Item54;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item54_null</span>이아닌빈컬렉션이나배열을반환하라 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cheese shop = <span class="keyword">new</span> Cheese();</span><br><span class="line">        List&lt;Cheese&gt; cheeses = shop.getCheess1();</span><br><span class="line">        <span class="keyword">if</span>(cheeses != <span class="keyword">null</span> &amp;&amp; cheeses.contains(Cheese.STILTON));&#123;</span><br><span class="line">            System.out.println(<span class="string">"hello guys~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cheese</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STILTON = <span class="string">"STILTON"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Cheese&gt; cheesesInStock = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 매장 안의 모든 치즈 목록을 반환한다.</span></span><br><span class="line"><span class="comment">         * 단, 재고가 하나도 없다면 null을 반환한다.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 절대 이렇게 처리하지말것! 서버와 클라이언트에서 모두 방어코드를 작성해야하는 불편함이 있다.</span></span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.isEmpty() ? <span class="keyword">null</span> : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 빈 컬렉션을 반환하는 올바른 예</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess2</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 최적화 - 빈 컬렉션을 매번 새로 할당하지 않도록 하였다.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess3</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.isEmpty() ? Collections.emptyList() : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 길이가 0일수도 있는 배열을 반환하는 올바른 방법</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Cheese[] getCheess4()&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 최적화 - 빈배열을 매번 새로 할당하지 않도록 처리</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">public</span> Cheese[] getCheess5()&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 나쁜예- 배열을 미리 할당하면 성능이 나빠진다.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Cheese[] getCheess6()&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[cheesesInStock.size()]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>핵심 정리</p></blockquote><p>null이 아닌, 빈 배열이나 컬렉션을 반환하라. null을 반환하는 API는 사용하기 어렵고 오류 처리 코드도 늘어난다. 그렇다고 성능이 좋은것도 아니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nulli-anin-bin-keolregsyeonina-baeyeoleul-banhwanhara&quot;&gt;&lt;a href=&quot;#nulli-anin-bin-keolregsyeonina-baeyeoleul-banhwanhara&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Java" scheme="http://gwanhyeon.github.io/categories/java/"/>
    
    
      <category term="EffectiveJava3/E" scheme="http://gwanhyeon.github.io/tags/effectivejava3-e/"/>
    
  </entry>
  
  <entry>
    <title>Network HTTP(HyperText Transfer Protocal) 구조 및 HTTP 메시지 구조</title>
    <link href="http://gwanhyeon.github.io/Network-20210121-network-06-http/"/>
    <id>http://gwanhyeon.github.io/Network-20210121-network-06-http/</id>
    <published>2021-01-21T07:58:03.000Z</published>
    <updated>2021-01-26T07:21:51.130Z</updated>
    
    <content type="html"><![CDATA[<p>웹에서 가장 중요한 요소라고 할 수 있는 HTTP(Hyper Text Transfer Protocal)에 대해서 살펴보도록 하겠습니다.<br>들어가기 앞서 HTTP가 왜 중요할까요?</p><p><code>클라이언트-서버 구조</code>에서 데이터를 전송하기위해 필수 불가결한 요소입니다. <code>HTTP 메시지</code>에 <code>모든것들을 전송</code>할 수 있기때문입니다.<br>HTTP는 <code>HTML, TEXT, Image, 음성, 영상, 파일, JSON, XML(API)</code> 거의 모든 형태의 데이터로 전송이 가능하기 때문에 상당히 네트워크에서 중요한 부분을 차지하고 있습니다.</p><h1 id="http-hyper-text-transfer-protocal-heureum"><a href="#http-hyper-text-transfer-protocal-heureum" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#httphyper-text-transfer-protocal-흐름"></a> HTTP(Hyper Text Transfer Protocal) 흐름</h1><ul><li>HTTP/0.9 1991년에 GET메서드만 지원하는 형태로 나오게 되었으며 HTTP 헤더는 가지고 있지 않았습니다.</li><li>HTTP/1.0 1996년 메서드와 헤더가 추가 되었습니다.</li><li><strong>HTTP/1.1 1997년 가장 많이 사용되었으며 현재 우리에게 가장 중요한 버전이라고 할 수 있습니다.(RFC2068 -&gt; RFC2616 -&gt; RFC7230~7235(2014)) 의 스펙으로 진화되어 왔습니다.</strong></li><li>HTTP/2 2015년에 성능개선을 이루게 되었습니다.</li><li>HTTP/3 현재 개발이 진행되고 있으며 TCP대신에 UDP사용, 성능개선을 이루어 내고 있습니다.</li></ul><blockquote><p>여기서 가장 중요한 부분은 어디일까요?<br>HTTP표준스펙처럼 자리잡은 HTTP/1.1 버전을 웹에서는 주로 사용하고 있습니다.</p></blockquote><h1 id="http-hyper-text-transfer-protocal-giban-peurotokol"><a href="#http-hyper-text-transfer-protocal-giban-peurotokol" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#httphyper-text-transfer-protocal-기반-프로토콜"></a> HTTP(Hyper Text Transfer Protocal) 기반 프로토콜</h1><ol><li><p>TCP<br>HTTP/1.1, HTTP/2</p></li><li><p>UDP<br>HTTP/3, HTTP/1.1을 주로사용하고 하고 점차적으로  HTTP/2, HTTP/3의 사용 점유율도 상승되고 있습니다.</p></li></ol><p>이러한것들을 실제로 웹상에서 확인해보고 싶으면, 개발자모드-네트워크도구탭에서 어떠한 HTTP프로토콜이 이용되어져 있고 기반 프로토콜은 무엇을 주로 사용하는지 확인할 수 있습니다.</p><h1 id="http-hyper-text-transfer-protocal-teugjing"><a href="#http-hyper-text-transfer-protocal-teugjing" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#httphyper-text-transfer-protocal-특징"></a> HTTP(Hyper Text Transfer Protocal) 특징</h1><ol><li>클라이언트-서버 구조를 가지고 있습니다.</li><li>무상태성 프로토콜(Stateless), 비연결성</li><li>HTTP 메시지</li><li>단순함, 확장기능을 가지고 있습니다.</li></ol><h1 id="keulraieonteu-client-seobeo-server-gujo"><a href="#keulraieonteu-client-seobeo-server-gujo" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#클라이언트client-서버server-구조"></a> 클라이언트(Client)- 서버(Server) 구조</h1><ul><li>요청(request), 응답(Response) 구조를 가지고 있습니다.</li><li>클라이언트는 서버에 요청을 보내고 응답을 대기합니다.</li><li>서버가 요청에 대한 결과를 만들어서 응답하게 됩니다.</li></ul><h1 id="musangtae-peurotokol-stateless"><a href="#musangtae-peurotokol-stateless" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#무상태-프로토콜stateless"></a> 무상태 프로토콜(Stateless)</h1><ul><li>서버가 클라이언트의 상태를 보존하지 않습니다.</li><li>서버의 확장성이 매우 높은 장점을 가지고 있습니다.(Scale-out)</li><li>클라이언트가 추가 데이터를 전송해야한다는 단점을 가지고 있습니다.</li></ul><h1 id="stateful-sangtaeyuji-vs-stateless-musangtaeseong"><a href="#stateful-sangtaeyuji-vs-stateless-musangtaeseong" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#stateful상태유지-vs-stateless무상태성"></a> Stateful(상태유지) VS Stateless(무상태성)</h1><p>이커머스 환경에서 제품 구매하는 예제를 들 수 있습니다. 고객이 점원에게 물품을 구매할때 도중에 상태가 변경되거나 Context가 변화하게 되어도 상태를 유지하기가 쉽습니다.(무상태성) 그에 반해 Stateful은 어떤 상태인지 계속 알고 있기때문에 중간에 상태가 변경되거나 Context가 변화가 없도록 하여야 합니다.</p><blockquote><p>차이 정리</p></blockquote><blockquote><p>Stateful:</p></blockquote><ul><li>중간에 다른상태로 변경되면 X</li><li>항상 같은 서버가 유지되어야 합니다.</li><li>서버가 터지게 되면 상태보존하는데 보존이 불가능합니다.</li></ul><blockquote><p>Stateless:</p></blockquote><ul><li>중간에 다른상태로 변경 OK</li><li>트래픽이 증가해도 다양한 스케일아웃 많은 서버들을 Scale-out이 가능합니다.</li><li>Stateless는 응답 서버를 쉽게 변경이 가능하기 때문에 무한한 서버를 증설을 할 수 있습니다.</li><li>트래픽이 몰리는경우가 많을 경우 정적페이지를 띄워놓고 요청 트래픽을 분산시킬 수 있는 방식으로 설계해야합니다.</li><li>모든것을 무상태로 설계할 수 있는 경우도 있고 없는 경우도 있습니다.</li><li>로그인시 브라우저쿠키나 서버세션을 이용하여 상태를 유지합니다.</li><li>상태유지는 최소한만 사용해야합니다.</li></ul><h1 id="biyeongyeolseong-connectionsless"><a href="#biyeongyeolseong-connectionsless" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#비연결성connectionsless"></a> 비연결성(connectionsless)</h1><blockquote><p>연결 유지 모델</p></blockquote><ul><li>클라이언트-서버 구조에서는 클라이언트가 요청후 TCP/IP에 연결한후 HTTP 서버요청을 진행합니다.</li><li>서버는 연결을 계속 유지함에 따라 서버 자원 소모가 증가될 수 있습니다.</li><li></li></ul><blockquote><p>연결 비유지 모델</p></blockquote><ul><li>클라이언트가 요청후 서버에게 응답을 받을때 TCP/IP 연결을 종료시켜버립니다.</li><li>서버는 연결을 유지하지 않고, 최소한의 자원을 유지합니다.</li></ul><h1 id="biyeongyeolseong-connectionsless-teugjing"><a href="#biyeongyeolseong-connectionsless-teugjing" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#비연결성connectionsless-특징"></a> 비연결성(connectionsless) 특징</h1><ul><li>HTTP는 기본이 연결을 유지하지 않는 모델입니다.(Default)</li><li>초 단위의 이하의 빠른 속도로 응답을 합니다.</li><li>실제 서비스에서 서비스를 사용해도 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작습니다.</li><li>서버 자원을 매우 효율적으로 사용할 수 있습니다.</li></ul><h1 id="biyeongyeolseong-connectionsless-hangye"><a href="#biyeongyeolseong-connectionsless-hangye" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#비연결성connectionsless-한계"></a> 비연결성(connectionsless) 한계</h1><ul><li>자원을 받을때 마다 TCP/IP 연결을 새로 맺어야합니다.(3-way-handshake 시간 증대)</li><li>웹 브라우저로 사이트를 요청하면 HTML뿐만 아니라 html,css,js,image files 등 많은 Resource를 다운로드 받습니다.</li><li>HTTP/2, HTTP/3에서 더 많은 최적화를 지원합니다.</li></ul><p>HTTP초기에는 연결,종료를 낭비가 많았는데 그 이유는 매번 요청마다 분리를 해야했기 때문입니다. 그래서 나온것이 HTTP 지속 연결(Persistent Connections)입니다.</p><p>지속 연결의 과정은 요청-&gt; 응답 -&gt; 유지 (내부 매커니즘으로 지속연결을 계속 진행합니다.)</p><blockquote><p>정리</p></blockquote><p>Stateless같은 경우는 동시간에 진행되는 실시간 대용량 트래픽에 매우 용이 합니다.<br>예를 들면, 수만명의 트래픽이 들어왔다고 가정하면 Stateles 환경에 서버 요청이 많아집니다. 이에 따른 대응방식으로 정적페이지나 HTML을 먼저 렌더링 시켜준후 해당 본 요청 이벤트를 처리하는 로직으로 진행합니다.</p><h1 id="http-mesijigujo"><a href="#http-mesijigujo" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#http-메시지구조"></a> HTTP 메시지구조</h1><h2 id="http-yoceongmesiji-gujo"><a href="#http-yoceongmesiji-gujo" class="header-anchor">10.1. </a><a class="markdownIt-Anchor" href="#http-요청메시지-구조"></a> HTTP 요청메시지 구조</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. start-line 시작라인(HTTP메서드, 요청대상, HTTP Version)</span><br><span class="line">2. header 헤더(표준헤더 많음, 헤더추가도 가능함)</span><br><span class="line">3. empty line 공백라인(CRLF) - RFC7230 표준</span><br><span class="line">4. message body</span><br></pre></td></tr></table></figure><blockquote><p>HTTP 요청메시지 예시</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. GET /search?q=hello&amp;hl=ko HTTP/1.1 (start-line)</span><br><span class="line">2. Host: www.google.com (header)</span><br><span class="line">3. (empty line)</span><br></pre></td></tr></table></figure><p>요청메시지도 body본문을 가질수 있습니다.</p><h2 id="http-eungdab-mesiji-gujo"><a href="#http-eungdab-mesiji-gujo" class="header-anchor">10.2. </a><a class="markdownIt-Anchor" href="#http-응답-메시지-구조"></a> HTTP 응답 메시지 구조</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. start-line 시작라인(HTTP버전, HTTP상태코드, 요청 및 성공)</span><br><span class="line">2. header 헤더(표준헤더 많음, 헤더추가도 가능함)</span><br><span class="line">3. empty line 공백라인(CRLF) - RFC7230 표준</span><br><span class="line">4. message body(실제 전송데이터 HTML,이미지,영상,JSON, XML 등 byte표현가능한 모든 데이터)</span><br></pre></td></tr></table></figure><blockquote><p>HTTP 응답메시지 예시</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. HTTP/1.1 200 OK (start-line)</span><br><span class="line">2. Content-Type:text/html;charset=UTF-8    (header)</span><br><span class="line">3. Content-Length: 3423    (empty line)</span><br><span class="line"></span><br><span class="line">4.(message body)</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>                  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>..<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>정리</p></blockquote><ul><li>HTTP1.1 기준</li><li>클라이언트,서버 구조</li><li>무상태 프로토콜(Stateless)</li><li>HTTP 메시지 구조</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹에서 가장 중요한 요소라고 할 수 있는 HTTP(Hyper Text Transfer Protocal)에 대해서 살펴보도록 하겠습니다.&lt;br&gt;
들어가기 앞서 HTTP가 왜 중요할까요?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;클라이언트-서버 구조&lt;/code&gt;에서 
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="http" scheme="http://gwanhyeon.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Trapping Rain Water</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210118-leetcode-trapping-rain-water/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210118-leetcode-trapping-rain-water/</id>
    <published>2021-01-18T04:00:24.000Z</published>
    <updated>2021-01-21T09:24:35.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-trapping-rain-water"><a href="#leetcode-trapping-rain-water" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#leetcode-trapping-rain-water"></a> <a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">leetcode Trapping Rain Water</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>해당 문제는 릿코드 Hard 난이도 문제이며 비가 내린후 빗물의 컨테이너에 채워지는 빗물의 양을 구하는 문제입니다.</p><ul><li>(1) 왼쪽에 가장 작은 인덱스와 오른쪽 가장 큰 인덱스와 모든 빗물중에 가장 큰 인덱스도 구해줍니다. 그 이유는 왼쪽인덱스~빗물양이 가장 큰 인덱스, 오른쪽인덱스~빗물양이 가장 큰 인덱스 2가지 경우로 나누어서 계산하기 위함입니다.</li><li>(2) 기존에 입력으로 주어진 빗물의 크기(왼쪽 + 오른쪽)와 진행하면서 가장 큰 높이의 빗물기준으로 빗물의 크기를 구해줍니다.</li><li>(3) 기존의 컨테이너로 가둘 수 있는 빗물을 가둘 수 있는 최대의 크(컨테이너+빗물) - 입력으로 주어진 컨테이너의 높이를 계산해주면 최종적으로 담겨진 빗물의 크기를 알 수 있습니다.</li></ul><p>시간복잡도: O(N) 선형시간</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_trapping_rain_water_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMax = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMin = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 가장 작은 인덱스 값 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                isMin = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 연속적으로 0이 나오는 경우</span></span><br><span class="line">                <span class="keyword">if</span>(isMin)&#123;</span><br><span class="line">                    minIdx = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 0이 나오기전에 가장 작은 인덱스를 찾은 경우</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    minIdx = Math.min(minIdx, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 가장 큰 인덱스값 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=height.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                maxIdx = i;</span><br><span class="line">                isMax = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 연속적으로 0이 나온경우</span></span><br><span class="line">                <span class="keyword">if</span>(isMax)&#123;</span><br><span class="line">                    maxIdx = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 0이 나오기전에 가장 큰 인덱스를 찾은 경우</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxIdx = Math.max(maxIdx, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(minIdx + <span class="string">" "</span> + maxIdx);</span><br><span class="line">        <span class="keyword">int</span> maxHightIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 빗물중에서 가장 큰 인덱스 값 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] &gt; height[maxHightIdx])&#123;</span><br><span class="line">                maxHightIdx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 왼쪽 가장 작은 인덱스 ~ 가장 큰 인덱스까지 가장 큰 높이 기준으로 빗물 크기를 구합니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=minIdx; i&lt;maxHightIdx; i++)&#123;</span><br><span class="line">            <span class="comment">// 기존 빗물 크기의 합</span></span><br><span class="line">            leftSum += height[i];</span><br><span class="line">            <span class="comment">// 진행되면서 가장 큰 높이 빗물 기준으로 총 빗물양 구하기</span></span><br><span class="line">            h = Math.max(height[i], h);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 높이 초기화</span></span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightSum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 오른쪽 가장 큰 인덱스 ~ 가장 큰 인덱스까지 가장 큰 높이 기준으로 빗물 크기를 구합니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=maxIdx; i&gt;maxHightIdx; i--)&#123;</span><br><span class="line">            rightSum += height[i];</span><br><span class="line">            h = Math.max(height[i], h);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum + <span class="string">" "</span> + leftSum + <span class="string">" "</span>+ rightSum);</span><br><span class="line">        <span class="keyword">return</span> sum-(leftSum + rightSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;leetcode-trapping-rain-water&quot;&gt;&lt;a href=&quot;#leetcode-trapping-rain-water&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="완전탐색" scheme="http://gwanhyeon.github.io/tags/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Spring 빈(Bean)과 의존관계, DI(Dependency Injection)</title>
    <link href="http://gwanhyeon.github.io/Spring-20210117-spring-dependency-injection/"/>
    <id>http://gwanhyeon.github.io/Spring-20210117-spring-dependency-injection/</id>
    <published>2021-01-17T04:08:13.000Z</published>
    <updated>2021-01-17T04:43:15.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seupeuring-keonteineo-ioc-jeeo-banjeon-inversion-of-control-keonteineo"><a href="#seupeuring-keonteineo-ioc-jeeo-banjeon-inversion-of-control-keonteineo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#스프링-컨테이너-ioc제어-반전-inversion-of-control-컨테이너"></a> 스프링 컨테이너, IoC(제어 반전 Inversion of control) 컨테이너</h1><p><code>스프링 Bean과 DI(Dependency Injection)의 개념</code>에 대해서 살펴보기전에 <code>스프링 컨테이너(IoC)의 특징</code>을 살펴보겠습니다.</p><ul><li><p>스프링 애플리케이션에서는 오브젝트의 생성과 관계설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 독립된 컨테이너가 담당하게 됩니다. 컨테이너가 코드 대신 오브젝트에 대한 제어권 을 갖기때문에 IoC라고 부릅니다. <code>즉, 스프링컨테이너라는 것은 IoC컨테이너와 같은 말로 쓰여집니다.</code></p></li><li><p><code>스프링 컨테이너는 DI(Dependency Injection)보다 많은 일들을 담당</code>하게 됩니다. 예를 들면,<br>DI를 위한 빈 팩토리에 엔터프라이즈 애플리케이션을 개발하는 데 필요한 여러 가지 컨테이너 기능을 추가한 것을 애플리케이션 컨텍스트를 관리하게 됩니다.</p></li><li><p>스프링의 빈 팩토리와 애플리케이션 컨텍스트는 각각 기능을 <code>대표하는 BeanFactory와 ApplicationContext라는 두 개의 인터페이스</code>로 정의 되어있습니다.</p></li><li><p>ApplicationContext 인터페이스는 BeanFactory 인터페이스를 상속한 서브 인터페이스 입니다.</p></li></ul><h1 id="di-dependency-injection"><a href="#di-dependency-injection" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#didependency-injection"></a> DI(Dependency Injection)</h1><p>스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 객체 의존관계를 외부에서 넣어주는 것을 <code>DI (Dependency Injection), 의존성 주입</code>이라 합니다.</p><h1 id="seupeuringbingwa-yijongwangye"><a href="#seupeuringbingwa-yijongwangye" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#스프링빈과-의존관계"></a> 스프링빈과 의존관계</h1><p>컨트롤러와 서비스에 대한 레포지토리를 만들때 <code>@Autowired가 있으면 스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 넣어줍니다.</code> 그렇게 객체 의존관계를 외부에서 넣어주는것을 <code>DI(Dependency Injetion)</code>이라 하며 이전 테스트 에서는 개발자가 직접 주입을 시켰지만 이제는 <code>@autowired에 의해 스프링이 주입</code>해줍니다.</p><blockquote><p>스프링 빈이 등록되어 있지 않다면?</p></blockquote><p>만약 컨트롤러와 서비스간의 스프링 빈이 등록되어 있지 않다면 <code>@Controller가 스프링빈</code>으로 자동등록해주거나 직접 자바코드로 직접 스프링빈을 등록할 수 있습니다. 그 이유는 <code>@Controller에 포함되어있는 @Component 어노테이션이 빈으로 등록</code>을 해주기 때문입니다. 그 외는 <code>SpringConfig라는 설정파일을 만들어서 직접 자바코드로 스프링빈</code>을 등록하게 할 수 있다.</p><h1 id="keomponeonteu-seukaenyi-weonri"><a href="#keomponeonteu-seukaenyi-weonri" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#컴포넌트-스캔의-원리"></a> 컴포넌트 스캔의 원리</h1><blockquote><p>컴포넌트 스캔은 어떤 원리를 가지고 있을까요?</p></blockquote><p>@Component 애노테이션이 있으면 스프링빈으로 자동등록 됩니다.바로 @Controller가 스프링빈으로 등록된 이유도 컴포넌트 스캔때문이라고 할 수 있습니다.</p><p>@Component을 포함하는 애노테이션은 다음과 같습니다. <code>@Controller, @Service @Repository가 있습니다.</code> 즉, <code>스프링 빈으로 자동등록</code>된다는 말입니다.</p><p>결론, 생성자에 @Autowired를 사용하면 객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입해줍니다. 생성자가 1개만 있으면 @Autowired는 생략이 가능합니다.</p><p>스프링은 스프링 컨테이너에서 스프링 빈을 등록할 때, 기본적으로 <code>싱글톤으로 등록합니다(유일하게 하나만 등록해서 공유하고) 같은 스프링 빈이면 모두 같은 인스턴스</code>이다. 싱글톤이 아니게 설정할 수 있지만, 특별한 경우 제외하면 대부분 싱글톤을 사용합니다.</p><h1 id="di-dependency-injection-juib"><a href="#di-dependency-injection-juib" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#didependency-injection-주입"></a> DI(Dependency Injection) 주입</h1><p><code>DI주입</code>은 <code>필드주입, setter주입, 생성자 주입 총 3가지 방법</code>이 있습니다.</p><p>의존관계가 실행중 동적으로 변하는 경우는 거의 없기때문에 생성자 주입을 통한 DI주입을 권장합니다. DI주입시 주의사항은 @Autowired를 통한 DI는 Controller, Service등과 같이 스프링이 관리하는 객체에서만 동작하게 됩니다. <code>스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작되지 않습니다.</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;seupeuring-keonteineo-ioc-jeeo-banjeon-inversion-of-control-keonteineo&quot;&gt;&lt;a href=&quot;#seupeuring-keonteineo-ioc-jeeo-banjeon-inversion-o
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="IoC" scheme="http://gwanhyeon.github.io/tags/ioc/"/>
    
      <category term="DI" scheme="http://gwanhyeon.github.io/tags/di/"/>
    
      <category term="컴포넌트 스캔" scheme="http://gwanhyeon.github.io/tags/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>Network 웹 브라우저의 요청 흐름</title>
    <link href="http://gwanhyeon.github.io/Network-20210115-network-05-web-browser-request-flow/"/>
    <id>http://gwanhyeon.github.io/Network-20210115-network-05-web-browser-request-flow/</id>
    <published>2021-01-15T13:25:39.000Z</published>
    <updated>2021-01-15T14:00:35.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-beuraujeo-yoceong-heureum"><a href="#web-beuraujeo-yoceong-heureum" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#웹-브라우저-요청-흐름"></a> 웹 브라우저 요청 흐름</h1><p>웹 브라우저에 대한 요청흐름에 대해서 살펴보겠습니다. 예시로 된 IP이기때문에 실제와 같지 않습니다.<br>웹브라우저: 127.0.0.1<br>구글서버: 127.0.0.2<br>요청 URL: <code>https://www.google.com:443/search?q=google&amp;oq=google</code></p><blockquote><p>다음과 같이 웹브라우저와 구글서버 IP, 요청 URL이 주어졌다고 가정하면 어떤일이 발생하게 될까요?</p></blockquote><ol><li>웹브라우저가 요청 URL에 접근을 요청합니다.</li><li>DNS(Domain Name System)에서 해당되는 DNS의 IP를 조회해옵니다.</li><li>조회해 온 127.0.0.2 IP를 바탕으로 HTTP 요청 메시지를 생성합니다.</li></ol><ul><li>HTTP 요청 메시지</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /search?q=google&amp;oq=google HTTP/1.1</span><br><span class="line">Host:www.google.com</span><br></pre></td></tr></table></figure><ol start="4"><li>HTTP 요청 메시지를 바탕으로 HTTP 메시지를 웹 브라우저상에 전송합니다.</li></ol><h1 id="http-mesiji-jeonsonggwajeong"><a href="#http-mesiji-jeonsonggwajeong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#http-메시지-전송과정"></a> HTTP 메시지 전송과정</h1><ol><li>웹 브라우저가 HTTP 메시지를 생성합니다.</li><li>SOCKET 라이브러리를 통해 해당 HTTP 메시지를 전달합니다.<br>TCP/IP를 연결(IP,PORT)에 대해서 데이터 전달을 진행합니다.</li><li>TCP/IP 패킷을 생성하여, HTTP 메시지를 포함시킵니다.</li><li>네트워크인터페이스인 LAN 장비를 통하여 인터넷으로 해당 메시지와 데이터를 전송합니다.</li><li>최종적으로 <a href="http://google.com" target="_blank" rel="noopener">google.com</a>(127.0.0.2) 서버에 도달하게 됩니다.</li></ol><h1 id="paekis-saengseong"><a href="#paekis-saengseong" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#패킷-생성"></a> 패킷 생성</h1><blockquote><p>TCP/IP패킷은 어떤 구조로 구성되어있을까요?</p></blockquote><p>출발지 IP, 출발지 PORT, 목적지 IP, 목적지 PORT, 전송 데이터, 그 외 기타의 설정들이 담겨져 있습니다.<br>즉, 출발지 IP, 출발지 PORT, 목적지 IP, 목적지 PORT는 TCP/IP 패킷으로 구성되어 있으며 HTTP메시지는 TCP/IP 패킷안에 HTTP 메시지가 포함되어 있는 형태로 볼 수 있습니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># TCP/IP 패킷(상위 개념)</span><br><span class="line">----------------------------</span><br><span class="line">출발지 IP,PORT</span><br><span class="line">목적지 IP,PORT</span><br><span class="line">----------------------------</span><br><span class="line"># HTTP 메시지(하위 개념)</span><br><span class="line">GET /search?q=google&amp;oq=google HTTP/1.1</span><br><span class="line">Host:www.google.com</span><br><span class="line">----------------------------</span><br></pre></td></tr></table></figure><h1 id="http-eungdab-mesiji"><a href="#http-eungdab-mesiji" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#http-응답-메시지"></a> HTTP 응답 메시지</h1><blockquote><p>이제 이렇게 웹 브라우저에 요청에 대한 서버는 응답값은 어떤 형식으로 오게 될까요?</p></blockquote><p>정상적으로 요청에 대한 값을 받고 응답에 대한 패킷을 전달할때 응답패킷 형태로(TCP/IP, HTTP 메시지)를 함께 전송하게 됩니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> ~ <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web-beuraujeo-rendeoring"><a href="#web-beuraujeo-rendeoring" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#웹-브라우저-렌더링"></a> 웹 브라우저 렌더링</h1><p>웹 브라우저의 요청을 통해서 서버에 대한 응답 요청 패킷을 전달받은 웹브라우저는 응답 패킷으로 넘어온 TCP/IP, HTTP 메시지에 포함된 데이터를 바탕으로 HTML 렌더링을 진행합니다.</p><h1 id="httpyi-teugjing"><a href="#httpyi-teugjing" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#http의-특징"></a> HTTP의 특징</h1><ul><li>The World Wide Web (WWW)은 모든것이 대부분 HTTP형태로 통신</li><li>Client-Server 구조</li><li>Stateful : server side에 client와 server의 동작, 상태정보를 저장하는 형태, 세션 상태에 기반하여 server의 응답이 달라짐</li><li>Stateless : server side에 client와 server의 동작, 상태정보를 저장하지 않는 형태, server의 응답이 client와의 세션 상태와 독립적</li><li>비 연결성(Connetionless)</li><li>HTTP 메시지</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web-beuraujeo-yoceong-heureum&quot;&gt;&lt;a href=&quot;#web-beuraujeo-yoceong-heureum&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="웹브라우저" scheme="http://gwanhyeon.github.io/tags/%EC%9B%B9%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80/"/>
    
      <category term="TCP/IP" scheme="http://gwanhyeon.github.io/tags/tcp-ip/"/>
    
      <category term="HTTP" scheme="http://gwanhyeon.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Search Insert Position</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210114-leetcode-search-insert-position/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210114-leetcode-search-insert-position/</id>
    <published>2021-01-14T10:09:42.000Z</published>
    <updated>2021-01-14T11:12:57.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-search-insert-position"><a href="#riskodeu-search-insert-position" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-search-insert-position"></a> <a href="https://leetcode.com/problems/search-insert-position/" target="_blank" rel="noopener">릿코드 search insert position</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: nums = [1,3,5,6], target = 5<br>Output: 2</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: nums = [1,3,5,6], target = 2<br>Output: 1</p><h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: nums = [1,3,5,6], target = 7<br>Output: 4</p><h3 id="example-4"><a href="#example-4" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3><p>Input: nums = [1,3,5,6], target = 0<br>Output: 0</p><h3 id="example-5"><a href="#example-5" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#example-5"></a> Example 5:</h3><p>Input: nums = [1], target = 0<br>Output: 0</p><h3 id="constraints"><a href="#constraints" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>1 &lt;= nums.length &lt;= 104<br>-104 &lt;= nums[i] &lt;= 104<br>nums contains distinct values sorted in ascending order.<br>-104 &lt;= target &lt;= 104</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>binarySearch 함수를 구현하여 해당되는 타겟값이 있으면 해당 인덱스를 반환하고 그렇지 않으면 -1을 반환합니다.</li><li>insertBinarySearch 함수를 구현하여 현재 해당되는 Target의 끝지점 인덱스를 찾아 반환합니다. end는 target값의 이전인덱스이기 때문에 end+1을 반환시켜줍니다.</li></ul><blockquote><p>시간복잡도</p></blockquote><p>이진탐색 O(logN)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_search_insert_position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(searchInsert(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = binarySearch(nums, target);</span><br><span class="line">        <span class="keyword">if</span>(answer == -<span class="number">1</span>)&#123;</span><br><span class="line">            answer = insertBinarySearch(nums,target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 해당되는 타겟값이 있으면 해당 인덱스 반환, 그렇지 않으면 -1 반환</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 타겟의 끝지점을 찾는다. End점에는 결국에는 해당되는 값의 마지막지점 인덱스가 저장되어있다.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-search-insert-position&quot;&gt;&lt;a href=&quot;#riskodeu-search-insert-position&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="binarysearch" scheme="http://gwanhyeon.github.io/tags/binarysearch/"/>
    
      <category term="이진탐색" scheme="http://gwanhyeon.github.io/tags/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Spring Lombok @Annotation(어노테이션)</title>
    <link href="http://gwanhyeon.github.io/Spring-20210114-spring-lombok-annotation/"/>
    <id>http://gwanhyeon.github.io/Spring-20210114-spring-lombok-annotation/</id>
    <published>2021-01-14T09:13:01.000Z</published>
    <updated>2021-01-14T09:15:13.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lombok-library-annotation"><a href="#lombok-library-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#lombok-library-annotation"></a> Lombok library @Annotation</h1><h2 id="lombok"><a href="#lombok" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#lombok"></a> Lombok</h2><p>Lombok(롬복)은 MIT 라이선스로 배포되는 오픈소스 라이브러리로서 annotation 주석으로 VO(Value Object), DTO(Data Transfort Object), Entity Class 등을 만들때 Getter/Setter 및 toString()을 자동화 시켜줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</span><br></pre></td></tr></table></figure><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok 공식 사이트</a></p><blockquote><p>Lombok 사용방법</p></blockquote><p>Lombok을 사용하기 위해서는 해당 라이브러리를 다운을 받아야합니다. IntellJ같은 경우는 플러그인을 설치하여 Lombok을 다운받으면 되고 Gradle or Maven Dependency를 추가해주어야합니다.<br>모든 설치가 완료되면</p><blockquote><p>IntellJ Configuration</p></blockquote><p><code>IntelliJ의 File &gt; Settings &gt; Build, Execution, Deployment &gt; Compiler &gt; Annotation Processors를 선택 한 후 &quot;Enable annotation processing&quot;을 체크</code><br>해당 설정을 해주는 이유는 Lombok을 작업중에도 동작시키기 위해서는 해당과 같은 설정을 해주셔야 Lombok이 정상적으로 동작하게 됩니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># gradle</span><br><span class="line">configurations &#123;</span><br><span class="line">    compileOnly &#123;</span><br><span class="line">      extendsFrom annotationProcessor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># maven</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">   &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="getter-setter"><a href="#getter-setter" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#getter-setter"></a> @Getter, @Setter</h2><p>Lombok에서 가장 많이 사용되는 어노테이션인 @Getter와 @Setter에 대해서 설명드리겠습니다.<br>기존에 스프링에서는 필드를 선언하면 명시적으로 선언을 매번해주어야하였지만, Lombok을 사용하면 필드를 선언하면 Getter(),Setter()  메소드를 자동으로 생성해줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> item;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lombok 사용시 필요없는 코드</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(<span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(<span class="keyword">int</span> user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필드 레벨이 아닌 클래스 레벨에 @Getter 또는 @Setter를 선언해줄 경우, 모든 필드에 접근자와 설정자가 자동으로 생성됩니다.</p><h2 id="noargsconstructor"><a href="#noargsconstructor" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#noargsconstructor"></a> NoArgsConstructor</h2><p>@NoArgsConstructor 어노테이션은 파라미터가 없는 기본 생성자를 생성해줍니다.</p><h2 id="allargsconstructor"><a href="#allargsconstructor" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#allargsconstructor"></a> @AllArgsConstructor</h2><p>@AllArgsConstructor 어노테이션은 모든 필드 값을 파라미터로 받는 생성자를 만들어줍니다.</p><h2 id="requiredargsconstructor"><a href="#requiredargsconstructor" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#requiredargsconstructor"></a> @RequiredArgsConstructor</h2><p>@RequiredArgsConstructor 어노테이션은 final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 만들어줍니다.</p><h2 id="data"><a href="#data" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#data"></a> @Data</h2><p>Class Level에서 @Data 어노테이션을 붙여주면, 모든 필드를 대상으로 접근자와 설정자가 자동으로 생성됩니다. 그리고, final 또는 @NonNull 필드 값을 파라미터로 받는 생성자가 만들어지며, toStirng, equals, hashCode 메소드가 자동으로 생성되게 됩니다. 개인적으로는 @Data를 무분별하게 사용하면 나중에 유지보수측면에서 시간이 많이 소요되고 불필요한 소스양이 늘어날 것으로 생각하며 결론적으로 @Data는 지양하고 무분별한 Setter 남용을 하지 않도록 해야할 것입니다.</p><h2 id="builder"><a href="#builder" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#builder"></a> @Builder</h2><p>@Builder Annotation은 모델 객체를 생성할 때 Builder를 자동으로 추가해 주는 Annotation입니다. 해당 Annotation을 사용하면 Builder Pattern을 적용할 수 있습니다.</p><blockquote><p>Builder Annotation 미적용</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="keyword">this</span>.name);</span><br><span class="line">    user.setAge(<span class="keyword">this</span>.age);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Builder Annotation 적용</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Builder pattern 사용</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = User.builder()</span><br><span class="line">                  .name(<span class="string">"KGH"</span>)</span><br><span class="line">                  .age(<span class="number">100</span>)</span><br><span class="line">                  .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>References</p></blockquote><p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lombok-library-annotation&quot;&gt;&lt;a href=&quot;#lombok-library-annotation&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lom
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="Annotation" scheme="http://gwanhyeon.github.io/tags/annotation/"/>
    
      <category term="Lombok" scheme="http://gwanhyeon.github.io/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Spring @Annotation(어노테이션)</title>
    <link href="http://gwanhyeon.github.io/Spring-20210114-spring-annotation/"/>
    <id>http://gwanhyeon.github.io/Spring-20210114-spring-annotation/</id>
    <published>2021-01-14T07:22:00.000Z</published>
    <updated>2021-01-14T15:28:58.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-annotation"><a href="#spring-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#spring-annotation"></a> Spring @Annotation</h1><h2 id="restcontroller"><a href="#restcontroller" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#restcontroller"></a> @RestController</h2><p>@RestController 동작에 앞서, 먼저 알아보아야할것이 @Controller와의 차이점입니다.</p><blockquote><p>@Controller 내부</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Controller Annotation의 내부를 살펴보면 다음과 같은 구조를 볼 수 있습니다. 자세히 살펴보시면 <code>@Component</code> 어노테이션을 살펴보실 수 있습니다. 과연 이것의 어노테이션의 역할은 무엇일까요?<br>즉, 기존의 Spring에서는 <code>@Bean</code>을 붙여 빈을 등록하던 것처럼 빈 클래스에 <code>@Component</code> 애노테이션을 붙여 빈을 등록할 수 있습니다. 따라서 <code>@Controller</code> 어노테이션 내부에는 해당 컨트롤러를 <code>@Bean</code> 으로 등록하는 역할도 하고 있다는 뜻입니다.<br>@Component를 붙여 빈을 등록하면 클래스 이름의 첫 문자를 소문자로 바꾼 것이 빈의 이름(id)이 됩니다. 그리고 빈 객체가 생성되는 시점은 ApplicationContext 객체가 생성되는 시점이며 기본적으로 singleton scope 입니다.</p><p>해당 경로로 요청을 진행한다고 할때  <code>localhost:8080/mvc</code>의 요청경로에 맞는 컨트롤러를 @Bean 컴포넌트 스캔을 통하여 해당 경로를 가지고 있는 컨트롤러를 찾아주게 됩니다.  만약 <code>@ResponseBody</code> 가 붙여져 있지 않다면 해당 모델에 값을 넘겨줄 수도 있고, String을 반환하게 되면 데이터를 넘겨주는것이 아니라 해당 View의 Path값에 맞게  모델값과 함께 반환시켜주게 됩니다. 요약하면 API와 view를 동시에 사용하는 경우에 사용한다고 생각하시면 됩니다.</p><p>이제 @Controller 다음으로 @RestController 의미에 대해 알아보겠습니다. 간단히 <code>@RestController는 @Controller가 포함되어있고 @ReponseBody형식을 함께 사용할때 사용합니다.</code></p><blockquote><p>@RestController 내부</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A convenience annotation that is itself annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125; and &#123;<span class="doctag">@link</span> ResponseBody <span class="doctag">@ResponseBody</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Types that carry this annotation are treated as controllers where</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> RequestMapping <span class="doctag">@RequestMapping</span>&#125; methods assume</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ResponseBody <span class="doctag">@ResponseBody</span>&#125; semantics by default.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; &#123;<span class="doctag">@code</span> <span class="doctag">@RestController</span>&#125; is processed if an appropriate</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> HandlerMapping&#125;-&#123;<span class="doctag">@code</span> HandlerAdapter&#125; pair is configured such as the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125;-&#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * pair which are the default in the MVC Java config and the MVC namespace.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Controller<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내부 스펙을 확인해보면 @ResponseBody Annotation, @Controller Annotation이 함께 선언되어 있습니다.</p><blockquote><p>@ResponseBody를 붙여주면 무슨일이 발생할까요?</p></blockquote><p><code>@ResponseBody</code>의 역할은 <code>HTTP BODY</code>문자내용을 반환하는 <code>api</code>라고 할 수 있습니다. 즉, 기존에 <code>@ResponseBody</code>가 없는 경우에 <code>viewResolver</code> 대신에 <code>httpMessageConverter</code>가 동작하여 문자일 경우에는 <code>StringHttpMessageConverter</code> 객체일 경우에는 <code>MappingJackson2HttpMessageConverter</code>로 이루어져있습니다. 클라이언트의 HTTP Accept헤더와 서버 컨트롤러의 반환 타입 정보 둘을 조합해서 HttpMessageConverter가 동작되게 됩니다. 기본으로 동작되는 데이터반환형식은 Default JSON형식으로 동작되게 됩니다.</p><h2 id="requestmapping"><a href="#requestmapping" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#requestmapping"></a> @RequestMapping</h2><p>@RequestMapping Annotation은 Spring에서 제공하는 HandlerMapping Class가 가지고 있습니다.<br>두 가지의 경우로 나눌 수 있는데, 이것은 스프링 HTTP 내부 Note:를 참고하면 아래와 같은 사항을 확인할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation for mapping web requests onto methods in request-handling classes</span></span><br><span class="line"><span class="comment"> * with flexible method signatures.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Both Spring MVC and Spring WebFlux support this annotation through a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125; and &#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * in their respective modules and package structure. For the exact list of</span></span><br><span class="line"><span class="comment"> * supported handler method arguments and return types in each, please use the</span></span><br><span class="line"><span class="comment"> * reference documentation links below:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring MVC</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring WebFlux</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This annotation can be used both at the class and</span></span><br><span class="line"><span class="comment"> * at the method level. In most cases, at the method level applications will</span></span><br><span class="line"><span class="comment"> * prefer to use one of the HTTP method specific variants</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> GetMapping <span class="doctag">@GetMapping</span>&#125;, &#123;<span class="doctag">@link</span> PostMapping <span class="doctag">@PostMapping</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PutMapping <span class="doctag">@PutMapping</span>&#125;, &#123;<span class="doctag">@link</span> DeleteMapping <span class="doctag">@DeleteMapping</span>&#125;, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PatchMapping <span class="doctag">@PatchMapping</span>&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; When using controller interfaces (e.g. for AOP proxying),</span></span><br><span class="line"><span class="comment"> * make sure to consistently put &lt;i&gt;all&lt;/i&gt; your mapping annotations - such as</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125; - on</span></span><br><span class="line"><span class="comment"> * the controller &lt;i&gt;interface&lt;/i&gt; rather than on the implementation class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> GetMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PostMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PutMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DeleteMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PatchMapping</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 내용을 요약 하면</p><p><strong>@RequestMapping Annotation은 클래스 및 메서드 수준에서 모두 사용할 수 있습니다. 대부분의 경우 방법 수준에서 응용 프로그램은 HTTP 메서드별 변형된 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 또는 @PatchMapping 중 하나를 사용하는 것을 권장합니다.<br>참고: 컨트롤러 인터페이스(예: AOP 프록시)를 사용할 때 구현 클래스가 아닌 컨트롤러 인터페이스에 @RequestMapping 및 @SessionAttributes와 같은 모든 매핑 Annotation을 일관되게 배치해야 합니다.</strong></p><p>즉, 클래스 및 메서드 수준을 모두 사용할 수 있으며, 최근에는 HTTP 메서드별 변형된 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 또는 @PatchMapping 중 하나를 사용하는 것을 권장한다고 합니다.</p><ol><li>Class Level Mapping<br>Class Level Mapping은 모든 메서드에 적용하는 경우 사용합니다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP Request 요청경로가 “/” 일 경우 해당 클래스에서 처리를 진행합니다.</p><ol start="2"><li>Handler Level Mapping</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemB</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemC</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.PATCH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemD</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemE</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요청 URL에 대하여 해당 메서드를 처리해야하는 경우 사용합니다. 특정 메서드에서 HTTP요청을 처리한다고 생각하면 됩니다.</p><blockquote><p>RequestMapping 옵션</p></blockquote><ul><li>value는 해당 URL 경로를 지정합니다.</li><li>HTTP Request Method를 지정하여 HTTP 형식에 맞추어 수행됩니다.</li></ul><h2 id="getmapping-postmapping-putmapping-deletemapping-patchmapping"><a href="#getmapping-postmapping-putmapping-deletemapping-patchmapping" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#getmapping-postmapping-putmapping-deletemapping-patchmapping"></a> @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping</h2><p>@RequestMapping에서 조금더 세분화된 Method path를 지정하여 명시적이고 효율적인 사용을 위하여 Annotation이 Spring 4.3.xx 버전 이후로 추가되었습니다.<br>현재 @RequestMapping보다는 4.3버전이후로 나온 Annotation을 권장하고 있습니다.</p><blockquote><p>종류<br><code>@GetMapping, @PostMapping, DeleteMapping, @PutMapping, @PatchMapping</code></p></blockquote><blockquote><p>Annotation 사용법</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PatchMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.PATCH)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존에 RequestMapping을 통하여 가독성이 떨어지는 코드를 작성하였는데 스프링4.3버전이후로 부터 세부적인 HTTP Method를 지정할 수 있게 되어 명시적이고 효율성이 올라갔다고 생각합니다.</p><h2 id="compoment"><a href="#compoment" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#compoment"></a> @Compoment</h2><p>스프링빈을 등록하는 방법은 2가지가 존재합니다.</p><ul><li>컴포넌트 스캔과 자동의존관계 설정</li><li>코드로 직접 스프링빈을 등록하는 방식</li></ul><p>따라서, 컴포넌트스캔원리를 이용 할때 @Component Annotation을 사용하게 됩니다. @Component의 의미는 해당 Annotation이 있으면 Spring bean으로 자동으로 등록이 됩니다.<br>즉, component-scan을 통하여 특정 패키지 안의 클래스들을 스캔하고 @Component Annotation이 있는 클래스에 대하여 bean인스턴스를 생성시킵니다. bean인스턴스로 생성되면 스프링 컨테이너에서 관리를 진행하게 되고 DI를 주입받을 수 있습니다.</p><p><code>DI주입은 필드주입, setter주입, 생성자 주입 총 3가지 방법</code>이 있습니다. 의존관계가 실행중 동적으로 변하는 경우는 거의 없기때문에 생성자 주입을 통한 DI주입을 권장합니다.</p><p><code>DI주입시 주의사항은</code> @Autowired를 통한 DI는 Controller, Service등과 같이 스프링이 관리하는 객체에서만 동작하게 됩니다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작되지 않습니다. 생성자에 @Autowired를 사용하면 객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입해줍니다. 생성자가 1개만 있으면 @Autowired는 생략이 가능합니다.</p><h2 id="controller-service-repository"><a href="#controller-service-repository" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#controller-service-repository"></a> @Controller, @Service, @Repository</h2><h3 id="controller"><a href="#controller" class="header-anchor">1.5.1. </a><a class="markdownIt-Anchor" href="#controller"></a> @Controller</h3><p>@Controller가 스프링빈으로 자동등록되는 이유는 @Controller내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 때문입니다.</p><blockquote><p>@Controller 내부</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="header-anchor">1.5.2. </a><a class="markdownIt-Anchor" href="#service"></a> @Service</h3><p>@Service Annotation또한 스프링빈으로 자동등록되는 이유는 @Service내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 떄문입니다.<br>요약하면 @Component 어노테이션에 의해서 @Controller, @Service, @Repository와 같은 어노테이션을 구체화하여 스프링 컨테이너에 @Service bean으로 등록을 하게 됩니다.</p><blockquote><p>@Service 내부</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Service", originally defined by Domain-Driven</span></span><br><span class="line"><span class="comment"> * Design (Evans, 2003) as "an operation offered as an interface that stands alone in the</span></span><br><span class="line"><span class="comment"> * model, with no encapsulated state."</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;May also indicate that a class is a "Business Service Facade" (in the Core J2EE</span></span><br><span class="line"><span class="comment"> * patterns sense), or something similar. This annotation is a general-purpose stereotype</span></span><br><span class="line"><span class="comment"> * and individual teams may narrow their semantics and use as appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Repository</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="repository"><a href="#repository" class="header-anchor">1.5.3. </a><a class="markdownIt-Anchor" href="#repository"></a> @Repository</h3><p>@Repository Annotation또한 스프링빈으로 자동등록되는 이유는 @Repository내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 떄문입니다. 즉, @Component 어노테이션에 의해서 @Controller, @Service, @Repository와 같은 어노테이션을 구체화하여 스프링 컨테이너에 @Service bean으로 등록을 하게 됩니다.</p><blockquote><p>@Repository 내부</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Repository", originally defined by</span></span><br><span class="line"><span class="comment"> * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,</span></span><br><span class="line"><span class="comment"> * retrieval, and search behavior which emulates a collection of objects".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Teams implementing traditional Java EE patterns such as "Data Access Object"</span></span><br><span class="line"><span class="comment"> * may also apply this stereotype to DAO classes, though care should be taken to</span></span><br><span class="line"><span class="comment"> * understand the distinction between Data Access Object and DDD-style repositories</span></span><br><span class="line"><span class="comment"> * before doing so. This annotation is a general-purpose stereotype and individual teams</span></span><br><span class="line"><span class="comment"> * may narrow their semantics and use as appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A class thus annotated is eligible for Spring</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.dao.DataAccessException DataAccessException&#125; translation</span></span><br><span class="line"><span class="comment"> * when used in conjunction with a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span></span><br><span class="line"><span class="comment"> * PersistenceExceptionTranslationPostProcessor&#125;. The annotated class is also clarified as</span></span><br><span class="line"><span class="comment"> * to its role in the overall application architecture for the purpose of tooling,</span></span><br><span class="line"><span class="comment"> * aspects, etc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 2.5, this annotation also serves as a specialization of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, allowing for implementation classes to be autodetected</span></span><br><span class="line"><span class="comment"> * through classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.dao.DataAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="componentscan"><a href="#componentscan" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#componentscan"></a> @ComponentScan</h2><p>@ComponentScan이란 컴포넌트 검색기능을 가진 어노테이션입니다.<br>스프링은 기본적으로 객체를 자동으로 생성하여 관리하기 때문에 @Component 어노테이션이 있는 클래스들을 스프링 컨테이너가 생성해줍니다.<br>따라서, @ComponentScan는 특별히 basePackage를 지정하지 않아도 main class가 위치한 패키지를 Root package로 하여 그 이하의 모든 컴포넌트 클래스들을 검색하여 빈으로 등록할 수 있습니다.</p><h2 id="configuration"><a href="#configuration" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#configuration"></a> @Configuration</h2><ul><li>클래스에 이 어노테이션이 붙어 있으면 스프링은 해당 클래스를 Java config로 간주합니다.</li><li>1개 이상의 @Bean을 제공하는 클래스의 경우 반드시 @Configuration을 명시해 주어야 합니다.</li></ul><h2 id="bean"><a href="#bean" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#bean"></a> @Bean</h2><ul><li>개발자가 직접 제어가 불가능한 외부 라이브러리 또는 설정을 위한 클래스를 Bean으로 등록할 때 @Bean 어노테이션을 활용합니다.</li></ul><h2 id="springbootapplication"><a href="#springbootapplication" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#springbootapplication"></a> @SpringBootApplication</h2><p>@SpringBootApplication 어노테이션은 스프링 부트의 가장 기본적인 설정을 선언이 되어있습니다. 내부로직을 살펴보도록 하겠습니다.</p><blockquote><p>@SpringBootApplication</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates a &#123;<span class="doctag">@link</span> Configuration configuration&#125; class that declares one or more</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Bean <span class="doctag">@Bean</span>&#125; methods and also triggers &#123;<span class="doctag">@link</span> EnableAutoConfiguration</span></span><br><span class="line"><span class="comment"> * auto-configuration&#125; and &#123;<span class="doctag">@link</span> ComponentScan component scanning&#125;. This is a convenience</span></span><br><span class="line"><span class="comment"> * annotation that is equivalent to declaring &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    public Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    public String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span>)</span><br><span class="line">    <span class="keyword">public</span> String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span>)</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"nameGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Configuration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">boolean</span> <span class="title">proxyBeanMethods</span>() <span class="title">default</span> <span class="title">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기 스펙부분을 자세히보시면 중요하게 생각해야할 부분이 두가지 있습니다.</p><ul><li>@ComponentScan</li><li>@EnableAutoConfiguration</li></ul><p>이 두가지가 왜 중요할까요?</p><blockquote><p>@ComponentScan</p></blockquote><p><code>@ComponentScan은</code> @component 어노테이션 및 @Service, @Repository, @Controller 등의 어노테이션을 스캔하여 Bean으로 등록해주는 어노테이션입니다.<br><code>즉, 어플리케이션 실행시에 @Service, @Repository, @Repositroy, @Controller에 컴포넌트스캔을 통하여 스프링 컨테이너에 Bean으로 등록합니다.</code></p><blockquote><p>@EnableAutoConfiguration</p></blockquote><p><code>@EnableAutoConfiguration은</code> 사전에 정의한 라이브러리들을  Bean으로 등록해 주는 어노테이션입니다. 사전에 정의한 라이브러리들 모두가 등록되는 것은 아니고 특정조건이 만족될 경우에 Bean으로 등록됩니다.</p><blockquote><p>저장위치</p></blockquote><p>사전 정의 파일 위치: <code>Dependencies &gt; spring-boot-autoconfigure &gt; META-INF &gt; spring.factories</code></p><blockquote><p>References</p></blockquote><p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a><br><a href="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s11.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s11.html</a><br><a href="https://velog.io/@gillog/Spring-Annotation-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener">https://velog.io/@gillog/Spring-Annotation-정리</a><br><a href="https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html" target="_blank" rel="noopener">https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html</a><br><a href="https://bamdule.tistory.com/31" target="_blank" rel="noopener">https://bamdule.tistory.com/31</a><br><a href="https://imucoding.tistory.com/217" target="_blank" rel="noopener">https://imucoding.tistory.com/217</a><br><a href="https://toma0912.tistory.com/86" target="_blank" rel="noopener">https://toma0912.tistory.com/86</a><br><a href="https://tomining.tistory.com/180" target="_blank" rel="noopener">https://tomining.tistory.com/180</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-annotation&quot;&gt;&lt;a href=&quot;#spring-annotation&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-annotation&quot;&gt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="DI" scheme="http://gwanhyeon.github.io/tags/di/"/>
    
      <category term="Annotation" scheme="http://gwanhyeon.github.io/tags/annotation/"/>
    
      <category term="Bean" scheme="http://gwanhyeon.github.io/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Network URI(Uniform Resource Identifier) 정의 및 하위요소의 특징</title>
    <link href="http://gwanhyeon.github.io/Network-20210114-network-04-uri-url-urn/"/>
    <id>http://gwanhyeon.github.io/Network-20210114-network-04-uri-url-urn/</id>
    <published>2021-01-14T04:50:00.000Z</published>
    <updated>2021-01-14T09:10:00.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uri-uniform-resource-identifier"><a href="#uri-uniform-resource-identifier" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier"></a> URI(Uniform Resource Identifier)</h1><p>URI에 대한 개념을 살펴보기에 앞서서 국제 인터넷 표준화 기구(IETF)에 표준스펙으로 기재되어있는 URI,URL,URN의 개념에 대해서 알아보겠습니다.</p><p><a href="https://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="noopener">국제 인터넷 표준화 기구 IETF 1.1.3 URI 표준 스펙</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.1.3.  URI, URL, and URN</span><br><span class="line"></span><br><span class="line">`A URI can be further classified as a locator, a name, or both.`  The</span><br><span class="line">`term "Uniform Resource Locator" (URL) refers to the subset of URIs</span><br><span class="line">that, in addition to identifying a resource, provide a means of</span><br><span class="line">locating the resource by describing its primary access mechanism</span><br><span class="line">(e.g., its network "location").`  The term "Uniform Resource Name"</span><br><span class="line">(URN) has been used historically to refer to both URIs under the</span><br><span class="line">"urn" scheme [RFC2141], which are required to remain globally unique</span><br><span class="line">and persistent even when the resource ceases to exist or becomes</span><br><span class="line">unavailable, and to any other URI with the properties of a name.</span><br><span class="line"></span><br><span class="line">An individual scheme does not have to be classified as being just one</span><br><span class="line">of "name" or "locator".  Instances of URIs from any given scheme may</span><br><span class="line">have the characteristics of names or locators or both, often</span><br><span class="line">depending on the persistence and care in the assignment of</span><br><span class="line">identifiers by the naming authority, rather than on any quality of</span><br><span class="line">the scheme.  Future specifications and related documentation should</span><br><span class="line">use the general term "URI" rather than the more restrictive terms</span><br><span class="line">"URL" and "URN" [RFC3305].</span><br></pre></td></tr></table></figure><blockquote><p>국제 인터넷 표준화 기구 IETF 1.1.3 URI 표준 스펙 요약</p></blockquote><ol><li><p>국제 인터넷 표준화 기구(IETF)에 표준스펙으로 기재된 내용을 간략히 살펴보면 uri는 로케이터(locator), 이름(name)또는 둘다 추가로 분류 될 수 있습니다.</p></li><li><p>URL 이라는 용어는 리소스를 식별하는 것 이외에도 기본 Access 매커니즘을 설명하여 리소스를 찾는 수단을 제공하는 URI의 하위집합을 나타낸다고 표기되어있습니다.</p></li></ol><h1 id="uri-uniform-resource-identifier-yi-guseong"><a href="#uri-uniform-resource-identifier-yi-guseong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier의-구성"></a> URI(Uniform Resource Identifier)의 구성</h1><p>URI는 큰 상위 집합으로 내부에 URL(Resource Locator)와 URN(Resource Name)을 포함하고 있습니다.</p><blockquote><p>URL(Resource Locator)</p></blockquote><p><code>kgh://google.com:8080/member?userName=kgh#hello</code> 라는 URL이 있다고 가정하겠습니다.</p><table><thead><tr><th>URL 하위요소</th><th>의미</th></tr></thead><tbody><tr><td>kgh</td><td>scheme</td></tr><tr><td><a href="http://google.com:8080" target="_blank" rel="noopener">google.com:8080</a></td><td>authority</td></tr><tr><td>member</td><td>path</td></tr><tr><td>userName=kgh</td><td>query</td></tr><tr><td>hello</td><td>fragment</td></tr></tbody></table><blockquote><p>URN(Unifrom Resource Name)</p></blockquote><table><thead><tr><th>URN 하위요소</th><th>의미</th></tr></thead><tbody><tr><td>urn:google.com:user:kgh:hello</td><td>scheme</td></tr></tbody></table><h1 id="uri-uniform-resource-identifier-yimi"><a href="#uri-uniform-resource-identifier-yimi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier-의미"></a> URI(Uniform Resource Identifier) 의미</h1><blockquote><ol><li>Uniform</li></ol></blockquote><p>리소스를 식별하는 통일된 방식</p><blockquote><ol start="2"><li>Resource</li></ol></blockquote><p>자원, URI로 식별할 수 있는 모든것</p><blockquote><ol start="3"><li>Identifier</li></ol></blockquote><p>다른 항목과 구분하는데 필요한 정보</p><h1 id="url-uniform-resource-locator-gwa-urn-uniform-resource-name-yimi"><a href="#url-uniform-resource-locator-gwa-urn-uniform-resource-name-yimi" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#urluniform-resource-locator과-urnuniform-resource-name-의미"></a> URL(Uniform Resource Locator)과 URN(Uniform Resource Name) 의미</h1><p>URL은 Locator를 뜻하며 리소스가 있는 위치를 지정하고 URN은 Name을 뜻하여 리소스에 이름을 부여합니다.<br>즉, 위치는 변할 수 있지만, 이름은 변할 수 없습니다. 마치 우리가 도서관에서 하나의 책을 찾기 위해 isbn URN을 부여 받아 실제 리소스를 찾는다고 가정하면 urn:isbn:URN의 형식으로 나타낼 수 있습니다. 이때는 URN이름만으로는 실제 리소스를 찾는방법이 보편화 된것이 아닙니다.</p><h1 id="url-bunseog"><a href="#url-bunseog" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#url-분석"></a> URL 분석</h1><blockquote><p>Request URL:</p></blockquote><p><strong><a href="https://www.google.com/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5" target="_blank" rel="noopener">https://www.google.com/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5</a></strong></p><p>다음과 같은 구글에서 hello라고 친 결과에 따른 검색 URL이 있다고 가정하고 설명을 진행하겠습니다.</p><h3 id="url-munbeob"><a href="#url-munbeob" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#url-문법"></a> URL 문법</h3><p><strong>scheme://[userinfo@]host[:port][/path][?query][#fragment]</strong><br><a href="https://www.google.com:443/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5" target="_blank" rel="noopener">https://www.google.com:443/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5</a></p><p>URL의 기본형식은 위와 같이 구성되어있고, 이것을 URL을 표현하면 다음과 같습니다.</p><ul><li>프로토콜(https)</li><li>호스트명(<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>)</li><li>포트 번호(443) -  https는 443포트를 갖습니다.</li><li>패스(/search)</li><li>쿼리 파라미터(newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5)</li></ul><h3 id="url-scheme"><a href="#url-scheme" class="header-anchor">5.2. </a><a class="markdownIt-Anchor" href="#url-scheme"></a> URL Scheme</h3><p><code>scheme:</code>//[userinfo@]host[:port][/path][?query][#fragment]</p><blockquote><p>URL scheme</p></blockquote><ul><li>주로 프로토콜로 사용되며 프로토콜은 어떤 방식으로 자원에 접근할 것인가를 약속하는 규칙입니다. 예를 들면 80: http 포트, 443:https,  20,21: ftp포트를 사용합니다.</li><li>포트같은 경우는 주로 생략이 가능하며 google URL을 자세히 보시면 실제적으로는 포트 보이지 않는것을 확인 할 수 있습니다.</li><li>https같은 경우는 http에 보안이 추가된 프로토콜을 의미합니다.</li><li>https의 정의는 HTTPS(HyperText Transfer Protocol over Secure Socket Layer, HTTP over TLS, HTTP over SSL, HTTP Secure)는 월드 와이드 웹 통신 프로토콜인 HTTP의 보안이 강화된 버전으로 규정되어있습니다.</li></ul><h3 id="url-userinfo"><a href="#url-userinfo" class="header-anchor">5.3. </a><a class="markdownIt-Anchor" href="#url-userinfo"></a> URL userinfo</h3><p>scheme://<code>[userinfo@]</code>host[:port][/path][?query][#fragment]</p><ul><li>URL에 보통 사용자 정보를 포함해서 인증을 진행합니다. 하지만, 거의 잘 사용하지 않는것으로 알려져있습니다.</li></ul><h3 id="url-host"><a href="#url-host" class="header-anchor">5.4. </a><a class="markdownIt-Anchor" href="#url-host"></a> URL host</h3><p>scheme://[userinfo@]<code>host</code>[:port][/path][?query][#fragment]</p><ul><li>URL호스트는 호스트명을 의미하며 도메인명이나 IP주소를 직접 핸들링을 할 수 있습니다.</li></ul><h3 id="url-port"><a href="#url-port" class="header-anchor">5.5. </a><a class="markdownIt-Anchor" href="#url-port"></a> URL port</h3><p>scheme://[userinfo@]host<code>[:port]</code>[/path][?query][#fragment]</p><ul><li>포트번호를 담고있으며 특히 웹브라우저 상에서 접속시 포트정보를 담고있습니다. 일반적으로 URL에는 생략이 되어있으므로 대표적인 포트로는 http:80, https는 443포트를 가지고 있습니다.</li></ul><h3 id="url-path"><a href="#url-path" class="header-anchor">5.6. </a><a class="markdownIt-Anchor" href="#url-path"></a> URL path</h3><p>scheme://[userinfo@]host[:port]<code>[/path]</code>[?query][#fragment]</p><ul><li>리소스 경로(path)와 계층적인 구조를 가지고 있습니다.<br>하나의 예를 들어보면 <code>/user/image.jpg, /users, /user/1, user/item/12</code> 와 같은 경로를 가지는것을 확인할 수 있습니다.</li></ul><h3 id="url-query"><a href="#url-query" class="header-anchor">5.7. </a><a class="markdownIt-Anchor" href="#url-query"></a> URL query</h3><p>scheme://[userinfo@]host[:port][/path]<code>[?query]</code>[#fragment]</p><ul><li><p>URL query의 구조는 Map형식의 &lt;Key, Value&gt;로 구성되어있으며 ?로 시작되고 &amp;로 추가가 가능합니다.<br>예시: <code>www.127.0.0.1:8080/path/name=kgh&amp;id=1</code><br>name과 id는 Key가 되고 나머지 kgh와 1은 Value로 나타낼 수 있습니다.</p></li><li><p>보통 query parameter, query string으로 지칭하고 웹서버에 제공하는 파라미터나 문자형태로 제공됩니다.</p></li></ul><h3 id="url-fragment"><a href="#url-fragment" class="header-anchor">5.8. </a><a class="markdownIt-Anchor" href="#url-fragment"></a> URL fragment</h3><p>scheme://[userinfo@]host[:port][/path][?query]<code>[#fragment]</code></p><ul><li>fragment라고 불리어 오는 URL의 하위요소이며 html 내부 북마크 등에 사용됩니다. 하지만 이정보들은 서버에 전송되지는 않습니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;uri-uniform-resource-identifier&quot;&gt;&lt;a href=&quot;#uri-uniform-resource-identifier&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="uri" scheme="http://gwanhyeon.github.io/tags/uri/"/>
    
      <category term="url" scheme="http://gwanhyeon.github.io/tags/url/"/>
    
      <category term="urn" scheme="http://gwanhyeon.github.io/tags/urn/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Maximal Square</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210112-leetcode-maximal-square/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210112-leetcode-maximal-square/</id>
    <published>2021-01-12T06:39:19.000Z</published>
    <updated>2021-01-21T09:24:45.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-maximal-square"><a href="#leetcode-maximal-square" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#leetcode-maximal-square"></a> <a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener">leetcode maximal square</a></h1><h2 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2><p>Given an m x n binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg" alt="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg"></p><h3 id="example-1"><a href="#example-1" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: matrix = [[“1”,“0”,“1”,“0”,“0”],[“1”,“0”,“1”,“1”,“1”],[“1”,“1”,“1”,“1”,“1”],[“1”,“0”,“0”,“1”,“0”]]<br>Output: 4</p><h3 id="example-2"><a href="#example-2" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: matrix = [[“0”,“1”],[“1”,“0”]]<br>Output: 1</p><h3 id="example-3"><a href="#example-3" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: matrix = [[“0”]]<br>Output: 0</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>m == matrix.length<br>n == matrix[i].length<br>1 &lt;= m, n &lt;= 300<br>matrix[i][j] is ‘0’ or ‘1’.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1) dynamic programming : bottom up 방식으로 왼쪽 상단 모서리 값을 기준으로 정사각형을 만들수있는 값을 체크해나가는 규칙을 찾아내면서 최대 사각형의 넓이를 구할 수 있습니다.</li><li>(2) 왼쪽 상단 모서리의 값이 ‘1’ 즉, 포함가능한 값일 경우에 값을 캐시하여 구해줍니다.</li><li>가장 먼저 Math.min()함수를 이용하여 왼쪽하단, 우측상단의 대각선을 비교하고 왼쪽 상단의 모서리의 값중 최솟값구해줍니다.</li><li>그리고 최솟값+1을 해주는 이유는 최대 정사각형의 길이를 구해주기 위해서 입니다. 그리고 현재 값과 비교하여 길이의 최댓값을 갱신시켜줍니다.</li></ul><h3 id="dp-yesi"><a href="#dp-yesi" class="header-anchor">1.2.1. </a><a class="markdownIt-Anchor" href="#dp-예시"></a> DP 예시</h3><blockquote><p>Input value for matrix:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>다음과 같은 입력값이 들어왔을때, 어디서부터 기준을 잡고 들어가야할지를 고민해야합니다.<br>정사각형이라는 조건을 만족하기위해서는 <code>1 x 1, 2 x 2, 3 x 3 .... n x n의 범위</code>의 만족해야합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>(<span class="number">1</span>), <span class="number">0</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">2</span>), <span class="number">0</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>(<span class="number">1</span>), <span class="number">1</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>(<span class="number">2</span>), <span class="number">0</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><p>다음과 같이 전체의 경우중에 예시로 두가지 경우를 생각해보면 왼쪽상단의 모서리값을 기준으로 정사각형이 형성되는 규칙을 발견하실 수 있습니다. <code>하지만, 0이 하나라도 포함되어있으면 정사각형을 형성할 수 없습니다.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">1</span> <span class="number">1</span> ]</span><br><span class="line">[ <span class="number">1</span> <span class="number">1</span> ]</span><br></pre></td></tr></table></figure><p>의 경우를 살펴보면 해당 경우는 <code>최대 길이 2까지의 정사각형의 넓이 2*2</code>를 구할 수 있게됩니다. 이것의 규칙을 살펴보면 값의 최솟값 + 1의 값이 해당 정사각형의 길이를 나타내는 것을 알 수 있습니다.<br><code>즉,왼쪽하단의 값, 우측상단의값의 최솟값을 구하여 왼쪽 상단모서리의 값중에서 가장 최소인값의 + 1을 해주게 되면 오른쪽상단 모서리에 해당 범위에서 구할 수 있는 정사각형의 길이를 저장해나가면 계속해서 왼쪽상단의 모서리를 기준으로 비교하는 규칙을 발견</code>할 수 있습니다.</p><blockquote><p>answer :</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>시간복잡도</li></ol></blockquote><p>O(N*M)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_maximal_square_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        maximalSquare(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        maximalSquare(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="comment">//왼쪽 상단 모서리값을 기준으로 '1'을 포함하고 있을 경우</span></span><br><span class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 왼쪽하단, 우측상단의 대각선을 비교하고 왼쪽 상단의 모서리의 값중 최솟값구해줍니다. +1을 해주는 이유는 최대 정사각형의 길이를 구해주기 위해서 입니다.</span></span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i][j-<span class="number">1</span>] , dp[i-<span class="number">1</span>][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">                    answer = Math.max(dp[i][j], answer); <span class="comment">// update result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer*answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;leetcode-maximal-square&quot;&gt;&lt;a href=&quot;#leetcode-maximal-square&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcod
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="DP" scheme="http://gwanhyeon.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Single Number</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210112-leetcode-single-number/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210112-leetcode-single-number/</id>
    <published>2021-01-12T01:35:16.000Z</published>
    <updated>2021-01-12T01:46:25.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-leetcode-single-number"><a href="#riskodeu-leetcode-single-number" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-single-number"></a> <a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">릿코드 leetcode  Single Number</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.</p><p>Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: nums = [2,2,1]<br>Output: 1</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: nums = [4,1,2,1,2]<br>Output: 4</p><h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: nums = [1]<br>Output: 1</p><h3 id="constraints"><a href="#constraints" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>1 &lt;= nums.length &lt;= 3 * 104<br>-3 * 104 &lt;= nums[i] &lt;= 3 * 104<br>Each element in the array appears twice except for one element which appears only once.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li>Map을 사용하여 개수를 체크한 후 value값이 1인 경우 return 결과값을 도출하면 되는 간단한 문제였습니다.</li></ul><h1 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_single_number</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        singleNumber(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        singleNumber(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            m.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Integer key : m.keySet())&#123;</span><br><span class="line">            Integer value = m.get(key);</span><br><span class="line">            <span class="keyword">if</span>(value == <span class="number">1</span>)&#123;</span><br><span class="line">                answer = key;</span><br><span class="line">                System.out.println(key);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-leetcode-single-number&quot;&gt;&lt;a href=&quot;#riskodeu-leetcode-single-number&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Decode String</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210111-leetcode-decode-string/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210111-leetcode-decode-string/</id>
    <published>2021-01-11T12:36:09.000Z</published>
    <updated>2021-01-11T12:39:53.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-decode-string"><a href="#riskodeu-decode-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-decode-string"></a> <a href="https://leetcode.com/problems/decode-string/" target="_blank" rel="noopener">릿코드 Decode String</a></h1><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p><h3 id="example-1"><a href="#example-1" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: s = “3[a]2[bc]”<br>Output: “aaabcbc”</p><h3 id="example-2"><a href="#example-2" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: s = “3[a2[c]]”<br>Output: “accaccacc”</p><h3 id="example-3"><a href="#example-3" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3><p>Input: s = “2[abc]3[cd]ef”<br>Output: “abcabccdcdcdef”</p><h3 id="example-4"><a href="#example-4" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3><p>Input: s = “abc3[cd]xyz”<br>Output: “abccdcdcdxyz”</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3><p>1 &lt;= s.length &lt;= 30<br>s consists of lowercase English letters, digits, and square brackets ‘[]’.<br>s is guaranteed to be a valid input.<br>All the integers in s are in the range [1, 300].</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1) 모든 디코드 문자열값을 s의 길이 범위에 만족할때 while문을 진행합니다.</li><li>(2) 현재 문자가 숫자일 경우 value값을 업데이트 시켜줍니다. 단 자리수는 k가 양의 정수이기 때문에 2자리이상도 가능하나는 것입니다. 2자리이상의 값도 구해주기위해서 (value * 10 + c-‘0’)식을 통해 문자의 값들을 하나씩 정수로 구해주게 됩니다.</li><li>(3) 문자가 '['일 경우</li></ul><ul><li>재귀 함수를 호출하여 ']'를 만날때 까지 진행해줍니다. 즉, ‘[’    ‘]’ 의 값사이에 존재하는 값을 찾아서 반환시켜준다음 괄호앞에 존재하는 숫자의 개수 곱의수만큼을 추가하면서 진행을 합니다.</li></ul><blockquote><p>테스트케이스 예시</p></blockquote><p>3[a]2[bc] -&gt; return ‘aaa’ -&gt; aaa2[bc] -&gt; ‘bcbc’ return -&gt; aaabcbc 의 형태로 값을 반환시킬 수 있게 됩니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_DecodeString_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        decodeString(<span class="string">"3[a]2[bc]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">char</span> c= s.charAt(idx);</span><br><span class="line">            idx++;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">                String subStr = decodeString(s);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value; i++)&#123;</span><br><span class="line">                    sb.append(subStr);</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-decode-string&quot;&gt;&lt;a href=&quot;#riskodeu-decode-string&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#릿코드-decod
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
      <category term="문자열" scheme="http://gwanhyeon.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>릿코드 Longest Common Prefix</title>
    <link href="http://gwanhyeon.github.io/Leetcode-20210111-leetcode-longest-common-prefix/"/>
    <id>http://gwanhyeon.github.io/Leetcode-20210111-leetcode-longest-common-prefix/</id>
    <published>2021-01-11T12:31:34.000Z</published>
    <updated>2021-01-12T01:39:49.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="riskodeu-leetcode-longest-common-prefix"><a href="#riskodeu-leetcode-longest-common-prefix" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-longest-common-prefix"></a> <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">릿코드 leetcode  Longest Common Prefix</a></h1><h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3><p>Input: strs = [“flower”,“flow”,“flight”]<br>Output: “fl”</p><h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3><p>Input: strs = [“dog”,“racecar”,“car”]<br>Output: “”<br>Explanation: There is no common prefix among the input strings.</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><ul><li>(1)기준이 되는 문자열을 기준값으로 설정합니다. 예) str[0]</li><li>(2)indexOf 함수를 사용하여 값이 일치하면 0, 그게 아니라면 -1을 반환합니다.</li><li>(3)값이 일치할때까지 기준의 되는 문자열인 prefix을 뒤에서부터 하나씩 줄여나가면서 진행합니다.</li></ul><blockquote><p>Horizontal scanning 방식</p></blockquote><p>flower flow 의 값이 있다고 가정하면 flower 가 prefix로 설정되며 flower -&gt; flowe -&gt; flow 로 문자열을 자르게 되면서 같아지는 경우일때 루프를 빠져나옵니다.</p><p>이제 prefix값이 flow로 된 상태이므로 flow와 flight를 비교진행을 합니다. flow -&gt; flo -&gt; fl 로 진행하면서 flight의 [fl]과 값이 같으므로 해당 루프를 빠져나오면서 최종적으로 prefix 공통이 되는 문자열을 반환할 수 있습니다.</p><h1 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_Longest_Common_prefix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        longestCommonPrefix(<span class="keyword">new</span> String[]&#123;<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 기준이되는 prefix값과 일치할때까지 루프를 진행합니다.</span></span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 값을 뒤에서부터 하나씩 자르면서 비교해나갑니다.</span></span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 빈 상태에서 substring을 자르게되면 Error가 발생합니다.</span></span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;riskodeu-leetcode-longest-common-prefix&quot;&gt;&lt;a href=&quot;#riskodeu-leetcode-longest-common-prefix&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;m
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://gwanhyeon.github.io/categories/leetcode/"/>
    
    
      <category term="릿코드" scheme="http://gwanhyeon.github.io/tags/%EB%A6%BF%EC%BD%94%EB%93%9C/"/>
    
      <category term="문자열" scheme="http://gwanhyeon.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 문자열압축(카카오 2020 신입 공채)</title>
    <link href="http://gwanhyeon.github.io/Programmers-20210109-programmers-string-compression/"/>
    <id>http://gwanhyeon.github.io/Programmers-20210109-programmers-string-compression/</id>
    <published>2021-01-09T13:27:38.000Z</published>
    <updated>2021-01-09T13:46:13.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020"><a href="#peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-문자열압축-카카오신입-공채2020"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/60057" target="_blank" rel="noopener">프로그래머스 문자열압축 카카오신입 공채2020</a></h1><h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3><p>데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.<br>간단한 예로 aabbaccc의 경우 2a2ba3c(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, abcabcdede와 같은 문자열은 전혀 압축되지 않습니다. 어피치는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.</p><p>예를 들어, ababcdcdababcdcd의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 2ab2cd2ab2cd로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 2ababcdcd로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.</p><p>다른 예로, abcabcdede와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 abcabc2de가 되지만, 3개 단위로 자른다면 2abcdede가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.</p><p>압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.</p><h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3><p>s의 길이는 1 이상 1,000 이하입니다.<br>s는 알파벳 소문자로만 이루어져 있습니다.</p><h3 id="ibculryeog-ye"><a href="#ibculryeog-ye" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#입출력-예"></a> 입출력 예</h3><p>s    result<br>“aabbaccc”    7<br>“ababcdcdababcdcd”    9<br>“abcabcdede”    8<br>“abcabcabcabcdededededede”    14<br>“xababcdcdababcdcd”    17<br>입출력 예에 대한 설명</p><h3 id="ibculryeog-ye-1"><a href="#ibculryeog-ye-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#입출력-예-1"></a> 입출력 예 #1</h3><p>문자열을 1개 단위로 잘라 압축했을 때 가장 짧습니다.</p><h4 id="ibculryeog-ye-2"><a href="#ibculryeog-ye-2" class="header-anchor">1.4.1. </a><a class="markdownIt-Anchor" href="#입출력-예-2"></a> 입출력 예 #2</h4><p>문자열을 8개 단위로 잘라 압축했을 때 가장 짧습니다.</p><h3 id="ibculryeog-ye-3"><a href="#ibculryeog-ye-3" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#입출력-예-3"></a> 입출력 예 #3</h3><p>문자열을 3개 단위로 잘라 압축했을 때 가장 짧습니다.</p><h3 id="ibculryeog-ye-4"><a href="#ibculryeog-ye-4" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#입출력-예-4"></a> 입출력 예 #4</h3><p>문자열을 2개 단위로 자르면 abcabcabcabc6de 가 됩니다.<br>문자열을 3개 단위로 자르면 4abcdededededede 가 됩니다.<br>문자열을 4개 단위로 자르면 abcabcabcabc3dede 가 됩니다.<br>문자열을 6개 단위로 자를 경우 2abcabc2dedede가 되며, 이때의 길이가 14로 가장 짧습니다.</p><h3 id="ibculryeog-ye-5"><a href="#ibculryeog-ye-5" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#입출력-예-5"></a> 입출력 예 #5</h3><p>문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다.<br>따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다.<br>이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li>(1) 몇개 단위로 값을 자를것인지를 체크해야합니다. 문자열이 s일경우 압축이 되기위해서는 <code>(s의 길이 / 2)</code>까지만 <code>최대 압축</code>을 진행할 수 있습니다.</li><li>(2) <code>단위만큼 값을 증가</code>시키면서 이전 <code>문자열과 비교</code>하기 위한 문자열을 저장시킵니다.</li><li>(3) <code>저장된 문자열과 이전문자열이 같다면</code> 압축을 진행한것이므로 압축값을 증가시킵니다(+1)</li><li>(4) <code>저장된 문자열과 이전문자열이 같지 않다면</code> 더이상 압축할것이 없으므로 압축값들을 문자열로 저장시킵니다. (단, 압축된 개수가 1보다 클 경우만 개수를 추가하고 그게 아니라면 해당 문자열 자체만을 저장시킵니다.)</li><li>(5) 한번의 단위검색이 모두 끝났을 경우 현재 <code>compression에 담겨진 문자열의 길이와 answer(s의 길이와 비교)</code>를 통해 더 작은값으로 갱신을 진행합니다.</li></ul><blockquote><p>압축 예시</p></blockquote><p>a != b 경우이므로 aabbaccc의 문자열에서 로직이 진행되었다고 할때 b에서 부터 다시 단위만큼 진행해야하므로 compressionCnt값을 1로 초기화시키고 현재 b의 값을 compresssionFirst값에 갱신시켜줍니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><blockquote><p>문자열 압축 완전 탐색</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열압축 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="string">"aabbaccc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = s.length();</span><br><span class="line">        <span class="comment">// 자를 부분 문자의 개수</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=s.length()/<span class="number">2</span>; i++)&#123;</span><br><span class="line">            String compressionStr = <span class="string">""</span>;</span><br><span class="line">            String compFirst = s.substring(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">int</span> compressionCnt = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 단위만큼 크기를 증가시키며 이전 문자열과 비교</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;s.length(); j += i) &#123;</span><br><span class="line">                String compSecond = <span class="string">""</span>;</span><br><span class="line">                <span class="comment">// 단위만큼 값을 가져온다.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + i; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k &lt; s.length()) compSecond += s.charAt(k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 첫번째 기준값과 현재 나온 문자열의 값이 같다면 압축횟수 증가</span></span><br><span class="line">                <span class="keyword">if</span>(compFirst.equals(compSecond)) compressionCnt++;</span><br><span class="line">                <span class="comment">// 다른 문자열이 나왔던 경우라면(더 이상 압축하지 못하는 경우라면)</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 압축하는 부분 (숫자 + 문자열)</span></span><br><span class="line">                    <span class="keyword">if</span> (compressionCnt &gt; <span class="number">1</span>) compressionStr += (compressionCnt + compFirst);</span><br><span class="line">                    <span class="keyword">else</span> compressionStr += compFirst;</span><br><span class="line">                    compSecond = <span class="string">""</span>;</span><br><span class="line">                    <span class="comment">// 다음으로 진행하기전 현재 다른 문자열이 나온값을 비교값으로 설정</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; j + i; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k &lt; s.length()) compSecond += s.charAt(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 다음 로직 이동전 값 초기화 부분</span></span><br><span class="line">                    compFirst = compSecond;</span><br><span class="line">                    compressionCnt = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 맨 마지막에 압축된 결과값이 들어가지 않으므로 이부분을 통해 최종 결과값을 붙여줍니다.</span></span><br><span class="line">            <span class="keyword">if</span> (compressionCnt &gt; <span class="number">1</span>) compressionStr += (compressionCnt + compFirst);</span><br><span class="line">            <span class="keyword">else</span> compressionStr += compFirst;</span><br><span class="line">            <span class="comment">// 최솟값 갱신시켜줍니다.</span></span><br><span class="line">            answer = Math.min(answer, compressionStr.length());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020&quot;&gt;&lt;a href=&quot;#peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="Programmers" scheme="http://gwanhyeon.github.io/categories/programmers/"/>
    
    
      <category term="문자열" scheme="http://gwanhyeon.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
      <category term="프로그래머스" scheme="http://gwanhyeon.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Network PORT와 DNS(Domain Name System)</title>
    <link href="http://gwanhyeon.github.io/Network-20210109-network-03-port-dns/"/>
    <id>http://gwanhyeon.github.io/Network-20210109-network-03-port-dns/</id>
    <published>2021-01-09T05:58:26.000Z</published>
    <updated>2021-01-09T08:11:13.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="port"><a href="#port" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#port"></a> PORT</h1><p>네트워크 관련시간에 자주 들어보셨을 PORT에 대한 특징을 살펴보겠습니다.</p><p><code>클라이언트가 서버에게</code> <code>게임 서버, 메인 서버, 동영상 서버</code>에 접근한다고 가정해보겠습니다.<br>`클라이언트는 고유의 <em>IP:127.0.0.1</em> 를 가지고 있을때 서버 <em>IP:127.0.0.2</em> 에 <em>게임 서버, 메인 서버, 동영상 서버</em>에 요청으로 동시에 데이터를 가지고 오고 싶을때가 있을 것 입니다.</p><blockquote><p>그렇다면 클라이언트의 IP와 서버 IP만으로 어떤 서버에 어떤요청을 가져오는지가 가능할까요?</p></blockquote><p>즉, 한번에 두개이상의 서버를 호출해야한다면 IP로만 해결하기에는 어디서 온지 확인하기가 어렵게 됩니다. 그러면 어떻게 이것들을 구별하여 전송할 수 있을지 살펴보겠습니다.</p><h1 id="tcp-ip-paekis-jeongbo"><a href="#tcp-ip-paekis-jeongbo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#tcpip-패킷-정보"></a> TCP/IP 패킷 정보</h1><blockquote><p>IP 패킷</p></blockquote><p><em>출발지 IP ,목적지 IP, 기타 정보</em></p><blockquote><p>TCP 세그먼트</p></blockquote><p><em>출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증정보</em></p><p><code>IP패킷에는 가지고 있지않는 TCP 세그먼트</code>를 이용하여 <code>출발지 PORT와 목적지 PORT</code>를 가지게 되면서 같은 <code>IP에 고유의 포트를 지정하면서 전송</code>을 보낼 수 있게됩니다.</p><h1 id="paekis-jeongbo"><a href="#paekis-jeongbo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#패킷-정보"></a> 패킷 정보</h1><blockquote><p>TCP/IP<br>이제 데이터 전송시에 <code>출발지 IP,목적지 IP(IP 프로토콜)</code>과 <code>출발지 PORT, 목적지 PORT(TCP 세그먼트)</code>를 함께 보내게 되면서 <code>같은 IP내에서 프로세스를 구분</code>할 수 있게되었습니다.</p></blockquote><blockquote><p>TCP/IP 통신 예제</p></blockquote><ul><li>출발지 IP 127.0.0.1 , 목적지 IP 127.0.0.2</li><li><code>게임 서버 출발지 포트 9000 , 목적지 포트 12000</code></li><li><code>메인 서버 출발지 포트 8080 , 목적지 포트 8090</code></li><li><code>동영상 서버 출발지 포트 21000, 목적지 포트 22000</code></li></ul><p><code>게임서버</code>로 <code>127.0.0.1의 IP 출발지 포트 9000번</code>에서 <code>127.0.0.2 목적지 포트 12000번</code>으로 데이터 전송이 가능합니다.</p><p><code>메인서버</code>는 <code>127.0.0.1 IP 출발지 포트 8080번</code>에서 <code>127.0.0.2 목적지 포트 8090</code>으로 통신을 주고받을 수 있게 됩니다.</p><p><code>동영상 서버</code>의 경우 <code>127.0.0.1 21000번 포트</code>에서 목적지 포트 <code>127.0.0.2 22000번 포트</code>로 통신을 가능하게 할 수 있습니다.</p><p>결론적으로, 포트를 사용하게되면 이렇게 다양한 같은 아이피와의 구별점이 생겨 통신하는데에 있어서 <code>프로세스를 구분</code>할 수 있게 됩니다. 쉽게 생각하면 IP는 하나의 아파트 동을 나타내고 PORT는 동호수를 나타낸다고 생각하면 매우 쉽습니다.</p><h1 id="portyi-teugjing"><a href="#portyi-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#port의-특징"></a> PORT의 특징</h1><ul><li><code>0~65535</code>: 포트 할당이 가능합니다.</li><li><code>0~1023</code>: 잘 알려진 포트로 대부분 포트가 <code>사용중일 가능성</code>이 있기때문에 사용하지 않는것을 권장드립니다.</li></ul><blockquote><p>대표적인 PORT 번호</p></blockquote><ul><li>FTP 20,21</li><li>TELNET 23</li><li>HTTP 80</li><li>HTTPS 443<br>대표적인 포트로는 위의 포트 번호처럼 이미 할당이 되어있습니다.</li></ul><h1 id="dns-domain-name-system"><a href="#dns-domain-name-system" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#dnsdomain-name-system"></a> DNS(Domain Name System)</h1><p>자, 이제 여기까지 살펴보면 IP,PORT를 통해 데이터 통신의 프로세스를 구분할 수 있다는것을 알 수 있었습니다.</p><blockquote><p>하지만 매번 클라이언트와 서버쪽에서 IP를 기억하고 있다가 매번 전송을 해야할까요?</p></blockquote><p>기억하고 있기에는 매우많은 IP를 가지고 있습니다. 또한, 과거와 현재 쓰이는 IP는  쉽게 변경이 가능합니다. 이것의 문제점을 해결하기 위해 나온것이 바로 <code>DNS(Domain Name System) 도메인 네임시스템</code>이라고 이라고합니다. 즉 하나의 전화번호부처럼 사용할 수 있고, 도메인명을 IP 주소로 변환하여 사용이 가능합니다.</p><h1 id="dns-domain-name-system-eun-eoddeohge-dongjaghage-doelggayo"><a href="#dns-domain-name-system-eun-eoddeohge-dongjaghage-doelggayo" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#dnsdomain-name-system은-어떻게-동작하게-될까요"></a> DNS(Domain Name System)은 어떻게 동작하게 될까요?</h1><p>만약 저희가 <code>www.google.com</code>의 <code>도메인명</code>을 가지고 <code>서버에 요청</code>을 한다고 가정해보겠습니다.</p><ol><li><code>도메인명</code>을 바탕으로 <code>DNS서버에서 해당 도메인을 가지고 있는 IP를 전달</code>받습니다.</li><li><code>클라이언트</code>는 <code>DNS서버로 부터 응답받은 목적지 IP를 바탕으로 해당 서버에 접속</code>하게 됩니다.</li></ol><h1 id="jeongri"><a href="#jeongri" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#정리"></a> 정리</h1><p>지금까지 포스팅한 내용들을 살펴보면 <code>인터넷 통신이 어떻게 구조</code>를 이루고 있는지와 <code>IP(Internet protocal)이 어떻게 통신되고 장단점</code>이 무엇인지를 살펴보았습니다.<br>그리고 <code>IP의 문제점들을 해결</code>하기 위해 나온 <code>TCP/IP(TCP,UDP)의 동작원리</code>를 배울 수 있었습니다.마지막으로 이번장에 정리한 <code>PORT가 필요한 이유와 DNS 서버 동작</code>에 대해서 정리해보았습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;port&quot;&gt;&lt;a href=&quot;#port&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#port&quot;&gt;&lt;/a&gt; PORT&lt;/h1&gt;
&lt;p&gt;네트워크 관련시간에 자주 들어보셨을 P
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="NETWORK" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="PORT" scheme="http://gwanhyeon.github.io/tags/port/"/>
    
      <category term="DNS" scheme="http://gwanhyeon.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>Network TCP와 UDP</title>
    <link href="http://gwanhyeon.github.io/Network-20210108-network-02-tcp-udp/"/>
    <id>http://gwanhyeon.github.io/Network-20210108-network-02-tcp-udp/</id>
    <published>2021-01-08T05:58:26.000Z</published>
    <updated>2021-01-08T07:56:20.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inteones-peurotokolyi-4gyeceung"><a href="#inteones-peurotokolyi-4gyeceung" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#인터넷-프로토콜의-4계층"></a> 인터넷 프로토콜의 4계층</h1><p><code>인터넷 프로토콜의 4계층</code>에 대해서 살펴보겠습니다.</p><table><thead><tr><th>계층</th><th>프로토콜</th></tr></thead><tbody><tr><td>애플리케이션 계층</td><td>HTTP, FTP</td></tr><tr><td>전송 계층</td><td>TCP,UDP</td></tr><tr><td>인터넷 계층</td><td>IP</td></tr><tr><td>네트워크 인터페이스 계층</td><td>Empty</td></tr></tbody></table><p><code>인터넷 프로토콜은</code> 해당 <code>총 4개의 계층</code>으로 이루어져있고 <code>애플리케이션 계층, 전송계층, 인터넷계층, 네트워크 인터페이스 계층</code> 으로 구성되어있습니다.</p><h1 id="peurotokol-gyeceung"><a href="#peurotokol-gyeceung" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#프로토콜-계층"></a> 프로토콜 계층</h1><ul><li><p>애플리케이션<br><code>애플리케이션 계층</code>은 <code>웹 브라우저(크롬), 네트워크 , 게임, 채팅 프로그램</code>으로 구성되어있습니다. 그리고 <code>Socket 라이브러리</code>로 구성되어 있습니다.</p></li><li><p>OS(Operation System)<br>OS계층은 <code>TCP, UDP, IP(Internet Protocal)</code> 로 구성되어 있습니다.</p></li><li><p>네트워크 인터페이스<br>LAN 드라이버, LAN 장비, LAN카드</p></li></ul><p><code>네트워크 인터페이스</code>에서 <code>LAN카드</code>를 통해 <code>인터넷에 접근</code>하게 되고 <code>서버에 전송을 진행</code>하게 됩니다.</p><blockquote><p>전송 과정</p></blockquote><ol><li>애플리케이션 계층에서 클라이언트가 <code>&quot;Request Message&quot;</code> <code>메시지를 생성</code>시킵니다.</li><li>애플리케이션 계층에서 해당 메시지들을 <code>Socket라이브러</code>를 통해 전달이 됩니다.</li><li>OS계층에서 <code>TCP 정보를 생성</code>하여 <code>TCP세그먼트를 씌워 메시지 데이터를 포함</code>시킵니다.</li><li>OS계층에서 <code>IP 패킷이 생성되고 TCP데이터를 포함</code>시킵니다.</li><li>네트워크 인터페이스 계층에서 <code>패킷 단위</code>로 <code>LAN 카드 장비</code>를 통해 인터넷(물리적정보에) 접속하게 되어 해당 찾고자하는 <code>서버에 요청</code>을 보내게 됩니다.</li></ol><h1 id="ip-paekis-jeongbo"><a href="#ip-paekis-jeongbo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#ip-패킷-정보"></a> IP 패킷 정보</h1><p><code>패킷정보는</code> <code>출발지 IP랑 목적지 IP, 기타</code> 등등의 값을 가지고 해당 <code>전송데이터를 패킷</code>으로 감싸주는 형태로 진행됩니다.</p><h1 id="tcp-ip-paekis-jeongbo"><a href="#tcp-ip-paekis-jeongbo" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#tcpip-패킷-정보"></a> TCP/IP 패킷 정보</h1><ul><li><code>IP 패킷: 출발지 IP, 목적지 IP, 기타 데이터</code></li><li><code>TCP 세그먼트: 출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증 정보</code></li></ul><p>IP패킷안에 <code>TCP세그먼트를 감싸고</code> 그안에 <code>전송데이터</code>를 담아서 <code>네트워크상에 전송</code>되게 됩니다.<br>즉, <code>IP만으로는 해결할 수 없었던 출발지,목적지 PORT번호</code>가 있기때문에 <code>전송제어나 순서보장, 검증정보를 통해 문제점들을 해결</code> 할 수 있게 되었습니다.</p><h1 id="tcp-transmission-control-protocal"><a href="#tcp-transmission-control-protocal" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#tcptransmission-control-protocal"></a> TCP(Transmission Control Protocal)</h1><p><code>TCP(Transmission Control Protocal)</code>는 <code>전송 제어 프로토콜</code>이라고 불리어 오며 특징들에 대해서 살펴보도록 하겠습니다.</p><ol><li>연결지향 - <code>TCP 3 Way handshake(가상 연결)</code><br>개념적으로만 연결된 것을 의미합니다.</li><li>데이터 전달 보증<br><code>패킷 누락시 메시지를 못받는지를 알 수 있습니다.</code> 데이터가 전송되고 데이터가 잘 받았는지를 확인할 수 있습니다.</li><li>순서 보장<br><code>순서를 보장해줍니다.</code></li></ol><blockquote><p>예시</p></blockquote><p><code>패킷1,패킷2,패킷3을 순서대로 보낸다고 가정</code>하면 패킷을 보내다가 노드의 의 접근이 바뀌어 <code>순서가 정확하게 오지 않았을 경우</code> 서버에서 해당 순서를 확인하여 잘못되었음을 판단을 하게 됩니다. 이때, 순서가 잘못 들어온 <code>패킷이 3번</code>이라고 가정하면 해당되는 <code>패킷의 순서</code>부터 다시 <code>재전송을 요청</code>하게 됩니다. 즉, 최적화를 내부적으로 진행할 수 있습니다.</p><ol start="4"><li>신뢰할 수  있는 프로토콜<br>현재는 <code>TCP가 대부분의 전송</code>에 있어서 사용되고 있으며 <code>매우 중요한 개념</code>입니다.</li></ol><h1 id="tcp-3way-handshake"><a href="#tcp-3way-handshake" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#tcp-3way-handshake"></a> TCP 3way handshake</h1><ul><li><code>SYN:</code> 접속을 요청합니다.</li><li><code>ACK:</code> 요청을 수락합니다.</li></ul><ol><li>클라이언트가 서버에게 <code>SYN(Syncronized)의 connect 연결과정을 요청</code>합니다.</li><li>서버는 해당 클라이언트부터 SYN을 전송받고 클라이언트에게 <code>SYN+ACK(연결 상태)</code>를 함께 전송합니다.</li><li>클라이언트는 서버로 부터 해당 <code>SYN+ACK(연결상태)를 전송받고 다시 서버에게 잘 받았다는 의미로 ACK</code>을 전송시켜주게 됩니다.</li><li>해당 <code>ACK을 전송받은 서버</code>는 이때 잘 연결되었다는 의미로 알고 <code>데이터를 전송</code>시켜줍니다.</li></ol><p>이러한 <code>3way-handshake과정은</code> 클라이언트와 서버의 신뢰관계(연결 상태를 확인)하는 과정을 진행하는 것이라고 생각하시면 됩니다.</p><h1 id="udp-user-datagram-protocal"><a href="#udp-user-datagram-protocal" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#udpuser-datagram-protocal"></a> UDP(User Datagram Protocal)</h1><p><code>UDP(User Datagram Protocal)는</code> <code>사용자 데이터그램 프로토콜</code>이라고 불리어옵니다.</p><p>TCP와 매우 대조적인 특징을 가지고 있는데 살펴보겠습니다.</p><ol><li>연결지향 - TCP와는 다르게 TCP 3 way-handshake가 없습니다.</li><li>데이터 전달 보증이 되지 않습니다.</li><li>순서가 보장되지 않습니다.</li><li>데이터 전달 및 순서가 보장되지 않지만 매우 단순하고 빠른 특징을 가지고 있습니다.</li></ol><p>즉, IP와 유사하지만 <code>UDP에는</code> <code>PORT와 체크섬(Checksum)</code>이 존재하게 됩니다. <code>체크섬(Checksum)은</code> <code>메시지의 검증 데이터</code>를 일컫는 말입니다. 그리고 애플리케이션에서 추가작업이 필요로 될 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;inteones-peurotokolyi-4gyeceung&quot;&gt;&lt;a href=&quot;#inteones-peurotokolyi-4gyeceung&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="NETWORK" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="TCP" scheme="http://gwanhyeon.github.io/tags/tcp/"/>
    
      <category term="UDP" scheme="http://gwanhyeon.github.io/tags/udp/"/>
    
  </entry>
  
</feed>
