<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gwanhyeon IT Blog</title>
  
  <subtitle>Gwanhyeon IT Blog</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2024-08-01T15:05:10.355Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>gwanhyeon Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>카카오 맵 API 연동 트러블 슈팅</title>
    <link href="http://gwanhyeon.github.io/Infra-20240801-server-kakao-map-api/"/>
    <id>http://gwanhyeon.github.io/Infra-20240801-server-kakao-map-api/</id>
    <published>2024-08-01T14:39:06.000Z</published>
    <updated>2024-08-01T15:05:10.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kakao-map-api-teureobeul-syuting"><a href="#kakao-map-api-teureobeul-syuting" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#kakao-map-api-트러블-슈팅"></a> KAKAO MAP API 트러블 슈팅</h1><p>이번 시간에는 실무에서 카카오맵 API를 사용하면서 있었던 트러블 슈팅과정에 대해서 설명해보겠습니다.</p><h1 id="trouble"><a href="#trouble" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#trouble"></a> Trouble</h1><p>현재 운영중인 서비스에서는 카카오맵을 사용한 데이터처리를 하고 있는중이다. 현재 AOS/IOS 웹뷰를 통해서 카카오맵 API를 사용중에 있으며 어느 순간 개발계쪽에 iOS 환경에서 API 호출이 원활하게 이루어지지 않은 상황이 생겼습니다. 해당되는 API를 호출하면서 스크립트를 로드하지 못하는 상황이었습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;https://dapi.kakao.com/v2/maps/sdk.js?appkey=&#123;javascript app key&#125;&amp;libraries=services,clusterer,drawing&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="shooting"><a href="#shooting" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#shooting"></a> Shooting</h1><p>시도해본 해결 방법은 다음과 같습니다.</p><ol><li>API 키 문제</li></ol><ul><li>AOS환경에서는 정상호출이 되고 있던 상황이었기때문에, API 키 문제를 배제하였습니다.</li></ul><ol start="2"><li>호출 URL 문제</li></ol><ul><li>kakao developer에 기재되어 있는 API 호출방식을 직접 처리하고 테스트했을때 문제가 발생하지 않았습니다.</li></ul><ol start="3"><li>웹플랫폼 Inbound IP 허용 규칙 문제</li></ol><ul><li>인바운드 IP 허용 규칙이라기엔, 현재 운영중인 개발계, 운영계가 인바운드 규칙에 맞게 적용되어 있었습니다.</li></ul><ol start="4"><li>도메인 허용 문제</li></ol><ul><li>도메인도 정상적으로 등록되어 호출까지 정상적으로 처리되는것을 확인하였습니다.</li></ul><ol start="5"><li>프로토콜 확인</li></ol><ul><li>http, https, file 명시적 호출을 진행했습니다.</li></ul><ol start="6"><li>스크립트 로드</li></ol><ul><li>비동기통신으로 script load</li></ul><p>이 문제를 해결하기 위해 6가지의 상황으로 해결을 시도해보았지만, 원인을 알 수 없어 직접 kakao developer 에 문의를 남기게 되었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">지도호출이 성공한 케이스는 앱 정보에 정상적으로 등록한 도메인 ([https:<span class="comment">//s](https://s/)* 로 시작하는) 으로부터 호출로 보이고 호출이 실패한 케이스는 앱정보에 등록되지 않은 도메인 ([http://172](http://0.0.0.172/).* 로 시작하는) 으로부터의 호출입니다.</span></span><br><span class="line">해당 앱정보를 확인하니 호출이 발생하는 IP 가 앱설정 &gt; 플랫폼 &gt; Web 에는 없으나 고급설정 &gt; 허용 서버 IP 주소 에는 포함된 것으로 보입니다.</span><br><span class="line">도메인이 없는 IP 형식이라도 Javascript 지도를 호출하기 위해서는 플랫폼 &gt; Web 정보에 포함되어 있어야 합니다.</span><br><span class="line">허용 서버 IP 주소는 REST API 등을 서버 to 서버 호출 시 제한하기 위한 목적입니다.</span><br></pre></td></tr></table></figure><p>문의 결과 다음과 같은 답변을 받을 수 있었고, 웹 플랫폼쪽에 등록된 inbound 규칙을 다시 확인하게 되었습니다. 도메인은 정상 등록되어있었지만, 직접 호출하는 웹서버(172.x.x.x)에 대한 규칙은 빠져있는것을 확인하였습니다.<br>이 <a href="https://172.x.x.xn--x-pq6f">https://172.x.x.x에</a> 대한 도메인을 직접 추가해주고 나서야 해당되는 kakao map API를 정상 호출하는것을 확인 할 수 있었습니다.</p><p>직접 카카오쪽에 문의를 하여 답변을 얻고 문의를 계속해나가면서 해결해나갈 수 있었고 여러 인바운드, 도메인 허용 규칙에 대해서 한번더 생각해볼 수 있던 기회가 되었습니다… 타사의 API를 사용하여 서비스를 구현할때는 여러가지 고려해야할 요소가 많다는것을 깨닫게 된 트러블 슈팅이었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kakao-map-api-teureobeul-syuting&quot;&gt;&lt;a href=&quot;#kakao-map-api-teureobeul-syuting&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Infra" scheme="http://gwanhyeon.github.io/categories/server/infra/"/>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/tags/server/"/>
    
      <category term="API" scheme="http://gwanhyeon.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Network NAS 마운트</title>
    <link href="http://gwanhyeon.github.io/Network-20240729-network-nas/"/>
    <id>http://gwanhyeon.github.io/Network-20240729-network-nas/</id>
    <published>2024-07-29T14:05:16.000Z</published>
    <updated>2024-07-29T14:23:53.771Z</updated>
    
    <content type="html"><![CDATA[<p>실무에서 개발을 하다보면 파일 시스템(File System) NAS와 마운트하여 WAS와 NAS간 네트워크 공유를 설정하여 데이터에 접근을 하게됩니다.</p><p>파일 시스템에 접근하는 방식은 크게 네가지로 들 수 있습니다.</p><ol><li><strong>NAS 마운트</strong>:<br>NAS 서버의 파일 시스템을 WAS 서버에 마운트하여 로컬 파일 시스템처럼 사용하는 것입니다. 이를 위해 NFS(Network File System) 또는 SMB(Server Message Block)와 같은 프로토콜을 사용하여 NAS 공유를 WAS 서버에 마운트합니다.</li><li><strong>네트워크 공유</strong>:<br>NAS서버에서 파일 공유하고 WAS 서버에서 해당 자원에 접근하게 됩니다. 이를 위해 WAS 서버에서 NAS 공유에 대한 네트워크 경로 및 인증정보를 통해서 접근합니다.</li><li><strong>FTP 또는 SCP 등의 프로토콜 사용</strong>:<br>NAS 서버에서 FTP(File Transfer Protocol) 또는 SCP(Secure Copy Protocol)와 같은 프로토콜을 사용하여 파일을 WAS 서버로 전송할 수 있습니다. 고전적인 배포방식에서 jar, war 파일을 직접 scp로 접근하여 처리하게 하는 시스템도 다수 있습니다.</li><li><strong>웹 서비스를 통한 접근</strong>:<br>NAS 서버에서 웹 서비스를 실행하여 WAS 서버에서 HTTP 또는 HTTPS를 통해 리소스에 접근하게 됩니다.</li></ol><h1 id="nfsreul-tonghan-nas-maunteu"><a href="#nfsreul-tonghan-nas-maunteu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#nfs를-통한-nas-마운트"></a> NFS를 통한 NAS 마운트</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nfs-common</span><br><span class="line">sudo mount -t nfs [NAS_IP]:[공유_디렉토리_경로] [로컬_마운트_폴더]</span><br><span class="line"></span><br><span class="line">ex) sudo mount -t nfs 192.168.1.100:/sharedFileDirectory /mnt/nas</span><br><span class="line"></span><br><span class="line">/sharedFileDirectory 공유 디렉터리에서 /mnt/nas 로컬 경로에 마운트</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="smbreul-tonghan-nas-maunteu"><a href="#smbreul-tonghan-nas-maunteu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#smb를-통한-nas-마운트"></a> SMB를 통한 NAS 마운트</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cifs-utils</span><br><span class="line"></span><br><span class="line">sudo mount -t cifs //192.168.1.100/shared /mnt/cifs -o username=gwanhyeon,password=1234,uid=1000,gid=1000</span><br><span class="line"></span><br><span class="line">NAS IP 주소가 192.168.1.100이고, 공유 이름이 shared이며, 로컬 시스템에서는 /mnt/cifs 폴더에 마운트하고 싶다고 가정합시다. 사용자 이름은 gwanhyeon이고 비밀번호는 1234이며, 로컬 사용자 ID와 그룹 ID는 각각 1000 이라는 의미를 갖습니다.</span><br></pre></td></tr></table></figure><h1 id="manyag-yeoreogaeyi-naseu-gyeongroga-jonjaehal-gyeonguneun-eoddeohge-halgga"><a href="#manyag-yeoreogaeyi-naseu-gyeongroga-jonjaehal-gyeonguneun-eoddeohge-halgga" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#만약-여러개의-나스-경로가-존재할-경우는-어떻게-할까"></a> 만약 여러개의 나스 경로가 존재할 경우는 어떻게 할까?</h1><p>glusterfs를 설치하여 해당되는 나스 경로를 볼륨 클러스터를 생성해줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install glusterfs-server -y</span><br><span class="line">sudo gluster peer probe nas2</span><br><span class="line">sudo gluster peer probe nas3</span><br><span class="line">sudo gluster volume create gv0 replica 3 nas1:/data nas2:/data nas3:/data force</span><br><span class="line">sudo gluster volume start gv0</span><br><span class="line"></span><br><span class="line">gv0의 볼륨을 생성한 후 /data 각 서버의 디렉터리이며 모든 파일이 3개의 서버에 복제시킨다는 의미입니다.</span><br></pre></td></tr></table></figure><p>클라이언트에서 sudo mount -t glusterfs nas1:/gv0 /mnt/glusterfs 의 명령어로 볼륨을 마운트 할 수 있습니다.</p><blockquote><p>참고</p></blockquote><p>윈도우에서는 기본적으로 NFS를 지원하지 않기 때문에 클라이언트 소프트웨어를 직접 설치하여 사용해야합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;실무에서 개발을 하다보면 파일 시스템(File System) NAS와 마운트하여 WAS와 NAS간 네트워크 공유를 설정하여 데이터에 접근을 하게됩니다.&lt;/p&gt;
&lt;p&gt;파일 시스템에 접근하는 방식은 크게 네가지로 들 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Network" scheme="http://gwanhyeon.github.io/categories/network/"/>
    
    
      <category term="network" scheme="http://gwanhyeon.github.io/tags/network/"/>
    
      <category term="nas" scheme="http://gwanhyeon.github.io/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 crontab 스케줄링</title>
    <link href="http://gwanhyeon.github.io/Infra-20240610-linux-crontab/"/>
    <id>http://gwanhyeon.github.io/Infra-20240610-linux-crontab/</id>
    <published>2024-06-10T14:52:34.000Z</published>
    <updated>2024-07-24T15:00:06.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crontab-jeongyi"><a href="#crontab-jeongyi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#crontab-정의"></a> Crontab 정의</h1><ul><li><code>crontab</code>은 리눅스 및 유닉스 계열 운영체제에서 주기적으로 명령어나 스크립트를 실행하기 위해 사용하는 스케줄링 도구입니다.</li><li><code>cron</code>은 시스템의 백그라운드에서 동작하며, 정해진 시간과 주기에 따라 사용자나 시스템의 작업을 자동으로 수행합니다.</li><li><code>crontab</code>은 이러한 작업을 설정하고 관리하는 데 사용되는 파일 또는 명령어를 의미합니다.</li><li>주로 시스템 Batch 시스템에 사용되며 <code>crontab</code>을 사용하면 시스템 관리 및 반복 작업을 자동화 할 수 있습니다.</li></ul><h3 id="1-gibon-gaenyeomgwa-gujo"><a href="#1-gibon-gaenyeomgwa-gujo" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#1-기본-개념과-구조"></a> 1. <strong>기본 개념과 구조</strong></h3><p><code>crontab</code> 파일에는 작업 스케줄과 실행할 명령어가 포함되어 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* * * * * command</span><br><span class="line">┬ ┬ ┬ ┬ ┬</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ └─ 요일 (0-7, 0과 7은 일요일)</span><br><span class="line">│ │ │ └── 월 (1-12)</span><br><span class="line">│ │ └─── 일 (1-31)</span><br><span class="line">│ └──── 시 (0-23)</span><br><span class="line">└───── 분 (0-59)</span><br></pre></td></tr></table></figure><ul><li><code>*</code> (별표)는 모든 가능한 값을 의미합니다.</li><li>숫자는 해당 시간/날짜에 작업을 실행함을 의미합니다.</li><li><code>command</code>는 실행할 명령어 또는 스크립트를 나타냅니다.</li></ul><p>예를 들어, <code>0 2 * * * /path/to/backup.sh</code>는 매일 오전 2시에 <code>backup.sh</code> 스크립트를 실행합니다.</p><h3 id="2-crontab-myeongryeongeo"><a href="#2-crontab-myeongryeongeo" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#2-crontab-명령어"></a> 2. <strong>crontab 명령어</strong></h3><p><code>crontab</code> 명령어를 사용하여 작업을 관리할 수 있습니다.</p><ul><li><code>crontab -e</code>: 현재 사용자의 <code>crontab</code> 파일을 편집합니다. 기본 텍스트 편집기가 열리며, 여기서 작업을 추가하거나 수정할 수 있습니다.</li><li><code>crontab -l</code>: 현재 사용자의 <code>crontab</code>을 목록으로 표시합니다.</li><li><code>crontab -r</code>: 현재 사용자의 <code>crontab</code>을 삭제합니다.</li><li><code>crontab -u username -e</code>: 다른 사용자의 <code>crontab</code>을 편집합니다(관리자 권한 필요).</li></ul><h3 id="3-seukejul-hyeongsig-yesi"><a href="#3-seukejul-hyeongsig-yesi" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#3-스케줄-형식-예시"></a> 3. <strong>스케줄 형식 예시</strong></h3><ul><li><code>0 0 * * *</code> : 매일 자정(00:00)에 실행.</li><li><code>*/5 * * * *</code> : 매 5분마다 실행.</li><li><code>0 9 * * 1-5</code> : 월요일부터 금요일까지 매일 아침 9시에 실행.</li><li><code>0 0 1 * *</code> : 매월 1일 자정에 실행.</li></ul><h3 id="4-teugbyeol-munjayeol"><a href="#4-teugbyeol-munjayeol" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#4-특별-문자열"></a> 4. <strong>특별 문자열</strong></h3><p><code>crontab</code>은 특별 문자열을 지원하여 일반적인 스케줄링을 더 쉽게 설정할 수 있습니다.</p><ul><li><code>@reboot</code>: 시스템이 부팅될 때마다 실행.</li><li><code>@daily</code> 또는 <code>@midnight</code>: 매일 자정에 실행.</li><li><code>@hourly</code>: 매 시간 정각에 실행.</li><li><code>@weekly</code>: 매주 일요일 자정에 실행.</li><li><code>@monthly</code>: 매월 1일 자정에 실행.</li><li><code>@yearly</code> 또는 <code>@annually</code>: 매년 1월 1일 자정에 실행.</li></ul><h3 id="5-hwangyeong-byeonsuwa-culryeog"><a href="#5-hwangyeong-byeonsuwa-culryeog" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#5-환경-변수와-출력"></a> 5. <strong>환경 변수와 출력</strong></h3><p><code>crontab</code>에서 사용되는 명령어는 사용자의 환경 변수를 따릅니다. 필요 시 명시적으로 설정해야 합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * /path/to/script.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>위 예시에서 <code>&gt; /dev/null 2&gt;&amp;1</code>는 모든 출력과 오류를 무시할 수 있습니다. 특히 find 명령어를 사용할때 Permission 권한으로 인한 여러 출력오류를 나타나지 않게 할 수 있습니다.</p><p>주로 다양한 배치시스템이 백오피스나 매일, 매주, 매달마다 집계가 필요한 시스템 쿼리를 사용해야할 경우, crontab을 사용하면 효율적으로 관리가 가능합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;crontab-jeongyi&quot;&gt;&lt;a href=&quot;#crontab-jeongyi&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#crontab-정의&quot;&gt;&lt;/a&gt; Cronta
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Infra" scheme="http://gwanhyeon.github.io/categories/server/infra/"/>
    
    
      <category term="Infra" scheme="http://gwanhyeon.github.io/tags/infra/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 WEB WAS는 어떻게 동작할까?</title>
    <link href="http://gwanhyeon.github.io/Infra-20240524-linux-was-web-workflow/"/>
    <id>http://gwanhyeon.github.io/Infra-20240524-linux-was-web-workflow/</id>
    <published>2024-05-24T13:35:27.000Z</published>
    <updated>2024-07-24T14:59:18.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-wasyi-dongjaggwajeong"><a href="#web-wasyi-dongjaggwajeong" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#web-was의-동작과정"></a> WEB WAS의 동작과정</h1><ol><li><p>클라이언트 요청 수신<br>웹 서버는 클라이언트로부터 HTTP 요청을 받습니다. 이 요청은 주로 웹 브라우저를 통해 발생합니다.</p></li><li><p>요청 분석<br>웹 서버는 받은 요청을 분석하여 요청된 자원 및 요청 방식(CRUD)를 확인합니다.</p></li><li><p>정적 자원 처리<br>요청된 자원이 정적인 경우(이미지 파일) 웹 서버 자체적으로 자원을 찾아냅니다.</p></li><li><p>동적 자원 처리<br>요청된 자원이 동적인 경우(Servlet) 에는 웹 서버가 WAS로 해당 요청을 전달합니다.</p></li><li><p>WAS로 요청 전달<br>웹 서버는 동적 자원에 대한 요청을 WAS로 전달합니다. 이때 일반적으로 HTTP, HTTPS 등을 통해 통신합니다.</p></li><li><p>요청 처리<br>WAS는 받은 요청을 처리하고, DB(Mybatis, JPA 등)다른 서비스와의 통신을 통해 요청에 대한 응답을 생성합니다.</p></li><li><p>응답 전송<br>WAS는 처리한 결과를 다시 웹 서버로 전송합니다.</p></li><li><p>클라이언트 응답<br>웹 서버는 받은 응답을 클라이언트에게 전달하여 사용자에게 보여줍니다.</p></li></ol><blockquote><p>요약</p></blockquote><p>전체적으로 보면 웹서버(Apache)에서 보통 정적 파일 요청을 담당하고 리버스 프록시를 통해 동적자원을 처리하는 WAS로 로드밸런싱 처리를 진행하고 Database, Transaction 등 여러 서비스와의 통신을 담당한 후 다시 웹서버로 자원을 전송하여 웹서버는 응답값을 클라이언트에 전송하는 과정을 가지게 됩니다.</p><h1 id="wasyi-seoljeongpaileun-mueosi-isseulgga"><a href="#wasyi-seoljeongpaileun-mueosi-isseulgga" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#was의-설정파일은-무엇이-있을까"></a> WAS의 설정파일은 무엇이 있을까?</h1><ol><li><p><strong>server.xml</strong>:<br>톰캣의 주요 설정 파일 중 하나로, <code>톰캣 서버의 설정</code>을 담당합니다. 일반적으로 <strong><code>&lt;톰캣 설치 디렉토리&gt;/conf/server.xml</code></strong> 경로에 위치합니다. 이 파일에서는 <code>포트, 가상 호스트, SSL 설정</code> 등을 관리할 수 있습니다. 주의해야 할 점은, 이 파일을 수정할 때 톰캣을 다시 시작해야 변경 사항이 적용됩니다.</p></li><li><p><strong>web.xml</strong>:<br>웹 애플리케이션의 설정 파일로, 각 웹 애플리케이션마다 별도로 존재합니다. 일반적으로 각 웹 애플리케이션의 <strong><code>WEB-INF/web.xml</code></strong> 경로에 위치합니다. 이 파일에서는 <code>서블릿 매핑, 필터 설정, 에러 페이지</code> 등과 같은 웹 애플리케이션의 세부적인 설정을 관리할 수 있습니다.</p></li><li><p><strong>context.xml</strong>:<br>톰캣 컨텍스트의 설정 파일로, 각 웹 애플리케이션마다 별도로 존재합니다. 일반적으로 각 웹 애플리케이션의 <strong><code>META-INF/context.xml</code></strong> 경로에 위치합니다. 이 파일에서는 <code>데이터베이스 연결 설정, 리소스 설정</code> 등과 같은 컨텍스트 수준의 설정을 관리할 수 있습니다.</p></li><li><p><strong><a href="http://setenv.sh">setenv.sh</a></strong>:<br>이 파일은 톰캣 실행 환경 변수를 설정하는 데 사용됩니다. 주로 <code>메모리 설정 (예: JVM 메모리 크기), 시스템 속성, 환경 변수</code> 등을 설정할 때 사용됩니다. 이 파일은 <strong><code>&lt;톰캣 설치 디렉토리&gt;/bin/</code></strong> 경로에 있으며, 필요에 따라 생성하고 수정할 수 있습니다.</p></li></ol><p>주로 WAS(Tomcat)에서 설정 파일들의 특성을 알아보았습니다. 이것들은 실무에서 반드시 알아야할 필수불가결한 중요한 요소라고 생각이 됩니다. 운영시 인프라 이러한 WAS 설정파일에 대한 이해는 여러 장애상황에서 빠른 대응이 가능할 것으로 보여집니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web-wasyi-dongjaggwajeong&quot;&gt;&lt;a href=&quot;#web-wasyi-dongjaggwajeong&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Infra" scheme="http://gwanhyeon.github.io/categories/server/infra/"/>
    
    
      <category term="WEB" scheme="http://gwanhyeon.github.io/tags/web/"/>
    
      <category term="WAS" scheme="http://gwanhyeon.github.io/tags/was/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 Apache 웹서버 게이트웨이 설정</title>
    <link href="http://gwanhyeon.github.io/Infra-20240424-linux-apache-gateway-configuration/"/>
    <id>http://gwanhyeon.github.io/Infra-20240424-linux-apache-gateway-configuration/</id>
    <published>2024-04-24T05:10:32.000Z</published>
    <updated>2024-07-24T14:59:05.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rinugseueseo-apache-gateway-seoljeonghagi"><a href="#rinugseueseo-apache-gateway-seoljeonghagi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#리눅스에서-apache-gateway-설정하기"></a> 리눅스에서 Apache Gateway 설정하기</h1><h3 id="apache-seolci"><a href="#apache-seolci" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#apache-설치"></a> Apache 설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure><h3 id="proxy-module-hwalseonghwa"><a href="#proxy-module-hwalseonghwa" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#proxy-module-활성화"></a> proxy module 활성화</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod proxy</span><br><span class="line">sudo a2enmod proxy_http</span><br></pre></td></tr></table></figure><p>리버스 프록시 설정을 진행합니다. a2enmod는 리버스 프록시 설정을 활성화 시켜주는 명령어입니다.</p><h3 id="apache-seoljeong-pail"><a href="#apache-seoljeong-pail" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#apache-설정-파일"></a> Apache 설정 파일</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin webmaster@localhost</span><br><span class="line">    DocumentRoot /var/www/html</span><br><span class="line"></span><br><span class="line">    ProxyPass / &#123;실제 WAS Domain&#125;</span><br><span class="line">    ProxyPassReverse / &#123;실제 WAS Domain&#125;</span><br><span class="line"></span><br><span class="line">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><h3 id="apache-jaegidong"><a href="#apache-jaegidong" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#apache-재기동"></a> Apache 재기동</h3><p>아파치 재기동을 해주지 않으면 시스템 설정이 처리되지 않습니다. 반드시 진행해주셔야합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apache2ctl configtest</span><br><span class="line">sudo systemctl restart apache2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>이렇게 처리되면 웹서버인 Apache에서 클라이언트의 요청을 WAS 리버스 프록시를 통해 전달하게 됩니다.</p><h1 id="apache-web-seobeoyi-gasang-hoseuteu-virtual-host-mic-ssl-seoljeong"><a href="#apache-web-seobeoyi-gasang-hoseuteu-virtual-host-mic-ssl-seoljeong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#apache-웹-서버의-가상-호스트virtual-host-및-ssl-설정"></a> Apache 웹 서버의 가상 호스트(Virtual Host) 및 SSL 설정</h1><h3 id="httpd-vhosts-conf"><a href="#httpd-vhosts-conf" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#httpd-vhostsconf"></a> httpd-vhosts.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin admin@example.com</span><br><span class="line">    DocumentRoot &quot;/var/www/example&quot;</span><br><span class="line">    ServerName &#123;test.com&#125;</span><br><span class="line">    ErrorLog &quot;/var/log/httpd/example-error.log&quot;</span><br><span class="line">    CustomLog &quot;/var/log/httpd/example-access.log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>해당 설정을 통해 ServerName : <a href="http://test.com">test.com</a> 도메인에 대해서 HTTP 80 포트 요청 처리를 하는 가상호스트를 정의할 수 있습니다.</p><h3 id="httpd-ssl-conf"><a href="#httpd-ssl-conf" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#httpd-sslconf"></a> httpd-ssl.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost _default_:443&gt;</span><br><span class="line">    ServerAdmin admin@example.com</span><br><span class="line">    DocumentRoot &quot;/var/www/secure&quot;</span><br><span class="line">    ServerName secure.example.com</span><br><span class="line">    SSLEngine on.                                       ---- SSL 인증서와 개인키 파일을 지정해서 처리합니다. </span><br><span class="line">    SSLCertificateFile &quot;/path/to/your_domain_name.crt&quot;</span><br><span class="line">    SSLCertificateKeyFile &quot;/path/to/your_private.key&quot;</span><br><span class="line">    SSLCertificateChainFile &quot;/path/to/DigiCertCA.crt&quot;</span><br><span class="line">    ErrorLog &quot;/var/log/httpd/secure-error.log&quot;</span><br><span class="line">    CustomLog &quot;/var/log/httpd/secure-access.log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>이 파일은 Apache 웹 서버에서 SSL/TLS 암호화 통신을 설정하는 데 사용되고, 주로 HTTPS를 지원하는 웹사이트를 설정하기 위해 사용됩니다. SSL을 사용하여 데이터 전송을 암호화하고 보안을 강화할 수 있습니다. 그리고 SSL 설정을 할 수 있는데, crt, key 파일 설정을 통해 SSL을 적용할 수 있습니다.</p><h1 id="geiteuwei-seoljeonggwayi-caijeom"><a href="#geiteuwei-seoljeonggwayi-caijeom" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#게이트웨이-설정과의-차이점"></a> 게이트웨이 설정과의 차이점</h1><p>httpd-vhosts.conf와 httpd-ssl.conf 파일은 Apache 서버가 호스팅하는 각 웹사이트 또는 도메인에 대한 설정을 정의하며, 각각의 사이트에 대해 HTTP 또는 HTTPS 요청을 처리합니다.</p><p>반면에, 게이트웨이 설정(리버스 프록시 설정 포함)은 Apache가 클라이언트의 요청을 다른 서버(백엔드 서버)로 전달하는 역할을 합니다. 이 경우, Apache 서버는 요청을 직접 처리하는 대신 다른 서버에 전달하여 응답을 받아 클라이언트에게 전달합니다.</p><p>따라서, httpd-vhosts.conf와 httpd-ssl.conf는 주로 웹사이트 호스팅과 관련된 설정이며, 게이트웨이 설정은 Apache가 중개자 역할을 할 때 사용됩니다. 두 개념은 다른 목적으로 사용되며, 각각의 파일은 해당 목적에 맞는 설정을 포함합니다.</p><p>추가적으로, 보통 SSL 인증서를 발급받는 기관은 한국전자인증, 글로벌 사인 등을 예로 들수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rinugseueseo-apache-gateway-seoljeonghagi&quot;&gt;&lt;a href=&quot;#rinugseueseo-apache-gateway-seoljeonghagi&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Infra" scheme="http://gwanhyeon.github.io/categories/server/infra/"/>
    
    
      <category term="WEB" scheme="http://gwanhyeon.github.io/tags/web/"/>
    
      <category term="WAS" scheme="http://gwanhyeon.github.io/tags/was/"/>
    
  </entry>
  
  <entry>
    <title>Spring @DirtiesContext</title>
    <link href="http://gwanhyeon.github.io/Spring-20240114-spring-dirties-context/"/>
    <id>http://gwanhyeon.github.io/Spring-20240114-spring-dirties-context/</id>
    <published>2024-01-14T07:14:33.000Z</published>
    <updated>2024-07-30T14:42:03.753Z</updated>
    
    <content type="html"><![CDATA[<p>Spring DirtiesContext</p><p>스프링 단위 테스트 진행시 단독으로 수행되던 코드들이 통합테스트시에 Context를 공유하여 올바른 값이 도출되지 않는 경우가 있다. 그 이유는 하나의 Spring TEST Context에서 기존의 Context를 재사용함에 따라 발생하는 문제이다. 이러한 문제들을 해결하기 위하여 필요한것들이 <code>@DirtiesContext</code> 이다.</p><p>이 <code>@DirtiesContext</code> 어노테이션은 테스트를 수행전, 수행후, 각 테스트 케이스마다 수행하기 전, 수행한 이후에 Context를 재생성하는 역할을 한다.</p><blockquote><p>@DirtiesContext</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@DirtiesContext indicates that the underlying Spring ApplicationContext has been dirtied during the execution of a test (that is, the test modified or corrupted it in some manner — for example, by changing the state of a singleton bean) and should be closed. When an application context is marked as dirty, it is removed from the testing framework’s cache and closed. As a consequence, the underlying Spring container is rebuilt for any subsequent test that requires a context with the same configuration metadata.</span><br><span class="line">You can use @DirtiesContext as both a class-level and a method-level annotation within the same class or class hierarchy. In such scenarios, the ApplicationContext is marked as dirty before or after any such annotated method as well as before or after the current test class, depending on the configured methodMode and classMode.</span><br></pre></td></tr></table></figure><p>doc.spring.io에 따르면 @DirtiesContext ApplicationContext 테스트를 실행하는동안 테스트 프레임워크의 캐시를 제거하고 닫게합니다. 결과적으로 기본 Spring Container에 동일한 구성 메타 데이터가 있는 컨텍스트를 필요로하는 후속 테스트를 위해 재 빌드된다고 나와있습니다.</p><p>또한, 클래스 계층 구조내에서 클래스 수준 주석과 메서드 수준 수적으로 모두 사용할 수 있습니다.</p><blockquote><p>클래스 테스트 시작전 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext(classMode = BEFORE_CLASS)</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that require a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>클래스 테스트 이후 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDirtyingTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that result in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>모든 테스트 케이스마다 시작하기 이전 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext(classMode = BEFORE_EACH_TEST_METHOD)</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that require a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>모든 테스트케이스가 끝날때 마다 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext(classMode = AFTER_EACH_TEST_METHOD)</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDirtyingTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that result in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>특정 케이스 시작전 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext(methodMode = BEFORE_METHOD)</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testProcessWhichRequiresFreshAppCtx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some logic that requires a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>특정 케이스 시작 이후 Context 재생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testProcessWhichDirtiesAppCtx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some logic that results in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Reference</p></blockquote><p><a href="https://shortstories.gitbooks.io/studybook/content/dirtiescontext.html">https://shortstories.gitbooks.io/studybook/content/dirtiescontext.html</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#spring-testing-annotation-dirtiescontext">https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#spring-testing-annotation-dirtiescontext</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring DirtiesContext&lt;/p&gt;
&lt;p&gt;스프링 단위 테스트 진행시 단독으로 수행되던 코드들이 통합테스트시에 Context를 공유하여 올바른 값이 도출되지 않는 경우가 있다. 그 이유는 하나의 Spring TEST Context에서 기
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/server/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring TDD(MockMVC)</title>
    <link href="http://gwanhyeon.github.io/Spring-20231215-spring-tdd-mockmvc/"/>
    <id>http://gwanhyeon.github.io/Spring-20231215-spring-tdd-mockmvc/</id>
    <published>2023-12-15T14:26:52.000Z</published>
    <updated>2024-07-30T14:41:38.607Z</updated>
    
    <content type="html"><![CDATA[<p>이번 시간에는 Spring TDD MockMVC 통신에 대해서 알아보도록 하겠습니다.</p><h1 id="mockmvcran"><a href="#mockmvcran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#mockmvc란"></a> MockMVC란?</h1><p>MockMvc에 들어가기 앞서, TDD에 알아보도록 하겠습니다.</p><p>테스트 주도 개발(TDD)은 코드를 작성하기 전에 테스트 코드를 작성하는것을 말하는데 TDD의 단계는 크게 3개로 볼 수 있습니다.</p><ol><li>테스트 작성: 구현할 기능에 대한 테스트를 작성합니다.</li><li>코드 작성: 테스트를 통과하도록 최소한의 코드를 작성합니다.</li><li>리팩토링: 코드를 정리하고 개선합니다.</li></ol><p>MockMVC는 무엇일까요?<br>MockMVC는 Spring MVC 애플리케이션을 테스트할 때 사용하는 도구입니다. 이를 통해 실제 웹 서버를 실행하지 않고도 Controller 계층을 테스트할 수 있습니다. 직접 런타임시점까지 코드를 컴파일하지 않아도 직접 가상 API를 요청해볼 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line">import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class="line">import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class="line"></span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class="line">import org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line">@WebMvcTest(HelloController.class)</span><br><span class="line">public class HelloControllerTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGetRequest() throws Exception &#123;</span><br><span class="line">        mockMvc.perform(get(&quot;/hello&quot;))</span><br><span class="line">                .andExpect(status().isOk()) </span><br><span class="line">                .andExpect(content().string(&quot;Hello, World!&quot;)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MockMVC에 대한 간단한 예제인데요, 위 테스트 클래스는 @WebMvcTest를 사용하여 Spring MVC 애플리케이션의 특정 컨트롤러를 테스트합니다. MockMVC를 통해 PATH GET 요청을 보내고, 응답 상태가 200 OK인지와 응답 내용이 맞는지 판단합니다.</p><p>추가로 POST 방식에서 JSON형식으로 오는 값들은 어떻게 처리할까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPostRequest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String json = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;gwan\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    mockMvc.perform(post(<span class="string">&quot;/createUser&quot;</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(json))</span><br><span class="line">            .andExpect(status().isCreated()) <span class="comment">// 201 Created </span></span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.name&quot;</span>).value(<span class="string">&quot;gwan&quot;</span>)); </span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">$.name 같은 경우는 해당되는 json 이라는 키값이 존재하는지 확인하여 그 값을 andExpect할 수 있습니다. </span><br><span class="line"></span><br><span class="line">이번에는 <span class="meta">@Pathvariable</span>과 <span class="meta">@RequestParam</span>으로 들어오는값들은 어떻게 처리 할 수 있을까요?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPathVariable</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="number">1</span>))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>)) </span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.name&quot;</span>).value(<span class="string">&quot;gwan&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRequestParam</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/search&quot;</span>)</span><br><span class="line">            .param(<span class="string">&quot;query&quot;</span>, <span class="string">&quot;gwan&quot;</span>))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(content().string(<span class="string">&quot;Search results for: gwan&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>그 외에는 Header값이 어떻게 들어오는지도 파악할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResponseHeader</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/download&quot;</span>))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(header().string(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perform 메서드는 HTTP 요청을 시뮬레이션하고, andExpect 메서드는 그에 따른 응답을 검증할 수 있게 됩니다. 보통 given-when-then 패턴을 많이 사용하는것으로 알고 있고 저도 실제로 대외 프로젝트를 진행하면서 given-when-then 패턴을 사용하여 해당 TDD 단위 테스트를 진행한 경험을 가지고 있습니다.</p><p>그 만큼 단위테스트는 중요한 부분이고 추후 실무에서 개발기간을 단축시킬 수 있는 큰 요소라고 생각을 합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번 시간에는 Spring TDD MockMVC 통신에 대해서 알아보도록 하겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;mockmvcran&quot;&gt;&lt;a href=&quot;#mockmvcran&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;mark
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
      <category term="tdd" scheme="http://gwanhyeon.github.io/tags/tdd/"/>
    
  </entry>
  
  <entry>
    <title>03.Kotlin Data Types</title>
    <link href="http://gwanhyeon.github.io/Kotlin-20231207-Kotlin-datatype-03/"/>
    <id>http://gwanhyeon.github.io/Kotlin-20231207-Kotlin-datatype-03/</id>
    <published>2023-12-06T15:38:56.000Z</published>
    <updated>2024-07-30T14:40:45.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="data-types"><a href="#data-types" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#data-types"></a> Data Types</h1><ol><li>숫자 – Byte, Short, Int, Long, Float, Double</li><li>Boolean – True, false</li><li>문자</li><li>배열</li><li>문자열</li></ol><h2 id="numbers"><a href="#numbers" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#numbers"></a> Numbers</h2><p>Kotlin에서 숫자를 나타내는 여러 데이터 유형이 있습니다.</p><h2 id="byte"><a href="#byte" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#byte"></a> Byte</h2><p>Byte 데이터 유형의 범위는 -128 ~ 127입니다. 이는 더 작은 정수 값을 나타내는 데 사용됩니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Byte</span> = <span class="number">99</span> </span><br><span class="line">    println ( <span class="string">&quot;<span class="variable">$num</span>&quot;</span> ) &#125;</span><br></pre></td></tr></table></figure><blockquote><p>잘못된 예</p></blockquote><p>오류를 방지하려면 데이터 유형의 범위를 알고 있어야합니다. 예를 들어, 다음 코드는 byte 유형의 변수에 지정된 값이 범위에 없기 때문에 오류를 생성합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 범위는 -128에서 127 사이입니다. </span></span><br><span class="line">    <span class="keyword">val</span> num:<span class="built_in">Byte</span> = <span class="number">300</span> </span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$num</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>데이터 유형의 최댓값과 최솟값을 어떻게 구할수 있을까요?</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; </span><br><span class="line">    <span class="keyword">var</span> bigByte : <span class="built_in">Byte</span> = <span class="built_in">Byte</span>.MAX_VALUE</span><br><span class="line">    <span class="keyword">var</span> smallByte : <span class="built_in">Byte</span> = <span class="built_in">Byte</span>.MIN_VALUE </span><br><span class="line">    println (<span class="string">&quot;가장 큰 바이트 값 : <span class="variable">$bigByte</span>&quot;</span>)</span><br><span class="line">    println (<span class="string">&quot;가장 작은 바이트 값 : <span class="variable">$smallByte</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="short"><a href="#short" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#short"></a> Short</h2><p>Short 데이터 유형의 범위는 -32768 ~ 32767입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Short</span> = <span class="number">29999</span> </span><br><span class="line">    println (<span class="string">&quot;<span class="variable">$num</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Short 데이터 유형에서 더 큰 범위를 가질 때 왜 Byte 데이터 유형을 사용할까요?</p></blockquote><p>이것은 메모리를 절약하기위한 것입니다. Short 데이터 유형은 Byte 데이터 유형에 비해 더 많은 메모리를 보유하므로 값이 -128에서 127까지의 한계에 있다고 확신하는 경우 Byte 데이터 유형이 메모리 관점에서 더 나은 선택이 될 것입니다.</p><h2 id="int"><a href="#int" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#int"></a> Int</h2><p>Int 데이터 유형의 범위는 -2^31 ~ 2^31 -1입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Int</span> = <span class="number">123456</span> </span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$num</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>참고<br>변수의 유형을 명시 적으로 지정하지 않으면 값이 -2 31 에서 2 31 -1 사이 인 경우 컴파일러는 해당 변수를 Int로 처리합니다.</p></blockquote><h2 id="long"><a href="#long" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#long"></a> Long</h2><p>Long 데이터 유형의 범위는 -2 63 ~ 2 63 -1입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Long</span> = <span class="number">12345678</span> </span><br><span class="line">    println (<span class="string">&quot;<span class="variable">$num</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>변수 유형을 명시 적으로 지정하지 않으면 값이 -2^31 ~ 2^31-1 범위를 벗어나지만 -2^63 ~ 범위에있는 경우 컴파일러는 해당 변수를 Long으로 처리합니다. 2 (63) -1</p></blockquote><h2 id="double"><a href="#double" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#double"></a> Double</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 모든 부동 숫자는 기본적으로 두 배입니다 // 값에 F 문자를 추가하지 않으면</span></span><br><span class="line">    <span class="keyword">val</span> num = <span class="number">101.99</span> </span><br><span class="line">    println (<span class="string">&quot;<span class="variable">$num</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#float"></a> Float</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 이것은 우리가 접미사로 붙인 float 데이터 유형입니다(문자 &#x27;F&#x27;가 뒤에 추가됩니다.)  </span></span><br><span class="line">    값 <span class="keyword">val</span> num = <span class="number">101.99F</span> </span><br><span class="line">    println (<span class="string">&quot;<span class="variable">$num</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="boolean"><a href="#boolean" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#boolean"></a> Boolean</h2><p>부울 변수의 값은 true 또는 false입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">(args : <span class="type">Array</span>)</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> boolValue = <span class="literal">false</span> </span><br><span class="line">    println (<span class="string">&quot;<span class="variable">$boolValue</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="char"><a href="#char" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#char"></a> Char</h2><p>모든 영어 알파벳 (소문자 또는 대문자)은 Char 데이터 유형에 포함됩니다. Char 데이터 유형의 변수에는 숫자를 할당 할 수 없습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">(args : <span class="type">Array</span>)</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> ch = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    println ( <span class="string">&quot;<span class="variable">$ch</span>&quot;</span> ) </span><br><span class="line">    <span class="keyword">val</span> ch2 : <span class="built_in">Char</span> </span><br><span class="line">    ch2 = <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">    println (<span class="string">&quot;<span class="variable">$ch2</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;data-types&quot;&gt;&lt;a href=&quot;#data-types&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#data-types&quot;&gt;&lt;/a&gt; Data Types&lt;/h1&gt;

      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="Kotlin" scheme="http://gwanhyeon.github.io/categories/language/kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://gwanhyeon.github.io/tags/kotlin/"/>
    
      <category term="데이터타입" scheme="http://gwanhyeon.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/"/>
    
  </entry>
  
  <entry>
    <title>02.Kotlin Variables</title>
    <link href="http://gwanhyeon.github.io/Kotlin-20231010-Kotlin-variable-02/"/>
    <id>http://gwanhyeon.github.io/Kotlin-20231010-Kotlin-variable-02/</id>
    <published>2023-10-09T15:35:40.000Z</published>
    <updated>2024-07-30T14:40:13.012Z</updated>
    
    <content type="html"><![CDATA[<p>변수에는 변경 가능(mutable)과 불변(immutable)의 두 가지 유형이 있습니다. 불변 변수(immutable)은 값을 변경할 수없는 변수로, 변경 불가능 또는 읽기 전용 변수라고도합니다. 반면에 가변 변수의 값은 변경 될 수 있습니다.</p><h1 id="bulbyeon-byeonsu-val-kiweodeu"><a href="#bulbyeon-byeonsu-val-kiweodeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#불변-변수-val-키워드"></a> 불변 변수 : val 키워드</h1><p>불변 변수는 <code>val</code>Kotlin에서 키워드를 사용하여 선언됩니다 . 이 예에서는 키워드를 <code>myName</code>사용하여 불변 변수 를 선언 <code>val</code> 후 값을 표시하였습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 불가능한 </span><br><span class="line">     변수 </span><br><span class="line">     * 또는 변경 불가능한 변수 * 또는 읽기 전용 변수 라고도 합니다. </span><br><span class="line">     * / </span><br><span class="line">    <span class="keyword">val</span> myName = <span class="string">&quot;KGH&quot;</span> </span><br><span class="line">    println ( <span class="string">&quot;내 이름 :&quot;</span> + myName ) &#125;</span><br></pre></td></tr></table></figure><blockquote><p>immutable 변수를 변경하게 되면 어떻게 될까요?</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 불가능한 </span><br><span class="line">     변수 또는 변경 불가능한 변수 * 또는 읽기 전용 변수 라고도 합니다. </span><br><span class="line">     * / </span><br><span class="line">    <span class="keyword">val</span> myName = <span class="string">&quot;KGH&quot;</span> </span><br><span class="line">    myName = <span class="string">&quot;gwanhyeon kim&quot;</span> </span><br><span class="line">    println ( <span class="string">&quot;내 이름 :&quot;</span> + myName ) &#125;</span><br></pre></td></tr></table></figure><p>immutable한 변수이므로 컴파일 오류가 발생합니다.</p><h1 id="gabyeonbyeonsu-var-kiweodeu"><a href="#gabyeonbyeonsu-var-kiweodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#가변변수-var-키워드"></a> 가변변수: var 키워드</h1><p>불변 변수와 달리, 우리는 가변 변수의 값을 변경할 수 있습니다. kotlin에서는 var 키워드를 사용하여 가변 변수를 선언합니다. 이것을 이해하기 위해 예를 들어 보겠습니다.</p><p>이 예에서는 <code>var</code>키워드를 사용하여 가변 변수를 선언했습니다 . 값을 변경할 수 있음을 보여주기 위해 <code>myName</code>변수에 다른 값을 다시 할당했습니다 .</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 가능한 변수입니다 </span><br><span class="line">     *이 변수 의 값을 변경할 수 있습니다 </span><br><span class="line">     * / <span class="keyword">var</span> myName = <span class="string">&quot;KGH&quot;</span> </span><br><span class="line">    myName = <span class="string">&quot;gwanhyeon kim&quot;</span> </span><br><span class="line">    println ( <span class="string">&quot;내 이름 :&quot;</span> + myName ) &#125;</span><br></pre></td></tr></table></figure><h1 id="byeonsuyi-yimi"><a href="#byeonsuyi-yimi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#변수의-의미"></a> 변수의 의미</h1><p>변수는 데이터를 저장할 수있는 메모리의 위치에 주어진 이름입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> beginnersbook</span><br><span class="line"><span class="keyword">var</span> book = <span class="string">&quot;gwanhyeon kim&quot;</span></span><br></pre></td></tr></table></figure><p>데이터“gwanhyeon kim”은 웹 사이트라는 이름의 특정 위치에있는 메모리에 저장됩니다.</p><p>여기서 var는 변수 선언에 사용되는 키워드,책은 식별자 (변수 이름),“beginnersbook”은 데이터 (변수 값), 변수 유형은 String입니다.</p><h1 id="yuhyeong-curon"><a href="#yuhyeong-curon" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#유형-추론"></a> 유형 추론</h1><p>단일 문에서 변수를 선언하고 초기화 할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="string">&quot;gwanhyeon kim&quot;</span></span><br></pre></td></tr></table></figure><p>위에서는 변수의 유형을 지정하지 않았습니다. kotlin은 변수 book이 문자열 이라는 것을 알고 있습니다. 컴파일러는 값을보고 변수의 유형을 이해할 수 있습니다.</p><blockquote><p>이것을 명시적으로 표현하려면?</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book : String = <span class="string">&quot;gwanhyeon kim&quot;</span></span><br></pre></td></tr></table></figure><p>&quot;book&quot;변수의 유형을 String으로 명시 적으로 언급했습니다.</p><blockquote><p>먼저 선언하고 나중에 초기화</p></blockquote><p>변수를 먼저 선언 한 다음 나중에 프로그램에서 초기화 할 수 있습니다. 여기서 주목해야 할 중요한 점은 우리가 이렇게하는 것입니다. 선언하는 동안 변수의 유형을 지정해야합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//이 경우 유형을 지정해야합니다 . var website : String </span></span><br><span class="line">book = <span class="string">&quot;gwanhyeon kim&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;변수에는 변경 가능(mutable)과 불변(immutable)의 두 가지 유형이 있습니다. 불변 변수(immutable)은 값을 변경할 수없는 변수로, 변경 불가능 또는 읽기 전용 변수라고도합니다. 반면에 가변 변수의 값은 변경 될 수 있습니다.
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="Kotlin" scheme="http://gwanhyeon.github.io/categories/language/kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://gwanhyeon.github.io/tags/kotlin/"/>
    
      <category term="변수" scheme="http://gwanhyeon.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>01.What is Kotlin and Why use it?</title>
    <link href="http://gwanhyeon.github.io/Kotlin-20230916-Kotlin-envirenment-01/"/>
    <id>http://gwanhyeon.github.io/Kotlin-20230916-Kotlin-envirenment-01/</id>
    <published>2023-09-16T14:50:58.000Z</published>
    <updated>2024-07-30T14:41:03.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kotliniran"><a href="#kotliniran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#kotlin이란"></a> Kotlin이란?</h1><p>JetBrains에서 개발 한 정적으로 형식화 된 프로그래밍 언어입니다. 자바에 대한 기본지식 있다면 Kotilin을 금방 배울 수 있습니다.</p><p>Kotlin과 자바는 상호 운용이 가능하므로 프로젝트에서 함께 사용할 수 있으며 Kotlin에서 자바 코드를 효율적으로 다시 작성할 수 있습니다. Kotlin은 특히 Java보다 간결합니다.</p><h1 id="kotlinyi-teugjing"><a href="#kotlinyi-teugjing" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#kotlin의-특징"></a> Kotlin의 특징</h1><blockquote><p>간결성</p></blockquote><p>Kotlin은 자바보다 간결하며 자바에 비해 40% 적은 코드 라인을 작성할 수 있습니다.</p><blockquote><p>상호 운용성</p></blockquote><p>Kotlin은 Java와 상호 운용성이 뛰어납니다. Java프로젝트에서 사용하는데 어려움이 없습니다.</p><blockquote><p>오픈소스</p></blockquote><p>Kotlin은 오픈소스 프로그래밍 언어</p><blockquote><p>높은 신뢰도</p></blockquote><p>Kotlin은 유명하고 잘 알려진 회사 인 JetBrains에서 개발한 것이므로 신뢰도가 높습니다.</p><blockquote><p>다양한 기능</p></blockquote><p>Kotlin은 연산자 오버로딩, Lambda 표현식, 문자열 템플릿 등과 같은 여러 고급기능들을 제공합니다.</p><blockquote><p>배우기가 쉽습니다.</p></blockquote><p>Java환경과 유사하므로 처음에 진입장벽이 없습니다.</p><blockquote><p>오류발생 가능성이 적습니다.</p></blockquote><p>Kotlin은 정적으로 형식화 된 프로그래밍 언어로, 정적으로 형식화 된 프로그래밍 언어가 컴파일 타임에 형식 검사를 수행하므로 컴파일 타임에 오류를 포착할 수 있습니다.</p><hr><h1 id="intellij-ideaeseo-kotlin-peurojegteu-saengseong-mic-silhaeng"><a href="#intellij-ideaeseo-kotlin-peurojegteu-saengseong-mic-silhaeng" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#intellij-idea에서-kotlin-프로젝트-생성-및-실행"></a> IntelliJ IDEA에서 Kotlin 프로젝트 생성 및 실행</h1><p>공식 Jetbrains 웹 사이트 의 <a href="https://www.jetbrains.com/idea/download/">다운로드 페이지</a> 로 이동합니다 . 운영 체제를 선택하고 커뮤니티 에디션을 다운로드하십시오.</p><h2 id="1dangye"><a href="#1dangye" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#1단계"></a> 1단계</h2><p>&quot;새 프로젝트 만들기&quot;를 선택합니다.</p><h2 id="2dangye"><a href="#2dangye" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#2단계"></a> 2단계</h2><p>&quot;추가 라이브러리 및 프레임 워크&quot;섹션에서 Kotlin / JVM을 선택 하고 &quot;다음&quot;을 클릭합니다.</p><h2 id="3dangye"><a href="#3dangye" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#3단계"></a> 3단계</h2><p>3 단계 : 프로젝트 이름을 입력하고 &quot;마침&quot;을 클릭합니다.</p><h2 id="4dangye"><a href="#4dangye" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#4단계"></a> 4단계</h2><p>단계 : Kotlin 프로젝트의 'src’폴더에 새 Kotlin 파일을 만듭니다.</p><h2 id="5dangye"><a href="#5dangye" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#5단계"></a> 5단계</h2><p>코드 입력 후 Kotlin 파일을 실행하려면 왼쪽에 있는 Kotlin 아이콘을 클릭합니다 . ‘코틀린 파일’(.kt)실행을 선택하여 실행합니다.</p><h2 id="6dangye"><a href="#6dangye" class="header-anchor">3.6. </a><a class="markdownIt-Anchor" href="#6단계"></a> 6단계</h2><p>올바르게 프로그램 출력이 되는지를 확인합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kotliniran&quot;&gt;&lt;a href=&quot;#kotliniran&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kotlin이란&quot;&gt;&lt;/a&gt; Kotlin이란?&lt;/h1&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="Kotlin" scheme="http://gwanhyeon.github.io/categories/language/kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://gwanhyeon.github.io/tags/kotlin/"/>
    
      <category term="환경설정" scheme="http://gwanhyeon.github.io/tags/%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Mark and Toys</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210622-mark-and-toys/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210622-mark-and-toys/</id>
    <published>2021-06-22T08:52:58.000Z</published>
    <updated>2021-06-22T08:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/mark-and-toys/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=sorting">문제</a></h1><p>Mark and Jane are very happy after having their first child. Their son loves toys, so Mark wants to buy some. There are a number of different toys lying in front of him, tagged with their prices. Mark has only a certain amount to spend, and he wants to maximize the number of toys he buys with this money. Given a list of toy prices and an amount to spend, determine the maximum number of gifts he can buy.</p><p>Note Each toy can be purchased only once.</p><h3 id="example"><a href="#example" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>The budget is  units of currency. He can buy items that cost  for , or  for  units. The maximum is  items.</p><h3 id="function-description"><a href="#function-description" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#function-description"></a> Function Description</h3><p>Complete the function maximumToys in the editor below.</p><p>maximumToys has the following parameter(s):</p><p>int prices[n]: the toy prices<br>int k: Mark’s budget</p><h3 id="returns"><a href="#returns" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#returns"></a> Returns</h3><p>int: the maximum number of toys<br>Input Format</p><p>The first line contains two integers,  and , the number of priced toys and the amount Mark has to spend.<br>The next line contains  space-separated integers</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3><p>1 &lt;= n &lt;= 10^5<br>1 &lt;= k &lt;= 10^9<br>1 &lt;= prices[i] &lt;= 10^9</p><p>A toy can’t be bought multiple times.</p><h3 id="sample-input"><a href="#sample-input" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#sample-input"></a> Sample Input</h3><p>7 50<br>1 12 5 111 200 1000 10</p><h3 id="sample-output"><a href="#sample-output" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><p>4</p><h3 id="explanation"><a href="#explanation" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>He can buy only  toys at most. These toys have the following prices: .</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>이번 문제는 주어진 예산을 가지고 만들 수 있는 모든 경우의 수 리스트중에서 리스트의 가장 큰 맥시멈 사이즈를 구하는 문제였습니다.</p><p>단순히 이중 포문을 통하여 각각의 모든 경우를 구해주었고, 모든 경우의 값을 더해나가면서 k(budget)의 값을 초과한다는것은 예산으로 아이템을 살 수 없는 경우이기 때문에 해당되는 경우의수에서 종료를 시켜주었습니다.<br>각각의 경우의 수, 즉 아이템의 횟수를 매번 체크하여 k의 범위에 있을때 까지만 증가를 시켜주었습니다. 그리고 아이템의 횟수에 대한 값의 최댓값을 매번 구해주었습니다.</p><p>이때 주의 할점은 모든 값을 정렬을 시켜준후 경우의 수를 구해주게 되면 Worst Case O(N^2)의 경우를 모두 확인해보지 않아도 되기때문에 시간복잡도 성능이 용이할 것이라 판단이 됩니다.</p><blockquote><p>Time Complexity</p></blockquote><p>Worst Case : O(N^2)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;maximumToys&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. INTEGER_ARRAY prices</span></span><br><span class="line"><span class="comment">     *  2. INTEGER k</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maximumToys</span><span class="params">(List&lt;Integer&gt; prices, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Write your code here</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        Collections.sort(prices);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = prices.get(i);</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isCheck = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; k)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sum += prices.get(j);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            answer = Math.max(answer, cnt);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        String[] firstMultipleInput = bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(firstMultipleInput[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(firstMultipleInput[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; prices = Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.maximumToys(prices, k);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank 2d Array ds</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210621-2d-array-ds/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210621-2d-array-ds/</id>
    <published>2021-06-21T09:50:56.000Z</published>
    <updated>2021-06-21T10:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/2d-array/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=arrays">문제</a></h1><h3 id="given-a-2d-array"><a href="#given-a-2d-array" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#given-a-2d-array"></a> Given a  2D Array, :</h3><p>1 1 1 0 0 0<br>0 1 0 0 0 0<br>1 1 1 0 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0<br>An hourglass in  is a subset of values with indices falling in this pattern in 's graphical representation:</p><p>a b c<br>d<br>e f g<br>There are  hourglasses in . An hourglass sum is the sum of an hourglass’ values. Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum. The array will always be .</p><h3 id="example"><a href="#example" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>-9 -9 -9  1 1 1<br>0 -9  0  4 3 2<br>-9 -9 -9  1 2 3<br>0  0  8  6 6 0<br>0  0  0 -2 0 0<br>0  0  1  2 4 0</p><h3 id="the-hourglass-sums-are"><a href="#the-hourglass-sums-are" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#the-hourglass-sums-are"></a> The  hourglass sums are:</h3><p>-63, -34, -9, 12,<br>-10,   0, 28, 23,<br>-27, -11, -2, 10,<br>9,  17, 25, 18<br>The highest hourglass sum is  from the hourglass beginning at row , column :</p><p>0 4 3<br>1<br>8 6 6<br>Note: If you have already solved the Java domain’s Java 2D Array challenge, you may wish to skip this challenge.</p><h3 id="function-description"><a href="#function-description" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#function-description"></a> Function Description</h3><p>Complete the function hourglassSum in the editor below.</p><p>hourglassSum has the following parameter(s):</p><p>int arr[6][6]: an array of integers<br>Returns</p><p>int: the maximum hourglass sum</p><h3 id="input-format"><a href="#input-format" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#input-format"></a> Input Format</h3><p>Each of the  lines of inputs  contains  space-separated integers .</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3><ul><li>-9 &lt;= arr[i][j] &lt;= 9</li><li>0 &lt;= i, j &lt;= 5</li></ul><h3 id="output-format"><a href="#output-format" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#output-format"></a> Output Format</h3><p>Print the largest (maximum) hourglass sum found in .</p><p>Sample Input</p><p>1 1 1 0 0 0<br>0 1 0 0 0 0<br>1 1 1 0 0 0<br>0 0 2 4 4 0<br>0 0 0 2 0 0<br>0 0 1 2 4 0</p><h3 id="sample-output"><a href="#sample-output" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><p>19</p><h3 id="explanation"><a href="#explanation" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>contains the following hourglasses:</p><p>image<br>The hourglass with the maximum sum () is:</p><p>2 4 4<br>2<br>1 2 4</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>이번 문제는 2중 배열이 주어졌을때 모래시계의 최댓값을 구하는 문제이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>모래 시계의 형태는 다음과 같다. 맨 처음에 해당 되는 모래시계의 전체의 합을 구하는 문제인줄 알고 오역을 하게 되어서 Failed가 났다.</p><p>문제에서 원하는것은 이중배열이 주어질때 만들 수 있는 모든 모래시계의 합중 최댓값을 구하는 문제이다.</p><p>내가 생각해낸 방법은 다음과 같다.</p><ol><li>행,열의 기준으로 해당되는 모래시계의 형태를 몇번 인덱스까지 갈 수 있을까를 먼저 고민했다.</li></ol><p>예를 들어 행 0,1,2 열 0,1,2부터 시작해서 모래시계를 만들 수 있는지를 확인한다고 가정하자. 행의 길이가 6이라고 가정하면 모래 시계의 형태대로 갈 수 있는 값은 <code>행의 길이 - 2</code> 만큼이 가능해진다.<br>즉, 행 0,1,2의 경우 해당 행에서 4개의 모래시계를 만들 수 있다는것이다.</p><blockquote><p>모래시계 1</p></blockquote><p><code>0 0 0</code> 0 0 0<br>0 <code>0</code> 0 0 0 0<br><code>0 0 0</code> 0 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><blockquote><p>모래시계 2</p></blockquote><p>0 <code>0 0 0</code> 0 0<br>0 0 <code>0</code> 0 0 0<br>0 <code>0 0 0</code> 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><blockquote><p>모래시계 3</p></blockquote><p>0 0 <code>0 0 0</code> 0<br>0 0 0 <code>0</code> 0 0<br>0 0 <code>0 0 0</code> 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><blockquote><p>모래시계 4</p></blockquote><p>0 0 0 <code>0 0 0</code><br>0 0 0 0 <code>0</code> 0<br>0 0 0 <code>0 0 0</code><br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><p>이제 이렇게 규칙적으로 모래시계를 만들 수 있다는것을 알게되면 우리가 어디까지 반복문을 돌려야할지 알게 된다.<br><code>행의 길이 - 2, 열의 길이 -2</code>까지 이중포문을 돌려서 해당되는 모래 시계를 구해주면 되겠다.</p><p>즉 우리가 구해야할 점화식은 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a(i,j)   a(i,j+<span class="number">1</span>)   a(i,j+<span class="number">2</span>)</span><br><span class="line">   -     a(i+<span class="number">1</span>,j+<span class="number">1</span>)     -</span><br><span class="line">a(i+<span class="number">2</span>,j) a(i+<span class="number">2</span>,j+<span class="number">1</span>) a(i+<span class="number">2</span>,j+<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>이제 이것을 바탕으로 매번 모래시계를 만들 수 있는 경우에서 최댓값을 구해주게 된다. 문제의 제약조건을 살펴보면<br><code>-9 &lt;= arr[i][j] &lt;= 9</code> 의 범위를 갖는다. 따라서, 우리가 최댓값을 구해줄때 default로 설정할 값이 -63보다 작은값으로 설정을 해주어야한다. 이것이 무슨말이냐면 모래시계를 구할때 위에 설명한 점화식에서 총 7개의 영역을 가지고 있다. 해당 되는 영역에서 모든 값들이 -9로 주어졌다고 가정을 하자. 그러면 다음과 같아질 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">9</span> -<span class="number">9</span> -<span class="number">9</span></span><br><span class="line"> X -<span class="number">9</span>  X</span><br><span class="line">-<span class="number">9</span> -<span class="number">9</span> -<span class="number">9</span></span><br></pre></td></tr></table></figure><p>따라서, 우리가 기본으로 설정할 값은 7 * -9 = -63의 값보다 작은 값으로 설정을 하면서 최댓값을 구해주면된다.<br>처음에 아무생각없이 0으로 설정하였다가 다른 테스트케이스에서 걸리는것을 보고 바로 수정을 하였다.</p><blockquote><p>시간복잡도</p></blockquote><p>O(N^2)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;hourglassSum&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts 2D_INTEGER_ARRAY arr as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hourglassSum</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> answer = -<span class="number">64</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.size()-<span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.get(i).size()-<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                sum += arr.get(i).get(j) + arr.get(i).get(j+<span class="number">1</span>) + arr.get(i).get(j+<span class="number">2</span>);</span><br><span class="line">                sum += arr.get(i+<span class="number">1</span>).get(j+<span class="number">1</span>);</span><br><span class="line">                sum += arr.get(i+<span class="number">2</span>).get(j) + arr.get(i+<span class="number">2</span>).get(j+<span class="number">1</span>) + arr.get(i+<span class="number">2</span>).get(j+<span class="number">2</span>);</span><br><span class="line">                answer = Math.max(answer, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">6</span>).forEach(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                arr.add(</span><br><span class="line">                    Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">                        .map(Integer::parseInt)</span><br><span class="line">                        .collect(toList())</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.hourglassSum(arr);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Counting Valleys</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210621-counting-valleys/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210621-counting-valleys/</id>
    <published>2021-06-21T07:53:44.000Z</published>
    <updated>2021-06-21T08:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/counting-valleys/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">문제</a></h1><p>An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly  steps, for every step it was noted if it was an uphill, , or a downhill,  step. Hikes always start and end at sea level, and each step up or down represents a  unit change in altitude. We define the following terms:</p><p>A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.<br>A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.<br>Given the sequence of up and down steps during a hike, find and print the number of valleys walked through.</p><h3 id="example"><a href="#example" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>The hiker first enters a valley  units deep. Then they climb out and up onto a mountain  units high. Finally, the hiker returns to sea level and ends the hike.</p><h3 id="function-description"><a href="#function-description" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#function-description"></a> Function Description</h3><p>Complete the countingValleys function in the editor below.</p><p>countingValleys has the following parameter(s):</p><p>int steps: the number of steps on the hike<br>string path: a string describing the path<br>Returns</p><p>int: the number of valleys traversed</p><h3 id="input-format"><a href="#input-format" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#input-format"></a> Input Format</h3><p>The first line contains an integer , the number of steps in the hike.<br>The second line contains a single string , of  characters that describe the path.</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3><p>2 &lt;= steps &lt;= 10^6<br>path[i] {UD}를 포함한다.</p><h3 id="sample-input"><a href="#sample-input" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#sample-input"></a> Sample Input</h3><p>8<br>UDDDUDUU</p><h3 id="sample-output"><a href="#sample-output" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><p>1</p><h3 id="explanation"><a href="#explanation" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>If we represent _ as sea level, a step up as /, and a step down as , the hike can be drawn as:</p><p>_/\      _<br>\    /<br>//<br>The hiker enters and leaves one valley.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>해당 문제는 등산객에 하이킹에 대한 기록을 처리하는데 등산객이 계곡을 들어가게 되는데 계곡에 들어가서 다시 해수면으로 올라오는것의 갯수를 구하는되는 문제입니다.</p><p>처음에 왜 등산객이 해수면으로 들어갈까 라는 의문을 갖긴…? 했지만 문제를 다시 살펴보면 문제에서 예제를 준것을 잘 살펴보면 쉽게 이해하실 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">UDDDUDUU</span><br><span class="line">_/\      _</span><br><span class="line">   \    /</span><br><span class="line">    \/\/</span><br></pre></td></tr></table></figure><p>입력이 8이고 UDDDUDUU의 순서대로 등산객의 행동이 주어졌다고 가정하겠습니다.</p><ul><li>_는 현재 해수면을 나타냅니다.</li><li>/ 해수면 위로 간 것을 나타냅니다.</li><li>\ 해수면 아래로 간것을 나타냅니다.</li></ul><p><code>1 0 -1 -2 -1 -2 -1 0</code></p><p>해당되는 의미만 잘 살피면 해당되는 문제를 쉽게 푸실 수 있습니다.<br>현재 해수면 _ 에서 시작해서 해당되는 명령을 처리한다고 할때 올라가면 +1, 내려가면 -1로 생각을 하여 문제를 풀었습니다. 즉, valleyCount라는 변수를 선언하여 해당되는 현재의 상태를 나타낼 수 있도록 하여 현재 해수면의 아래에 진입했는지를 확인하여 isCheck 변수로 boolean 체크를 해주었습니다. 즉, 해수면 아래로 진입해서 해수면 즉, 0 의 값에 도달하였을때 하나의 해수면에 올라온 기록을 체크할 수 있기때문입니다.</p><blockquote><p>생각해보기</p></blockquote><ul><li>'U’가 주어지면 +1, 'D’가 주어지면 -1</li><li>해수면 아래로 진입하였는지?</li><li>해수면 아래로 진입하였고 다시 해수면 _(0의 값)에 도달하였으면 기록의 개수를 증가시켜줍니다. 그리고 체크를 해제하여 다시 해수면의 아래로 들어가는경우를 찾아냅니다.</li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;countingValleys&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. INTEGER steps</span></span><br><span class="line"><span class="comment">     *  2. STRING path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countingValleys</span><span class="params">(<span class="keyword">int</span> steps, String path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">int</span> valleyCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isCheck = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : path.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                valleyCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                valleyCount--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(valleyCount &lt; <span class="number">0</span> &amp;&amp; !isCheck)&#123;</span><br><span class="line">                isCheck = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isCheck &amp;&amp; valleyCount == <span class="number">0</span>)&#123;</span><br><span class="line">                answer++;</span><br><span class="line">                isCheck = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> steps = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        String path = bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.countingValleys(steps, path);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Repeated String</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210620-repeated-string/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210620-repeated-string/</id>
    <published>2021-06-20T06:32:18.000Z</published>
    <updated>2021-06-20T06:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hackerrank-repeated-string"><a href="#hackerrank-repeated-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#hackerrank-repeated-string"></a> <a href="https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">HackerRank Repeated String</a></h1><p>There is a string, , of lowercase English letters that is repeated infinitely many times. Given an integer, , find and print the number of letter a’s in the first  letters of the infinite string.</p><p>Example</p><p>The substring we consider is , the first  characters of the infinite string. There are  occurrences of a in the substring.</p><p>Function Description</p><p>Complete the repeatedString function in the editor below.</p><p>repeatedString has the following parameter(s):</p><p>s: a string to repeat<br>n: the number of characters to consider<br>Returns</p><p>int: the frequency of a in the substring<br>Input Format</p><p>The first line contains a single string, .<br>The second line contains an integer, .</p><p>Constraints</p><p>For  of the test cases, .<br>Sample Input</p><p>Sample Input 0</p><p>aba<br>10<br>Sample Output 0</p><p>7<br>Explanation 0<br>The first  letters of the infinite string are abaabaabaa. Because there are  a’s, we return .</p><p>Sample Input 1</p><p>a<br>1000000000000<br>Sample Output 1</p><p>1000000000000<br>Explanation 1<br>Because all of the first  letters of the infinite string are a, we return .</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>해당 문제는 주어진 문자열 s의 문자의 반복을 통해 n의 범위까지의 문자열을 만들고 그 중 'a’의 개수를 리턴해주는 문제입니다.</p><p>처음에 정규표현식으로 접근하였다가 올바르지 않는 솔루션인것 같아 최대 문자열의 개수를 이용하여 문제를 해결하였습니다.</p><p>문자열의 최대는 n까지이므로 n / s의 길이를 해주게 되면 s의 문자열이 몇 번 반복되는지 알 수 있습니다. 그리고 n % s로 나눈 나머지는 최대나오는 횟수를 제외한 나머지 문자열을 구할 수 있습니다.</p><p>예를 들어, s가 ‘aba’ n = 10이 주어졌다고 가정하면 s로 만들수 있는 최대의 문자열은 다음과 같습니다.</p><p><code>abaabaabaa</code> 총 길이가 10이 되는 문자열이 되고, abcac로 만들 수 있는 최대 횟수는 3회가 됩니다. 그리고 최대횟수를 제외한 나머지는 a문자열 하나 즉 1개가 남게 됩니다.</p><ol><li>문제풀이를 진행해보면 맨처음에 s라는 문자열에 'a’라는 문자열이 존재하지 않으면 더이상 솔루션을 진행할 필요가 없기 때문에 0을 리턴해주었습니다.</li><li>만약에 n의 범위보다 s의 길이가 크다면 n의 범위를 제외한 나머지범위중에서 'a’의 개수를 카운팅 시켜줍니다.</li><li>만약에 n의 범위보다 s의 길이가 작다면 s로 만들수 있는 최대의 횟수 + s의 나머지의 횟수를 구해줍니다.<br>즉, ‘abaabaaba’ 길이 9 s로 만들 수 있는 최대의 횟수 3(최대 나누어진 개수) * 2(a의 개수) 와 <code>abaabaaba</code>를 제외하면 나머지는 1만큼만 채울 수 있기 때문에 'a’를 그 이후에 붙여나갈 수 있습니다. 따라서 나머지 a의 개수 1 을 더해주게 되면 (3 * 2 + 1) 즉, 7의 값을 도출해낼 수 있습니다.</li><li>n의 범위는 n^12이므로 1000000000000 long의 범위에 주의하여 처리하면 쉽게 구할 수 있습니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;repeatedString&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return a LONG_INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. STRING s</span></span><br><span class="line"><span class="comment">     *  2. LONG_INTEGER n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">repeatedString</span><span class="params">(String s, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">long</span> numOfString = n / s.length();</span><br><span class="line">        <span class="keyword">long</span> remain = n % s.length();</span><br><span class="line">        <span class="keyword">if</span>(!s.contains(<span class="string">&quot;a&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.length() &gt; n)&#123;</span><br><span class="line">            answer = counterOfString(s, remain);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            answer = numOfString * counterOfString(s, s.length()) + counterOfString(s, remain);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">counterOfString</span><span class="params">(String s, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;end; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        String s = bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> n = Long.parseLong(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> result = Result.repeatedString(s, n);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hackerrank-repeated-string&quot;&gt;&lt;a href=&quot;#hackerrank-repeated-string&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#h
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Jumping on the clouds</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210620-jumping-on-the-clouds/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210620-jumping-on-the-clouds/</id>
    <published>2021-06-19T16:44:55.000Z</published>
    <updated>2021-06-19T16:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/jumping-on-the-clouds/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">문제</a></h1><p>There is a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. The player can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus  or . The player must avoid the thunderheads. Determine the minimum number of jumps it will take to jump from the starting postion to the last cloud. It is always possible to win the game.</p><p>For each game, you will get an array of clouds numbered  if they are safe or  if they must be avoided.</p><p>Example</p><p>Index the array from . The number on each cloud is its index in the list so the player must avoid the clouds at indices  and . They could follow these two paths:  or . The first path takes  jumps while the second takes . Return .</p><p>Function Description</p><p>Complete the jumpingOnClouds function in the editor below.</p><p>jumpingOnClouds has the following parameter(s):</p><p>int c[n]: an array of binary integers<br>Returns</p><p>int: the minimum number of jumps required<br>Input Format</p><p>The first line contains an integer , the total number of clouds. The second line contains  space-separated binary integers describing clouds  where .</p><p>Constraints</p><p>Output Format</p><p>Print the minimum number of jumps needed to win the game.</p><p>Sample Input 0</p><p>7<br>0 0 1 0 0 1 0<br>Sample Output 0</p><p>4<br>Explanation 0:<br>The player must avoid  and . The game can be won with a minimum of  jumps:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/20832/1461134731-c258160d15-jump2.png" alt="jump(2).png"></p><p>Sample Input 1</p><p>6<br>0 0 0 0 1 0<br>Sample Output 1</p><p>3<br>Explanation 1:<br>The only thundercloud to avoid is . The game can be won in  jumps:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/20832/1461136358-764298d363-jump5.png" alt="jump(5).png"></p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>연속적인 구름으로 시작하는 모바일 게임에서 현재 구름의 수와 같은 숫자를 가진 구름위에 점프를 할 수 있습니다. 즉 플레이어는 1,2또는 점프를 진행해야하는데 시작위치에서 ~ 마지막 구름으로 점프하는데의 최소 횟수를 구해야합니다.</p><p>0: 안전한 경우, 1: 점프 할 수 없음</p><p><code>Example Index the array from . The number on each cloud is its index in the list so the player must avoid the clouds at indices and . They could follow these two paths: or . The first path takes jumps while the second takes . Return .</code><br>다음과 같은 예제에서 보면 점프를 하는 여러경로로 갈 수 있는것을 확인할 수 있습니다. 그래프 탐색을 통해서 해당되는 구름을 점프를 하면서 마지막 구름까지 최소 횟수를 구해야하기때문에 맨 처음에 떠올린 생각은 DFS, BFS탐색을 진행하는것이 맞다라고 생각을 하였습니다.</p><p>DFS를 생각해낸 이유는 첫번째 지점의 구름에서 마지막구름까지 진행을 하면서 점프를 진행하는데, 주어진 구름의 상태에 따라서 점프를 할 수 있는지, 없는지를 확인하면서 깊이 탐색을 진행하면 된다라고 생각을 하였기때문입니다.</p><p>첫번째 구름에서 점프를 +1, +2 두가지 경우로 시작할 수 있기때문에 2가지 경우로 DFS를 정해주었고, DFS를 탐색하면서 종료조건은 배열에 있는 값이 1일 경우 안전한 구름이 아니기때문에 방문할 수 없게 되므로 종료시켜주었고, 만약 다음 진행하려는 idx값이 n(주어진 구름의 개수) 보다 커지면 더 이상 해당되는 조건을 찾아낼 수 없기때문에 종료시켜주었습니다. 마지막으로 dfs내에서도 1칸점프, 2칸점프의 두가지 경우의 수가 주어지기때문에 두번 호출을 진행하였습니다. 맨 처음에 점프를 하면서 들어갈때는 첫 구름에서 한번 cnt값이 진행된것과 같으므로 1로 호출을 진행하였습니다.</p><p>자세한 사항은 소스코드를 보시면 이해되실 것이라 생각이 듭니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;jumpingOnClouds&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts INTEGER_ARRAY c as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jumpingOnClouds</span><span class="params">(List&lt;Integer&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        n = c.size();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            arr[i] = c.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 시작시 2칸 점프</span></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 시작시 1칸 점프</span></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> dist, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nextIdx = idx + dist;</span><br><span class="line">        <span class="keyword">if</span>(nextIdx &gt; n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[nextIdx] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nextIdx == n-<span class="number">1</span>)&#123;</span><br><span class="line">            answer = Math.min(answer, cnt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(nextIdx, <span class="number">2</span>, cnt+<span class="number">1</span>);</span><br><span class="line">        dfs(nextIdx, <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; c = Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.jumpingOnClouds(c);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Sales By Match</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210619-sales-by-match/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210619-sales-by-match/</id>
    <published>2021-06-19T14:38:34.000Z</published>
    <updated>2021-06-19T14:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">문제</a></h1><p>There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.</p><p>Example</p><p>There is one pair of color  and one of color . There are three odd socks left, one of each color. The number of pairs is .</p><p>Function Description</p><p>Complete the sockMerchant function in the editor below.</p><p>sockMerchant has the following parameter(s):</p><p>int n: the number of socks in the pile<br>int ar[n]: the colors of each sock<br>Returns</p><p>int: the number of pairs<br>Input Format</p><p>The first line contains an integer , the number of socks represented in .<br>The second line contains  space-separated integers, , the colors of the socks in the pile.</p><p>Constraints</p><p>where<br>Sample Input</p><p>STDIN                       Function</p><hr><p>9                           n = 9<br>10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]<br>Sample Output</p><p>3<br>Explanation</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/25168/1474122392-c7b9097430-sock.png" alt="sock.png"></p><p>There are three pairs of socks.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>색상별로 짝을 맞추는 양말더미에서 짝의 개수가 맞는것의 개수를 찾는 문제이다.<br>가장 핵심은 같은값을 가지는 값의 개수를 세준후에 해당 되는 값의 개수에서 / 2로 나누어주면 해당되는 양말의 짝의 개수를 모두 구해나갈 수 있다. 시간복잡도는 O(N) 선형시간으로 처리가 가능하다. N의 범위가 100까지 이므로 완전탐색 N^3의 로직까지 구현해낼 수 있을것으로 생각한다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;sockMerchant&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. INTEGER n</span></span><br><span class="line"><span class="comment">     *  2. INTEGER_ARRAY ar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sockMerchant</span><span class="params">(<span class="keyword">int</span> n, List&lt;Integer&gt; ar)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ar.size(); i++)&#123;</span><br><span class="line">            arr[ar.get(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                answer += (i/<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; ar = Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.sockMerchant(n, ar);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Grading Students</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210619-grading-students/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210619-grading-students/</id>
    <published>2021-06-19T14:16:02.000Z</published>
    <updated>2021-06-19T16:52:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/grading/problem">Grading Students</a></p><h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>HackerLand University has the following grading policy:</p><p>Every student receives a  in the inclusive range from  to .<br>Any  less than  is a failing grade.<br>Sam is a professor at the university and likes to round each student’s  according to these rules:</p><p>If the difference between the  and the next multiple of  is less than , round  up to the next multiple of .<br>If the value of  is less than , no rounding occurs as the result will still be a failing grade.<br>Examples</p><p>round to  (85 - 84 is less than 3)<br>do not round (result is less than 40)<br>do not round (60 - 57 is 3 or higher)<br>Given the initial value of  for each of Sam’s  students, write code to automate the rounding process.</p><p>Function Description</p><p>Complete the function gradingStudents in the editor below.</p><p>gradingStudents has the following parameter(s):</p><p>int grades[n]: the grades before rounding<br>Returns</p><p>int[n]: the grades after rounding as appropriate<br>Input Format</p><p>The first line contains a single integer, , the number of students.<br>Each line  of the  subsequent lines contains a single integer, .</p><p>Constraints</p><p>Sample Input 0</p><p>4<br>73<br>67<br>38<br>33<br>Sample Output 0</p><p>75<br>67<br>40<br>33<br>Explanation 0</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1484768684-54439977a1-curving2.png" alt="image"></p><p>Student  received a , and the next multiple of  from  is . Since , the student’s grade is rounded to .<br>Student  received a , and the next multiple of  from  is . Since , the grade will not be modified and the student’s final grade is .<br>Student  received a , and the next multiple of  from  is . Since , the student’s grade will be rounded to .<br>Student  received a grade below , so the grade will not be modified and the student’s final grade is .</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>문제를 읽어보면 검색하려는 값들이 38 이하일 경우에는 해당값을 반올림을 수행하지 않는다고 합니다.<br><code>no rounding occurs as the result will still be a failing grade.</code><br>그리고, 나눈 나머지 값이 3,4,5인경우 5를 올려주고 8,9,0일 경우 10단위를 바꾸어가면서 숫자를 올려나갑니다. 즉, 나머지가 3이상일 경우 반올림의 기준이되는 5의 값에서 나머지 값을 빼주면 반올림을 하는 값을 구해줄 수 있게 됩니다. 나머지가 3이 아닐 경우에는 현재 기존의 값을 리스트에 담아주게됩니다.</p><p><code>Student received a , and the next multiple of from is . Since , the student's grade is rounded to . Student received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is . Student received a , and the next multiple of from is . Since , the student's grade will be rounded to . Student received a grade below , so the grade will not be modified and the student's final grade is .</code></p><p>다음과 같은 테스트케이스에 잘 설명되어있으니 한번 잘 읽어보시면 될 것 같습니다.</p><h1 id="puli"><a href="#puli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;gradingStudents&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER_ARRAY.</span></span><br><span class="line"><span class="comment">     * The function accepts INTEGER_ARRAY grades as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">gradingStudents</span><span class="params">(List&lt;Integer&gt; grades)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        List&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = grades.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> search = grades.get(i);</span><br><span class="line">            <span class="keyword">int</span> num = grades.get(i) % <span class="number">5</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(search == <span class="number">100</span> || search &lt; <span class="number">38</span>)&#123;</span><br><span class="line">                answer.add(search);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                    answer.add(search + (<span class="number">5</span> - num));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    answer.add(search);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> gradesCount = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; grades = IntStream.range(<span class="number">0</span>, gradesCount).mapToObj(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">            .map(String::trim)</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; result = Result.gradingStudents(grades);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(</span><br><span class="line">            result.stream()</span><br><span class="line">                .map(Object::toString)</span><br><span class="line">                .collect(joining(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">            + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/grading/problem&quot;&gt;Grading Students&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-an
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>3. Template Method Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210619-template-method-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210619-template-method-design-pattern/</id>
    <published>2021-06-19T13:28:24.000Z</published>
    <updated>2021-06-19T13:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="template-method-pattern"><a href="#template-method-pattern" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#template-method-pattern"></a> Template Method Pattern</h1><p>알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의 하는 패턴</p><h1 id="eonje-sayonghalgga"><a href="#eonje-sayonghalgga" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#언제-사용할까"></a> 언제 사용할까?</h1><p>구현하려는 알고리즘이 일정한 프로세스가 있다.<br>구현하려는 알고리즘이 변경가능성이 있다.</p><h1 id="process"><a href="#process" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#process"></a> Process</h1><ol><li>알고리즘을 여러 단계로 나눈다.</li><li>나누어진 알고리즘의 단계를 메소드로 선언한다.</li><li>알고리즘을 수행할 템플릿 메소드를 만든다.</li><li>하위 클래스에서 나눠진 메소드들을 구현한다.</li></ol><p><img src="https://dz2cdn1.dzone.com/storage/temp/14064500-templatemethoddesignpattern.png" alt="Strategy Pattern"></p><h1 id="yogusahang"><a href="#yogusahang" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#요구사항"></a> 요구사항</h1><p>신작 게임의 접속을 구현해주세요.<br>requestConnection(String str):String</p><p>유저가 게임 접속시 다음을 고려합니다.<br>1.보안과정: 보안관련부분을 처리합니다.<br>doSecurity(String string):String<br>2.인증과정: username과 password가 일치하는지 확인합니다.<br>authentication(String id, String password):boolean<br>3.권한과정: 접속자가 유료회원인지 무료회원인지 게임 마스터 인지 확인합니다.<br>authorization(String userName):int<br>4.접속과정: 접속자에게 커넥션 정보를 넘겨줍니다.<br>connection(String info):String</p><h1 id="cuga-yogusahang"><a href="#cuga-yogusahang" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#추가-요구사항"></a> 추가 요구사항</h1><ol><li>보안과정 강화(비밀번호 알고리즘 강화)</li><li>권한 시간에 따라 다르게 처리</li></ol><p>다음 위와 같은 요구사항을 Template Method Design Pattern으로 구현을 진행해보겠습니다.<br>알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의하여 라이브러리처럼 사용한다라고도 할 수 있겠네요. 그리고 접근지정자를 protected를 사용하므로써 해당되는 패키지에서만 사용이 가능하므로 외부에서의 접근을 막을 수도 있어보입니다. 즉, 다른 패키지를 구현하여 해당 메소드를 구현하면 외부에서 접근이 불가능하게 처리할 수 있습니다. Java OOP의 특징중 캡슐화에 대한 내용이기때문에 잘 모르시는 분들이 있다면 추상성, 상속성, 캡슐화, 다형성에 대해서 공부해오시는것을 추천드립니다.</p><p>아래의 코드는 게임을 접속할때 보안작업부터 인증, 인가, 접속까지 Template Method Pattern을 사용하여 만든 예제입니다.</p><h1 id="code"><a href="#code" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><blockquote><p>AbstGameConnectHelper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstGameConnectHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">doSecurity</span><span class="params">(String string)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">authentication</span><span class="params">(String id, String password)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">authorization</span><span class="params">(String userName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">connection</span><span class="params">(String info)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Template Method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">requestConnection</span><span class="params">(String encodedInfo)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 보안작업 -&gt; 암호화된 문자열을 복호화</span></span><br><span class="line">        String decodedInfo = doSecurity(encodedInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//반환된것을 가지고 ID, PASSWORD 할당</span></span><br><span class="line">        String id = <span class="string">&quot;kgh&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;kgh&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!authentication(id, password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;is not validation id and password&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String userName = <span class="string">&quot;kgh-User&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> authorization = authorization(userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (authorization)&#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;after 10 pm Shut Down!&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;game Manager!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Free members&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Paid Members&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Not authorized&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;etc case&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection(decodedInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DefaultGameConnectHelper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGameConnectHelper</span> <span class="keyword">extends</span> <span class="title">AbstGameConnectHelper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doSecurity</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;decoded&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">authentication</span><span class="params">(String id, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;is Check id, password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">authorization</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Authorization Confirm&quot;</span>);</span><br><span class="line">        <span class="comment">// 권한 처리 추가, 10시 이후 권한 처리</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">connection</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Last Connection Step!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Main</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstGameConnectHelper helper = <span class="keyword">new</span> DefaultGameConnectHelper();</span><br><span class="line">        helper.requestConnection(<span class="string">&quot;Id Password, etc. Connection Information&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;template-method-pattern&quot;&gt;&lt;a href=&quot;#template-method-pattern&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#templat
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>2.Adapter Design Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210617-adapter-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210617-adapter-design-pattern/</id>
    <published>2021-06-17T06:53:49.000Z</published>
    <updated>2021-06-19T13:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adapter-pattern"><a href="#adapter-pattern" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#adapter-pattern"></a> Adapter Pattern</h1><p>연관성 없는 두 객체를 묶어서 사용한다.</p><h1 id="hagseub-mogpyo"><a href="#hagseub-mogpyo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#학습-목표"></a> 학습 목표</h1><p>알고리즘을 요구사항에 맞춰 사용할 수 있다.</p><h3 id="yimi"><a href="#yimi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#의미"></a> 의미</h3><p>Adapter는 사전적의미로는 기계 기구등을 다목적으로 사용하기 위한 부가 기구라고 할 수 있습니다.</p><h3 id="gibon-seolgye"><a href="#gibon-seolgye" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#기본-설계"></a> 기본 설계</h3><p><img src="https://online.visual-paradigm.com/repository/images/2e728499-b25b-4b5b-9cb8-1b3b3e059966.png" alt="Adapter"></p><h3 id="yogusahang-1"><a href="#yogusahang-1" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#요구사항-1"></a> 요구사항 1</h3><p>두 수에 대한 다음 연산을 수행하는 객체를 만들기</p><ol><li>수의 두 배의 수를 반환: twiceOf(Float):Float</li><li>수의 half의 수를 반환: halfOf(Float):Float</li></ol><p>구현 객체의 이름은 Adapter</p><p>Math클래스에서 두배와 절반을 구하는 함수는 이미 구현되어 있습니다.</p><p>즉, 어뎁터패턴을 사용하는이유는 미리주어진함수를 어뎁터에서 사용할 수 없기때문에 해당로직을 변경해야하므로 Adapter 를 사용한다.</p><h3 id="yogusahang-2"><a href="#yogusahang-2" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#요구사항-2"></a> 요구사항 2</h3><p>Math 클래스에 새롭게 두 배를 구할 수 있는 함수가 추가된다.</p><ol><li>새로 구현된 알고리즘을 이용하도록 프로그램을 변경하시오.</li><li>절반을 구하는 기능에서 로그를 찍는 기능을 추가하시오.</li></ol><h1 id="code"><a href="#code" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>위의 요구사항처럼 타입의 값과 요구되는 값이 변경되는 경우 Adapter 패턴을 이용하면 의존성을 줄이고 유지보수의 확장성을 올릴 수 있습니다.<br>즉, 공통 클래스로 사용되던 메소드를 변경해야되는 요구사항이 발생하게 된다면 Adapter, Main을 수정하지 않아도 구현체 부분만 변경해서 해당 요구사항들을 Adapter 패턴으로 적용할 수 있습니다.</p><blockquote><p>main class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> AdapterImpl();</span><br><span class="line">        System.out.println(adapter.twiceOf(<span class="number">100f</span>));</span><br><span class="line">        System.out.println(adapter.halfOf(<span class="number">80f</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>math class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">twoTime</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">half</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">doubled</span><span class="params">(Double d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>adapter interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">twiceOf</span><span class="params">(Float f)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">halfOf</span><span class="params">(Float f)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>adapter Implements class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">twiceOf</span><span class="params">(Float f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.doubled(f.doubleValue()).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">halfOf</span><span class="params">(Float f)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;half 함수 호출&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>) Math.half(f.doubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;adapter-pattern&quot;&gt;&lt;a href=&quot;#adapter-pattern&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#adapter-pattern&quot;&gt;&lt;/a&gt; A
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>1.Strategy Design Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210617-strategy-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210617-strategy-design-pattern/</id>
    <published>2021-06-17T06:53:34.000Z</published>
    <updated>2021-06-17T07:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hagseubmogpyo"><a href="#hagseubmogpyo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#학습목표"></a> 학습목표</h1><ul><li>Interface</li><li>Delegate</li><li>Strategy Pattern</li></ul><h3 id="interface"><a href="#interface" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#interface"></a> Interface</h3><p>키보드나 디스플레이 따위 처럼 사람과 컴퓨터를 연결하는 장치</p><ul><li>기능에 대한 <code>선언과 구현을 분리</code></li><li>기능을 사용 통로</li></ul><p>기능을 기능의 선언과 기능의 구현을 분리할 수 있는 기능을 제공한다.</p><h3 id="delegate"><a href="#delegate" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#delegate"></a> Delegate</h3><p>특정 객체의 기능을 사용하기 위하여 다른객체의 기능을 호출하는것.</p><h3 id="strategy-pattern"><a href="#strategy-pattern" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#strategy-pattern"></a> Strategy Pattern</h3><p>여러 알고리즘을 하나의 추상적인 접근점을 만들어서 접근점에서 서로 교환이 가능하도록 하도록 하는 패턴</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/4/45/W3sDesign_Strategy_Design_Pattern_UML.jpg" alt="Strategy Pattern"></p><h1 id="code"><a href="#code" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>아래의 코드는 Strategy 디자인 패턴을 알아보기위하여 게임에서 캐릭터가 스킬 사용에 있어서 Strategy 디자인을 적용하였습니다. 하나의 캐릭터가 스킬을 사용한다고 가정하는 예제입니다.</p><p>즉, Weapon이라고하는 접근점에서 Delegate하여 공격에 대한 기능을 호출하는 방식입니다.</p><blockquote><p>main class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Delegate.AObj;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Interface.AInterface;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Interface.AInterfaceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameCharacter character = <span class="keyword">new</span> GameCharacter();</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Knife());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Sword());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Ax());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>weapon Interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Character class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 접근</span></span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 교환점</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(weapon == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hand Attack!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            weapon.attack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ax class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ax</span> <span class="keyword">implements</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ax Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Knife class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Weapon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Knife</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Knife Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Sword class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sword Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hagseubmogpyo&quot;&gt;&lt;a href=&quot;#hagseubmogpyo&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#학습목표&quot;&gt;&lt;/a&gt; 학습목표&lt;/h1&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
</feed>
