<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gwanhyeon IT Blog</title>
  
  <subtitle>Gwanhyeon IT Blog</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://gwanhyeon.github.io/"/>
  <updated>2021-06-22T08:59:30.000Z</updated>
  <id>http://gwanhyeon.github.io/</id>
  
  <author>
    <name>gwanhyeon Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HackerRank Mark and Toys</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210622-mark-and-toys/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210622-mark-and-toys/</id>
    <published>2021-06-22T08:52:58.000Z</published>
    <updated>2021-06-22T08:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/mark-and-toys/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=sorting">문제</a></h1><p>Mark and Jane are very happy after having their first child. Their son loves toys, so Mark wants to buy some. There are a number of different toys lying in front of him, tagged with their prices. Mark has only a certain amount to spend, and he wants to maximize the number of toys he buys with this money. Given a list of toy prices and an amount to spend, determine the maximum number of gifts he can buy.</p><p>Note Each toy can be purchased only once.</p><h3 id="example"><a href="#example" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>The budget is  units of currency. He can buy items that cost  for , or  for  units. The maximum is  items.</p><h3 id="function-description"><a href="#function-description" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#function-description"></a> Function Description</h3><p>Complete the function maximumToys in the editor below.</p><p>maximumToys has the following parameter(s):</p><p>int prices[n]: the toy prices<br>int k: Mark’s budget</p><h3 id="returns"><a href="#returns" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#returns"></a> Returns</h3><p>int: the maximum number of toys<br>Input Format</p><p>The first line contains two integers,  and , the number of priced toys and the amount Mark has to spend.<br>The next line contains  space-separated integers</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3><p>1 &lt;= n &lt;= 10^5<br>1 &lt;= k &lt;= 10^9<br>1 &lt;= prices[i] &lt;= 10^9</p><p>A toy can’t be bought multiple times.</p><h3 id="sample-input"><a href="#sample-input" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#sample-input"></a> Sample Input</h3><p>7 50<br>1 12 5 111 200 1000 10</p><h3 id="sample-output"><a href="#sample-output" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><p>4</p><h3 id="explanation"><a href="#explanation" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>He can buy only  toys at most. These toys have the following prices: .</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>이번 문제는 주어진 예산을 가지고 만들 수 있는 모든 경우의 수 리스트중에서 리스트의 가장 큰 맥시멈 사이즈를 구하는 문제였습니다.</p><p>단순히 이중 포문을 통하여 각각의 모든 경우를 구해주었고, 모든 경우의 값을 더해나가면서 k(budget)의 값을 초과한다는것은 예산으로 아이템을 살 수 없는 경우이기 때문에 해당되는 경우의수에서 종료를 시켜주었습니다.<br>각각의 경우의 수, 즉 아이템의 횟수를 매번 체크하여 k의 범위에 있을때 까지만 증가를 시켜주었습니다. 그리고 아이템의 횟수에 대한 값의 최댓값을 매번 구해주었습니다.</p><p>이때 주의 할점은 모든 값을 정렬을 시켜준후 경우의 수를 구해주게 되면 Worst Case O(N^2)의 경우를 모두 확인해보지 않아도 되기때문에 시간복잡도 성능이 용이할 것이라 판단이 됩니다.</p><blockquote><p>Time Complexity</p></blockquote><p>Worst Case : O(N^2)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;maximumToys&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. INTEGER_ARRAY prices</span></span><br><span class="line"><span class="comment">     *  2. INTEGER k</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maximumToys</span><span class="params">(List&lt;Integer&gt; prices, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Write your code here</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        Collections.sort(prices);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = prices.get(i);</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isCheck = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; k)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sum += prices.get(j);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            answer = Math.max(answer, cnt);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        String[] firstMultipleInput = bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(firstMultipleInput[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(firstMultipleInput[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; prices = Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.maximumToys(prices, k);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank 2d Array ds</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210621-2d-array-ds/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210621-2d-array-ds/</id>
    <published>2021-06-21T09:50:56.000Z</published>
    <updated>2021-06-21T10:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/2d-array/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=arrays">문제</a></h1><h3 id="given-a-2d-array"><a href="#given-a-2d-array" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#given-a-2d-array"></a> Given a  2D Array, :</h3><p>1 1 1 0 0 0<br>0 1 0 0 0 0<br>1 1 1 0 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0<br>An hourglass in  is a subset of values with indices falling in this pattern in 's graphical representation:</p><p>a b c<br>d<br>e f g<br>There are  hourglasses in . An hourglass sum is the sum of an hourglass’ values. Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum. The array will always be .</p><h3 id="example"><a href="#example" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>-9 -9 -9  1 1 1<br>0 -9  0  4 3 2<br>-9 -9 -9  1 2 3<br>0  0  8  6 6 0<br>0  0  0 -2 0 0<br>0  0  1  2 4 0</p><h3 id="the-hourglass-sums-are"><a href="#the-hourglass-sums-are" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#the-hourglass-sums-are"></a> The  hourglass sums are:</h3><p>-63, -34, -9, 12,<br>-10,   0, 28, 23,<br>-27, -11, -2, 10,<br>9,  17, 25, 18<br>The highest hourglass sum is  from the hourglass beginning at row , column :</p><p>0 4 3<br>1<br>8 6 6<br>Note: If you have already solved the Java domain’s Java 2D Array challenge, you may wish to skip this challenge.</p><h3 id="function-description"><a href="#function-description" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#function-description"></a> Function Description</h3><p>Complete the function hourglassSum in the editor below.</p><p>hourglassSum has the following parameter(s):</p><p>int arr[6][6]: an array of integers<br>Returns</p><p>int: the maximum hourglass sum</p><h3 id="input-format"><a href="#input-format" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#input-format"></a> Input Format</h3><p>Each of the  lines of inputs  contains  space-separated integers .</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3><ul><li>-9 &lt;= arr[i][j] &lt;= 9</li><li>0 &lt;= i, j &lt;= 5</li></ul><h3 id="output-format"><a href="#output-format" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#output-format"></a> Output Format</h3><p>Print the largest (maximum) hourglass sum found in .</p><p>Sample Input</p><p>1 1 1 0 0 0<br>0 1 0 0 0 0<br>1 1 1 0 0 0<br>0 0 2 4 4 0<br>0 0 0 2 0 0<br>0 0 1 2 4 0</p><h3 id="sample-output"><a href="#sample-output" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><p>19</p><h3 id="explanation"><a href="#explanation" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>contains the following hourglasses:</p><p>image<br>The hourglass with the maximum sum () is:</p><p>2 4 4<br>2<br>1 2 4</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>이번 문제는 2중 배열이 주어졌을때 모래시계의 최댓값을 구하는 문제이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>모래 시계의 형태는 다음과 같다. 맨 처음에 해당 되는 모래시계의 전체의 합을 구하는 문제인줄 알고 오역을 하게 되어서 Failed가 났다.</p><p>문제에서 원하는것은 이중배열이 주어질때 만들 수 있는 모든 모래시계의 합중 최댓값을 구하는 문제이다.</p><p>내가 생각해낸 방법은 다음과 같다.</p><ol><li>행,열의 기준으로 해당되는 모래시계의 형태를 몇번 인덱스까지 갈 수 있을까를 먼저 고민했다.</li></ol><p>예를 들어 행 0,1,2 열 0,1,2부터 시작해서 모래시계를 만들 수 있는지를 확인한다고 가정하자. 행의 길이가 6이라고 가정하면 모래 시계의 형태대로 갈 수 있는 값은 <code>행의 길이 - 2</code> 만큼이 가능해진다.<br>즉, 행 0,1,2의 경우 해당 행에서 4개의 모래시계를 만들 수 있다는것이다.</p><blockquote><p>모래시계 1</p></blockquote><p><code>0 0 0</code> 0 0 0<br>0 <code>0</code> 0 0 0 0<br><code>0 0 0</code> 0 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><blockquote><p>모래시계 2</p></blockquote><p>0 <code>0 0 0</code> 0 0<br>0 0 <code>0</code> 0 0 0<br>0 <code>0 0 0</code> 0 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><blockquote><p>모래시계 3</p></blockquote><p>0 0 <code>0 0 0</code> 0<br>0 0 0 <code>0</code> 0 0<br>0 0 <code>0 0 0</code> 0<br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><blockquote><p>모래시계 4</p></blockquote><p>0 0 0 <code>0 0 0</code><br>0 0 0 0 <code>0</code> 0<br>0 0 0 <code>0 0 0</code><br>0 0 0 0 0 0<br>0 0 0 0 0 0</p><p>이제 이렇게 규칙적으로 모래시계를 만들 수 있다는것을 알게되면 우리가 어디까지 반복문을 돌려야할지 알게 된다.<br><code>행의 길이 - 2, 열의 길이 -2</code>까지 이중포문을 돌려서 해당되는 모래 시계를 구해주면 되겠다.</p><p>즉 우리가 구해야할 점화식은 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a(i,j)   a(i,j+<span class="number">1</span>)   a(i,j+<span class="number">2</span>)</span><br><span class="line">   -     a(i+<span class="number">1</span>,j+<span class="number">1</span>)     -</span><br><span class="line">a(i+<span class="number">2</span>,j) a(i+<span class="number">2</span>,j+<span class="number">1</span>) a(i+<span class="number">2</span>,j+<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>이제 이것을 바탕으로 매번 모래시계를 만들 수 있는 경우에서 최댓값을 구해주게 된다. 문제의 제약조건을 살펴보면<br><code>-9 &lt;= arr[i][j] &lt;= 9</code> 의 범위를 갖는다. 따라서, 우리가 최댓값을 구해줄때 default로 설정할 값이 -63보다 작은값으로 설정을 해주어야한다. 이것이 무슨말이냐면 모래시계를 구할때 위에 설명한 점화식에서 총 7개의 영역을 가지고 있다. 해당 되는 영역에서 모든 값들이 -9로 주어졌다고 가정을 하자. 그러면 다음과 같아질 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">9</span> -<span class="number">9</span> -<span class="number">9</span></span><br><span class="line"> X -<span class="number">9</span>  X</span><br><span class="line">-<span class="number">9</span> -<span class="number">9</span> -<span class="number">9</span></span><br></pre></td></tr></table></figure><p>따라서, 우리가 기본으로 설정할 값은 7 * -9 = -63의 값보다 작은 값으로 설정을 하면서 최댓값을 구해주면된다.<br>처음에 아무생각없이 0으로 설정하였다가 다른 테스트케이스에서 걸리는것을 보고 바로 수정을 하였다.</p><blockquote><p>시간복잡도</p></blockquote><p>O(N^2)</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;hourglassSum&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts 2D_INTEGER_ARRAY arr as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hourglassSum</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> answer = -<span class="number">64</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.size()-<span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.get(i).size()-<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                sum += arr.get(i).get(j) + arr.get(i).get(j+<span class="number">1</span>) + arr.get(i).get(j+<span class="number">2</span>);</span><br><span class="line">                sum += arr.get(i+<span class="number">1</span>).get(j+<span class="number">1</span>);</span><br><span class="line">                sum += arr.get(i+<span class="number">2</span>).get(j) + arr.get(i+<span class="number">2</span>).get(j+<span class="number">1</span>) + arr.get(i+<span class="number">2</span>).get(j+<span class="number">2</span>);</span><br><span class="line">                answer = Math.max(answer, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">6</span>).forEach(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                arr.add(</span><br><span class="line">                    Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">                        .map(Integer::parseInt)</span><br><span class="line">                        .collect(toList())</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.hourglassSum(arr);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Counting Valleys</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210621-counting-valleys/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210621-counting-valleys/</id>
    <published>2021-06-21T07:53:44.000Z</published>
    <updated>2021-06-21T08:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/counting-valleys/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">문제</a></h1><p>An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly  steps, for every step it was noted if it was an uphill, , or a downhill,  step. Hikes always start and end at sea level, and each step up or down represents a  unit change in altitude. We define the following terms:</p><p>A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.<br>A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.<br>Given the sequence of up and down steps during a hike, find and print the number of valleys walked through.</p><h3 id="example"><a href="#example" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>The hiker first enters a valley  units deep. Then they climb out and up onto a mountain  units high. Finally, the hiker returns to sea level and ends the hike.</p><h3 id="function-description"><a href="#function-description" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#function-description"></a> Function Description</h3><p>Complete the countingValleys function in the editor below.</p><p>countingValleys has the following parameter(s):</p><p>int steps: the number of steps on the hike<br>string path: a string describing the path<br>Returns</p><p>int: the number of valleys traversed</p><h3 id="input-format"><a href="#input-format" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#input-format"></a> Input Format</h3><p>The first line contains an integer , the number of steps in the hike.<br>The second line contains a single string , of  characters that describe the path.</p><h3 id="constraints"><a href="#constraints" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3><p>2 &lt;= steps &lt;= 10^6<br>path[i] {UD}를 포함한다.</p><h3 id="sample-input"><a href="#sample-input" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#sample-input"></a> Sample Input</h3><p>8<br>UDDDUDUU</p><h3 id="sample-output"><a href="#sample-output" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><p>1</p><h3 id="explanation"><a href="#explanation" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>If we represent _ as sea level, a step up as /, and a step down as , the hike can be drawn as:</p><p>_/\      _<br>\    /<br>//<br>The hiker enters and leaves one valley.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>해당 문제는 등산객에 하이킹에 대한 기록을 처리하는데 등산객이 계곡을 들어가게 되는데 계곡에 들어가서 다시 해수면으로 올라오는것의 갯수를 구하는되는 문제입니다.</p><p>처음에 왜 등산객이 해수면으로 들어갈까 라는 의문을 갖긴…? 했지만 문제를 다시 살펴보면 문제에서 예제를 준것을 잘 살펴보면 쉽게 이해하실 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">UDDDUDUU</span><br><span class="line">_/\      _</span><br><span class="line">   \    /</span><br><span class="line">    \/\/</span><br></pre></td></tr></table></figure><p>입력이 8이고 UDDDUDUU의 순서대로 등산객의 행동이 주어졌다고 가정하겠습니다.</p><ul><li>_는 현재 해수면을 나타냅니다.</li><li>/ 해수면 위로 간 것을 나타냅니다.</li><li>\ 해수면 아래로 간것을 나타냅니다.</li></ul><p><code>1 0 -1 -2 -1 -2 -1 0</code></p><p>해당되는 의미만 잘 살피면 해당되는 문제를 쉽게 푸실 수 있습니다.<br>현재 해수면 _ 에서 시작해서 해당되는 명령을 처리한다고 할때 올라가면 +1, 내려가면 -1로 생각을 하여 문제를 풀었습니다. 즉, valleyCount라는 변수를 선언하여 해당되는 현재의 상태를 나타낼 수 있도록 하여 현재 해수면의 아래에 진입했는지를 확인하여 isCheck 변수로 boolean 체크를 해주었습니다. 즉, 해수면 아래로 진입해서 해수면 즉, 0 의 값에 도달하였을때 하나의 해수면에 올라온 기록을 체크할 수 있기때문입니다.</p><blockquote><p>생각해보기</p></blockquote><ul><li>'U’가 주어지면 +1, 'D’가 주어지면 -1</li><li>해수면 아래로 진입하였는지?</li><li>해수면 아래로 진입하였고 다시 해수면 _(0의 값)에 도달하였으면 기록의 개수를 증가시켜줍니다. 그리고 체크를 해제하여 다시 해수면의 아래로 들어가는경우를 찾아냅니다.</li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;countingValleys&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. INTEGER steps</span></span><br><span class="line"><span class="comment">     *  2. STRING path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countingValleys</span><span class="params">(<span class="keyword">int</span> steps, String path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">int</span> valleyCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isCheck = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : path.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                valleyCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                valleyCount--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(valleyCount &lt; <span class="number">0</span> &amp;&amp; !isCheck)&#123;</span><br><span class="line">                isCheck = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isCheck &amp;&amp; valleyCount == <span class="number">0</span>)&#123;</span><br><span class="line">                answer++;</span><br><span class="line">                isCheck = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> steps = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        String path = bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.countingValleys(steps, path);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Repeated String</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210620-repeated-string/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210620-repeated-string/</id>
    <published>2021-06-20T06:32:18.000Z</published>
    <updated>2021-06-20T06:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hackerrank-repeated-string"><a href="#hackerrank-repeated-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#hackerrank-repeated-string"></a> <a href="https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">HackerRank Repeated String</a></h1><p>There is a string, , of lowercase English letters that is repeated infinitely many times. Given an integer, , find and print the number of letter a’s in the first  letters of the infinite string.</p><p>Example</p><p>The substring we consider is , the first  characters of the infinite string. There are  occurrences of a in the substring.</p><p>Function Description</p><p>Complete the repeatedString function in the editor below.</p><p>repeatedString has the following parameter(s):</p><p>s: a string to repeat<br>n: the number of characters to consider<br>Returns</p><p>int: the frequency of a in the substring<br>Input Format</p><p>The first line contains a single string, .<br>The second line contains an integer, .</p><p>Constraints</p><p>For  of the test cases, .<br>Sample Input</p><p>Sample Input 0</p><p>aba<br>10<br>Sample Output 0</p><p>7<br>Explanation 0<br>The first  letters of the infinite string are abaabaabaa. Because there are  a’s, we return .</p><p>Sample Input 1</p><p>a<br>1000000000000<br>Sample Output 1</p><p>1000000000000<br>Explanation 1<br>Because all of the first  letters of the infinite string are a, we return .</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>해당 문제는 주어진 문자열 s의 문자의 반복을 통해 n의 범위까지의 문자열을 만들고 그 중 'a’의 개수를 리턴해주는 문제입니다.</p><p>처음에 정규표현식으로 접근하였다가 올바르지 않는 솔루션인것 같아 최대 문자열의 개수를 이용하여 문제를 해결하였습니다.</p><p>문자열의 최대는 n까지이므로 n / s의 길이를 해주게 되면 s의 문자열이 몇 번 반복되는지 알 수 있습니다. 그리고 n % s로 나눈 나머지는 최대나오는 횟수를 제외한 나머지 문자열을 구할 수 있습니다.</p><p>예를 들어, s가 ‘aba’ n = 10이 주어졌다고 가정하면 s로 만들수 있는 최대의 문자열은 다음과 같습니다.</p><p><code>abaabaabaa</code> 총 길이가 10이 되는 문자열이 되고, abcac로 만들 수 있는 최대 횟수는 3회가 됩니다. 그리고 최대횟수를 제외한 나머지는 a문자열 하나 즉 1개가 남게 됩니다.</p><ol><li>문제풀이를 진행해보면 맨처음에 s라는 문자열에 'a’라는 문자열이 존재하지 않으면 더이상 솔루션을 진행할 필요가 없기 때문에 0을 리턴해주었습니다.</li><li>만약에 n의 범위보다 s의 길이가 크다면 n의 범위를 제외한 나머지범위중에서 'a’의 개수를 카운팅 시켜줍니다.</li><li>만약에 n의 범위보다 s의 길이가 작다면 s로 만들수 있는 최대의 횟수 + s의 나머지의 횟수를 구해줍니다.<br>즉, ‘abaabaaba’ 길이 9 s로 만들 수 있는 최대의 횟수 3(최대 나누어진 개수) * 2(a의 개수) 와 <code>abaabaaba</code>를 제외하면 나머지는 1만큼만 채울 수 있기 때문에 'a’를 그 이후에 붙여나갈 수 있습니다. 따라서 나머지 a의 개수 1 을 더해주게 되면 (3 * 2 + 1) 즉, 7의 값을 도출해낼 수 있습니다.</li><li>n의 범위는 n^12이므로 1000000000000 long의 범위에 주의하여 처리하면 쉽게 구할 수 있습니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;repeatedString&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return a LONG_INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. STRING s</span></span><br><span class="line"><span class="comment">     *  2. LONG_INTEGER n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">repeatedString</span><span class="params">(String s, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">long</span> numOfString = n / s.length();</span><br><span class="line">        <span class="keyword">long</span> remain = n % s.length();</span><br><span class="line">        <span class="keyword">if</span>(!s.contains(<span class="string">&quot;a&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.length() &gt; n)&#123;</span><br><span class="line">            answer = counterOfString(s, remain);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            answer = numOfString * counterOfString(s, s.length()) + counterOfString(s, remain);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">counterOfString</span><span class="params">(String s, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;end; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        String s = bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> n = Long.parseLong(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> result = Result.repeatedString(s, n);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hackerrank-repeated-string&quot;&gt;&lt;a href=&quot;#hackerrank-repeated-string&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#h
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Jumping on the clouds</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210620-jumping-on-the-clouds/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210620-jumping-on-the-clouds/</id>
    <published>2021-06-19T16:44:55.000Z</published>
    <updated>2021-06-19T16:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/jumping-on-the-clouds/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">문제</a></h1><p>There is a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. The player can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus  or . The player must avoid the thunderheads. Determine the minimum number of jumps it will take to jump from the starting postion to the last cloud. It is always possible to win the game.</p><p>For each game, you will get an array of clouds numbered  if they are safe or  if they must be avoided.</p><p>Example</p><p>Index the array from . The number on each cloud is its index in the list so the player must avoid the clouds at indices  and . They could follow these two paths:  or . The first path takes  jumps while the second takes . Return .</p><p>Function Description</p><p>Complete the jumpingOnClouds function in the editor below.</p><p>jumpingOnClouds has the following parameter(s):</p><p>int c[n]: an array of binary integers<br>Returns</p><p>int: the minimum number of jumps required<br>Input Format</p><p>The first line contains an integer , the total number of clouds. The second line contains  space-separated binary integers describing clouds  where .</p><p>Constraints</p><p>Output Format</p><p>Print the minimum number of jumps needed to win the game.</p><p>Sample Input 0</p><p>7<br>0 0 1 0 0 1 0<br>Sample Output 0</p><p>4<br>Explanation 0:<br>The player must avoid  and . The game can be won with a minimum of  jumps:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/20832/1461134731-c258160d15-jump2.png" alt="jump(2).png"></p><p>Sample Input 1</p><p>6<br>0 0 0 0 1 0<br>Sample Output 1</p><p>3<br>Explanation 1:<br>The only thundercloud to avoid is . The game can be won in  jumps:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/20832/1461136358-764298d363-jump5.png" alt="jump(5).png"></p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>연속적인 구름으로 시작하는 모바일 게임에서 현재 구름의 수와 같은 숫자를 가진 구름위에 점프를 할 수 있습니다. 즉 플레이어는 1,2또는 점프를 진행해야하는데 시작위치에서 ~ 마지막 구름으로 점프하는데의 최소 횟수를 구해야합니다.</p><p>0: 안전한 경우, 1: 점프 할 수 없음</p><p><code>Example Index the array from . The number on each cloud is its index in the list so the player must avoid the clouds at indices and . They could follow these two paths: or . The first path takes jumps while the second takes . Return .</code><br>다음과 같은 예제에서 보면 점프를 하는 여러경로로 갈 수 있는것을 확인할 수 있습니다. 그래프 탐색을 통해서 해당되는 구름을 점프를 하면서 마지막 구름까지 최소 횟수를 구해야하기때문에 맨 처음에 떠올린 생각은 DFS, BFS탐색을 진행하는것이 맞다라고 생각을 하였습니다.</p><p>DFS를 생각해낸 이유는 첫번째 지점의 구름에서 마지막구름까지 진행을 하면서 점프를 진행하는데, 주어진 구름의 상태에 따라서 점프를 할 수 있는지, 없는지를 확인하면서 깊이 탐색을 진행하면 된다라고 생각을 하였기때문입니다.</p><p>첫번째 구름에서 점프를 +1, +2 두가지 경우로 시작할 수 있기때문에 2가지 경우로 DFS를 정해주었고, DFS를 탐색하면서 종료조건은 배열에 있는 값이 1일 경우 안전한 구름이 아니기때문에 방문할 수 없게 되므로 종료시켜주었고, 만약 다음 진행하려는 idx값이 n(주어진 구름의 개수) 보다 커지면 더 이상 해당되는 조건을 찾아낼 수 없기때문에 종료시켜주었습니다. 마지막으로 dfs내에서도 1칸점프, 2칸점프의 두가지 경우의 수가 주어지기때문에 두번 호출을 진행하였습니다. 맨 처음에 점프를 하면서 들어갈때는 첫 구름에서 한번 cnt값이 진행된것과 같으므로 1로 호출을 진행하였습니다.</p><p>자세한 사항은 소스코드를 보시면 이해되실 것이라 생각이 듭니다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;jumpingOnClouds&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts INTEGER_ARRAY c as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jumpingOnClouds</span><span class="params">(List&lt;Integer&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        n = c.size();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            arr[i] = c.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 시작시 2칸 점프</span></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 시작시 1칸 점프</span></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> dist, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nextIdx = idx + dist;</span><br><span class="line">        <span class="keyword">if</span>(nextIdx &gt; n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[nextIdx] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nextIdx == n-<span class="number">1</span>)&#123;</span><br><span class="line">            answer = Math.min(answer, cnt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(nextIdx, <span class="number">2</span>, cnt+<span class="number">1</span>);</span><br><span class="line">        dfs(nextIdx, <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; c = Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.jumpingOnClouds(c);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Sales By Match</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210619-sales-by-match/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210619-sales-by-match/</id>
    <published>2021-06-19T14:38:34.000Z</published>
    <updated>2021-06-19T14:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=warmup">문제</a></h1><p>There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.</p><p>Example</p><p>There is one pair of color  and one of color . There are three odd socks left, one of each color. The number of pairs is .</p><p>Function Description</p><p>Complete the sockMerchant function in the editor below.</p><p>sockMerchant has the following parameter(s):</p><p>int n: the number of socks in the pile<br>int ar[n]: the colors of each sock<br>Returns</p><p>int: the number of pairs<br>Input Format</p><p>The first line contains an integer , the number of socks represented in .<br>The second line contains  space-separated integers, , the colors of the socks in the pile.</p><p>Constraints</p><p>where<br>Sample Input</p><p>STDIN                       Function</p><hr><p>9                           n = 9<br>10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]<br>Sample Output</p><p>3<br>Explanation</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/25168/1474122392-c7b9097430-sock.png" alt="sock.png"></p><p>There are three pairs of socks.</p><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>색상별로 짝을 맞추는 양말더미에서 짝의 개수가 맞는것의 개수를 찾는 문제이다.<br>가장 핵심은 같은값을 가지는 값의 개수를 세준후에 해당 되는 값의 개수에서 / 2로 나누어주면 해당되는 양말의 짝의 개수를 모두 구해나갈 수 있다. 시간복잡도는 O(N) 선형시간으로 처리가 가능하다. N의 범위가 100까지 이므로 완전탐색 N^3의 로직까지 구현해낼 수 있을것으로 생각한다.</p><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;sockMerchant&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="comment">     * The function accepts following parameters:</span></span><br><span class="line"><span class="comment">     *  1. INTEGER n</span></span><br><span class="line"><span class="comment">     *  2. INTEGER_ARRAY ar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sockMerchant</span><span class="params">(<span class="keyword">int</span> n, List&lt;Integer&gt; ar)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ar.size(); i++)&#123;</span><br><span class="line">            arr[ar.get(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                answer += (i/<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; ar = Stream.of(bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = Result.sockMerchant(n, ar);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.hackerrank.co
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank Grading Students</title>
    <link href="http://gwanhyeon.github.io/Hackerrank-20210619-grading-students/"/>
    <id>http://gwanhyeon.github.io/Hackerrank-20210619-grading-students/</id>
    <published>2021-06-19T14:16:02.000Z</published>
    <updated>2021-06-19T16:52:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/grading/problem">Grading Students</a></p><h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>HackerLand University has the following grading policy:</p><p>Every student receives a  in the inclusive range from  to .<br>Any  less than  is a failing grade.<br>Sam is a professor at the university and likes to round each student’s  according to these rules:</p><p>If the difference between the  and the next multiple of  is less than , round  up to the next multiple of .<br>If the value of  is less than , no rounding occurs as the result will still be a failing grade.<br>Examples</p><p>round to  (85 - 84 is less than 3)<br>do not round (result is less than 40)<br>do not round (60 - 57 is 3 or higher)<br>Given the initial value of  for each of Sam’s  students, write code to automate the rounding process.</p><p>Function Description</p><p>Complete the function gradingStudents in the editor below.</p><p>gradingStudents has the following parameter(s):</p><p>int grades[n]: the grades before rounding<br>Returns</p><p>int[n]: the grades after rounding as appropriate<br>Input Format</p><p>The first line contains a single integer, , the number of students.<br>Each line  of the  subsequent lines contains a single integer, .</p><p>Constraints</p><p>Sample Input 0</p><p>4<br>73<br>67<br>38<br>33<br>Sample Output 0</p><p>75<br>67<br>40<br>33<br>Explanation 0</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1484768684-54439977a1-curving2.png" alt="image"></p><p>Student  received a , and the next multiple of  from  is . Since , the student’s grade is rounded to .<br>Student  received a , and the next multiple of  from  is . Since , the grade will not be modified and the student’s final grade is .<br>Student  received a , and the next multiple of  from  is . Since , the student’s grade will be rounded to .<br>Student  received a grade below , so the grade will not be modified and the student’s final grade is .</p><h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1><p>문제를 읽어보면 검색하려는 값들이 38 이하일 경우에는 해당값을 반올림을 수행하지 않는다고 합니다.<br><code>no rounding occurs as the result will still be a failing grade.</code><br>그리고, 나눈 나머지 값이 3,4,5인경우 5를 올려주고 8,9,0일 경우 10단위를 바꾸어가면서 숫자를 올려나갑니다. 즉, 나머지가 3이상일 경우 반올림의 기준이되는 5의 값에서 나머지 값을 빼주면 반올림을 하는 값을 구해줄 수 있게 됩니다. 나머지가 3이 아닐 경우에는 현재 기존의 값을 리스트에 담아주게됩니다.</p><p><code>Student received a , and the next multiple of from is . Since , the student's grade is rounded to . Student received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is . Student received a , and the next multiple of from is . Since , the student's grade will be rounded to . Student received a grade below , so the grade will not be modified and the student's final grade is .</code></p><p>다음과 같은 테스트케이스에 잘 설명되어있으니 한번 잘 읽어보시면 될 것 같습니다.</p><h1 id="puli"><a href="#puli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Complete the &#x27;gradingStudents&#x27; function below.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The function is expected to return an INTEGER_ARRAY.</span></span><br><span class="line"><span class="comment">     * The function accepts INTEGER_ARRAY grades as parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">gradingStudents</span><span class="params">(List&lt;Integer&gt; grades)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        List&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = grades.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> search = grades.get(i);</span><br><span class="line">            <span class="keyword">int</span> num = grades.get(i) % <span class="number">5</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(search == <span class="number">100</span> || search &lt; <span class="number">38</span>)&#123;</span><br><span class="line">                answer.add(search);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                    answer.add(search + (<span class="number">5</span> - num));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    answer.add(search);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> gradesCount = Integer.parseInt(bufferedReader.readLine().trim());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; grades = IntStream.range(<span class="number">0</span>, gradesCount).mapToObj(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> bufferedReader.readLine().replaceAll(<span class="string">&quot;\\s+$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">            .map(String::trim)</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; result = Result.gradingStudents(grades);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(</span><br><span class="line">            result.stream()</span><br><span class="line">                .map(Object::toString)</span><br><span class="line">                .collect(joining(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">            + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/grading/problem&quot;&gt;Grading Students&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-an
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/categories/algorithm/hackerrank/"/>
    
    
      <category term="hackerrank" scheme="http://gwanhyeon.github.io/tags/hackerrank/"/>
    
  </entry>
  
  <entry>
    <title>3. Template Method Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210619-template-method-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210619-template-method-design-pattern/</id>
    <published>2021-06-19T13:28:24.000Z</published>
    <updated>2021-06-19T13:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="template-method-pattern"><a href="#template-method-pattern" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#template-method-pattern"></a> Template Method Pattern</h1><p>알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의 하는 패턴</p><h1 id="eonje-sayonghalgga"><a href="#eonje-sayonghalgga" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#언제-사용할까"></a> 언제 사용할까?</h1><p>구현하려는 알고리즘이 일정한 프로세스가 있다.<br>구현하려는 알고리즘이 변경가능성이 있다.</p><h1 id="process"><a href="#process" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#process"></a> Process</h1><ol><li>알고리즘을 여러 단계로 나눈다.</li><li>나누어진 알고리즘의 단계를 메소드로 선언한다.</li><li>알고리즘을 수행할 템플릿 메소드를 만든다.</li><li>하위 클래스에서 나눠진 메소드들을 구현한다.</li></ol><p><img src="https://dz2cdn1.dzone.com/storage/temp/14064500-templatemethoddesignpattern.png" alt="Strategy Pattern"></p><h1 id="yogusahang"><a href="#yogusahang" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#요구사항"></a> 요구사항</h1><p>신작 게임의 접속을 구현해주세요.<br>requestConnection(String str):String</p><p>유저가 게임 접속시 다음을 고려합니다.<br>1.보안과정: 보안관련부분을 처리합니다.<br>doSecurity(String string):String<br>2.인증과정: username과 password가 일치하는지 확인합니다.<br>authentication(String id, String password):boolean<br>3.권한과정: 접속자가 유료회원인지 무료회원인지 게임 마스터 인지 확인합니다.<br>authorization(String userName):int<br>4.접속과정: 접속자에게 커넥션 정보를 넘겨줍니다.<br>connection(String info):String</p><h1 id="cuga-yogusahang"><a href="#cuga-yogusahang" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#추가-요구사항"></a> 추가 요구사항</h1><ol><li>보안과정 강화(비밀번호 알고리즘 강화)</li><li>권한 시간에 따라 다르게 처리</li></ol><p>다음 위와 같은 요구사항을 Template Method Design Pattern으로 구현을 진행해보겠습니다.<br>알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의하여 라이브러리처럼 사용한다라고도 할 수 있겠네요. 그리고 접근지정자를 protected를 사용하므로써 해당되는 패키지에서만 사용이 가능하므로 외부에서의 접근을 막을 수도 있어보입니다. 즉, 다른 패키지를 구현하여 해당 메소드를 구현하면 외부에서 접근이 불가능하게 처리할 수 있습니다. Java OOP의 특징중 캡슐화에 대한 내용이기때문에 잘 모르시는 분들이 있다면 추상성, 상속성, 캡슐화, 다형성에 대해서 공부해오시는것을 추천드립니다.</p><p>아래의 코드는 게임을 접속할때 보안작업부터 인증, 인가, 접속까지 Template Method Pattern을 사용하여 만든 예제입니다.</p><h1 id="code"><a href="#code" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><blockquote><p>AbstGameConnectHelper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstGameConnectHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">doSecurity</span><span class="params">(String string)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">authentication</span><span class="params">(String id, String password)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">authorization</span><span class="params">(String userName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">connection</span><span class="params">(String info)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Template Method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">requestConnection</span><span class="params">(String encodedInfo)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 보안작업 -&gt; 암호화된 문자열을 복호화</span></span><br><span class="line">        String decodedInfo = doSecurity(encodedInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//반환된것을 가지고 ID, PASSWORD 할당</span></span><br><span class="line">        String id = <span class="string">&quot;kgh&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;kgh&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!authentication(id, password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;is not validation id and password&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String userName = <span class="string">&quot;kgh-User&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> authorization = authorization(userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (authorization)&#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;after 10 pm Shut Down!&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;game Manager!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Free members&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Paid Members&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Not authorized&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;etc case&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection(decodedInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DefaultGameConnectHelper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGameConnectHelper</span> <span class="keyword">extends</span> <span class="title">AbstGameConnectHelper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doSecurity</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;decoded&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">authentication</span><span class="params">(String id, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;is Check id, password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">authorization</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Authorization Confirm&quot;</span>);</span><br><span class="line">        <span class="comment">// 권한 처리 추가, 10시 이후 권한 처리</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">connection</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Last Connection Step!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Main</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TemplateMethodPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstGameConnectHelper helper = <span class="keyword">new</span> DefaultGameConnectHelper();</span><br><span class="line">        helper.requestConnection(<span class="string">&quot;Id Password, etc. Connection Information&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;template-method-pattern&quot;&gt;&lt;a href=&quot;#template-method-pattern&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#templat
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>2.Adapter Design Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210617-adapter-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210617-adapter-design-pattern/</id>
    <published>2021-06-17T06:53:49.000Z</published>
    <updated>2021-06-19T13:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adapter-pattern"><a href="#adapter-pattern" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#adapter-pattern"></a> Adapter Pattern</h1><p>연관성 없는 두 객체를 묶어서 사용한다.</p><h1 id="hagseub-mogpyo"><a href="#hagseub-mogpyo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#학습-목표"></a> 학습 목표</h1><p>알고리즘을 요구사항에 맞춰 사용할 수 있다.</p><h3 id="yimi"><a href="#yimi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#의미"></a> 의미</h3><p>Adapter는 사전적의미로는 기계 기구등을 다목적으로 사용하기 위한 부가 기구라고 할 수 있습니다.</p><h3 id="gibon-seolgye"><a href="#gibon-seolgye" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#기본-설계"></a> 기본 설계</h3><p><img src="https://online.visual-paradigm.com/repository/images/2e728499-b25b-4b5b-9cb8-1b3b3e059966.png" alt="Adapter"></p><h3 id="yogusahang-1"><a href="#yogusahang-1" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#요구사항-1"></a> 요구사항 1</h3><p>두 수에 대한 다음 연산을 수행하는 객체를 만들기</p><ol><li>수의 두 배의 수를 반환: twiceOf(Float):Float</li><li>수의 half의 수를 반환: halfOf(Float):Float</li></ol><p>구현 객체의 이름은 Adapter</p><p>Math클래스에서 두배와 절반을 구하는 함수는 이미 구현되어 있습니다.</p><p>즉, 어뎁터패턴을 사용하는이유는 미리주어진함수를 어뎁터에서 사용할 수 없기때문에 해당로직을 변경해야하므로 Adapter 를 사용한다.</p><h3 id="yogusahang-2"><a href="#yogusahang-2" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#요구사항-2"></a> 요구사항 2</h3><p>Math 클래스에 새롭게 두 배를 구할 수 있는 함수가 추가된다.</p><ol><li>새로 구현된 알고리즘을 이용하도록 프로그램을 변경하시오.</li><li>절반을 구하는 기능에서 로그를 찍는 기능을 추가하시오.</li></ol><h1 id="code"><a href="#code" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>위의 요구사항처럼 타입의 값과 요구되는 값이 변경되는 경우 Adapter 패턴을 이용하면 의존성을 줄이고 유지보수의 확장성을 올릴 수 있습니다.<br>즉, 공통 클래스로 사용되던 메소드를 변경해야되는 요구사항이 발생하게 된다면 Adapter, Main을 수정하지 않아도 구현체 부분만 변경해서 해당 요구사항들을 Adapter 패턴으로 적용할 수 있습니다.</p><blockquote><p>main class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> AdapterImpl();</span><br><span class="line">        System.out.println(adapter.twiceOf(<span class="number">100f</span>));</span><br><span class="line">        System.out.println(adapter.halfOf(<span class="number">80f</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>math class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">twoTime</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">half</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">doubled</span><span class="params">(Double d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>adapter interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">twiceOf</span><span class="params">(Float f)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">halfOf</span><span class="params">(Float f)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>adapter Implements class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AdapterPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">twiceOf</span><span class="params">(Float f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.doubled(f.doubleValue()).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">halfOf</span><span class="params">(Float f)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;half 함수 호출&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>) Math.half(f.doubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;adapter-pattern&quot;&gt;&lt;a href=&quot;#adapter-pattern&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#adapter-pattern&quot;&gt;&lt;/a&gt; A
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>1.Strategy Design Pattern</title>
    <link href="http://gwanhyeon.github.io/DesignPattern-20210617-strategy-design-pattern/"/>
    <id>http://gwanhyeon.github.io/DesignPattern-20210617-strategy-design-pattern/</id>
    <published>2021-06-17T06:53:34.000Z</published>
    <updated>2021-06-17T07:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hagseubmogpyo"><a href="#hagseubmogpyo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#학습목표"></a> 학습목표</h1><ul><li>Interface</li><li>Delegate</li><li>Strategy Pattern</li></ul><h3 id="interface"><a href="#interface" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#interface"></a> Interface</h3><p>키보드나 디스플레이 따위 처럼 사람과 컴퓨터를 연결하는 장치</p><ul><li>기능에 대한 <code>선언과 구현을 분리</code></li><li>기능을 사용 통로</li></ul><p>기능을 기능의 선언과 기능의 구현을 분리할 수 있는 기능을 제공한다.</p><h3 id="delegate"><a href="#delegate" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#delegate"></a> Delegate</h3><p>특정 객체의 기능을 사용하기 위하여 다른객체의 기능을 호출하는것.</p><h3 id="strategy-pattern"><a href="#strategy-pattern" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#strategy-pattern"></a> Strategy Pattern</h3><p>여러 알고리즘을 하나의 추상적인 접근점을 만들어서 접근점에서 서로 교환이 가능하도록 하도록 하는 패턴</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/4/45/W3sDesign_Strategy_Design_Pattern_UML.jpg" alt="Strategy Pattern"></p><h1 id="code"><a href="#code" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>아래의 코드는 Strategy 디자인 패턴을 알아보기위하여 게임에서 캐릭터가 스킬 사용에 있어서 Strategy 디자인을 적용하였습니다. 하나의 캐릭터가 스킬을 사용한다고 가정하는 예제입니다.</p><p>즉, Weapon이라고하는 접근점에서 Delegate하여 공격에 대한 기능을 호출하는 방식입니다.</p><blockquote><p>main class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Delegate.AObj;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Interface.AInterface;</span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Interface.AInterfaceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameCharacter character = <span class="keyword">new</span> GameCharacter();</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Knife());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Sword());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">        character.setWeapon(<span class="keyword">new</span> Ax());</span><br><span class="line">        character.attack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>weapon Interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Character class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 접근</span></span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 교환점</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(weapon == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hand Attack!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            weapon.attack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ax class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ax</span> <span class="keyword">implements</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ax Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Knife class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> StrategyPattern.Weapon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Knife</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Knife Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Sword class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StrategyPattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sword Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hagseubmogpyo&quot;&gt;&lt;a href=&quot;#hagseubmogpyo&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#학습목표&quot;&gt;&lt;/a&gt; 학습목표&lt;/h1&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Language" scheme="http://gwanhyeon.github.io/categories/language/"/>
    
      <category term="DesignPattern" scheme="http://gwanhyeon.github.io/categories/language/designpattern/"/>
    
    
      <category term="디자인패턴" scheme="http://gwanhyeon.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>백준 효율적인해킹 1325</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-1325/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-1325/</id>
    <published>2021-06-14T05:11:56.000Z</published>
    <updated>2021-06-14T05:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-hyoyuljeogin-haeking-munje"><a href="#baegjun-hyoyuljeogin-haeking-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-효율적인-해킹-문제"></a> <a href="https://www.acmicpc.net/problem/1325">백준 효율적인 해킹 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>양방향그래프가 아닌 단방향그래프인것을 파악하여 연결된 해킹의 컴퓨터개수를 구하는 문제였습니다.</li><li>처음에 양방향 그래프로 생각을 하여서 a-&gt;b, b-&gt;a에 대한 양방향 설정을 진행하였는데, 올바른 결과가 나오지 않았습니다.<br>문제를 다시 잘 읽어보니 B의 컴퓨터를 통해 A의 컴퓨터를 해킹을 할 수 있습니다. 즉, B-&gt;A로의 해킹이 가능해집니다. 따라서, 양방향 그래프가 아닌 단방향 그래프로 DFS를 통하여 문제를 해결하였습니다.</li><li>최근에 효율적인 해킹문제가 재채점되면서 동작되던 코드가 시간초과가 발생하는 문제가 생겼습니다.<br>아마도 큐의 비용적인 측면에서 문제가 생기고 있지 않나 라는 생각을 합니다. 혹시라도 Java에서 시간초과를 해결하신분이 있다면 답글부탁드리겠습니다^^</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_1325</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line">        graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            graphList.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        List&lt;Integer&gt; hackingList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            Arrays.fill(isCheck, <span class="keyword">false</span>);</span><br><span class="line">            bfs(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(answer == cnt)&#123;</span><br><span class="line">                hackingList.add(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(answer &lt; cnt)&#123;</span><br><span class="line">                answer = cnt;</span><br><span class="line">                hackingList.clear();</span><br><span class="line">                hackingList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(hackingList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer hack : hackingList) &#123;</span><br><span class="line">            System.out.print(hack + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        isCheck[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!isCheck[y])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        isCheck[start] = <span class="keyword">true</span>;</span><br><span class="line">        q.add(start);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(!isCheck[y])&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    isCheck[y] = <span class="keyword">true</span>;</span><br><span class="line">                    q.add(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-hyoyuljeogin-haeking-munje&quot;&gt;&lt;a href=&quot;#baegjun-hyoyuljeogin-haeking-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="그래프" scheme="http://gwanhyeon.github.io/tags/%EA%B7%B8%EB%9E%98%ED%94%84/"/>
    
  </entry>
  
  <entry>
    <title>백준 상근이의 여행 9372</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-9372/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-9372/</id>
    <published>2021-06-13T18:04:44.000Z</published>
    <updated>2021-06-13T18:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baegjun-sanggeuniyi-yeohaeng-munje"><a href="#baegjun-sanggeuniyi-yeohaeng-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-상근이의-여행-문제"></a> <a href="https://www.acmicpc.net/problem/9372">백준 상근이의 여행 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>이 문제의 가장 핵심포인트는 비행기의 종류를 구하는것이다.</p><ol><li>비행기의 종류를 구하는것이 결국 간선의 개수가 몇개인것인지에 대한 문제이다. 즉, n-1이다</li><li>다른방식으로는 bfs로 체크되지 않은정점과 값이 있는 정점을 방문할 수 있을때마다 answer를 카운팅시켜주면서 가능한 모든 비행기 종류를 체크합니다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_9372</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            n = Integer.parseInt(st.nextToken());</span><br><span class="line">            m = Integer.parseInt(st.nextToken());</span><br><span class="line">            isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">            answer = <span class="number">0</span>;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                    map[i][j] = INF;</span><br><span class="line">                    <span class="keyword">if</span>(i == j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">                st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">                <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">                map[x][y] = <span class="number">1</span>;</span><br><span class="line">                map[y][x] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bfs();</span><br><span class="line">            System.out.println(answer-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        isChecked[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            answer++;</span><br><span class="line">            <span class="keyword">int</span> x = queue.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map[x][i]!=<span class="number">0</span> &amp;&amp; !isChecked[i]) &#123;</span><br><span class="line">                    isChecked[i] = <span class="keyword">true</span>;</span><br><span class="line">                    queue.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baegjun-sanggeuniyi-yeohaeng-munje&quot;&gt;&lt;a href=&quot;#baegjun-sanggeuniyi-yeohaeng-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="BFS" scheme="http://gwanhyeon.github.io/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>백준 순열사이클 10451</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-10451/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-10451/</id>
    <published>2021-06-13T17:26:47.000Z</published>
    <updated>2021-06-13T17:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sunyeolsaikeul-munje"><a href="#sunyeolsaikeul-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#순열사이클-문제"></a> <a href="https://www.acmicpc.net/problem/10451">순열사이클 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>순열사이클을 구하는문제이다.</li><li>사이클이 발생하면 dfs를 수행하였을때 모든값들이 check가 되어있을것이다. 따라서, 매번 순회할때마다 체크가 안된지점만 확인을 하면 최종적으로 몇개의 사이클이 만들어지는지를 알 수 있다.<br>테스트케이스로 3, 2, 7, 8, 1, 4, 5, 6일 경우 1~N까지의 수가 매칭이 되어 트리가 생성되는것을 알아야한다.</li><li>DFS내부에서 check에 따른값을 체크하면 올바른 CNT값이 나오지 않아서 고민 후 사이클이 생긴다는것은 하나의 dfs의 경로를 순회하는것과 같은 의미임을 알게되었다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_10451</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">            isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">            String[] input = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;input.length; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> y = Integer.parseInt(input[i]);</span><br><span class="line">                graphList.get(x).add(y);</span><br><span class="line">                graphList.get(y).add(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isChecked[i]) &#123;</span><br><span class="line">                    findParent(i);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(cnt);</span><br><span class="line">            Arrays.fill(isChecked,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findParent</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        isChecked[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!isChecked[y])&#123;</span><br><span class="line">                findParent(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sunyeolsaikeul-munje&quot;&gt;&lt;a href=&quot;#sunyeolsaikeul-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#순열사이클-문제&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>백준 케빈 베이컨의 6단계 법칙  1389</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210614-boj-1389/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210614-boj-1389/</id>
    <published>2021-06-13T16:41:16.000Z</published>
    <updated>2021-06-13T16:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> <a href="https://www.acmicpc.net/problem/1389">문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>플로이드 워셜 알고리즘</li><li>11403번 경로찾기와 다르게 최단 경로의 비용을 구하는 문제이다.<br>예를들면, 1번 노드에서 -&gt; 2번, 3번, 4번, 5번 ,6번을 거쳐간 비용의 총합이다. 단순히 경로찾기문제는 비용이 문제가 아니라 해당되는값이 존재하는지 안존재하는지 여부만 찾았다.</li><li>자기 자신의 값을 0으로 초기화하고 나머지 모든값을 (int)1e9 로 초기화하였다. 최단경로 즉, 최소비용을 구해야하므로 이렇게 초기화시켜준것이다.</li><li>한번 이동할때의 최소비용은 1이므로 입력시 주어진 맵을 1로 갱신하였다.</li><li>거쳐갈수있는 모든경로를 아래와 같이 초기화 하였다.</li><li>map[0][0], map[0][1]…의 경로는 0-&gt;0, 0-&gt;1 0-&gt;2 …의 형식으로 모든 거쳐가는 최단경로비용을 찾는다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(map[i][k] + map[k][j] &lt; map[i][j])&#123;</span><br><span class="line">       map[i][j] = map[i][k] + map[k][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_1389</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                map[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span>(i == j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            map[y][x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][k] + map[k][j] &lt; map[i][j])&#123;</span><br><span class="line">                        map[i][j] = map[i][k] + map[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = INF;</span><br><span class="line">        <span class="keyword">int</span> idx = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                sum += map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(answer &gt; sum)&#123;</span><br><span class="line">                answer = sum;</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;munje&quot;&gt;&lt;a href=&quot;#munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.acmicpc.net/p
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="플로이드워셜" scheme="http://gwanhyeon.github.io/tags/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%9B%8C%EC%85%9C/"/>
    
  </entry>
  
  <entry>
    <title>백준 경로찾기 11403</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-11403/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-11403/</id>
    <published>2021-06-13T12:58:22.000Z</published>
    <updated>2021-06-13T13:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gyeongrocajgi-munje"><a href="#gyeongrocajgi-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#경로찾기-문제"></a> <a href="https://www.acmicpc.net/problem/11403">경로찾기 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><p>모든정점에서 다른정점까지 모두 탐색할 수 있는지 판별하는 문제이다. 따라서 플로이드 워셜 알고리즘을 사용하면 모두 구할 수 있고 n의 범위가 100이하이기때문에 n^3 플로이드 워샬알고리즘을 사용하였다.<br>즉, 플로이드 와샬 알고리즘은 <code>모든 정점에서 모든 정점으로의 최단거리</code>를 구하는 알고리즘입니다.<br>다익스트라 알고리즘이나 벨만 포드 알고리즘은 한 정점에서 다른 모든 정점의 최단거리를 구하는것에서 차이점을 가지고 있습니다.</p><ul><li><ol><li>가중치없는 방향그래프 G 플로이드워셜 N^3</li></ol></li><li><ol start="2"><li>n = 100 이하</li></ol></li><li><ol start="3"><li>i -&gt; j, i -&gt; k -&gt; j 로 갈 수 있으면 1, 없으면 0</li></ol></li><li><ol start="4"><li>모든정점 -&gt; 모든정점으로 가는 경우</li></ol></li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_11403</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isCheck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][k] == <span class="number">1</span> &amp;&amp; map[k][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        map[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gyeongrocajgi-munje&quot;&gt;&lt;a href=&quot;#gyeongrocajgi-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#경로찾기-문제&quot;&gt;&lt;/a&gt; &lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="플로이드워셜" scheme="http://gwanhyeon.github.io/tags/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%9B%8C%EC%85%9C/"/>
    
  </entry>
  
  <entry>
    <title>백준 부모의 트리찾기 11725</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-11725/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-11725/</id>
    <published>2021-06-13T12:52:05.000Z</published>
    <updated>2021-06-13T12:55:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="teuriyi-bumocajgi-munje"><a href="#teuriyi-bumocajgi-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#트리의-부모찾기-문제"></a> <a href="https://www.acmicpc.net/problem/11725">트리의 부모찾기 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ul><li><ol><li>인접리스트로 해당되는 그래프를 연결시킨다.</li></ol></li><li><ol start="2"><li>dfs로 해당되는 모든 부모의 값을 배열 갱신시킨다.(단 루트노드는 1번 부터 시작된다.) 시작점</li></ol></li></ul><ul><li>예) parent[y] = x</li></ul><ul><li><ol start="3"><li>최종적으로 parent에는 각 노드 2번부터 n번까지 부모의 값이 담겨져 있다.</li></ol></li></ul><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_11725</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] isChecked;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        isChecked = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            graphList.get(x).add(y);</span><br><span class="line">            graphList.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// root is 1</span></span><br><span class="line">        findParent(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;parent.length; i++)&#123;</span><br><span class="line">            System.out.print(parent[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findParent</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        isChecked[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!isChecked[y])&#123;</span><br><span class="line">                parent[y] = x;</span><br><span class="line">                findParent(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;teuriyi-bumocajgi-munje&quot;&gt;&lt;a href=&quot;#teuriyi-bumocajgi-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#트리의-부모찾
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="DFS" scheme="http://gwanhyeon.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>백준 촌수계산 2644</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-2644/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-2644/</id>
    <published>2021-06-13T11:05:40.000Z</published>
    <updated>2021-06-13T11:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="consugyesan-munje"><a href="#consugyesan-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#촌수계산-문제"></a> <a href="https://www.acmicpc.net/problem/2644">촌수계산 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>부모자식관계를 트리형태로 나타낸다.</li><li>시작점으로부터 각각의 depth + 1을 늘려나가면서 몇촌 (즉, 촌수는 depth를 나타낸다.)</li><li>DFS, BFS로 해당되는 값을 전파하면서 늘려나간다. 두가지 방법으로 풀이를 진행하였다.</li><li>isCheck변수에 해당되는 depth를 저장시키고 저장된 값이 0일경우 -1, 그게 아니면 해당되는 depth를 출력한다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_2644</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; graphList;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line">        isCheck = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        graphList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            graphList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(st.nextToken());</span><br><span class="line">            graphList.get(a).add(b);</span><br><span class="line">            graphList.get(b).add(a);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(x,y);</span><br><span class="line">        <span class="keyword">if</span>(isCheck[y] != <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(isCheck[y]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> dest)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == dest)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(isCheck[y] == <span class="number">0</span>)&#123;</span><br><span class="line">                isCheck[y] = isCheck[x] + <span class="number">1</span>;</span><br><span class="line">                dfs(y,dest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(start);</span><br><span class="line">        isCheck[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            <span class="keyword">if</span>(x == end)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graphList.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = graphList.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(isCheck[y] == <span class="number">0</span>)&#123;</span><br><span class="line">                    isCheck[y] = isCheck[x] + <span class="number">1</span>;</span><br><span class="line">                    q.add(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;consugyesan-munje&quot;&gt;&lt;a href=&quot;#consugyesan-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#촌수계산-문제&quot;&gt;&lt;/a&gt; &lt;a hr
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="그래프" scheme="http://gwanhyeon.github.io/tags/%EA%B7%B8%EB%9E%98%ED%94%84/"/>
    
  </entry>
  
  <entry>
    <title>백준 A-&gt;B 16953</title>
    <link href="http://gwanhyeon.github.io/BOJ-20210613-boj-16953/"/>
    <id>http://gwanhyeon.github.io/BOJ-20210613-boj-16953/</id>
    <published>2021-06-13T10:11:35.000Z</published>
    <updated>2021-06-13T10:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="boj-16953-munje"><a href="#boj-16953-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#boj-16953-문제"></a> <a href="https://www.acmicpc.net/problem/16953">BOJ 16953 문제</a></h1><h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2><ol><li>거꾸로 생각하거나 dfs로 풀기</li><li>10^9로는 모든경우를 체크할 수 없다. 다른방법을 구해야한다.</li><li>bfs같은경우는 모든 경우를 구하는것은 가까운것만 탐색하므로 bfs로 처리할 수 있다.</li><li>범위가 10^9이기때문에 int의 범위로는 모두 처리하지 못한다. 따라서 Long으로 처리하니까 정답을 도출하였다.</li></ol><h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">boj_16953</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isCheck;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        answer = Long.MAX_VALUE;</span><br><span class="line">        a = Long.parseLong(st.nextToken());</span><br><span class="line">        b = Long.parseLong(st.nextToken());</span><br><span class="line">        isCheck = <span class="keyword">false</span>;</span><br><span class="line">        dfs(a,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!isCheck) System.out.println(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">            answer = Math.min(answer, cnt);</span><br><span class="line">            isCheck = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(a * <span class="number">2</span>,cnt+<span class="number">1</span>);</span><br><span class="line">        dfs(a * <span class="number">10</span> + <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;boj-16953-munje&quot;&gt;&lt;a href=&quot;#boj-16953-munje&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#boj-16953-문제&quot;&gt;&lt;/a&gt; &lt;a h
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gwanhyeon.github.io/categories/algorithm/"/>
    
      <category term="BOJ" scheme="http://gwanhyeon.github.io/categories/algorithm/boj/"/>
    
    
      <category term="백준" scheme="http://gwanhyeon.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
      <category term="브루트포스" scheme="http://gwanhyeon.github.io/tags/%EB%B8%8C%EB%A3%A8%ED%8A%B8%ED%8F%AC%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security URL RequestRejectedException 트러블 슈팅</title>
    <link href="http://gwanhyeon.github.io/Spring-20210528-spring-double-slash/"/>
    <id>http://gwanhyeon.github.io/Spring-20210528-spring-double-slash/</id>
    <published>2021-05-28T11:20:10.000Z</published>
    <updated>2021-05-28T11:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string"><a href="#the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string"></a> The request was rejected because the URL contained a potentially malicious String “//”</h1><p>AES256 암호화 키값을 생성하는 과정에서 생긴 트러블 슈팅과정입니다. 해당되는 암호화 키값이 요청 @Pathvariable으로 들어오는 과정에서 해당되는 URL 매핑이 올바르게 진행되지 않은 사항이 있었습니다. 비즈니스 로직의 원인으로 보고 요청부분에서 누락된 부분이 없는지 찾아보았습니다.<br>특히 Junit5 통합 테스트를 진행하는 도중 어떤 경우는 성공을 하고 어떤 경우는 실패를 하는 경우를 찾아낼 수 있었습니다. 어떻게 같은 코드를 돌리는데 테스트에서 성공과 실패를 번갈아가면서 리턴하는 경우가 있지 라는 생각을 하였고 암호화 키값에서 문제가 발생하는것을 확인하기위해 PostMan에서 직접적으로 요청을 보내보았는데 아래와 같은 Exception이 발생하였습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.web.firewall.RequestRejectedException: The request was rejected because the URL contained a potentially malicious String &quot;//&quot;</span><br><span class="line">    at org.springframework.security.web.firewall.StrictHttpFirewall.rejectedBlocklistedUrls(StrictHttpFirewall.java:456) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.security.web.firewall.StrictHttpFirewall.getFirewalledRequest(StrictHttpFirewall.java:429) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:196) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183) ~[spring-security-web-5.4.5.jar:5.4.5]</span><br><span class="line">    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.5.jar:5.3.5]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.44.jar:9.0.44]</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring Security의 기본적인 정책은 URL에 더블슬래시가 들어가는 것을 허용하지 않으며</p><p>localhost:8080/test/{property} property = ///////#$%^&amp;*( 라고 가정을 하면 해당되는 // 에 해당하는 더블 슬래시가 정책상 firewall에 예외규칙으로 처리되는 문제가 발생하였다.</p><p>Spring Security Config 에서 Double Slash를 허용해주는것을 @Bean으로 등록하여 WebSecurity설정에 추가해주면 해당되는 원인을 해결할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    web.httpFirewall(defaultHttpFirewall());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpFirewall <span class="title">defaultHttpFirewall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultHttpFirewall();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또 다른 방식으로는 정규표현식을 사용하여 regex = [^0-9a-zA-Z] or [////]</p><p>자바에서는 슬래쉬 하나를 <code>//</code>로 인식하게 되기때문에 해당되는 것들을 모두 “” 으로 치환을 하면서 해당되는 사항을 트러블슈팅할 수 있었습니다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;the-request-was-rejected-because-the-url-contained-a-potentially-malicious-string&quot;&gt;&lt;a href=&quot;#the-request-was-rejected-because-the-ur
      
    
    </summary>
    
    
      <category term="Server" scheme="http://gwanhyeon.github.io/categories/server/"/>
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/categories/server/spring/"/>
    
    
      <category term="Spring" scheme="http://gwanhyeon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>CleanCode 05 형식 맞추기</title>
    <link href="http://gwanhyeon.github.io/CleanCode-20210518-chapter05/"/>
    <id>http://gwanhyeon.github.io/CleanCode-20210518-chapter05/</id>
    <published>2021-05-18T14:32:18.000Z</published>
    <updated>2021-05-18T15:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hyeongsigeul-majcuneun-mogjeog"><a href="#hyeongsigeul-majcuneun-mogjeog" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#형식을-맞추는-목적"></a> 형식을 맞추는 목적</h1><p>코드의 형식은 중요하다 너무 중요해서 무시하기 어렵다. 너무나도 중요하므로 융통성 없이 맹목적으로 따르면 안된다. 코드 형식은 의사소통의 일환이다.<br><code>코드의 가독성은 앞으로 바꾸리 코드의 품질에 지대한 영향을 미친다.</code>  오랜시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아 놓은 구현스타일과 가독성 수준은 유지보수 <code>용이성</code>과 <code>확장성</code>에 계속 영향을 미친다.</p><h1 id="jeogjeolhan-haeng-gilireul-yujihara"><a href="#jeogjeolhan-haeng-gilireul-yujihara" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#적절한-행-길이를-유지하라"></a> 적절한 행 길이를 유지하라</h1><blockquote><p>소스코드는 얼마나 길어야할까요?</p></blockquote><p>JUnit 자바 전체 파일중 대략 1/3이 40줄에서 100줄 조금 넘는 정도이다. 가장 긴 파일은 <code>500줄을 넘지 않으면 평균 200줄</code> 정도를 기록한다. <em>충분히 이정도로 거대한 시스템을 구축할 수 있다는 사실이다.</em> 일반적으로 큰 파일보다는 작은파일이 이해하기 쉽다.</p><h2 id="sinmun-gisaceoreom-jagseonghara"><a href="#sinmun-gisaceoreom-jagseonghara" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#신문-기사처럼-작성하라"></a> 신문 기사처럼 작성하라</h2><p><code>신문기사처럼 이름은 간단하고 설명이 가능하게 짓는다.</code> 그리고 이름만 보고도 올바른 모듈을 살펴보고 있는지 아닌지를 판단할 정도로 신경 써서 짓는다. 소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명한다. 아래로 내려갈수록 의도를 세세하게 묘사한다. 마지막에는 가장 저차원적인 함수와 세부 내역이 나온다.</p><h2 id="gaenyeomeun-bin-haengeuro-bunrihara"><a href="#gaenyeomeun-bin-haengeuro-bunrihara" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#개념은-빈-행으로-분리하라"></a> 개념은 빈 행으로 분리하라</h2><blockquote><p>빈 행을 넣지 않을 경우</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fitnesse.wikitext.widgets;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoldWidget</span> <span class="keyword">extends</span> <span class="title">ParentWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP = <span class="string">&quot;&#x27;&#x27;&#x27;.+?&#x27;&#x27;&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern pattern = Pattern.compile(<span class="string">&quot;&#x27;&#x27;&#x27;(.+?)&#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">        Pattern.MULTILINE + Pattern.DOTALL);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoldWidget</span><span class="params">(ParentWidget parent, String text)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        Matcher match = pattern.matcher(text); match.find(); </span><br><span class="line">        addChildWidgets(match.group(<span class="number">1</span>));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">render</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        StringBuffer html = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&lt;b&gt;&quot;</span>);         </span><br><span class="line">        html.append(childHtml()).append(<span class="string">&quot;&lt;/b&gt;&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> html.toString();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빈행만으로 훨씬 가독성 좋은 코드를 만들 수 있다.</p><blockquote><p>빈 행을 넣을 경우</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fitnesse.wikitext.widgets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoldWidget</span> <span class="keyword">extends</span> <span class="title">ParentWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEXP = <span class="string">&quot;&#x27;&#x27;&#x27;.+?&#x27;&#x27;&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern pattern = Pattern.compile(<span class="string">&quot;&#x27;&#x27;&#x27;(.+?)&#x27;&#x27;&#x27;&quot;</span>, </span><br><span class="line">        Pattern.MULTILINE + Pattern.DOTALL</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoldWidget</span><span class="params">(ParentWidget parent, String text)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        Matcher match = pattern.matcher(text);</span><br><span class="line">        match.find();</span><br><span class="line">        addChildWidgets(match.group(<span class="number">1</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">render</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        StringBuffer html = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&lt;b&gt;&quot;</span>); </span><br><span class="line">        html.append(childHtml()).append(<span class="string">&quot;&lt;/b&gt;&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> html.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sero-miljibdo"><a href="#sero-miljibdo" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#세로-밀집도"></a> 세로 밀집도</h2><blockquote><p>줄바꿈이 개념을 분리한다면 세로 밀집도는 연관성을 의미한다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReporterConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String m_className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Property&gt; m_properties = <span class="keyword">new</span> ArrayList&lt;Property&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProperty</span><span class="params">(Property property)</span> </span>&#123; </span><br><span class="line">        m_properties.add(property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sujig-geori"><a href="#sujig-geori" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#수직-거리"></a> 수직 거리</h2><p>함수 연관관계와 동작방식을 이해하려고 이 함수에서 저 함수를 오가며 소스 파일을 위아래로 뒤지는 실수를 한 경험이 있는가?<br>서로 밀접한 개념들은 세로로 가까이 둬야한다. 타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다. 이게 바로 <code>protected 변수를 피해야하는 이유</code>중 하나이다.</p><p>변수선언은 사용하는 위치에서 최대한 가까이 선언한다. 인스턴스변수는 클래스 맨 처음(혹은 끝)에 선언한다.</p><blockquote><p>종속 함수</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WikiPageResponder</span> <span class="keyword">implements</span> <span class="title">SecureResponder</span> </span>&#123; </span><br><span class="line">    <span class="keyword">protected</span> WikiPage page;</span><br><span class="line">    <span class="keyword">protected</span> PageData pageData;</span><br><span class="line">    <span class="keyword">protected</span> String pageTitle;</span><br><span class="line">    <span class="keyword">protected</span> Request request; </span><br><span class="line">    <span class="keyword">protected</span> PageCrawler crawler;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">makeResponse</span><span class="params">(FitNesseContext context, Request request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String pageName = getPageNameOrDefault(request, <span class="string">&quot;FrontPage&quot;</span>);</span><br><span class="line">        loadPage(pageName, context); </span><br><span class="line">        <span class="keyword">if</span> (page == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> notFoundResponse(context, request); </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> makePageResponse(context); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPageNameOrDefault</span><span class="params">(Request request, String defaultPageName)</span> </span>&#123;</span><br><span class="line">        String pageName = request.getResource(); </span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(pageName))</span><br><span class="line">            pageName = defaultPageName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageName; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadPage</span><span class="params">(String resource, FitNesseContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WikiPagePath path = PathParser.parse(resource);</span><br><span class="line">        crawler = context.root.getPageCrawler();</span><br><span class="line">        crawler.setDeadEndStrategy(<span class="keyword">new</span> VirtualEnabledPageCrawler()); </span><br><span class="line">        page = crawler.getPage(context.root, path);</span><br><span class="line">        <span class="keyword">if</span> (page != <span class="keyword">null</span>)</span><br><span class="line">            pageData = page.getData();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response <span class="title">notFoundResponse</span><span class="params">(FitNesseContext context, Request request)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NotFoundResponder().makeResponse(context, request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> SimpleResponse <span class="title">makePageResponse</span><span class="params">(FitNesseContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        pageTitle = PathParser.render(crawler.getFullPath(page)); </span><br><span class="line">        String html = makeHtml(context);</span><br><span class="line">        SimpleResponse response = <span class="keyword">new</span> SimpleResponse(); </span><br><span class="line">        response.setMaxAge(<span class="number">0</span>); </span><br><span class="line">        response.setContent(html);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p><code>종속 함수</code> 한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다. 또한 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다. 다음으로 호출하는 함수는 그 아래에 정의한다. 호출되는 함수를 찾기가 쉬워지며 전체 가독성도 높아진다</p><blockquote><p>개념의 유사성</p></blockquote><p>개념적인 친화도가 높을 수록 코드를 가까이 배치한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertTrue</span><span class="params">(String message, <span class="keyword">boolean</span> condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!condition) </span><br><span class="line">            fail(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertTrue</span><span class="params">(<span class="keyword">boolean</span> condition)</span> </span>&#123; </span><br><span class="line">        assertTrue(<span class="keyword">null</span>, condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertFalse</span><span class="params">(String message, <span class="keyword">boolean</span> condition)</span> </span>&#123; </span><br><span class="line">        assertTrue(message, !condition);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertFalse</span><span class="params">(<span class="keyword">boolean</span> condition)</span> </span>&#123; </span><br><span class="line">        assertFalse(<span class="keyword">null</span>, condition);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>친화도가 높은 요인은 여러가지이다. 그 중 하나가 직접적인 종속성이다. 이런 경우에는 종속성은 부차적 요인이므로 종속적인 관게가 없더라도 가까이 배치하도록한다.</p><h1 id="garo-hyeongsig-majcugi"><a href="#garo-hyeongsig-majcugi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#가로-형식-맞추기"></a> 가로 형식 맞추기</h1><p>한 행은 가로로 얼마나 길어야 적당할까? 프로그래머는 짧은 행을 선호하고 보통 40자 정도가 된다. 약 120자 정도로 제한할 것을 권고한다.</p><blockquote><p>가로 공백과 밀집도</p></blockquote><p>가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다. 공백을 넣으면 두가지 주요 요소가 확실히 나뉜다는 사실이다.<br>반면, 함수 이름과 이어지는 괄호 사이에는 공백을 넣지 않았다. 함수와 인수는 서로 밀접하기 때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addLine(lineSize, lineCount);</span><br><span class="line"><span class="keyword">return</span> b*b - <span class="number">4</span>*a*c;</span><br></pre></td></tr></table></figure><p>수식을 읽기가 매우 편하다. 곱셈은 우선순위가 가장 높다. 항 사이에는 공백이 들어간다. 덧셈과 뺄셈은 우선순위가 곱셈보다 낮기때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (-b - Math.sqrt(determinant)) / (<span class="number">2</span>*a);</span><br></pre></td></tr></table></figure><p>하지만, 도구에서 없애는 경우가 흔하다</p><blockquote><p>가로 정렬</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FitNesseExpediter</span> <span class="keyword">implements</span> <span class="title">ResponseSender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>        Socket          socket;</span><br><span class="line">    <span class="keyword">private</span>     InputStream       input;</span><br><span class="line">    <span class="keyword">private</span>     OutputStream       output;</span><br><span class="line">    <span class="keyword">protected</span>     <span class="keyword">long</span>          requestParsingTimeLimit;</span><br><span class="line">    <span class="keyword">private</span>     <span class="keyword">long</span>          requestProgress;</span><br><span class="line">    <span class="keyword">private</span>     <span class="keyword">long</span>          requestParsingDeadline;</span><br><span class="line">    <span class="keyword">private</span>     <span class="keyword">boolean</span>          hasError;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FitNesseExpediter</span><span class="params">(Socket         s,</span></span></span><br><span class="line"><span class="params"><span class="function">                           FitNessContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context =            context;</span><br><span class="line">    socket =                  s;</span><br><span class="line">    requestParsingTimeLimit = <span class="number">10000</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>깔끔해보일지 모르지만, 엉뚱한 부분을 강조해 진짜 의도가 가려지기때문이다. 예를 들어, 위 선언부를 읽다보면 변수유형은 무시하고 변수이름부터 읽게 된다. 코드 형식을 자동으로 맞춰주는 도구는 대다수가 위와 같은 정렬을 무시한다.</p><h2 id="deulyeosseugi"><a href="#deulyeosseugi" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#들여쓰기"></a> 들여쓰기</h2><p>소스파일은 윤곽도와 계층이 비슷하다. 파일 전체에 적용되는 정보가 있고, 파일 내 개별 클래스에 적용되는 정보가 있고, 클래스 내 각 메서드에 적용되는 정보가 있고, 블록 내 블록에 재귀적으로 적용되는 정보가 있다.<br>들여쓰기 한 파일은 한눈에 구조가 들어온다. 때로는 간단한 if문, while문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생긴다. <code>한 행에 뭉뚱그려놓은 코드를 지양해라!</code></p><h2 id="gajja-beomwi"><a href="#gajja-beomwi" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#가짜-범위"></a> 가짜 범위</h2><p>이상한 세미콜론을 적용하지 말자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h1 id="tim-gyucig"><a href="#tim-gyucig" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#팀-규칙"></a> 팀 규칙</h1><p>팀은 한가지 규칙을 정하고 팀원들은 규칙을 따라야한다. IDE코드 형식기를 설정하거나 규칙을 정해라!</p><h1 id="bab-ajeossiyi-hyeongsig-gyucig"><a href="#bab-ajeossiyi-hyeongsig-gyucig" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#밥-아저씨의-형식-규칙"></a> 밥 아저씨의 형식 규칙</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeAnalyzer</span> <span class="keyword">implements</span> <span class="title">JavaFileAnalysis</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lineCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxLineWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> widestLineNumber;</span><br><span class="line">    <span class="keyword">private</span> LineWidthHistogram lineWidthHistogram; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalChars;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeAnalyzer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lineWidthHistogram = <span class="keyword">new</span> LineWidthHistogram();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title">findJavaFiles</span><span class="params">(File parentDirectory)</span> </span>&#123; </span><br><span class="line">        List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;File&gt;(); </span><br><span class="line">        findJavaFiles(parentDirectory, files);</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findJavaFiles</span><span class="params">(File parentDirectory, List&lt;File&gt; files)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (File file : parentDirectory.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.getName().endsWith(<span class="string">&quot;.java&quot;</span>)) </span><br><span class="line">                files.add(file);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) </span><br><span class="line">                findJavaFiles(file, files);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analyzeFile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(javaFile)); </span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            measureLine(line); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureLine</span><span class="params">(String line)</span> </span>&#123; </span><br><span class="line">        lineCount++;</span><br><span class="line">        <span class="keyword">int</span> lineSize = line.length();</span><br><span class="line">        totalChars += lineSize; </span><br><span class="line">        lineWidthHistogram.addLine(lineSize, lineCount);</span><br><span class="line">        recordWidestLine(lineSize);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordWidestLine</span><span class="params">(<span class="keyword">int</span> lineSize)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (lineSize &gt; maxLineWidth) &#123;</span><br><span class="line">            maxLineWidth = lineSize;</span><br><span class="line">            widestLineNumber = lineCount; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLineCount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> lineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxLineWidth</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> maxLineWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidestLineNumber</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> widestLineNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LineWidthHistogram <span class="title">getLineWidthHistogram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineWidthHistogram;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMeanLineWidth</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)totalChars/lineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMedianLineWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer[] sortedWidths = getSortedWidths(); </span><br><span class="line">        <span class="keyword">int</span> cumulativeLineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> width : sortedWidths) &#123;</span><br><span class="line">            cumulativeLineCount += lineCountForWidth(width); </span><br><span class="line">            <span class="keyword">if</span> (cumulativeLineCount &gt; lineCount/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Cannot get here&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">lineCountForWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineWidthHistogram.getLinesforWidth(width).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer[] getSortedWidths() &#123;</span><br><span class="line">        Set&lt;Integer&gt; widths = lineWidthHistogram.getWidths(); </span><br><span class="line">        Integer[] sortedWidths = (widths.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>])); </span><br><span class="line">        Arrays.sort(sortedWidths);</span><br><span class="line">        <span class="keyword">return</span> sortedWidths;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Bob 아저씨의 코드규칙을 참고해보도록 하자!</p><ol><li>함수 () { } 에서 괄호이후 한칸을 띄운다.</li><li>if문이 한줄일 경우 다음칸으로 띄우고 들여쓰기를 하자</li><li>코드의 의미를 명확하게 한다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hyeongsigeul-majcuneun-mogjeog&quot;&gt;&lt;a href=&quot;#hyeongsigeul-majcuneun-mogjeog&quot; class=&quot;header-anchor&quot;&gt;1. &lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/categories/cleancode/"/>
    
    
      <category term="CleanCode" scheme="http://gwanhyeon.github.io/tags/cleancode/"/>
    
  </entry>
  
</feed>
