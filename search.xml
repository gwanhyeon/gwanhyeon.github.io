<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>백준 순열 사이클 10451</title>
    <url>/permutation-cycle/</url>
    <content><![CDATA[<h2 id="baegjun-sunyeol-saikeul-10451-munje"><a href="#baegjun-sunyeol-saikeul-10451-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-순열-사이클-10451-문제"></a> <a href="https://www.acmicpc.net/problem/10451" target="_blank" rel="noopener">백준 순열 사이클 10451 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>1부터 N까지 정수 N개로 이루어진 순열을 나타내는 방법은 여러 가지가 있다. 예를 들어, 8개의 수로 이루어진 순열 (3, 2, 7, 8, 1, 4, 5, 6)을 배열을 이용해 표현하면  와 같다. 또는, Figure 1과 같이 방향 그래프로 나타낼 수도 있다.</p>
<p>순열을 배열을 이용해  로 나타냈다면, i에서 πi로 간선을 이어 그래프로 만들 수 있다.</p>
<p>Figure 1에 나와있는 것 처럼, 순열 그래프 (3, 2, 7, 8, 1, 4, 5, 6) 에는 총 3개의 사이클이 있다. 이러한 사이클을 “순열 사이클” 이라고 한다.</p>
<p>N개의 정수로 이루어진 순열이 주어졌을 때, 순열 사이클의 개수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫째 줄에는 순열의 크기 N (2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 순열이 주어지며, 각 정수는 공백으로 구분되어 있다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>각 테스트 케이스마다, 입력으로 주어진 순열에 존재하는 순열 사이클의 개수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>2<br>
8<br>
3 2 7 8 1 4 5 6<br>
10<br>
2 1 3 4 5 6 7 9 10 8</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>3<br>
7</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>해당 문제는 그래프문제입니다. 그래프문제로 해당 순열으로 주어졌을때 순열 사이클의 개수를 구해주면 됩니다.</li>
</ul>
<p>문제에서 나와있듯이 (3, 2, 7, 8, 1, 4, 5, 6)의 배열을 이용하여 입력된 값들과 방향그래프로 만들어 낼 수 있습니다. 문제의 뜻을 이해하셨나요?</p>
<p>네 만약 8개의 수로 이루어져있을 경우 (1,2,3,4,5,6,7,8) 정점(Vertex)을 가지게 됩니다. 순서대로 들어온 입력 값들을 해당 정점들과 연결해주면 순열 그래프가 나온다는 말입니다.</p>
<blockquote>
<p>순열과 그래프를 연결하기<br>
<code>1번 Vertex - Value 3 2번 Vertex - Value 2 3번 Vertex - Value 7 4번 Vertex - Value 8 5번 Vertex - Value 1 6번 Vertex - Value 4 7번 Vertex - Value 5 8번 Vertex - Value 6</code><br>
하나의 그래프 형태로 나타낼 수 있습니다.</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
        <tag>순열</tag>
      </tags>
  </entry>
  <entry>
    <title>그래프 인접행렬, 인접리스트 및 DFS,BFS</title>
    <url>/graph-summary/</url>
    <content><![CDATA[<h1 id="geuraepeu"><a href="#geuraepeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#그래프"></a> 그래프</h1>
<p>그래프의 정의를 살펴보면 <code>G=(V,E)</code>가 성립하게 됩니다. <code>G: 그래프, V: 정점, E: 간선</code>을 의미합니다.</p>
<h1 id="gyeongro"><a href="#gyeongro" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#경로"></a> 경로</h1>
<p>만약 <code>A-&gt;C, A-&gt;B, C-&gt;B, E-&gt;B, C-&gt;E, C-&gt;D, D-&gt;E</code>의 정점과 간선으로 연결된 그래프가 있다고 생각하겠습니다. 이때 정점 A-&gt;B로 가는 경로는 몇가지 일까요?<br>
총 4가지 입니다.</p>
<ol>
<li>A-&gt;B</li>
<li>A-&gt;C-&gt;E-&gt;B</li>
<li>A-&gt;C-&gt;D-&gt;E-&gt;B</li>
<li>A-&gt;C-&gt;B<br>
의 경로가 나오게 됩니다.</li>
</ol>
<h1 id="banghyangi-issneun-geuraepeu"><a href="#banghyangi-issneun-geuraepeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#방향이-있는-그래프"></a> 방향이 있는 그래프</h1>
<p><code>A-&gt;C</code> 로 가는 같은 간선에 방향이 있을경우 이것을 <code>방향이 있는 그래프</code>라고 합니다.</p>
<h1 id="banghyangi-eobsneun-geuraepeu"><a href="#banghyangi-eobsneun-geuraepeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#방향이-없는-그래프"></a> 방향이 없는 그래프</h1>
<p><code>A-C</code> 로 가는 간선에 방향이 없는 경우를 <code>방향이 없는 그래프</code> 라고 합니다.</p>
<h1 id="du-jeongjeom-saie-geuraepeu"><a href="#du-jeongjeom-saie-geuraepeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#두-정점-사이에-그래프"></a> 두 정점 사이에 그래프</h1>
<p>두 정점 사이에 그래프는 <code>간선이 여러개</code> 존재할 수도 있습니다.</p>
<h1 id="sunhwan-rupeu"><a href="#sunhwan-rupeu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#순환-루프"></a> 순환 루프</h1>
<p>자기자신으로 하는 <code>순환하는 간선</code>이 존재할 수도 있습니다.</p>
<h1 id="dansun-gyeongrowa-dansun-saikeul"><a href="#dansun-gyeongrowa-dansun-saikeul" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#단순-경로와-단순-사이클"></a> 단순 경로와 단순 사이클</h1>
<p>경로/사이클에서 같은 정점을 <code>두번 이상 방문하지 않는 경로/사이클</code>을 뜻합니다. 특별한 말이 없다면 일반적으로 사용할 경로와 사이클을 <code>단순 경로/사이클</code>이라고 합니다.</p>
<h1 id="casu-degree"><a href="#casu-degree" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#차수degree"></a> 차수(Degree)</h1>
<p><code>하나의 정점</code>에 연결되어 있는 <code>간선의 개수</code>를 뜻합니다.<br>
예를 들면 <code>1-5, 2-5, 4,5 정점</code>간의 <code>간선으로 이루어진 그래프</code>가 있다고 생각하겠습니다.<br>
지금 현재 5번 정점과 연결되어 있는 간선의 개수는 3개가 됩니다. 즉, <code>Degree차수의 값이 3개</code>라고 생각하시면 됩니다.</p>
<h1 id="gajungci"><a href="#gajungci" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#가중치"></a> 가중치</h1>
<p>그래프는 가중치의 값을 갖습니다. <code>정점과 정점사이의 간선에 가중치</code>가 부여될 수도 있는데요. 만약 <code>아무런 표시가 없다면 1</code>이라는 값으로 주어진다고 생각하시면 됩니다.</p>
<h1 id="geuraepeuyi-pyohyeon-injeobhaengryeol-injeob-riseuteu"><a href="#geuraepeuyi-pyohyeon-injeobhaengryeol-injeob-riseuteu" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#그래프의-표현인접행렬-인접-리스트"></a> 그래프의 표현(인접행렬, 인접 리스트)</h1>
<p>그래프의 표현의 종류는 인접행렬과 인접리스트로 나누어지게 됩니다. 해당 설명에서는 <code>i-&gt;j</code> 로 연결된 정점과 간선이 있다고 생각하겠습니다. 이것은 A[i] = j 와 연결된 정점을 행렬이나 링크드 리스트로 나타냅니다.</p>
<p>인접행렬은 말 그대로 행렬을 사용하여 인접한것이 있는지 없는지를 판단하는 행렬입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[i][j] = A[j][i] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>와 같이 서로 연결되어 있는것들을 행렬형식으로 처리할 수 있습니다.</p>
<p>인접리스트는 연결리스트를 사용하여 그래프를 표현하는 방식입니다.<br>
i-&gt;j 로 연결된 리스트가 있다고 가정하면 이것을 인접리스트로 표현하면 다음과 같습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[i] = &#123;j&#125;</span><br></pre></td></tr></table></figure>
<p>이렇게 표현할 수 있습니다. 이것의 의미하는 바는 어떻게 될까요? i의 정점에 연결된 j 정점입니다.</p>
<p>이해를 돕기위해서 1-&gt;2 가중치 1, 1-&gt;3 가중치2 이라고 해보면</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>으로 표현 할 수 있습니다.<br>
하지만, 그래프는 가중치가 존재할 수도있겠죠? 이럴때는 어떻게할까요?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>] = &#123;&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>과 같이 나타낼 수 있습니다.</p>
<h1 id="injeob-riseuteu-vs-injeob-haengryeol-siganbogjabdo-mic-teugjing"><a href="#injeob-riseuteu-vs-injeob-haengryeol-siganbogjabdo-mic-teugjing" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#인접-리스트-vs-인접-행렬-시간복잡도-및-특징"></a> 인접 리스트 VS 인접 행렬 시간복잡도 및 특징</h1>
<p><code>시간복잡도의 차이점</code>으로는 인접 리스트로 표현된 <code>그래프: O(V+E), 인접 행렬로 표현된 그래프: O(V^2)</code>로 나타낼 수 있습니다.</p>
<p>즉, 그래프 내에 적은 숫자의 간선만을 가지는 희소 그래프의 경우 <code>인접 행렬보다 인접 리스트</code>를 사용하는 것이 <code>시간복잡도면</code>에서 뛰어납니다.</p>
<h1 id="gipi-useon-tamsaeg-dfs"><a href="#gipi-useon-tamsaeg-dfs" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#깊이-우선-탐색dfs"></a> 깊이 우선 탐색(DFS)</h1>
<p>DFS는 말 그대로 깊이를 우선탐색하는 기법입니다. 진행시 깊이우선 계속해서 값이 있으면 최대깊이까지 들어가는것을 뜻합니다. 구현은 <code>Stack이나 Recursive</code>를 이용해서 갈 수 있는 만큼 최대 -&gt; 갈수 없으면 이전 정점으로 돌아갑니다.</p>
<h1 id="neolbi-useon-tamsaeg-bfs"><a href="#neolbi-useon-tamsaeg-bfs" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#넓이-우선-탐색bfs"></a> 넓이 우선 탐색(BFS)</h1>
<p>BFS는 <code>하나의 정점에서 갈 수 있는 모든정점을 방문</code>하고 <code>다음 깊이</code>로 들어가게 됩니다.<br>
큐를 이용하여 갈 수 있는 <code>정점 모두 Queue -&gt; insert</code>를 해준후  <code>먼저 넣고 -&gt; Queue pop()</code>  의 형식으로 이루어 집니다.</p>
<p>각각의 그래프 탐색 방식이 다르기 때문에, 구현하는 방법도 너무나도 다릅니다.<br>
보통 DFS를 사용하게 되면 <code>Stack을 사용하거나 재귀호출</code>을 이용한 구현을 하게 되며, BFS를 사용하게 된다면 <code>Queue</code>를 이용하는 방식이라고 알고 계셔야합니다.</p>
<h1 id="injeobriseuteureul-iyonghan-dfs-bfs-puli"><a href="#injeobriseuteureul-iyonghan-dfs-bfs-puli" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#인접리스트를-이용한-dfsbfs-풀이"></a> 인접리스트를 이용한 DFS,BFS 풀이</h1>
<p><code>인접행렬과 인접리스트</code> 이용한 백준 <code>DFS BFS 1260번 문제</code>를 예시로 가져와봤습니다.</p>
<blockquote>
<p>인접행렬<br>
인접행렬을 이용한 풀이입니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Queue는 LinkedList 로 선언되어야한다</span></span><br><span class="line"><span class="comment">DFS 진행시 반드시 ArrayList나 LinkedList에 대한 값을 초기화 시켜주어야한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 인접행렬 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] A;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        start = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        A = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            A[x][y] = <span class="number">1</span>;</span><br><span class="line">            A[y][x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//인접행렬시에는 정렬이 필요 없다!! 인접리스트만 필요하다.</span></span><br><span class="line">        <span class="comment">//자식이 여러개라면 노드 번호가 작은 것 먼저 방문하므로 오름차순으로 정렬</span></span><br><span class="line">        dfs(start);</span><br><span class="line">        Arrays.fill(check,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        bfs(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        System.out.print(x + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 인접 행렬</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i] &amp;&amp; A[x][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        q.offer(v);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 인접 행렬</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check[i] &amp;&amp; A[x][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                    check[i] =<span class="keyword">true</span>;</span><br><span class="line">                    q.offer(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>인접리스트<br>
인접리스트를 이용한 풀이입니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Queue는 LinkedList 로 선언되어야한다</span></span><br><span class="line"><span class="comment">DFS 진행시 반드시 ArrayList나 LinkedList에 대한 값을 초기화 시켜주어야한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DFSBFS_LIST1260</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; A = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        start = Integer.parseInt(st.nextToken());</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            A.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            A.get(x).add(y);</span><br><span class="line">            A.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//자식이 여러개라면 노드 번호가 작은 것 먼저 방문하므로 오름차순으로 정렬을 해줬다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            Collections.sort(A.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(start);</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        System.out.println();</span><br><span class="line">        bfs(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        System.out.print(x + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 인접 리스트</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        q.offer(v);</span><br><span class="line">        <span class="comment">// 2. 인접리스트</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                    check[y] = <span class="keyword">true</span>;</span><br><span class="line">                    q.offer(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연결요소의 개수 11724</title>
    <url>/connected-component/</url>
    <content><![CDATA[<h2 id="baegjun-yeongyeolyosoyi-gaesu-11724-munje"><a href="#baegjun-yeongyeolyosoyi-gaesu-11724-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-연결요소의-개수-11724-문제"></a> <a href="https://www.acmicpc.net/problem/11724" target="_blank" rel="noopener">백준 연결요소의 개수 11724 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 연결 요소의 개수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>6 5<br>
1 2<br>
2 5<br>
5 1<br>
3 4<br>
4 6</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>2</p>
<h3 id="yeje-ibryeog-2"><a href="#yeje-ibryeog-2" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#예제-입력-2"></a> 예제 입력 2</h3>
<p>6 8<br>
1 2<br>
2 5<br>
5 1<br>
3 4<br>
4 6<br>
5 4<br>
2 4<br>
2 3</p>
<h3 id="yeje-culryeog-2"><a href="#yeje-culryeog-2" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#예제-출력-2"></a> 예제 출력 2</h3>
<h2 id="1"><a href="#1" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#1"></a> 1</h2>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li><code>그래프 상</code>에서 <code>연결요소의 개수</code>를 구하는 문제입니다. 여기서 가장 중요한점은 <code>각각의 그래프를 연결 요소</code>라고 하는데 <code>나누어진 그래프의 개수를 찾는 문제</code>입니다.</li>
</ul>
<p><code>연결요소의 개수</code>를 찾기전에 <code>그래프 개념</code>에 대해서 살펴보고 넘어가겠습니다.<br>
<a href="https://gwanhyeon.github.io/graph-summary/">그래프 인접행렬, 인접리스트 및 DFS,BFS</a> 해당 포스트에서 <code>인접행렬, 인접리스트와 DFS,BFS의 개념</code>에 대해서 <code>상세히 설명</code>해놓았습니다. 이부분을 참고하시면 어렵지 않게 문제를 푸실 수 있을것 입니다.</p>
<blockquote>
<p>문제를 풀기위해서는 필요한 지식은 다음과 같습니다.</p>
</blockquote>
<ul>
<li><code>인접행렬과 인접리스트</code>의 차이를 알 수 있어야합니다.</li>
<li><code>DFS와 BFS의 차이점</code>을 알고 있어야합니다.</li>
<li><code>가장 적은 정점부터 방문해야한다는 조건이 있을때는Sort</code>를 진행해야합니다.</li>
<li><code>DFS, BFS 백준 1260번</code> 문제와 유사하므로 이것이 잘 이해가 가지않으신다면 먼저 풀어보시는것을 권장드립니다.</li>
<li><code>직접 손으로 그래프</code>를 그리면서 하나하나씩 <code>과정</code>이 어떻게 이루어지는지 알고 계셔야합니다.</li>
</ul>
<p>간략히 풀이한 것에 말씀드려보면 <code>(1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2)</code>이라는 조건이 있으므로 각각의 <code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt;</code> 형식의 리스트에 값을 할당하였습니다. 또한, 내가 체크한 부분인지 아닌지를 확인하기 위한 <code>check변수</code>를 선언하여 문제를 해결 하였습니다.<br>
결국, <code>check된 부분이 false인 경우</code>에 카운트 값을 하나씩 올려주면서 재귀호출을 하게 된다면 결국엔 <code>그 정점(V)에 포함된 간선(E)의 연결요소의 개수</code>를 알 수 있겠죠?</p>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<p>시간복잡도는 현재 <code>(1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2)</code> 의 조건을 가지고 있습니다.<br>
<code>N은 최대 1000</code>까지의 수를 가질 수 있으며, M 같은경우는 <code>(1000*(999-1)/2)</code> 까지의 값을 가집니다.<br>
약 <code>500,000 정확히 말해서 499,500까지의 값</code>을 가질 수 있다는 말인데요.</p>
<p>N의 시간복잡도에 대해서는 <code>O(N^2)까지의 수</code>를 계산 하였을때, <code>1000 * 1000 =&gt; 1,000,000 백만</code>까지 나오게 됩니다. <code>M같은경우</code>는 <code>O(M^2) 약 500,000</code> 이기때문에 <code>O(M^2)</code>을 하게 되면 <code>500,000 * 500,000 =&gt; 250,000,000,000 = 2500억정도</code>의 <code>시간복잡도가 계산</code> 될 수 있기때문에 주의하여야합니다. 시간복잡도는 약 1초에 1억번 컴퓨터가 수행 할 수 있는 시간을 말하는데요.  <code>2500억</code>정도가 나오게된다면 컴퓨터 시간복잡도를 수행하는데 있어서 <code>2500초 정도</code>가 걸린다고 생각하시면 됩니다. 이러한 <code>시간복잡도 또한 무시할 수 없는 알고리즘</code>의 하나이기 때문에 <code>주의를 귀울이셔야 할 것 같습니다.</code></p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BFS DFS두가지 방법으로 사용하기</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연결요소11724 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] connCheck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; A = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            A.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            A.get(x).add(y);</span><br><span class="line">            A.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                <span class="comment">//dfs(i);</span></span><br><span class="line">                bfs(i);</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(v);</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                    check[y] = <span class="keyword">true</span>;</span><br><span class="line">                    q.offer(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                check[y] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 부등호 2529</title>
    <url>/inequality-sign/</url>
    <content><![CDATA[<h2 id="baegjun-budeungho-2529-munje"><a href="#baegjun-budeungho-2529-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-부등호-2529-문제"></a> <a href="https://www.acmicpc.net/problem/2529" target="_blank" rel="noopener">백준 부등호 2529 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>두 종류의 부등호 기호 ‘&lt;’와 ‘&gt;’가 k개 나열된 순서열  A가 있다. 우리는 이 부등호 기호 앞뒤에 서로 다른 한 자릿수 숫자를 넣어서 모든 부등호 관계를 만족시키려고 한다. 예를 들어, 제시된 부등호 순서열 A가 다음과 같다고 하자.</p>
<p><code>A =&gt; &lt; &lt; &lt; &gt; &lt; &lt; &gt; &lt; &gt;</code></p>
<p>부등호 기호 앞뒤에 넣을 수 있는 숫자는 0부터 9까지의 정수이며 선택된 숫자는 모두 달라야 한다. 아래는 부등호 순서열 A를 만족시키는 한 예이다.</p>
<p><code>3 &lt; 4 &lt; 5 &lt; 6 &gt; 1 &lt; 2 &lt; 8 &gt; 7 &lt; 9 &gt; 0</code></p>
<p>이 상황에서 부등호 기호를 제거한 뒤, 숫자를 모두 붙이면 하나의 수를 만들 수 있는데 이 수를 주어진 부등호 관계를 만족시키는 정수라고 한다. 그런데 주어진 부등호 관계를 만족하는 정수는 하나 이상 존재한다. 예를 들어 3456128790 뿐만 아니라 5689023174도 아래와 같이 부등호 관계 A를 만족시킨다.</p>
<p><code>5 &lt; 6 &lt; 8 &lt; 9 &gt; 0 &lt; 2 &lt; 3 &gt; 1 &lt; 7 &gt; 4</code></p>
<p>여러분은 제시된 k개의 부등호 순서를 만족하는 (k+1)자리의 정수 중에서 최댓값과 최솟값을 찾아야 한다. 앞서 설명한 대로 각 부등호의 앞뒤에 들어가는 숫자는 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }중에서 선택해야 하며 선택된 숫자는 모두 달라야 한다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫 줄에 부등호 문자의 개수를 나타내는 정수 k가 주어진다. 그 다음 줄에는 k개의 부등호 기호가 하나의 공백을 두고 한 줄에 모두 제시된다. k의 범위는 2 ≤ k ≤ 9 이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>여러분은 제시된 부등호 관계를 만족하는 k+1 자리의 최대, 최소 정수를 첫째 줄과 둘째 줄에 각각 출력해야 한다. 단 아래 예(1)과 같이 첫 자리가 0인 경우도 정수에 포함되어야 한다. 모든 입력에 답은 항상 존재하며 출력 정수는 하나의 문자열이 되도록 해야 한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>2<br>
&lt; &gt;</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>897<br>
021</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>부등호의 개수가 주어지고 0~9까지의 값들을 가지고 해당 부등호 조건들이 만족하는 값들을 찾아 최댓값, 최솟값을 찾는 문제입니다.</li>
<li>선택된 숫자는 <code>모두 달라야하기때문에</code> 값들을 <code>체킹하는 변수</code>가 필요해 보입니다. 그렇기 때문에 <code>순열</code>을 사용하면 되겠다 라는 생각을 하게 되었습니다.</li>
<li>K개의 부등호의 개수는 0~9까지의 값중 K+1개를 선택할 수 있는것과 같은 의미입니다.</li>
</ul>
<p>입력으로 주어진 부등호 <code>&gt;, &lt;</code>에 따라 값 a,b가 만족하는지 찾는 함수가 필요합니다. 그리고 idx값이 0일때나 부등호가 성립하는경우에만 브루트포스를 사용하여 값을 순회합니다.<code>idx값이 0일때 브루트포스를 순회하는 이유</code>는 맨처음 문자열값이 <code>&quot;&quot;으로 호출을 진행하기 때문에 이것에 대한 예외처리</code>를 해준 것입니다.</p>
<blockquote>
<p>문자열 완전탐색 문제는 어떻게 풀까?</p>
</blockquote>
<ul>
<li>문제마다 다를 수 있겠지만 보통 <code>브루트포스 문자열관련 문제가 나오게 되면 DFS호출시 문자열을 더하고 빼주는 형식</code>으로 진행하는 것이 깔끔하고 구현이 더 쉽다고 생각합니다. 맨 처음에 문자열을 더하고 빼주는 형식으로 진행하지 않고 <code>Basement조건이 만족했을때(return 조건)</code> 처리를 하게 되면 복잡함을 느낄 수 있었습니다.</li>
</ul>
<blockquote>
<p>Basement 만족시<br>
K+1개를 선택하여 DFS를 통해 모든 조건을 구하였던 문자열 값을 answer에 모든 값을 담아주게 하였습니다.</p>
</blockquote>
<blockquote>
<p>최댓값, 최솟값<br>
문제에서 최댓값, 최솟값을 찾는 문제이므로 <code>Collections.sort()</code>함수를 사용하여 <code>맨 앞(index=0), 맨뒤(answer.size()-1)</code>의 값을 출력시켜주면 값을 도출해날 수 있습니다.</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 부등호문제 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;String&gt; answer;</span><br><span class="line">    <span class="keyword">static</span> String inequality_sign = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(),<span class="string">" "</span>);</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">        answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            inequality_sign += st.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="string">""</span>, <span class="number">0</span>, k);</span><br><span class="line">        Collections.sort(answer);</span><br><span class="line"></span><br><span class="line">        System.out.println(answer.get(answer.size()-<span class="number">1</span>) + <span class="string">"\n"</span> + answer.get(<span class="number">0</span>) + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, <span class="keyword">int</span> idx, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// basement</span></span><br><span class="line">        <span class="keyword">if</span>(idx == k+<span class="number">1</span>)&#123;</span><br><span class="line">            answer.add(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(idx == <span class="number">0</span> || inequality_check(s.charAt(idx-<span class="number">1</span>), (i+<span class="string">'0'</span>), inequality_sign.charAt(idx-<span class="number">1</span>)))&#123;</span><br><span class="line">                check[i] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(s+String.valueOf(i), idx+<span class="number">1</span>, k);</span><br><span class="line">                check[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 부등호 체크 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">inequality_check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">char</span> cal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cal == <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cal == <span class="string">'&gt;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>위상정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 수 이어쓰기1 1748</title>
    <url>/number-inheritance1/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-su-ieosseugi1-1748-munje"><a href="#baegjun-su-ieosseugi1-1748-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-수-이어쓰기1-1748-문제"></a> <a href="https://www.acmicpc.net/problem/1748" target="_blank" rel="noopener">백준 수 이어쓰기1 1748 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>1부터 N까지의 수를 이어서 쓰면 다음과 같이 새로운 하나의 수를 얻을 수 있다.</p>
<p>1234567891011121314151617181920212223…</p>
<p>이렇게 만들어진 새로운 수는 몇 자리 수일까? 이 수의 자릿수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 N(1≤N≤100,000,000)이 주어진다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 새로운 수의 자릿수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>120</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>252</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>1~N까지의 값을 수를 이어서 쓰면 하나의 수를 얻을때 몇자리수인지를 구하는문제입니다.<br>
알고리즘 사고를 말하기 앞서, String VS StringBuilder, StringBuffer의 차이를 확인하고 지나가겠습니다.</li>
</ul>
<blockquote>
<p>String VS StringBuilder, StringBuffer<br>
<code>String 클래스 불변 객체</code>이기 때문에 <code>문자열 연산에서 객체를 계속 생성</code>하므로 성능이 떨어지지만 <code>조회와 멀티스레드 환경</code>에서 <code>큰 이점</code>을 가지고 있습니다.</p>
</blockquote>
<p>이에 반해,StringBuffer 클래스와 StringBuilder 클래스는 문자열 연산이 자주 발생할 때 문자열이 변경가능한 객체이므로 이점을 가지고 있습니다.</p>
<p>즉, <code>StringBuffer와 StringBuilder 차이점은 동기화 지원 유무</code>이고 <code>동기화를 고려하지 않는 환경에서 StringBuilder가 성능이 더 좋고</code>, <code>동기화 멀티스레드 환경</code>에서는 <code>StringBuffer</code>을 사용하는것이 좋습니다.</p>
<blockquote>
<p>모든 경우로 가능할까? 브루트 포스?<br>
N의 범위를 살펴보면 <code>N(1≤N≤100,000,000)</code> 의 조건을 가지고 있습니다. 1초에 1억까지 연산이 가능하므로 1초안에 처리 될 수 있어야합니다.</p>
</blockquote>
<p>즉, <code>모든 경우의 수를 O(N)만큼 진행</code>하면 <code>브루트포스로 진행</code>이 가능하지만, <code>문자열 연산</code>에서 <code>시간복잡도</code>는 <code>O(N) * 10</code>까지 진행될 수 있습니다. 그 이유는 <code>10은 수의 최대 자릿수</code>를 의미하기 때문에 <code>N의 시간복잡도</code>를 넘어버리게 됩니다. <code>문자열 String</code>은 <code>새로운 객체</code>를 계속해서 생성하기때문에 압도적으로 <code>시간복잡도가 증가</code>하는 경우가 될 수 있습니다.</p>
<p>따라서, 일반적인 브루트포스방법으로는 <code>모든 N까지를 진행하게 되면 시간초과</code>가 나게 됩니다. 그렇기 때문에 <code>다른 방법</code>을 <code>고안</code>할 수 있어야합니다.</p>
<blockquote>
<p>다른 방법은 무엇일까?<br>
수학적 연산의 방법을 살펴보면 수의 <code>자리수별로 나누어서 문제를 해결</code> 할 수 있습니다.<br>
만약 <code>N = 120</code>이라고 생각하면</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>~<span class="number">9</span> 길이 <span class="number">1</span></span><br><span class="line">(<span class="number">9</span>-<span class="number">1</span>+<span class="number">1</span>) * <span class="number">1</span> </span><br><span class="line"><span class="number">10</span>~<span class="number">99</span> 길이 <span class="number">2</span></span><br><span class="line">(<span class="number">99</span>-<span class="number">10</span>+<span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"><span class="number">100</span>~<span class="number">120</span> 길이 <span class="number">3</span></span><br><span class="line">(<span class="number">120</span>-<span class="number">100</span>+<span class="number">1</span>) * <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>의 규칙을 찾아낼 수 있습니다. 수의 각 자리별로 나누어서 자리수를 문제를 해결 할 수 있습니다.</p>
<p><code>결과적으로, (N의자리 최대값 - N자리 최솟값 + 1) * 자리수(N자리수 길이)</code> 으로 자리수를 구할 수 있게됩니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">자리수 찾기문제</span></span><br><span class="line"><span class="comment">1234567891011 와같이 수를 이어붙이면 브루트포스로 처리하면 O(N) * 10(자리수)의 시간복잡도가 발생하므로 시간초과가 발생합니다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 수이어쓰기1 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i*=<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i*<span class="number">10</span>-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; n)&#123;</span><br><span class="line">                j = n;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (<span class="keyword">long</span>)(j - i + <span class="number">1</span>) * len;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>연산</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 체스판 다시칠하기 1018</title>
    <url>/chess-repaint/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-ceseupan-dasicilhagi-1018-munje"><a href="#baegjun-ceseupan-dasicilhagi-1018-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-체스판-다시칠하기-1018-문제"></a> <a href="https://www.acmicpc.net/problem/1018" target="_blank" rel="noopener">백준 체스판 다시칠하기 1018 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje"><a href="#munje" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M<em>N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8</em>8 크기의 체스판으로 만들려고 한다.</p>
<p>체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.</p>
<p>보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8<em>8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8</em>8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>8 8<br>
WBWBWBWB<br>
BWBWBWBW<br>
WBWBWBWB<br>
BWBBBWBW<br>
WBWBWBWB<br>
BWBWBWBW<br>
WBWBWBWB<br>
BWBWBWBW</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>1</p>
<h3 id="yeje-ibryeog-2"><a href="#yeje-ibryeog-2" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#예제-입력-2"></a> 예제 입력 2</h3>
<p>10 13<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
WWWWWWWWWWBWB<br>
WWWWWWWWWWBWB</p>
<h3 id="yeje-culryeog-2"><a href="#yeje-culryeog-2" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#예제-출력-2"></a> 예제 출력 2</h3>
<p>12</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>입력으로 주어진 체스판을 8*8의 크기의 체스판으로 다시 칠하는 경우를 모두 찾는 브루트포스 문제입니다.</li>
<li>체스판이 White로 시작하는 경우와 Black으로 시작하는 경우 두가지를 나누어서 생각할 수 있어야합니다.</li>
<li><code>BufferedReader</code>를 사용하여 입력을 처리하였고 <code>StringTokenizer</code>를 사용하여 각각의 입력을 처리하였습니다.</li>
<li><code>'B' 블랙의 경우 1, 'W' 흰색의 경우 0</code>으로 변경하여 진행하였습니다.</li>
</ul>
<blockquote>
<p>모든 Board를 어떤식으로 순회할 수 있을까요?<br>
테스트케이스로 주어진 n = 10, m = 13을 예를 들어서 설명하겠습니다.<br>
행같은 경우는 최대 3번, 열은 최대 6번까지 진행이 가능합니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n-<span class="number">8</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m-<span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="comment">// first : black,first : white</span></span><br><span class="line">      separate(i,j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>해당 코드가 최대 행,열이 최대 진행가능한 경우를 나타낼 수 있습니다.</p>
<blockquote>
<p>그래도 이해가 잘 가지 않으신다면?<br>
이해가 잘 가지 않으시면 직접 그림을 그리셔서 주어진 <code>10*13의 체스판위</code>에 <code>8*8의 체스판</code>을 최대 어떻게 이동할 수 있을지 생각해보시면 됩니다.</p>
</blockquote>
<blockquote>
<p>규칙<br>
이제 규칙을 찾아내야합니다.</p>
</blockquote>
<p>첫번째로 <code>WB, BW</code> 으로 시작하는 두가지경우로 나타낼 수 있습니다. 그리고 (행+열)의 값이 홀수, 짝수에 따라 체스판이 이루어진다는것을 알 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WBWBWBWB</span><br><span class="line">BWBWBWBW</span><br><span class="line">WBWBWBWB</span><br><span class="line">BWBBBWBW</span><br><span class="line">WBWBWBWB</span><br><span class="line">BWBWBWBW</span><br><span class="line">WBWBWBWB</span><br><span class="line">BWBWBWBW</span><br></pre></td></tr></table></figure>
<p>즉, <code>(행+열)을 더한값이 짝수, 홀수</code>에 따라 체스판의 규칙을 띄는것을 확인할 수 있습니다.<br>
짝수일 경우 흰색, 홀수일 경우 검은색이라고 생각하시면 됩니다.<br>
흰색이면 검은색으로 값을 증가 시켜주어야하고 , 검은색이라면 흰색으로 값을 증가시켜줍니다. 검은색으로 바꿔야하는 개수와 흰색으로 바꿔야하는 개수중 최소의 값을 찾아주어 <code>최솟값</code>을 처리해주면 됩니다.</p>
<blockquote>
<p>실수한 점<br>
처음에 WB,BW 두가지 경우를 나누는 것을 생각해보지 않고 한가지의 경우만 생각해서 테스트 케이스는 모두 맞았지만 다른 케이스에서 틀렸습니다가 나오게 되었습니다.</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 체스판다시칠하기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> map[][];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> min = <span class="number">80</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            String val = st.nextToken();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="comment">// black - 0</span></span><br><span class="line">                <span class="keyword">if</span>(val.charAt(j) == <span class="string">'B'</span>)&#123;</span><br><span class="line">                   map[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// white - 1</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    map[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n-<span class="number">8</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m-<span class="number">8</span>; j++)&#123;</span><br><span class="line">                <span class="comment">// first : black,first : white</span></span><br><span class="line">                separate(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separate</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cntBlack = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cntWhite = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;start+<span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &lt; end+<span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 짝수: white</span></span><br><span class="line">                <span class="keyword">if</span>((i+j) % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        cntWhite++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        cntBlack++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 홀수: black</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        cntBlack++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        cntWhite++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        min = min &lt; cntBlack ? min : cntBlack;</span><br><span class="line">        min = min &lt; cntWhite ? min : cntWhite;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 덩치 7568</title>
    <url>/big-body/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-deongci-munje"><a href="#baegjun-deongci-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-덩치-문제"></a> <a href="https://www.acmicpc.net/problem/7568" target="_blank" rel="noopener">백준 덩치 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje"><a href="#munje" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>우리는 사람의 덩치를 키와 몸무게, 이 두 개의 값으로 표현하여 그 등수를 매겨보려고 한다. 어떤 사람의 몸무게가 x kg이고 키가 y cm라면 이 사람의 덩치는 (x,y)로 표시된다. 두 사람 A 와 B의 덩치가 각각 (x,y), (p,q)라고 할 때 x&gt;p 그리고 y&gt;q 이라면 우리는 A의 덩치가 B의 덩치보다 &quot;더 크다&quot;고 말한다. 예를 들어 어떤 A, B 두 사람의 덩치가 각각 (56,177), (45,165) 라고 한다면 A의 덩치가 B보다 큰 셈이 된다. 그런데 서로 다른 덩치끼리 크기를 정할 수 없는 경우도 있다. 예를 들어 두 사람 C와 D의 덩치가 각각 (45, 181), (55,173)이라면 몸무게는 D가 C보다 더 무겁고, 키는 C가 더 크므로, &quot;덩치&quot;로만 볼 때 C와 D는 누구도 상대방보다 더 크다고 말할 수 없다.</p>
<p>N명의 집단에서 각 사람의 덩치 등수는 자신보다 더 &quot;큰 덩치&quot;의 사람의 수로 정해진다. 만일 자신보다 더 큰 덩치의 사람이 k명이라면 그 사람의 덩치 등수는 k+1이 된다. 이렇게 등수를 결정하면 같은 덩치 등수를 가진 사람은 여러 명도 가능하다. 아래는 5명으로 이루어진 집단에서 각 사람의 덩치와 그 등수가 표시된 표이다.</p>
<p>이름    &lt;몸무게, 키&gt;    덩치 등수<br>
A    &lt;55, 185&gt;    2<br>
B    &lt;58, 183&gt;    2<br>
C    &lt;88, 186&gt;    1<br>
D    &lt;60, 175&gt;    2<br>
E    &lt;46, 155&gt;    5<br>
위 표에서 C보다 더 큰 덩치의 사람이 없으므로 C는 1등이 된다. 그리고 A, B, D 각각의 덩치보다 큰 사람은 C뿐이므로 이들은 모두 2등이 된다. 그리고 E보다 큰 덩치는 A, B, C, D 이렇게 4명이므로 E의 덩치는 5등이 된다. 위 경우에 3등과 4등은 존재하지 않는다. 여러분은 학생 N명의 몸무게와 키가 담긴 입력을 읽어서 각 사람의 덩치 등수를 계산하여 출력해야 한다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫 줄에는 전체 사람의 수 N이 주어진다. 그리고 이어지는 N개의 줄에는 각 사람의 몸무게와 키를 나타내는 양의 정수 x와 y가 하나의 공백을 두고 각각 나타난다. 단, 2 ≤ N ≤ 50, 10 ≤ x,y ≤ 200 이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>여러분은 입력에 나열된 사람의 덩치 등수를 구해서 그 순서대로 첫 줄에 출력해야 한다. 단, 각 덩치 등수는 공백문자로 분리되어야 한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>5<br>
55 185<br>
58 183<br>
88 186<br>
60 175<br>
46 155</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>2 2 1 2 5</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>사람들의 덩치의 등수를 매길때 조건인 (x,y), (p,q)라고 할때 x&gt;p, y&gt;q이라면 A의 덩치가 B의 덩치보다 <code>더크다</code> 라는게 가장 중요한 조건이였습니다. 이 문제는 개인적으로 브루트포스 + 조합이라고 생각합니다.</li>
<li>각각의 몸무게와 키를 저장시킬 배열을 하나선언하여 주었습니다.</li>
<li>그리고 check변수를 두개 선언해주었습니다. 두개를 선언해주는 이유는 첫번째 사람이 나머지사람들의 모든 덩치비교, 두번째 사람이 모든 덩치비교 … 이런식으로 모든사람의 덩치를 비교해야합니다. 따라서, 각각의 사람에 따라 덩치큰사람의 개수를 찾아주어야합니다. 그렇기 때문에 타겟이 되는 사람을 체크해줄 변수와 타겟변수와 비교되는 사람들을 체크해줄 변수를 선언해주었습니다.</li>
<li>각각 타겟이 되는 사람을 순회해주어야하므로 n까지의 모든 경우사람을 DFS돌려주었습니다.</li>
</ul>
<blockquote>
<p>몸무게, 키 비교의 경우</p>
</blockquote>
<p>첫번째 사람일 경우 그 나머지사람 모두와 비교, 두번째 사람일 경우 그 나머지 사람들과 모두 …(계속) 비교의 형식으로 진행하였습니다.</p>
<p>만약 첫번째 사람의 경우는 2~N까지의 사람을 모두 비교해주어야하므로</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(idx == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(c &gt; a &amp;&amp; d &gt; b)&#123;</span><br><span class="line">        cnt +=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>선택된 사람이 한명이고, <code>c &gt; a &amp;&amp; d &gt; b</code> 의 조건을 만족하면 cnt++를 해주었습니다. 그리고나서 모든 DFS의 경우를 빠져나오게 되면 cnt값을 1로 초기화 시켜주었습니다. 문제에서 보면 <code>큰 덩치의 사람이 k명이라면 그 사람의 덩치 등수는 k+1이 된다.</code> 라는 조건이 있기때문에 1로 초기화시켜주었습니다. 값을 도출하였을때 -1씩 줄어든 값이 출력되어서 문제를 다시 읽어보니 조건을 찾았습니다.<br>
그리고 나서 나머지 사람들을 선택할때는 조합의 경우를 찾아주면서 값을 비교해주었습니다.</p>
<hr>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 덩치7568 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] value_check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] stature;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        weight= <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        stature = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        value_check = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(),<span class="string">" "</span>);</span><br><span class="line">            weight[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">            stature[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            check[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(weight[i],stature[i],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, n);</span><br><span class="line">            answer.add(cnt);</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            check[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;answer.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == answer.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(answer.get(i));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(answer.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> idx, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c &gt; a &amp;&amp; d &gt; b)&#123;</span><br><span class="line">                cnt +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(value_check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            value_check[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(a,b,weight[i],stature[i], idx+<span class="number">1</span> ,n);</span><br><span class="line">            value_check[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 분해합 2231</title>
    <url>/decomposition-sum/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-bunhaehab-munje"><a href="#baegjun-bunhaehab-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-분해합-문제"></a> <a href="https://www.acmicpc.net/problem/2231" target="_blank" rel="noopener">백준 분해합 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje"><a href="#munje" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>어떤 자연수 N이 있을 때, 그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다. 어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다. 예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다. 따라서 245는 256의 생성자가 된다. 물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다. 반대로, 생성자가 여러 개인 자연수도 있을 수 있다.</p>
<p>자연수 N이 주어졌을 때, N의 가장 작은 생성자를 구해내는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 자연수 N(1 ≤ N ≤ 1,000,000)이 주어진다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>분해합을 구하기 위해서는 <code>M은 N의 생성자이여야한다.</code> 가 가장 중요한 조건이였습니다.<br>
예를 들어보겠습니다.<br>
N이 216일 경우 (216+2+1+6) =&gt; 198이 됩니다.<br>
즉,198은 225의 분해합입니다.</li>
</ul>
<blockquote>
<p>분해합의 원리<br>
각 자리의 수 + 분해합 M의 값 = N이 되는 경우를 찾아주면 되는 문제였습니다.<br>
브루트포스를 사용하여 모든경우 i=1~100000까지의 값을 순회하면서 N의 값과 같은 경우를 찾아주었습니다. 정수값을 문자열로 변경하여 각 자리의 값의 합을 저장시킨후 <code>(i의 값 + 각 자리 값의 합)</code> 이 같을 경우 값을 찾아주었습니다.</p>
</blockquote>
<blockquote>
<p>회고<br>
처음에 문제의 뜻을 제대로 파악못하였는데 직접 써보면서 하나씩 대입해보니까 쉽게 풀 수 있었던 문제였습니다. 약 40분정도 소요되었던 문제였습니다.</p>
</blockquote>
<p>문제에서 주어진 각 분해합의 개념을 잘 파악하고 브루트포스로 값을 찾아주면 쉽게 도출 할 수 있습니다. N의 값과 같은 생성자를 모두 answer 변수에 넣어준 후 <code>Collections.min()</code> 함수를 사용하여 최솟값을 찾아주었습니다.</p>
<hr>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 분해합 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        Scanner sc= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">            String str = Integer.toString(i);</span><br><span class="line">            <span class="keyword">int</span> str_value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;str.length(); j++) &#123;</span><br><span class="line">                str_value += Integer.parseInt(String.valueOf(str.charAt(j)));</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(n,i,i+str_value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(answer.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            min = Collections.min(answer);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> value, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sum == n의 값과 같을 경우 즉, 생성자일 경우</span></span><br><span class="line">        <span class="keyword">if</span>(sum == n)&#123;</span><br><span class="line">            answer.add(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 도둑질</title>
    <url>/house-steal/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="peurogeuraemeoseu-dodugjil-munje"><a href="#peurogeuraemeoseu-dodugjil-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#프로그래머스-도둑질-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42897?language=java" target="_blank" rel="noopener">프로그래머스 도둑질 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>도둑이 어느 마을을 털 계획을 하고 있습니다. 이 마을의 모든 집들은 아래 그림과 같이 동그랗게 배치되어 있습니다.</p>
<p>각 집들은 서로 인접한 집들과 방범장치가 연결되어 있기 때문에 인접한 두 집을 털면 경보가 울립니다.</p>
<p>각 집에 있는 돈이 담긴 배열 money가 주어질 때, 도둑이 훔칠 수 있는 돈의 최댓값을 return 하도록 solution 함수를 작성하세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<p>이 마을에 있는 집은 3개 이상 1,000,000개 이하입니다.<br>
money 배열의 각 원소는 0 이상 1,000 이하인 정수입니다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>훔친 비용의 값을 점진적으로 사용하기때문에 DP로 풀면 되겠다 라는 생각을 하게 되었습니다.</p>
<ul>
<li>첫번째집을 훔치는 경우 VS 첫번째집을 훔치지 않는 경우<br>
훔치는 경우의 수에 따라서 DP를 나누어서 값을 계산하였습니다.</li>
</ul>
<blockquote>
<p>첫번째 집을 훔치는 경우</p>
</blockquote>
<p>첫번째집을 훔쳤을 경우에는 <code>dp[0] = 첫번째집의 비용</code>을 저장시켜줍니다.<br>
첫번째집을 훔쳤을때에는 인접한 두번째집은 훔칠수 없습니다. 따라서 첫번째집을 훔치는경우는 두번째집을 선택할수없기때문에 두번째집도 지금까지 가장 큰 첫번째집 돈을 넣어줍니다. <code>dp[1] = 첫번째 집의 비용</code></p>
<p>여기서 length의 범위를 -1을 해주게 되는데 첫번째집을 선택하게 될 경우 마지막에 있는 집은 방문을 하지않는것이 확실하기때문에 -1로 마지막 길이 이전까지만 순회시켜주었습니다.</p>
<blockquote>
<p>첫번째 집을 훔치지 않는 경우<br>
첫번째 집을 훔치지 않는 경우는 첫번째집은 0의 값을 넣어주게 됩니다.<br>
<code>dp1[0] = 훔치지 않으므로 0</code><br>
두번째 집은 기존의 money[1]의 값을 넣어주게 되면서 이제 모든 비용을 구해주면됩니다.</p>
</blockquote>
<p>이제 모든 비용을 구하기 위해서는 값을 누적해서 더해주면서 가장 큰 값으로 업데이트를 시켜줍니다. 즉, <code>최댓값</code>을 구하기 위해서 <code>Math.max()</code> 함수를 사용하였습니다.</p>
<p>결, <code>dp[길이-2], dp1[길이-1]</code>에 집을 훔쳤을때, 훔치지 않았을때의 최대값이 저장되어 있을 것입니다. 그래서 dp의 비용과 dp1의 최댓값을 다시 구해주어 값을 리턴해주면 원하는 값을 찾을 수 있습니다.</p>
<blockquote>
<p>이 문제의 핵심은 인접했을때의 경우의 수와 첫번째 집을 훔친 경우와 훔치지 않는 경우를 찾아내는것이 중요합니다.</p>
</blockquote>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 도둑질 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] money = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[money.length];</span><br><span class="line">        <span class="keyword">int</span>[] dp1 = <span class="keyword">new</span> <span class="keyword">int</span>[money.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//첫번째 집을 훔치는 경우</span></span><br><span class="line">        dp[<span class="number">0</span>] = money[<span class="number">0</span>]; <span class="comment">// 첫번째집의 돈 훔치기</span></span><br><span class="line">        dp[<span class="number">1</span>] = money[<span class="number">0</span>]; <span class="comment">// 첫번째집을 훔치는경우는 두번째집을 선택할수없기때문에 두번째집도 지금까지 가장 큰 첫번째집 돈을 넣어준다.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//첫번째 집을 훔치지 않는 경우</span></span><br><span class="line">        dp1[<span class="number">0</span>] = <span class="number">0</span>;     <span class="comment">//첫번째집 훔치지않으므로 0</span></span><br><span class="line">        dp1[<span class="number">1</span>] = money[<span class="number">1</span>]; <span class="comment">//두번째집은 훔치는 가격</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;money.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">2</span>] + money[i], dp[i-<span class="number">1</span>]);      <span class="comment">// 1번째 세번째 훔치는 경우</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;money.length; i++)&#123;</span><br><span class="line">            dp1[i] = Math.max(dp1[i-<span class="number">2</span>] + money[i], dp1[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Math.max(dp[money.length-<span class="number">2</span>], dp1[money.length-<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>dp</tag>
        <tag>다이나믹프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 큰 수 만들기</title>
    <url>/bignumber/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="peurogeuraemeoseu-keunsumandeulgi"><a href="#peurogeuraemeoseu-keunsumandeulgi" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#프로그래머스-큰수만들기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42883" target="_blank" rel="noopener">프로그래머스 큰수만들기</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.</p>
<p>예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.</p>
<p>문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.</p>
<h3 id="jehan-jogeon"><a href="#jehan-jogeon" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#제한-조건"></a> 제한 조건</h3>
<p>number는 1자리 이상, 1,000,000자리 이하인 숫자입니다.<br>
k는 1 이상 number의 자릿수 미만인 자연수입니다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>숫자로 주어진 문자열에서 - k만큼의 수 만큼을 선택하여 가장 큰 수를 골라주면된다.</li>
<li>이전에 프로그래머스 소수찾기에서 풀었던 것과 유사하긴 하지만 이것이 더 쉽습니다. DFS를 통하여 <code>number.size() - k</code> 개수만큼 숫자를 선택한다</li>
<li>basement조건은 선택한 개수와 k개의 개수를 제거한 개수와 같을 경우이다.</li>
<li>basement조건에 걸리게 되면 check된 값들만 문자열 결합을 통해서 값을 만들어준다. 그 이후 그 값들을 정수로 변환시켜서 최댓값을 구해준다.</li>
<li>모든 최댓값을 구하게 되었으면 to_string()함수를 이용해서 리턴시켜준다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">int</span> max_num= <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> number,<span class="keyword">int</span> cnt, <span class="keyword">int</span> len, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len == cnt)&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;number.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                str += number[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = atoi(str.c_str());</span><br><span class="line">        <span class="comment">// v.push_back(atoi(str.c_str()));</span></span><br><span class="line">        <span class="keyword">if</span>(res &gt; max_num)&#123;</span><br><span class="line">            max_num = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; len)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;number.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(number, cnt+<span class="number">1</span>, len, k);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> number, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = number.size() - k;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    dfs(number,<span class="number">0</span>, len , k);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> to_string(max_num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그리디</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 카펫</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%B9%B4%ED%8E%AB/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="peurogeuraemeoseu-kapes-munje"><a href="#peurogeuraemeoseu-kapes-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#프로그래머스-카펫-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42842?language=java" target="_blank" rel="noopener">프로그래머스 카펫 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>문제 설명<br>
Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.</p>
<p>Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.</p>
<p>Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<p>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.<br>
노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.<br>
카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>이문제의 핵심은 카펫간의 규칙을 찾아내는것이 급선무입니다.</li>
<li>첫번째 테스트케이스 brown 10, yellow 2 일 경우 가로 일경우 [4,3] 세로일 경우 [3,4]의 값이 반환됩니다. 이것이 뜻하는 바는 yellow가 <code>직사각형이거나 정사각형</code>일 수 있다는것을 뜻하게 됩니다. 즉, <code>노란블록은 정사각형또는 직사각형</code>으로 가능합니다. 그이유는 n &gt; m 카펫의 가로길이는 세로 길이와 같거나 길기때문입니다.</li>
</ul>
<blockquote>
<p>이것을 어떻게 표현할 수 있을까요?<br>
yellow = 24 테스트케이스를 살펴봅시다.<br>
yellow가 24일 경우 나타낼 수 있는 케이스는(24 * 1, 12 * 2, 8 * 3, 6 * 4)로 표현할 수 있습니다.<br>
즉, 노란블록의 총 가로 길이를 a, 세로길이를 b 라고 봤을때 (2a) + (2b) + 4 로 표현할 수 있습니다. 잘 생각해보시면 <code>노란색 위아래</code>로 갈색블록과 <code>노란색 좌우</code>로 갈색블록이기때문에 총 가로길이 2a, 총 세로길이 2b, 전체 카펫의 <code>좌측 상단, 우측상단, 좌측하단, 우측하단</code> 의 개수 총 4개로 표현 할 수 있습니다.</p>
</blockquote>
<p>결과적으로, (2a) + (2b) + 4 의 조건이 성립됩니다.</p>
<p>이에 따라 (2a) + (2b) + 4 의 값이 brown의 개수와 같다는 조건이 성립하면 되겠죠?<br>
즉, 현재 a + 2(끝에 두점) , b + 2(끝에 두점)의 값으로 가로,세로의 최종길이를 구할 수 있게됩니다.</p>
<blockquote>
<p>요약</p>
</blockquote>
<ul>
<li>카펫의 길이는 n&gt;m의 크기를 만족합니다.</li>
<li>노란카펫은 직사각형 또는 정사각형을 만족합니다.</li>
<li>(2a) + (2b) + 4 의 조건이 brown과 같을때 해당 가로,세로의 최종길이입니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="wanjeontamsaeg-puli"><a href="#wanjeontamsaeg-puli" class="header-anchor">2.2.1. </a><a class="markdownIt-Anchor" href="#완전탐색-풀이"></a> 완전탐색 풀이</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 카펫 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> brown = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> yellow = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=yellow; i &gt;= (yellow/i); i--)&#123;</span><br><span class="line">            <span class="comment">// 나눠지는값이 아니면분리 못</span></span><br><span class="line">            <span class="keyword">if</span>(yellow % i != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 가로 2배, 세로2배 모서리 4개 추가</span></span><br><span class="line">            <span class="keyword">if</span>(((<span class="number">2</span>*i)+(<span class="number">2</span>*(yellow/i)) + <span class="number">4</span>) == brown)&#123;</span><br><span class="line">                answer[<span class="number">0</span>] = <span class="number">2</span>+i;        <span class="comment">// 가로 + 2 끝점</span></span><br><span class="line">                answer[<span class="number">1</span>] = (<span class="number">2</span>+(yellow/i)); <span class="comment">// 세로 +2 끝점</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer[<span class="number">0</span>] + <span class="string">""</span>+ answer[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>완전탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 주식가격</title>
    <url>/stock-price/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42584?language=java" target="_blank" rel="noopener">프로그래머스 주식가격</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.</p>
<blockquote>
<p>제한사항<br>
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.<br>
prices의 길이는 2 이상 100,000 이하입니다.</p>
</blockquote>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>스택으로 진행하는 방법도 있고, 배열로 진행하여도됩니다. 해당 풀이는 배열을 사용하였습니다.</li>
<li>prices배열에 담긴 값들이 초 단위로 기록되었을때 가격이 <code>몇초간 떨어지지않았는지</code>를 구하는 문제였습니다.</li>
<li>순수히 배열로만 사용하여 현재 가격과 그 이후에 일어날 시간의 값들을 비교해주었습니다. 현재의 가격이 뒤에 진행될 가격보다 크게 될 경우 <code>뒤에 진행된 시간- 현재의 시간</code>으로 계산하여 해당 조건들을 빠져나오게됩니다. 필요한값은 떨어지는 시점 즉, 현재의 가격보다 낮은값이 나왔을때 해당 조건을 벗어나게 됩니다.</li>
<li>처음에 주식가격보다 클경우 cnt값을 증가시켜서 arr배열에 담아주었는데, 정확도 면에서 틀린부분이 있었습니다. 기존의 실행은 통과하였으나 다른 테스트케이스를 통과를 하지 못했습니다. 제가 생각하지못한 예외가 있었을것이라고 생각이드는데, 바로 다른방식으로 진행하여 <code>다음에 일어날 시간 - 현재 시간</code>의 조건을 가지고 진행하였습니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<blockquote>
<p>잘못생각하였던 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주식가격 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] prices = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(prices[i] &lt;= prices[j])&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] +<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>올바른 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주식가격 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] prices = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(prices[i] &gt; prices[j])&#123;</span><br><span class="line">                    arr[i] = j-i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == prices.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    arr[i] = j-i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] +<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 멀쩡한 사각형</title>
    <url>/good-shape-sqaure/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/62048?language=java#" target="_blank" rel="noopener">프로그래머스 멀쩡한 사각형</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>가로 길이가 Wcm, 세로 길이가 Hcm인 직사각형 종이가 있습니다. 종이에는 가로, 세로 방향과 평행하게 격자 형태로 선이 그어져 있으며, 모든 격자칸은 1cm x 1cm 크기입니다. 이 종이를 격자 선을 따라 1cm × 1cm의 정사각형으로 잘라 사용할 예정이었는데, 누군가가 이 종이를 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았습니다. 그러므로 현재 직사각형 종이는 크기가 같은 직각삼각형 2개로 나누어진 상태입니다. 새로운 종이를 구할 수 없는 상태이기 때문에, 이 종이에서 원래 종이의 가로, 세로 방향과 평행하게 1cm × 1cm로 잘라 사용할 수 있는 만큼만 사용하기로 하였습니다.<br>
가로의 길이 W와 세로의 길이 H가 주어질 때, 사용할 수 있는 정사각형의 개수를 구하는 solution 함수를 완성해 주세요.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li><code>유클리드 알고리즘</code> 원리. 임의의 <code>두 자연수 a, b</code>가 주어졌을때. 둘중 큰 값이 a라고 가정해보겠습니다. <code>n이 0일때, b가 최대 공약수(GCD)</code>입니다. 즉, 최대공약수(GCD)를 구하는 방식을 알고있어야합니다.<br>
<code>gcd(greatest common divisor)</code>는 최대공약수의 약자인데요 최대 공약수는 어떻게 구할수 있을까요?</li>
</ul>
<blockquote>
<p>최대공약수 구하기<br>
예를 들면 12,8 이라는 숫자가 있다고 가정하겠습니다. 이것의 숫자의 최대 공약수는 어떻게 될까요? 작은숫자이기 때문에 <code>최대공약수는 4</code>라고 하는것을 쉽게 알 수 있을것입니다.<br>
하지만 값이 더 커질때는 암산으로 하기에는 힘든감이 있겠죠?<br>
일단, <code>12와 8의 값의 최대 공약수</code>를 구해보겠습니다. <code>12를 w, 8을 h</code>라고 가정하겠습니다.<br>
최대 공약수는 (h, w%h)의 값으로 구할 수 있습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span>, <span class="number">8</span></span><br><span class="line"><span class="number">8</span>, <span class="number">4</span>(<span class="number">12</span>를 <span class="number">8</span>로 나눈 나머지)</span><br><span class="line"><span class="number">4</span>, <span class="number">0</span>(<span class="number">8</span>을 <span class="number">4</span>로 나눈나머지)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>사각형의 넓이를 구하기<br>
<code>사각형의 넓이는 너비 * 높이</code>로 구할 수 있습니다.</p>
</blockquote>
<blockquote>
<p>대각선방향으로 자르는 정사각형의 개수는 어떻게 구할 수 있나요?<br>
<code>전체 사각형 넓이 -(너비 + 높이) + 최대 공약수</code><br>
의 값으로 정답을 노출해낼 수 있습니다.</p>
</blockquote>
<blockquote>
<p>W,H의 제한<br>
<code>W와 H의 제한은 1억이하의 자연수입니다.</code> 따라서 long타입으로 조금 더 넓은 범위로 연산이 가능하게 하였습니다.</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gcd(h, w % h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> gcd_num = gcd(w,h);</span><br><span class="line">        <span class="keyword">long</span> squreArea = (<span class="keyword">long</span>)w * (<span class="keyword">long</span>)h;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> answer = squreArea - ((<span class="keyword">long</span>)w + (<span class="keyword">long</span> )h) + gcd_num;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>수학</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 숫자카드 10815</title>
    <url>/number-card/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/10815" target="_blank" rel="noopener">백준 숫자카드 10815</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<blockquote>
<p>문제<br>
숫자 카드는 정수 하나가 적혀져 있는 카드이다. 상근이는 숫자 카드 N개를 가지고 있다. 정수 M개가 주어졌을 때, 이 수가 적혀있는 숫자 카드를 상근이가 가지고 있는지 아닌지를 구하는 프로그램을 작성하시오.</p>
</blockquote>
<blockquote>
<p>입력<br>
첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.</p>
</blockquote>
<p>셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다. 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다. 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>1,2번째 줄에 입력에 상근이가 가지고 있는 카드의 개수를 저장시킵니다.</li>
<li>3,4번째 줄에 찾고자하는 숫자를 입력합니다.</li>
</ul>
<p>처음에 모든 경우의 수를 탐색하게 된다면 <code>-10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다.</code> 라는 조건때문에 시간복잡도 상으로 시간초과가 날 것으로 생각하였습니다. 그래서 HashSet과 이분탐색을 진행하여 해당 문제를 풀어보면 시간복잡도면에서 통과할 수 있을것이라는 생각이 들게되었습니다. 해당 포스팅에는 HashSet과 이분탐색을 이용한 풀이를 두가지 방법을 모두 사용해보았습니다.</p>
<h3 id="hashseteul-sayonghan-puli"><a href="#hashseteul-sayonghan-puli" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#hashset을-사용한-풀이"></a> HashSet을 사용한 풀이</h3>
<p>문제조건상 반복되는 수가 없다고 하였지만, <code>Map</code>을 사용하기에는 <code>(key, value)</code>가 필요하기 때문에 <code>HashSet</code>을 사용하였습니다. 상근이가 가진 카드를 모두 HashSet에 넣어주게 된다음에 이제 상근이가 <code>찾을 값들을 HashSet에 있는 값과 비교</code>해주면 됩니다. <code>찾았다면 1</code>, <code>찾지못했다면 0을 add</code>시켜주게 되고 <code>ArrayList</code> 자료 구조를 사용하여 최종 결과값을 출력시켜주었습니다.</p>
<blockquote>
<p>HashSet의 특징<br>
자바 Collection 중 Set의 대표적인 <code>HashSet 클래스</code>입니다. HashSet은 Set 인터페이스의 구현 클래스입니다.  <code>HashSet은 Set의 파생클래스</code>로 Set은 기본적으로 집합으로 중복된 원소를 허용하지 않으며 순서 또한 고려하지 않습니다.</p>
</blockquote>
<h3 id="binary-search-ibun-tamsaeg"><a href="#binary-search-ibun-tamsaeg" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#binary-search이분-탐색"></a> Binary Search(이분 탐색)</h3>
<blockquote>
<p>이분 탐색이란?<br>
<code>이진 탐색은</code> 정렬된 데이터의 집합을 <code>이분화 하면서 탐색</code>하는 알고리즘입니다.</p>
</blockquote>
<blockquote>
<p>이분 탐색의 장점<br>
정렬이 되어 있어야 이진탐색을 할 수 있습니다.<code>O(logN)</code> 으로 빠르게 탐색할 수 있습니다. <code>O(logN)인 이유는</code> 이진 트리형태로 <code>절반을 줄여가면서 값을 탐색</code>하는 형식이기 때문입니다.<br>
이분 탐색의 단점<br>
만약 이분탐색에서 값들이 정렬이 되어 있지 않다면 <code>정렬하는데 많은시간이 소요</code>되며 정렬된 데이터가 아니면 <code>이분탐색에 적용할 수 없습니다.</code></p>
</blockquote>
<blockquote>
<p>이진탐색 문제 풀이</p>
</blockquote>
<ul>
<li>상근이가 가진 카드의 값들을 <code>입력</code>을 받습니다.</li>
<li>상근이가 가진 카드의 값들을 <code>정렬</code>합니다<code>(오름차순정렬)</code></li>
<li>상근이가 찾고하자는 개수까지 Binary Search함수를 호출합니다. 이때 첫번째 파라미터는 찾고자하는 <code>target</code> 값입니다. 그리고 두번째 파라미터는 상근이가 가지고 있는 카드의 개수입니다.</li>
</ul>
<blockquote>
<p>binary Search함수</p>
</blockquote>
<ul>
<li><code>시작점은 0</code>, <code>끝점은 len-1</code>의 값으로 <code>초기화</code> 시켜줍니다.</li>
<li>while문으로 end보다 크거나 작을때 까지 계속 루프를 진행합니다.</li>
<li><code>mid</code>라는 변수를 선언하여 <code>시작점과 끝점을 더한값의 / 2</code>를 연산하여 중간값을 구해주게 됩니다.</li>
<li>만약 상근이가 가진 카드의 값이 <code>target값 보다 작을 경우</code> 시작점을 <code>start = mid-1</code>점으로 설정하게 됩니다.</li>
<li>만약 상근이가 가진 카드의 값이 <code>target값 보다 클 경우</code> 끝점을 <code>end = mid-1</code>로 설정하게 됩니다.</li>
<li>상근이가 <code>가진값과 찾고자하는 값이 같을 경우</code>에는 현재 중간값을 리턴해주게 됩니다. 즉, <code>상근이가 갖고 있는 카드에서 상근이가 찾고자하는 값을 찾은게 됩니다.</code></li>
<li>해당 binary search함수는 값을 찾았기 때문에 <code>중간값을 리턴</code>해줍니다. 찾았을 경우에는 1을 넣어주게 됩니다.</li>
<li><code>값을 찾지 못하였을 경우</code>에는 <code>-1을 리턴</code>을 받습니다. 그리고 <code>0을 넣어주게됩니다.</code></li>
<li>최종적으로 값을 출력시키게 되면 해당되는 <code>값을 찾았는지 못찾았는지의 여부</code>를 확인할 수 있습니다.<code>(0,1)</code></li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<blockquote>
<p>Binary Search(이분탐색) 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 숫자카드 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            arr[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="comment">// none contain</span></span><br><span class="line">            <span class="keyword">if</span>(BinarySearch(x,n) == -<span class="number">1</span>)&#123;</span><br><span class="line">                answer.add(<span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                answer.add(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : answer) &#123;</span><br><span class="line">            System.out.print(value + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; target)&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HashSet 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 숫자카드 </span>&#123;</span><br><span class="line">    <span class="comment">// HashSet 문제</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; s = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            s.add(Integer.parseInt(st.nextToken()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s.contains(num))&#123;</span><br><span class="line">                arr.add(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arr.add(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : arr) &#123;</span><br><span class="line">            System.out.print(value + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>BOJ</tag>
        <tag>이분탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 치킨배달 15686</title>
    <url>/chicken-delivery/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 치킨배달 15686</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>0은 빈 칸, 1은 집, 2는 치킨집이다.</p>
<p>(2, 1)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |2-1| + |1-2| = 2, (5, 5)에 있는 치킨집과의 거리는 |2-5| + |1-5| = 7이다. 따라서, (2, 1)에 있는 집의 치킨 거리는 2이다.</p>
<p>(5, 4)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |5-1| + |4-2| = 6, (5, 5)에 있는 치킨집과의 거리는 |5-5| + |4-5| = 1이다. 따라서, (5, 4)에 있는 집의 치킨 거리는 1이다.</p>
<p>이 도시에 있는 치킨집은 모두 같은 프랜차이즈이다. 프렌차이즈 본사에서는 수익을 증가시키기 위해 일부 치킨집을 폐업시키려고 한다. 오랜 연구 끝에 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.</p>
<p>도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다. 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li><code>0은 빈칸, 1은 집, 2는 치킨집</code>을 갖는 하나의 맵이 주어진다.</li>
<li>간혹 이것을 <code>BFS로 생각하여 풀이를 할 수 있는 경우</code>가 있을 텐데, 문제를 자세히 읽어보면 상하좌우의 방향이 주어지긴하지만 결국 우리에겐 필요한 것은 집과 치킨과의 치킨거리를 구하는것입니다. 즉 <code>DFS 브루트포스</code> 방법을 사용할 것입니다.</li>
<li>집과 치킨집과의 거리의 좌표값을 기반으로 <code>|집 X - 치킨 X| + |집 Y - 치킨 Y|</code>의 값을 구하는것이라고 생각하면 됩니다.</li>
<li>집에서 치킨집중 <code>최대 M개</code>를 고르는 문제가 여기서 <code>핵심 포인트</code>입니다. 집하나에서 M개의 치킨집을 고를 수 있습니다. 즉, <code>브루트포스로 치킨집 M개를 선택</code>하는 <code>basement의 조건</code>을 가질 수 있습니다.</li>
<li>치킨집을 1개를 골랐을때의 치킨거리의 최솟값, 치킨집 2개를 골랐을때의 최솟값…M개를 골랐을때의 <code>최솟값</code>을 구하는것입니다.</li>
<li>치킨집은 좌표상 <code>고를 수도 있고 안고를수도 있는 브루트포스 호출조건</code>을 잘생각해야합니다. 치킨집에 <code>3개 A,B,C</code>가 있다고 가정했을때 <code>A / AB / AC / BC / ABC</code> 의 경우를 고른다고 생각을 하셔야합니다.  이때, <code>M개를 선택해야하므로 가능한 선택의 수는 AB,AC,BC</code>가 될 것입니다.</li>
</ul>
<blockquote>
<p>치킨 배달 순서</p>
</blockquote>
<ol>
<li>좌표에서 <code>집인경우</code> 집의 좌표를 담을 벡터를 선언합니다.</li>
<li>좌표에서 <code>치킨집인</code> 경우 치킨집의 좌표를 담을 벡터를 선언합니다.</li>
<li><code>DFS(0,0)</code> 을 호출합니다. 첫번째 파라미터는 <code>현재 치킨집의 순서</code>, 두번째 파라미터는 <code>현재 선택된 치킨집의 개수</code>를 뜻합니다.</li>
<li>치킨집은 <code>M개까지 선택</code>하였을때 <code>집과 치킨거리를 계산</code>하여 <code>최솟값</code>으로 <code>업데이트 시켜줍니다.</code> 치킨이 선택된 것을 체크해주기 위한 <code>check배열을 선언</code>해줍니다.<br>
아직 M개가 선택되지 않았더라면</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">check[idx] = <span class="literal">true</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">check[idx] = <span class="literal">false</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt);</span><br></pre></td></tr></table></figure>
<p><code>치킨을 선택한 경우와 치킨을 선택하지 않은 경우</code>로 나누어주면서 <code>DFS를 모두 수행</code>해줍니다.<br>
5. M개를 선택하였을때 모든 치킨거리값을 ans의 값과 갱신하여 최솟값을 구해줍니다.<br>
주의 해야할점은 <code>치킨거리의 거리</code>와 <code>모든 집의 치킨거리</code>는 다릅니다.<br>
6. 만약 <code>idx값이 치킨값보다 클경우 종료</code>시켜줍니다. 조건에 위배됩니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  치킨배달15686.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/21.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; house;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; chicken;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> ans = MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 치킨 사이즈를 넘게되었을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx &gt; chicken.size())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨집 m개를 선택하였을때</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">        <span class="keyword">int</span> chicken_street = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;house.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> dist = MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;chicken.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] == <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> ax = house[i].first;</span><br><span class="line">                    <span class="keyword">int</span> ay = house[i].second;</span><br><span class="line">                    <span class="keyword">int</span> bx = chicken[j].first;</span><br><span class="line">                    <span class="keyword">int</span> by = chicken[j].second;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> distance = <span class="built_in">abs</span>(ax-bx) + <span class="built_in">abs</span>(ay-by);</span><br><span class="line">                    dist = min(dist,distance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chicken_street += dist;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, chicken_street);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨 선택</span></span><br><span class="line">    check[idx] = <span class="literal">true</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 치킨 미선택</span></span><br><span class="line">    check[idx] = <span class="literal">false</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                house.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                chicken.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 시저암호</title>
    <url>/caesar-password/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12926?language=java" target="_blank" rel="noopener">프로그래머스 시저암호</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<blockquote>
<p>문제 설명<br>
어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.</p>
</blockquote>
<blockquote>
<p>제한 조건<br>
공백은 아무리 밀어도 공백입니다.<br>
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.<br>
s의 길이는 8000이하입니다.<br>
n은 1 이상, 25이하인 자연수입니다.</p>
</blockquote>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>알파벳은 총 52개 대문자 26개, 소문자 26개를 가지고 있습니다.</li>
<li>문자 값이 <code>' '</code> 공백일 경우 공백을 넣어주게 됩니다.</li>
<li>해당 문자가 소문자일 경우와 대문자 일 경우를 나누어서 생각을 해줍니다. 기존의 알파벳이 A이며 n=1이라고 가정하면 문자를 미는 거리 만큼 값을 도출하면 알파벳 B의 값을 도출하게 될것입니다.<br>
여기서 주의해야 할점은 <code>z, Z</code>의 경우를 잘 생각해주어야합니다. 값을 밀면서 z와 Z의 범위를 벗어나게 되면 다시 값 a, A 값부터 진행되어야한다는점입니다. 즉 현재의 값을 +n값을 시켜주면서 -26을 빼주게 된다면 기존 a, A의 값에서 + N값이 된 값이 도출될 것입니다. 반드시 값을 -26해주고 캐릭터 형변 환 해주어야 본래의 값으로 돌아옵니다.<br>
음수값 계산시에는 아스키코드 값 자체로 비교하여 연산을 진행하기 때문입니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 시저암호 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"AB"</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        StringBuilder answer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> alpha = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(alpha == <span class="string">' '</span>)&#123;</span><br><span class="line">                answer.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(Character.isLowerCase(alpha))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(alpha + n &gt; <span class="string">'z'</span>)&#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n-<span class="number">26</span>));</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(Character.isUpperCase(alpha))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(alpha + n &gt; <span class="string">'Z'</span>)&#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n-<span class="number">26</span>));</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                if(s.charAt(i) &gt;='a' &amp;&amp; s.charAt(i) &lt;= 'Z')&#123;</span></span><br><span class="line"><span class="comment">                    answer.append((char) ((s.charAt(i)-26)+n));</span></span><br><span class="line"><span class="comment">                &#125;else if(s.charAt(i) &gt;= 'A' &amp;&amp; s.charAt(i) &lt;= 'Z')&#123;</span></span><br><span class="line"><span class="comment">                    answer.append((char) ((s.charAt(i)-26)+n));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 아기상어 16236</title>
    <url>/baby-shark/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 아기상어 16236</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.</p>
<p>아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.</p>
<p>아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.</p>
<p>아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.</p>
<p>더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.<br>
먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.<br>
먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.<br>
거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.<br>
거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.<br>
아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.</p>
<p>아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.</p>
<p>공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.</p>
<blockquote>
<p>입력<br>
첫째 줄에 공간의 크기 N(2 ≤ N ≤ 20)이 주어진다.</p>
</blockquote>
<p>둘째 줄부터 N개의 줄에 공간의 상태가 주어진다. 공간의 상태는 0, 1, 2, 3, 4, 5, 6, 9로 이루어져 있고, 아래와 같은 의미를 가진다.</p>
<p>0: 빈 칸<br>
1, 2, 3, 4, 5, 6: 칸에 있는 물고기의 크기<br>
9: 아기 상어의 위치<br>
아기 상어는 공간에 한 마리 있다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<blockquote>
<p>물고기까지의 최단 거리 구하기<br>
최단거리 구하는방식은 다익스트라와 BFS를 이용한 풀이로 구할 수 있습니다.<br>
해당 풀이에서는 BFS를 이용한 풀이를 진행하겠습니다.<br>
BFS</p>
</blockquote>
<ol>
<li>현재 상어의 위치에서 모든 물고기까지의 이동거리를 찾을 배열 변수를 하나 선언해줍니다.</li>
<li>그 중에서 가장 이동거리가 짧은 물고기를 찾아서 최단거리를 찾아줍니다.</li>
</ol>
<ul>
<li>위치 정보구하기<br>
Queue를 이용한 x,y 상어 = 9, 물고기 1,2,3,4,5의 위치를 구해주었습니다.</li>
</ul>
<blockquote>
<p>상하좌우로 이동하기</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>상하좌우의 좌표를 해당 코드처럼 표시할 수 있습니다.<br>
최단거리가 check변수에 있는 값과 같다면 min_dis 가장짧은거리 이므로 min_x와 min_y를 선언하여 가장 짧은 좌표를 갱신시켜줍니다.</p>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<ul>
<li>
<p>BFS<br>
모든정점 O(N^2) O(4n^2) 4방향의 간선을 가지고 있으므로<br>
즉,  앞의 상수를 무시하면 시간복잡도 O(N^2)</p>
</li>
<li>
<p>물고기 먹을 경우<br>
N = 20이하 이므로 O(N^4) = 약 16만</p>
</li>
</ul>
<blockquote>
<p>가장 거리가 짧은 물고기가 여러마리일경우 상,좌를 처리</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> width = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> height = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[width][height];</span><br><span class="line"><span class="keyword">int</span> check[width][height];</span><br><span class="line"><span class="keyword">int</span> shark_x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> shark_y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> shark_size = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> shark_eat_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min_dist=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min_x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min_y=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    check[x][y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt;n )&#123;</span><br><span class="line">                <span class="comment">// 1.자기보다 큰 상어는 지나칠 수 없음</span></span><br><span class="line">                <span class="keyword">if</span>(check[mx][my] != <span class="number">-1</span> || <span class="built_in">map</span>[mx][my] &gt; shark_size)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 2. 이동거리를 갱신시켜준다.</span></span><br><span class="line">                check[mx][my] = check[dx][dy] + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">// 3. 먹을수 있는 물고기 인지 체크</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[mx][my] != <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[mx][my] &lt; shark_size)&#123;</span><br><span class="line">                    <span class="comment">// 3.1최단 거리인지 확인</span></span><br><span class="line">                    <span class="keyword">if</span>(check[mx][my] &lt; min_dist)&#123;</span><br><span class="line">                        min_x = mx;</span><br><span class="line">                        min_y = my;</span><br><span class="line">                        min_dist = check[mx][my];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 3.2최단거리가 같은게 여러개 일 경우</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(check[mx][my] == min_dist)&#123;</span><br><span class="line">                        <span class="comment">// x점은 동일선상에 있어야하고 위에 있는 값중에서 최소가 되야하므로 my가 min_y보다 작은것이 최소 좌표다.</span></span><br><span class="line">                        <span class="comment">// 3.2.1위쪽</span></span><br><span class="line">                        <span class="keyword">if</span>(min_x == mx)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(min_y &gt; my)&#123;</span><br><span class="line">                                min_x = mx;</span><br><span class="line">                                min_y = my;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 3.2.2왼쪽</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(min_x &gt; mx)&#123;</span><br><span class="line">                            min_x = mx;</span><br><span class="line">                            min_y = my;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(&#123;mx,my&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">9</span>)&#123;</span><br><span class="line">                shark_x = i;</span><br><span class="line">                shark_y = j;</span><br><span class="line">                <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;     <span class="comment">//이동시간</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        min_dist = MAX;</span><br><span class="line">        min_x = width;</span><br><span class="line">        min_y = height;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                check[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(shark_x, shark_y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 먹을수 있는 물고기를 찾은경우</span></span><br><span class="line">        <span class="keyword">if</span>(min_x != width &amp;&amp; min_y != height)&#123;</span><br><span class="line">            <span class="comment">// 이동시간을 더해줍니다.</span></span><br><span class="line">            result += check[min_x][min_y];</span><br><span class="line">            shark_eat_size++;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 만약 먹은 물고기수가 상어의 크기가 같다면</span></span><br><span class="line">            <span class="keyword">if</span>(shark_eat_size == shark_size)&#123;</span><br><span class="line">                shark_size++;</span><br><span class="line">                shark_eat_size=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 먹은 물고기 위치 0 갱신</span></span><br><span class="line">            <span class="built_in">map</span>[min_x][min_y] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 상어 위치 갱신</span></span><br><span class="line">            shark_x = min_x;</span><br><span class="line">            shark_y = min_y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//엄마 상어 찾기</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>02.Reactive Streams</title>
    <url>/reactive-programming-section02/</url>
    <content><![CDATA[<h1 id="reactive-streamsran"><a href="#reactive-streamsran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#reactive-streams란"></a> Reactive Streams란</h1>
<p>Rxjava 버전이 1.x에서 2.x로 올라간 배경에는 Reactive Streams가 있습니다. Reactive Streams란 라이브러리나 프레임워크 상관없이 데이터 스트림을 비동기로 다룰수 잇는 공통 매커니즘으로, 이 매커니즘을 편리하게 사용할 수 있는 인터페이스를 제공합니다.</p>
<p><a href="http://www.reactive-streams.org" target="_blank" rel="noopener">Reactive Streams</a></p>
<p>즉, Reactive Streams는 인터페이스만 제공하고 구현은 각 라이브러리와 프레임워크에서 합니다.</p>
<p><a href="https://github.com/reactive-streams/reactive-streams-jvm" target="_blank" rel="noopener">Reactive Streams Specification for the JVM</a></p>
<h1 id="reactive-streamsyi-guseong"><a href="#reactive-streamsyi-guseong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#reactive-streams의-구성"></a> Reactive Streams의 구성</h1>
<p>Reactive Streams는 데이터를 만들어 통지하는 <code>Publisher(생산자)</code>와 통지된 데이터를 받아 처리하는 <code>Subscriber(소비자)</code>로 구성됩니다.</p>
<p><code>Subscriber</code>가 <code>Publisher</code>를 <code>구독(subscribe)</code>하면 <code>Publisher</code>가 통지한 데이터를 <code>Subscriber</code>가 받을 수 있습니다.</p>
<ul>
<li>Publisher : 데이터를 통지하는 생산자</li>
<li>Subscriber: 데이터를 받아 처리하는 소비자</li>
</ul>
<blockquote>
<p>데이터 흐름</p>
</blockquote>
<ul>
<li><code>Publisher</code>는 통지 준비가 끝나면 이를 <code>Subscriber</code>에 <code>통지(onSubscribe)</code>합니다.</li>
<li>해당 통지를 받은 <code>Subscriber</code>는 받고자 하는 데이터 개수를 요청합니다.</li>
</ul>
<p>이때, <code>Subscriber</code>가 자신이 통지 받을 데이터 개수를 요청하지 않으면 <code>Publisher</code>는 통지해야 할 데이터 개수 요청을 기다리게 되므로 통지를 시작 할 수 없습니다.</p>
<ul>
<li>그 다음 <code>Publisber</code>는 데이터를 만들어서 <code>Subscriber</code>에 <code>통지(onNext)</code>합니다.</li>
<li>이 데이터를 받은 <code>Subscriber</code>는 데이터를 사용해 처리 작업을 수행합니다.</li>
<li><code>Publisher</code>는 요청받은 만큼의 데이터를 통지한 뒤 <code>Subscriber</code>로 부터 다음 요청이 올때까지 데이터 통지를 중단합니다.</li>
<li>이후 <code>Subscriber</code>가 처리 작업을 완료하면 다음에 받을 데이터 개수를 <code>Publisher</code>에게 요청합니다.</li>
</ul>
<p>이 요청을 보내지 않으면 <code>Publisher</code>는 요청 대기 상태가 돼 <code>Subscriber</code>에 데이터를 통지할 수 없습니다.</p>
<ul>
<li><code>Publisher</code>는 <code>Subscriber</code>에 모든 데이터를 통지하고 마지막으로 데이터 전송이 완료돼 정상 종료 됐다고 <code>통지(onComplete)</code>합니다.</li>
<li>완료 통지를 하고나면 <code>Publisher</code>는 이 구독건에 대해 어떤 통지도 하지 않습니다.</li>
</ul>
<p>또한, <code>Publisher</code>는 처리 도중에 에러가 발생하면 <code>Subscriber</code>에 발생한 에러 객체와 함께 에러를 <code>통지(onError)</code>합니다.</p>
<blockquote>
<p>데이터 흐름 설명</p>
</blockquote>
<p><code>Subscriber</code>가 <code>Publisher</code>에 통지 받을 데이터 개수를 요청하는 것은 <code>Publisher</code>가 통지하는 데이터 개수를 제어하기 위해서 입니다. 예를 들어, <code>Publisher</code>와 <code>Subscriber</code>의 처리가 각각 다른 스레드에서 진행되는데 <code>Publisher</code>의 통지 속도가 빠르면 <code>Subscriber</code>가 소화할 수 없을만큼 많은 처리 대기 데이터가 쌓입니다.</p>
<p>→ 이를 막기위해 <code>Publisher</code>가 통지할 데이터 개수를 <code>Subscriber</code>가 처리 할 수 있을 만큼으로 제어하는 수단이 필요합니다.</p>
<blockquote>
<p>Reactive Streams가 제공하는 프로토콜</p>
</blockquote>
<table>
<thead>
<tr>
<th>프로토콜</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>onSubscribe</td>
<td>데이터 통지가 준비됐음을 통지</td>
</tr>
<tr>
<td>onNext</td>
<td>데이터통지</td>
</tr>
<tr>
<td>onError</td>
<td>에러(이상 종료)통지</td>
</tr>
<tr>
<td>onComplete</td>
<td>완료(정상 종료)통지</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Reactive Streams의 인터페이스</p>
</blockquote>
<table>
<thead>
<tr>
<th>인터페이스</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>Publisher</td>
<td>데이터를 생성하고 통지하는 인터페이스</td>
</tr>
<tr>
<td>Subscriber</td>
<td>통지된 데이터를 전달받아 처리하는 인터페이스</td>
</tr>
<tr>
<td>Subscription</td>
<td>데이터개수를 요청하고 구독해지 하는 인터페이스</td>
</tr>
<tr>
<td>Processor</td>
<td>Publisher와 Subscriber의 기능이 모두 있는 인터페이스</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Publisher.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//데이터를 통지하는 생산자</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 데이터를 받는 Subscriber 등록</span></span><br><span class="line">    <span class="keyword">public</span> void subscribe(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subscriber.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscription;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터를 받아 처리 하는 소비자</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 구독 시작시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onSubscribe(Subscription subscription);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 데이터 통지시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onNext(T item);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 에러 통지시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onError(Throwable error);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 완료 통지시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onComplete();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subscription.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생산자와 소비자를 연결하는 인터페이스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 통지 받을 데이터 개수 요청</span></span><br><span class="line">    <span class="keyword">public</span> void request(long num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 구독 해지</span></span><br><span class="line">    <span class="keyword">public</span> void cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Processor.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="type">T,R</span>&gt; <span class="title">extends</span> <span class="title">Subscriber</span>&lt;<span class="type">T</span>&gt;, <span class="type">Publisher</span>&lt;<span class="type">R</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subscription 보관</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscription;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> <span class="title">implements</span> <span class="title">Subscriber</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subscriber내부에 subscription보관하기</span></span><br><span class="line">    <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onSubscribe(Subscription subscription) &#123;</span><br><span class="line">        <span class="comment">// 받은 Subscription을 Subscriber 내부에 보관한다</span></span><br><span class="line">        <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">        <span class="keyword">this</span>.subscription.request(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onNext(Object item) &#123;</span><br><span class="line">        <span class="comment">// 요청한 데이터를 처리하면 다음 데이터 개수를 요청한다.</span></span><br><span class="line">        subscription.request(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onError(Throwable error) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onComplete() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>→ <code>Subscription</code>처리가 <code>Subscriber</code> 외부에서는 호출되지 않는다는 것을 전제로 구현할 수 있습니다.</p>
<p>Rxjava처럼 외부에서 구독을 해지할 방법을 제공한다면 <code>Subscription</code>이 비동기로 호출돼도 문제가 없게 구현되어야 합니다.</p>
<p>→ 추가로 <code>Reactive Streams</code>에 <code>Processor</code>라는 <code>인터페이스가</code> 있습니다. 이 <code>Processor</code>는 <code>Publisher와 Subscriber</code> 모두 상속받아 데이터 통지와 수신이 가능합니다.</p>
<p>즉, <code>Processor</code>는 다른 <code>Publisher</code>를 <code>구독</code>하거나 다른 <code>Subscriber</code>가 자신을 <code>구독</code>하게 할 수 있습니다.</p>
<blockquote>
<p>인터페이스 기능 설명</p>
</blockquote>
<p><code>Publisher</code>가 <code>Subscriber</code>가 사용하는 <code>Subscription</code>은 통지받을 데이터 개수를 지정해 데이터 통지를 요청하거나 통지받지 않게 구독을 해지할 때 사용하는 인터페이스입니다. <code>Subscription</code>은 <code>Publisher</code>에서 인스턴스가 생성돼 통지 준비가 끝났을 때 호출하는 <code>onSubscribe</code> 메서드의 인자로 <code>Subscriber</code>에 전달됩니다. 이 <code>Subscription</code>을 받은 <code>Subscriber</code>는 <code>Subscription</code>의 메서드를 호출해 데이터 개수를 요청하거나 구독을 해지합니다.</p>
<p>또한, <code>onNext</code> 메서드에서 이 <code>Subscription</code>을 사용하려면 <code>onSubscribe</code> 메서드로 전달받은 <code>Subscription</code>이 <code>Subscriber내부</code>에 있어야합니다.</p>
]]></content>
      <categories>
        <category>RXJAVA</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>리액티브프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 내마음대로 정렬하기</title>
    <url>/sort-you-want-in-string/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12915?language=java" target="_blank" rel="noopener">프로그래머스 내마음대로 정렬하기</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다.</p>
<p>제한 조건</p>
<ul>
<li>strings는 길이 1 이상, 50이하인 배열입니다.</li>
<li>strings의 원소는 소문자 알파벳으로 이루어져 있습니다.</li>
<li>strings의 원소는 길이 1 이상, 100이하인 문자열입니다.</li>
<li>모든 strings의 원소의 길이는 n보다 큽니다.</li>
<li>인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>문자열의 사전순대로 정렬을 해야합니다.<br>
만약 배열을 사용할 경우  java.util.Arrays 유틸리티의 Arrays.sort()클래스를 사용하고 List와 같은 경우는 java.util.Collections클래스의 static 메소드인 sort()를 사용합니다.<br>
즉, List형식으로 만들어서 Collections.sort()를 사용하거나 Array인 경우 Arrays.sort()를 사용합니다.</li>
</ul>
<p>Colletions.sort()를 사용하게 될 경우 n에 해당하는 값을 맨앞으로 추가시켜준다음에 그 값을 기준으로 오름 차순정렬을 시켜주게 됩니다. 그리고 나서 해당값을 다시 <code>substring(1, arr.get(i).length())</code>함수를 사용하여 값을 잘라주게 됩니다. 그러면 기존의 값으로 원상복귀 한다고 생각하시면 됩니다.</p>
<blockquote>
<p>Arrays.sort()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(strings, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>람다식으로 간단하게 변경도 가능합니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 오름차순 Arrays.sort(strings,(s1,s2) -&gt; s1.length() - s2.length());</span><br><span class="line">// 내림차순 Arrays.sort(strings,(s1,s2) -&gt; s2.length() - s1.length());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Colletions.sort()</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collections.sort(arr);</span><br></pre></td></tr></table></figure>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열내마음대로정렬하기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = &#123;<span class="string">"sun"</span>, <span class="string">"bed"</span>, <span class="string">"car"</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        String[] answer;</span><br><span class="line">        Arrays.sort(strings, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 사전순으로 정렬하기</span></span><br><span class="line">                <span class="keyword">return</span> s1.charAt(n) - s2.charAt(n);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 사전순 역순으로 정렬하기</span></span><br><span class="line">                <span class="comment">//return s2.charAt(n) - s1.charAt(n);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// lamda</span></span><br><span class="line">        <span class="comment">// Arrays.sort(strings,(s1,s2) -&gt; s1.charAt(n) - s2.charAt(n););</span></span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열내마음대로정렬하기 </span>&#123;</span><br><span class="line">    <span class="comment">/* ArrayList를 사용한 풀이</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        String[] strings = &#123;"sun", "bed", "car"&#125;;</span></span><br><span class="line"><span class="comment">        int n = 1;</span></span><br><span class="line"><span class="comment">        String[] answer;</span></span><br><span class="line"><span class="comment">        ArrayList&lt;String&gt; arr = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; strings.length; i++)&#123;</span></span><br><span class="line"><span class="comment">            arr.add(strings[i].charAt(n) + strings[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Collections.sort(arr);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        answer = new String[arr.size()];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;arr.size(); i++)&#123;</span></span><br><span class="line"><span class="comment">            answer[i] = arr.get(i).substring(1,arr.get(i).length());</span></span><br><span class="line"><span class="comment">        &#125; System.out.println(Arrays.toString(strings));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>정렬</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 나누어 떨어지는 숫자 배열</title>
    <url>/divisor-number-array/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12910?language=java" target="_blank" rel="noopener">프로그래머스 나누어 떨어지는 숫자</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.<br>
divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>배열에 담겨진 값을 divisor의 값의 나머지가 0이라면 나누어 떨어지는 값입니다.</li>
<li>Collections.sort()를 사용하여 오름차순 정렬을 진행하였습니다.</li>
<li>만약 리스트에 담긴 값이 없다면 answer 값에 -1을 추가 해줍니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] % divisor == <span class="number">0</span>)&#123;</span><br><span class="line">                answer.add(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(answer);</span><br><span class="line">        <span class="keyword">if</span>(answer.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            answer.add(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>03.Kotlin Data Types</title>
    <url>/datatype-03/</url>
    <content><![CDATA[<h1 id="data-types"><a href="#data-types" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#data-types"></a> Data Types</h1>
<ol>
<li>숫자 – Byte, Short, Int, Long, Float, Double</li>
<li>Boolean – True, false</li>
<li>문자</li>
<li>배열</li>
<li>문자열</li>
</ol>
<h2 id="numbers"><a href="#numbers" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#numbers"></a> Numbers</h2>
<p>Kotlin에서 숫자를 나타내는 여러 데이터 유형이 있습니다.</p>
<h2 id="byte"><a href="#byte" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#byte"></a> Byte</h2>
<p>Byte 데이터 유형의 범위는 -128 ~ 127입니다. 이는 더 작은 정수 값을 나타내는 데 사용됩니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Byte</span> = <span class="number">99</span> </span><br><span class="line">    println ( <span class="string">"<span class="variable">$num</span>"</span> ) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>잘못된 예</p>
</blockquote>
<p>오류를 방지하려면 데이터 유형의 범위를 알고 있어야합니다. 예를 들어, 다음 코드는 byte 유형의 변수에 지정된 값이 범위에 없기 때문에 오류를 생성합니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 범위는 -128에서 127 사이입니다. </span></span><br><span class="line">    <span class="keyword">val</span> num:<span class="built_in">Byte</span> = <span class="number">300</span> </span><br><span class="line">    println(<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 유형의 최댓값과 최솟값을 어떻게 구할수 있을까요?</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; </span><br><span class="line">    <span class="keyword">var</span> bigByte : <span class="built_in">Byte</span> = <span class="built_in">Byte</span>.MAX_VALUE</span><br><span class="line">    <span class="keyword">var</span> smallByte : <span class="built_in">Byte</span> = <span class="built_in">Byte</span>.MIN_VALUE </span><br><span class="line">    println (<span class="string">"가장 큰 바이트 값 : <span class="variable">$bigByte</span>"</span>)</span><br><span class="line">    println (<span class="string">"가장 작은 바이트 값 : <span class="variable">$smallByte</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="short"><a href="#short" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#short"></a> Short</h2>
<p>Short 데이터 유형의 범위는 -32768 ~ 32767입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Short</span> = <span class="number">29999</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Short 데이터 유형에서 더 큰 범위를 가질 때 왜 Byte 데이터 유형을 사용할까요?</p>
</blockquote>
<p>이것은 메모리를 절약하기위한 것입니다. Short 데이터 유형은 Byte 데이터 유형에 비해 더 많은 메모리를 보유하므로 값이 -128에서 127까지의 한계에 있다고 확신하는 경우 Byte 데이터 유형이 메모리 관점에서 더 나은 선택이 될 것입니다.</p>
<h2 id="int"><a href="#int" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#int"></a> Int</h2>
<p>Int 데이터 유형의 범위는 -2^31 ~ 2^31 -1입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Int</span> = <span class="number">123456</span> </span><br><span class="line">    println(<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>참고<br>
변수의 유형을 명시 적으로 지정하지 않으면 값이 -2 31 에서 2 31 -1 사이 인 경우 컴파일러는 해당 변수를 Int로 처리합니다.</p>
</blockquote>
<h2 id="long"><a href="#long" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#long"></a> Long</h2>
<p>Long 데이터 유형의 범위는 -2 63 ~ 2 63 -1입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Long</span> = <span class="number">12345678</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>변수 유형을 명시 적으로 지정하지 않으면 값이 -2^31 ~ 2^31-1 범위를 벗어나지만 -2^63 ~ 범위에있는 경우 컴파일러는 해당 변수를 Long으로 처리합니다. 2 (63) -1</p>
</blockquote>
<h2 id="double"><a href="#double" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#double"></a> Double</h2>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 모든 부동 숫자는 기본적으로 두 배입니다 // 값에 F 문자를 추가하지 않으면</span></span><br><span class="line">    <span class="keyword">val</span> num = <span class="number">101.99</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="float"><a href="#float" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#float"></a> Float</h2>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 이것은 우리가 접미사로 붙인 float 데이터 유형입니다(문자 'F'가 뒤에 추가됩니다.)  </span></span><br><span class="line">    값 <span class="keyword">val</span> num = <span class="number">101.99F</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean"><a href="#boolean" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#boolean"></a> Boolean</h2>
<p>부울 변수의 값은 true 또는 false입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">(args : <span class="type">Array</span>)</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> boolValue = <span class="literal">false</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$boolValue</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="char"><a href="#char" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#char"></a> Char</h2>
<p>모든 영어 알파벳 (소문자 또는 대문자)은 Char 데이터 유형에 포함됩니다. Char 데이터 유형의 변수에는 숫자를 할당 할 수 없습니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">(args : <span class="type">Array</span>)</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> ch = <span class="string">'A'</span></span><br><span class="line">    println ( <span class="string">"<span class="variable">$ch</span>"</span> ) </span><br><span class="line">    <span class="keyword">val</span> ch2 : <span class="built_in">Char</span> </span><br><span class="line">    ch2 = <span class="string">'Z'</span></span><br><span class="line">    println (<span class="string">"<span class="variable">$ch2</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>데이터타입</tag>
      </tags>
  </entry>
  <entry>
    <title>02.Kotlin Variables</title>
    <url>/variable-02/</url>
    <content><![CDATA[<p>변수에는 변경 가능(mutable)과 불변(immutable)의 두 가지 유형이 있습니다. 불변 변수(immutable)은 값을 변경할 수없는 변수로, 변경 불가능 또는 읽기 전용 변수라고도합니다. 반면에 가변 변수의 값은 변경 될 수 있습니다.</p>
<h1 id="bulbyeon-byeonsu-val-kiweodeu"><a href="#bulbyeon-byeonsu-val-kiweodeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#불변-변수-val-키워드"></a> 불변 변수 : val 키워드</h1>
<p>불변 변수는 <code>val</code>Kotlin에서 키워드를 사용하여 선언됩니다 . 이 예에서는 키워드를 <code>myName</code>사용하여 불변 변수 를 선언 <code>val</code> 후 값을 표시하였습니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 불가능한 </span><br><span class="line">     변수 </span><br><span class="line">     * 또는 변경 불가능한 변수 * 또는 읽기 전용 변수 라고도 합니다. </span><br><span class="line">     * / </span><br><span class="line">    <span class="keyword">val</span> myName = <span class="string">"KGH"</span> </span><br><span class="line">    println ( <span class="string">"내 이름 :"</span> + myName ) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>immutable 변수를 변경하게 되면 어떻게 될까요?</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 불가능한 </span><br><span class="line">     변수 또는 변경 불가능한 변수 * 또는 읽기 전용 변수 라고도 합니다. </span><br><span class="line">     * / </span><br><span class="line">    <span class="keyword">val</span> myName = <span class="string">"KGH"</span> </span><br><span class="line">    myName = <span class="string">"gwanhyeon kim"</span> </span><br><span class="line">    println ( <span class="string">"내 이름 :"</span> + myName ) &#125;</span><br></pre></td></tr></table></figure>
<p>immutable한 변수이므로 컴파일 오류가 발생합니다.</p>
<h1 id="gabyeonbyeonsu-var-kiweodeu"><a href="#gabyeonbyeonsu-var-kiweodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#가변변수-var-키워드"></a> 가변변수: var 키워드</h1>
<p>불변 변수와 달리, 우리는 가변 변수의 값을 변경할 수 있습니다. kotlin에서는 var 키워드를 사용하여 가변 변수를 선언합니다. 이것을 이해하기 위해 예를 들어 보겠습니다.</p>
<p>이 예에서는 <code>var</code>키워드를 사용하여 가변 변수를 선언했습니다 . 값을 변경할 수 있음을 보여주기 위해 <code>myName</code>변수에 다른 값을 다시 할당했습니다 .</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 가능한 변수입니다 </span><br><span class="line">     *이 변수 의 값을 변경할 수 있습니다 </span><br><span class="line">     * / <span class="keyword">var</span> myName = <span class="string">"KGH"</span> </span><br><span class="line">    myName = <span class="string">"gwanhyeon kim"</span> </span><br><span class="line">    println ( <span class="string">"내 이름 :"</span> + myName ) &#125;</span><br></pre></td></tr></table></figure>
<h1 id="byeonsuyi-yimi"><a href="#byeonsuyi-yimi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#변수의-의미"></a> 변수의 의미</h1>
<p>변수는 데이터를 저장할 수있는 메모리의 위치에 주어진 이름입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beginnersbook</span><br><span class="line"><span class="keyword">var</span> book = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
<p>데이터“gwanhyeon kim”은 웹 사이트라는 이름의 특정 위치에있는 메모리에 저장됩니다.</p>
<p>여기서 var는 변수 선언에 사용되는 키워드,책은 식별자 (변수 이름),“beginnersbook”은 데이터 (변수 값), 변수 유형은 String입니다.</p>
<h1 id="yuhyeong-curon"><a href="#yuhyeong-curon" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#유형-추론"></a> 유형 추론</h1>
<p>단일 문에서 변수를 선언하고 초기화 할 수 있습니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
<p>위에서는 변수의 유형을 지정하지 않았습니다. kotlin은 변수 book이 문자열 이라는 것을 알고 있습니다. 컴파일러는 값을보고 변수의 유형을 이해할 수 있습니다.</p>
<blockquote>
<p>이것을 명시적으로 표현하려면?</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book : String = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
<p>&quot;book&quot;변수의 유형을 String으로 명시 적으로 언급했습니다.</p>
<blockquote>
<p>먼저 선언하고 나중에 초기화</p>
</blockquote>
<p>변수를 먼저 선언 한 다음 나중에 프로그램에서 초기화 할 수 있습니다. 여기서 주목해야 할 중요한 점은 우리가 이렇게하는 것입니다. 선언하는 동안 변수의 유형을 지정해야합니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//이 경우 유형을 지정해야합니다 . var website : String </span></span><br><span class="line">book = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>변수</tag>
      </tags>
  </entry>
  <entry>
    <title>01.What is Kotlin and Why use it?</title>
    <url>/kotlin-envirenment-01/</url>
    <content><![CDATA[<h1 id="kotliniran"><a href="#kotliniran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#kotlin이란"></a> Kotlin이란?</h1>
<p>JetBrains에서 개발 한 정적으로 형식화 된 프로그래밍 언어입니다. 자바에 대한 기본지식 있다면 Kotilin을 금방 배울 수 있습니다.</p>
<p>Kotlin과 자바는 상호 운용이 가능하므로 프로젝트에서 함께 사용할 수 있으며 Kotlin에서 자바 코드를 효율적으로 다시 작성할 수 있습니다. Kotlin은 특히 Java보다 간결합니다.</p>
<h1 id="kotlinyi-teugjing"><a href="#kotlinyi-teugjing" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#kotlin의-특징"></a> Kotlin의 특징</h1>
<blockquote>
<p>간결성</p>
</blockquote>
<p>Kotlin은 자바보다 간결하며 자바에 비해 40% 적은 코드 라인을 작성할 수 있습니다.</p>
<blockquote>
<p>상호 운용성</p>
</blockquote>
<p>Kotlin은 Java와 상호 운용성이 뛰어납니다. Java프로젝트에서 사용하는데 어려움이 없습니다.</p>
<blockquote>
<p>오픈소스</p>
</blockquote>
<p>Kotlin은 오픈소스 프로그래밍 언어</p>
<blockquote>
<p>높은 신뢰도</p>
</blockquote>
<p>Kotlin은 유명하고 잘 알려진 회사 인 JetBrains에서 개발한 것이므로 신뢰도가 높습니다.</p>
<blockquote>
<p>다양한 기능</p>
</blockquote>
<p>Kotlin은 연산자 오버로딩, Lambda 표현식, 문자열 템플릿 등과 같은 여러 고급기능들을 제공합니다.</p>
<blockquote>
<p>배우기가 쉽습니다.</p>
</blockquote>
<p>Java환경과 유사하므로 처음에 진입장벽이 없습니다.</p>
<blockquote>
<p>오류발생 가능성이 적습니다.</p>
</blockquote>
<p>Kotlin은 정적으로 형식화 된 프로그래밍 언어로, 정적으로 형식화 된 프로그래밍 언어가 컴파일 타임에 형식 검사를 수행하므로 컴파일 타임에 오류를 포착할 수 있습니다.</p>
<hr>
<h1 id="intellij-ideaeseo-kotlin-peurojegteu-saengseong-mic-silhaeng"><a href="#intellij-ideaeseo-kotlin-peurojegteu-saengseong-mic-silhaeng" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#intellij-idea에서-kotlin-프로젝트-생성-및-실행"></a> IntelliJ IDEA에서 Kotlin 프로젝트 생성 및 실행</h1>
<p>공식 Jetbrains 웹 사이트 의 <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">다운로드 페이지</a> 로 이동합니다 . 운영 체제를 선택하고 커뮤니티 에디션을 다운로드하십시오.</p>
<h2 id="1dangye"><a href="#1dangye" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#1단계"></a> 1단계</h2>
<p>&quot;새 프로젝트 만들기&quot;를 선택합니다.</p>
<h2 id="2dangye"><a href="#2dangye" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#2단계"></a> 2단계</h2>
<p>&quot;추가 라이브러리 및 프레임 워크&quot;섹션에서 Kotlin / JVM을 선택 하고 &quot;다음&quot;을 클릭합니다.</p>
<h2 id="3dangye"><a href="#3dangye" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#3단계"></a> 3단계</h2>
<p>3 단계 : 프로젝트 이름을 입력하고 &quot;마침&quot;을 클릭합니다.</p>
<h2 id="4dangye"><a href="#4dangye" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#4단계"></a> 4단계</h2>
<p>단계 : Kotlin 프로젝트의 'src’폴더에 새 Kotlin 파일을 만듭니다.</p>
<h2 id="5dangye"><a href="#5dangye" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#5단계"></a> 5단계</h2>
<p>코드 입력 후 Kotlin 파일을 실행하려면 왼쪽에 있는 Kotlin 아이콘을 클릭합니다 . ‘코틀린 파일’(.kt)실행을 선택하여 실행합니다.</p>
<h2 id="6dangye"><a href="#6dangye" class="header-anchor">3.6. </a><a class="markdownIt-Anchor" href="#6단계"></a> 6단계</h2>
<p>올바르게 프로그램 출력이 되는지를 확인합니다.</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>환경설정</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 드래곤커브 15685</title>
    <url>/dragon-curve/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 드래곤커브 15685</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. <code>좌표 평면의 x축은 → 방향, y축은 ↓ 방향</code>이다.</p>
<ol>
<li>시작 점</li>
<li>시작 방향</li>
<li>세대</li>
</ol>
<p>0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.</p>
<p><img src="http://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/1.png" alt></p>
<p>1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/2.png" alt></p>
<p>2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/3.png" alt><br>
3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/4.png" alt></p>
<p>즉, K(K &gt; 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.</p>
<p><code>크기가 100×100</code>인 격자 위에 드래곤 커브가 N개 있다. 이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.</p>
<h2 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h2>
<p>첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. <code>드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다.</code> (0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)</p>
<p>입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.</p>
<p>방향은 <code>0, 1, 2, 3</code> 중 하나이고, 다음을 의미한다.</p>
<ul>
<li>0: x좌표가 증가하는 방향 (→)</li>
<li>1: y좌표가 감소하는 방향 (↑)</li>
<li>2: x좌표가 감소하는 방향 (←)</li>
<li>3: y좌표가 증가하는 방향 (↓)</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>드래곤 커브라는것은 세가지 속성을 갖고 있습니다. <code>좌표평면위에 X축은 → 방향, Y축은 ↓ 방향</code>으로 나타내며 일단 문제의 정의를 정확히 파악해야하는 문제입니다.</li>
<li>속성 3가지는 <code>시작점(x,y), 시작방향(상하좌우), 세대(0~3세대)</code>를 나타냅니다. 세대는 총 0,1,2,3세대까지 나타낼 수 있습니다.</li>
<li>문제를 접근하였을때 끝점을 기준으로 좌표가 어떤식으로 규칙을 띄고 있는지를 확인하였습니다. 하지만 제대로된 규칙을 찾을 수 없었습니다. 결국 상하좌우의 방향에 따라서 규칙성을 찾아보면 어떨까라는 생각을 하게 되었습니다.</li>
</ul>
<blockquote>
<p>세대의 규칙</p>
</blockquote>
<p>0세대: 0</p>
<p>1세대: 0 1</p>
<p>2세대: 0 1 2 1</p>
<p>3세대 0 1 2 1 2 3 2 1</p>
<p>세대의 규칙을 찾으셨나요? <code>세대의 규칙을 찾은 방법</code>에 대해 말씀드리겠습니다. 말그대로 시작점으로 부터 시작방향을 따라서 어떤 방향으로 이동하는지만 알면 됩니다.</p>
<p>0세대 같은 경우는 <code>자기 자신(시작점)</code>을 뜻합니다.</p>
<p>1세대 시작점에서 부터 <code>오른쪽방향</code>으로 움직입니다. 즉, <code>1(오른쪽)방향</code>입니다.</p>
<p>2세대 <code>0세대, 1세대를 거쳐서</code> <code>왼쪽(2)→위(1)</code>로 올라갑니다.</p>
<p>3세대 <code>0세대, 1세대, 2세대를 거쳐서</code> <code>왼쪽(2)→아래(3)→왼쪽(2)→위(1)</code>의 방향으로 움직이게 됩니다.</p>
<blockquote>
<p>이제 규칙을 발견하셨나요?</p>
</blockquote>
<p><code>1세대→ 2세대</code>가 움직이는 방향을 살펴보게 되면 <code>01(1세대), 21(2세대)</code>입니다. 자세히 살펴보면 <code>01의 값을 역순</code>을 해주면 <code>10</code>의 값이 됩니다. 여기에서 각각 <code>+1씩 증가</code>하면 <code>21</code>의 값이 되겠지요?</p>
<p>다음 차례인, <code>2세대 → 3세대</code>의 값을 살펴보겠습니다. <code>2세대는 0121 방향</code>으로 움직이게 됩니다. 이 값들을 역순을 하게되면 <code>1210의 값</code>이 되게 됩니다. 여기에서 <code>값을 +1</code> 시켜준다면 <code>2321 의 방향</code>으로 움직이는 규칙을 찾을 수 있습니다.</p>
<p>즉, <code>이전 세대 = (현재 세대의 역순의 방향을 모두 + 1)</code>의 규칙을 찾을 수 있습니다.</p>
<blockquote>
<p>세대별 방향 처리</p>
</blockquote>
<p>dx, dy를 선언하여 아래와 같은 방향을 처리해주었습니다.</p>
<ul>
<li>0: x좌표가 증가하는 방향 (→)</li>
<li>1: y좌표가 감소하는 방향 (↑)</li>
<li>2: x좌표가 감소하는 방향 (←)</li>
<li>3: y좌표가 증가하는 방향 (↓)</li>
</ul>
<blockquote>
<p>0~N세대의 방향을 저장시켜야 합니다.</p>
</blockquote>
<p>이렇게 <code>0세대부터 N세대</code>까지로 이동하게 될때 세대의 방향값들을 저장시킬 하나의 저장소가 필요합니다. 저 같은 경우에는 vector를 사용하여 진행하였습니다.</p>
<blockquote>
<p>격자위에 표시</p>
</blockquote>
<p>0세대와 1세대는 <code>첫 진입시 시작점</code>을 하나의 <code>격자위에 표시</code>해주었습니다.</p>
<blockquote>
<p>드래곤 커브 진행시 주의해야 할점</p>
</blockquote>
<p>상하좌우의 값들을 진행시키기 위해서 <code>0~3까지의 방향을 처리</code>해야합니다. 0~3까지의 방향을 <code>총 4개의 규칙적인 패턴</code>을 처리하기 위해서는 어떻게 해야할까요? 나머지의 원리를 이용하면 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span> </span><br><span class="line">i % <span class="number">4</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">i % <span class="number">4</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">2</span></span><br><span class="line">i % <span class="number">4</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">3</span></span><br><span class="line">i % <span class="number">4</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>의 패턴을 가지게 됩니다. 만약 i가 4일경우는 나머지가 0이 되겠지요? 이렇게 계속 <code>순서대로 패턴</code>을 처리하면서 진행할 수 있습니다.</p>
<p>세대별로 처리하면서 방문한곳은 <code>격자에 표시</code>를 진행하면서 G번만큼의 드래곤 커브를 진행하게 됩니다.</p>
<blockquote>
<p>사각형의 개수 구하기</p>
</blockquote>
<p>G번만큼의 드래곤 커브를 진행하게 되면 격자위에 모든 세대들의 드래곤 커브가 완성되게 됩니다. 이제 모든 드래곤커브끼리 감싸고 있는 값들의 정사각형의 개수를 구하면 되겠지요?</p>
<p>정사각형의 개수를 구할때는 현재점을 (x, y)라고 지정하겠습니다.</p>
<p>정사각형이 되기위해서는 현재 자기자신<code>(x,y) → (x+1,y) → (x,y+1) → (x+1,y+1)</code>의 점들이 모두 격자에 표시되어야지 정사각형이 될 수 있습니다. 이렇게 표시된 점을 하나의 정사각형이라고 체킹을 할 수 있으며 이때 카운트변수를 하나 선언하여 return 해주게 된다면 최종적인 결과값을 구할 수 있게됩니다.</p>
<p>직접 그려보시면 평면좌표위에 어떻게 표시되는지 알 수 있을것입니다.</p>
<blockquote>
<p>결론</p>
</blockquote>
<p>좌표값으로 규칙을 찾으려고 하였는데 세대의 방향별 접근을 생각하지 못했습니다.</p>
<hr>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  드래곤커브.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/16.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y,d,g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir_info;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragon_curve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqaure_find</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g세대까지 드래곤커브를 진행합니다.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragonCurve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = dir_info.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> nDir = (dir_info[i] + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        x = x + dx[nDir];</span><br><span class="line">        y = y + dy[nDir];</span><br><span class="line">        <span class="built_in">map</span>[x][y] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        dir_info.push_back(nDir);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqaureFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAX; j++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[i+<span class="number">1</span>][j] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[i+<span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[i][j+<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; d &gt;&gt; g;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 맨 처음 시작지점 체크</span></span><br><span class="line">        <span class="built_in">map</span>[x][y] = <span class="number">1</span>;</span><br><span class="line">        x = x + dx[d];</span><br><span class="line">        y = y + dy[d];</span><br><span class="line">        <span class="built_in">map</span>[x][y] = <span class="number">1</span>;</span><br><span class="line">        dir_info.clear();</span><br><span class="line">        <span class="comment">// 방향을 체크해서 저장시켜놔야지 나중에 역순+1을 시켜줄 수 있다.</span></span><br><span class="line">        dir_info.push_back(d);</span><br><span class="line">        <span class="comment">// 다음 세대의 추가되는 선분의 방향정보 = 이전 세대의 방향정보를 역순으로 탐색하면서 + 1 % 4 를 한 것이 된다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;g; j++)&#123;</span><br><span class="line">            <span class="comment">// function dragon curve</span></span><br><span class="line">            dragonCurve();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> answer = sqaureFind();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; answer &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 124나라의숫자</title>
    <url>/country-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12899" target="_blank" rel="noopener">프로그래머스 124 나라의 숫자 </a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다.</p>
<p>124 나라에는 자연수만 존재합니다.<br>
124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다.<br>
예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다.</p>
<p>10진법    124 나라    10진법    124 나라<br>
1    1    6    14<br>
2    2    7    21<br>
3    4    8    22<br>
4    11    9    24<br>
5    12    10    41<br>
자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요.</p>
<blockquote>
<p>제한사항<br>
n은 500,000,000이하의 자연수 입니다.</p>
</blockquote>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>10진법을 124나라의 진법 형식대로 변환하는 문제입니다.</p>
<blockquote>
<p>규칙</p>
</blockquote>
<ul>
<li>규칙을 살펴보면 <code>n % 3 == 0</code>이 되는 시점에 값이 4가 되는것을 확인할 수 있습니다.</li>
<li><code>n % 3</code>을 했을때의 나머지를 계속 앞의 값으로 넣어주면 해당되는 124나라의 숫자로 변경하는것을 확인할 수 있습니다.</li>
<li>res값이 = 일경우 res값을 4로 갱신해주고, 종료조건을 만들어주기위해서 n을 3으로 나눈값에서 -1을 빼주게 됩니다.</li>
<li><code>Stringbuilder를 사용한 이유</code>는  String은 새로운 값을 할당될때마다 생성되기 때문에 효율이 떨어지게 되므로, <code>Stringbuilder는 동일 객체내에서 문자열을 변경</code>하는것이 가능합니다.</li>
<li>마지막에 reverse() 함수를 사용하여 값을 출력시킨 이유는 역순으로 값이 들어가있는 상태이기 때문입니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 나라의숫자124 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        StringBuilder answer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = n % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res == <span class="number">0</span>)&#123;</span><br><span class="line">                res = <span class="number">4</span>;</span><br><span class="line">                n = (n/<span class="number">3</span>)-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                n = (n/<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            answer.append(Integer.toString(res));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer.reverse());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 실패율</title>
    <url>/failure-rate/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.welcomekakao.com/learn/courses/30/lessons/42889?language=java" target="_blank" rel="noopener">프로그래머스 실패율</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>실패율은 다음과 같이 정의한다.</p>
<ul>
<li>
<p>스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수</p>
</li>
<li>
<p>제한사항</p>
</li>
<li>
<p>스테이지의 개수 N은 <code>1</code> 이상 <code>500</code> 이하의 자연수이다.</p>
</li>
<li>
<p>stages의 길이는 <code>1</code> 이상 <code>200,000</code> 이하이다.</p>
</li>
<li>
<p>stages에는 <code>1</code> 이상 <code>N + 1</code> 이하의 자연수가 담겨있다.</p>
<ul>
<li>각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.</li>
<li>단, <code>N + 1</code> 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.</li>
</ul>
</li>
<li>
<p>만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.</p>
</li>
<li>
<p>스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 <code>0</code> 으로 정의한다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>실패율과 해당스테이지를 저장시키기 위한 List를 선언하였다.</li>
<li>stages에 있는 값들을 <code>Arrays.sort</code> 로 선언하여 값들을 정렬해주었다. 그 이유는 스테이지가 [2, 1, 2, 6, 2, 4, 3, 3] 라고 가정하였을때 오름차순 정렬을 해주면 [1, 2, 2, 2, 3, 3, 4, 6]의 값이 나오므로 스테이지별 처리를 해줄 수 있다.</li>
</ul>
<blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 플레이어 수</p>
</blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 플레이어 수를 체크 하였다. 스테이지별로 순회하는 값과 스테이지에 있는 값이 같을 경우 스테이지에 도달은 하였지만 클리어를 하지 못한 수이다.</p>
<blockquote>
<p>스테이지에 도달한 플레이어 수</p>
</blockquote>
<p>현재 스테이지를 순회하면서 그 값과 같거나 그 이상인 값은 스테이지에 도달한 플레이어 수 라고 생각할 수 있다.</p>
<blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 수가 0일 경우</p>
</blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 수가 0일 경우 실패율을 0으로 놓는다. 실패율 0의 값과 현재 스테이지를 리스트에 담아준다</p>
<blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 수가 0이 아닐 경우</p>
</blockquote>
<p><code>double type</code>으로 <code>스테이지 클리어한 수 / 스테이지에 도달한 수</code> 를 리스트에 실패율과 현재 스테이지 값을 담아주었다.</p>
<blockquote>
<p>Arrays.sort VS Collections.sort</p>
</blockquote>
<p>Arrays.sort()는 Primitive Type이나 Object Type의 Array를 정렬할때 사용합니다. 그리고Collections.sort()는 Collection의 List를 정렬할 때 사용합니다.</p>
<p>기본적으로 둘 다 오름차순 정렬이고, 인자로서 Array 또는 List를 넣어주면 인자로 넘겨진 객체의 내용 자체가 바뀐다. 둘 다 static method이므로 Arrays나 Collections객체를 바로 호출한다.</p>
<p>공통점으로는 Arrays.sort(), Collections.sort() 모두 Comparator를 통한 커스터마이징을 지원합니다.</p>
<p>Collections.reverse()는 내림차순 정렬이 아닌, 리스트의 구성을 반대로 뒤집는 것이다.</p>
<blockquote>
<p>내림차순 정렬로 바꾸려면 어떤 형식으로 리턴을 해주어야할까?</p>
</blockquote>
<p><code>Collections.sort(arr,Comparator.reverseOrder());</code></p>
<p>다음과 같이 내림차순 정렬로 바꿔줄 수 있다. 이렇게 바꿔주는 형식아니면 직접 커스터마이징을 해줄 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Pair</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        Pair(<span class="keyword">double</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair arr2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(y &lt; arr2.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>compareTo함수의 특징을 살펴보면</p>
<p><code>A와 B가 같으면 0을 반환, A가 B보다 크면 양수를 반환, A가 B보다 작으면 음수를 반환합니다.</code></p>
<ul>
<li>실패율이 높은 스테이지부터 내림차순으로 스테이지 번호 출력</li>
</ul>
<p>내림차순으로 정렬된 상태이므로 리스트에 담겨있는 값중에서 (실패율, 스테이지번호) 스테이지번호값들을 출력시켜줍니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 실패율 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Pair</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        Pair(<span class="keyword">double</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * A와 B가 같으면 0을 반환</span></span><br><span class="line"><span class="comment">         * A가 B보다 크면 양수를 반환</span></span><br><span class="line"><span class="comment">         * A가 B보다 작으면 음수를 반환</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair arr2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(y &lt; arr2.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span>[] stages =&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Pair&gt; arr = <span class="keyword">new</span> ArrayList&lt;Pair&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> stage_clear = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> stage_arrive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] answer = &#123;&#125;;</span><br><span class="line">        Arrays.sort(stages);</span><br><span class="line">        <span class="comment">// 1stage ~ N stage</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            stage_clear = <span class="number">0</span>;</span><br><span class="line">            stage_arrive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stages.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 스테이지 도달했지만 클리어하지 못한 플레이어 수</span></span><br><span class="line">                <span class="keyword">if</span> (stages[j] == i) &#123;</span><br><span class="line">                    stage_clear++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 스테이지에 도달한 플레이어수</span></span><br><span class="line">                <span class="keyword">if</span> (stages[j] &gt;= i) &#123;</span><br><span class="line">                    stage_arrive++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">                        <span class="comment">// 스테이지 도달했지만 클리어하지 못한 플레이어수 가 0일 경우 실패율 = 0</span></span><br><span class="line">            <span class="keyword">if</span> (stage_clear == <span class="number">0</span>) &#123;</span><br><span class="line">                arr.add(<span class="keyword">new</span> Pair(<span class="number">0</span>, i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.add(<span class="keyword">new</span> Pair((<span class="keyword">double</span>) stage_clear / stage_arrive, i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                <span class="comment">// 실패율이 높은 순서대로 내림 차순 정렬</span></span><br><span class="line">        Collections.sort(arr);</span><br><span class="line">        <span class="comment">//Arrays.sort(arr, Comparator.reverseOrder());</span></span><br><span class="line">        answer = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.size(); i++)&#123;</span><br><span class="line">            Pair p = arr.get(i);</span><br><span class="line">            answer[i] = arr.get(i).y; <span class="comment">// 스테이지 번호 넣기</span></span><br><span class="line">            System.out.println(answer[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 완주하지못한 선수</title>
    <url>/uncompleted-player/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42576?language=java" target="_blank" rel="noopener">프로그래머스 완주하지못한 선수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>
<p>제한사항<br>
마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.<br>
completion의 길이는 participant의 길이보다 1 작습니다.<br>
참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.<br>
참가자 중에는 동명이인이 있을 수 있습니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>이 문제에 있어서 가장 중요했던 점은 hashmap을 사용할 수 있는지 여부를 확인하는 문제였습니다. 참가자와 완주자의 명단이 주어졌을때 완주자의 명단을 Key, 완주자의 등장횟수를 Value로 두면 쉽게 풀 수 있습니다.</p>
<blockquote>
<p>완주자의 명단을 HashMap에 저장하기<br>
완주자의 명단을 HashMap에 저장합니다. 예를 들면, 참가자[leo, kiki, eden]  완주자  [eden, kiki]의 값이 주어졌다고 생각을 하겠습니다. 완주자 &lt;eden, 1&gt;, &lt;kiki,1&gt;의 값으로 저장시킵니다.</p>
</blockquote>
<blockquote>
<p>참가자의 명단에서 참가했지만 완주하지 못한 선수 찾아내기<br>
완주한 명단 즉, 완주한 사람의 이름 Key값이 참가자의 명단에 없을 경우 그 사람은 참가는 했지만 완주하지 못한 경우가 됩니다.</p>
</blockquote>
<blockquote>
<p>동명이인 찾아내기<br>
레오가 두명이 등장하는 참가자 [leo, leo, kiki, eden] 완주자[leo, eden, kiki] 라고 가정하겠습니다. 레오 같은 경우는 완주자의 명단에는 한명이 존재하고 참가자의 명단에는 두명이 존재하게됩니다. 즉, 완주자 1명, 참가자 2명이기때문에 레오의 동명이인이 참가자이지만 완주자의 명단에 오르지 못했다는것을 알 수 있습니다.</p>
</blockquote>
<blockquote>
<p>이것을 소스코드로 어떻게 표현했을까요<br>
? leo의 키값을 찾은 후에 leo의 등장하면 현재 Hashmap 즉, 완주자 명단에 있는 value의 값을 가져오게 됩니다. 그중에서 leo라는 값이 두번등장하게 되면 음수값이 되므로 결국 leo는 동명이인이며 2명중 1명만 참가하는것이 됩니다.</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(String[] participant, String[] completion)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;completion.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!m.containsKey(completion[i]))&#123;</span><br><span class="line">                m.put(completion[i],<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = m.get(completion[i]);</span><br><span class="line">                m.put(completion[i], tmp+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;participant.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 완주자와 참가명단에서 못찾았으면</span></span><br><span class="line">            <span class="keyword">if</span>(!m.containsKey(participant[i]))&#123;</span><br><span class="line">                answer = participant[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 동명이인일 경우 값을 하나씩 줄였을때 0보다 작으면 그 사람이 완주자, 동명이인 체크해주기</span></span><br><span class="line">                <span class="keyword">int</span> tmp = m.get(participant[i]);</span><br><span class="line">                m.put(participant[i],tmp-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(m.get(participant[i])&lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    answer = participant[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; participant, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; completion)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> answer = <span class="string">""</span>;</span><br><span class="line">     <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;completion.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">// 완주자 없는 경우</span></span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(completion[i]) == m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            m.insert(make_pair(completion[i], <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 완주자 있는 경우</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 완주자 수 카운팅</span></span><br><span class="line">            m[completion[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;participant.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">// 완주자와 참가자 명단에서 못찾았을 경우</span></span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(participant[i]) == m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            answer = participant[i];        <span class="comment">// 못찾은 사람이 정답</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 동명이인일 경우 값을 하나씩 줄였을때 0보다 작으면 그 사람이 완주자, 동명이인 체크해주기</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            m[participant[i]]--;</span><br><span class="line">            <span class="keyword">if</span>(m[participant[i]] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                answer = participant[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>해시</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 오픈채팅방</title>
    <url>/open-chat-room/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.welcomekakao.com/learn/courses/30/lessons/42888?language=java" target="_blank" rel="noopener">프로그래머스 오픈 채팅방</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>
<p>record는 다음과 같은 문자열이 담긴 배열이며, 길이는 <code>1</code> 이상 <code>100,000</code> 이하이다.</p>
</li>
<li>
<p>다음은 record에 담긴 문자열에 대한 설명이다.</p>
<ul>
<li>
<p>모든 유저는 [유저 아이디]로 구분한다.</p>
</li>
<li>
<p>[유저 아이디] 사용자가 [닉네임]으로 채팅방에 입장 -  (ex. )</p>
<p>Enter [유저 아이디] [닉네임]</p>
<p>Enter uid1234 Muzi</p>
</li>
<li>
<p>[유저 아이디] 사용자가 채팅방에서 퇴장 -  (ex. )</p>
<p>Leave [유저 아이디]</p>
<p>Leave uid1234</p>
</li>
<li>
<p>[유저 아이디] 사용자가 닉네임을 [닉네임]으로 변경 -  (ex. )</p>
<p>Change [유저 아이디] [닉네임]</p>
<p>Change uid1234 Muzi</p>
</li>
<li>
<p>첫 단어는 Enter, Leave, Change 중 하나이다.</p>
</li>
<li>
<p>각 단어는 공백으로 구분되어 있으며, 알파벳 대문자, 소문자, 숫자로만 이루어져있다.</p>
</li>
<li>
<p>유저 아이디와 닉네임은 알파벳 대문자, 소문자를 구별한다.</p>
</li>
<li>
<p>유저 아이디와 닉네임의 길이는 <code>1</code> 이상 <code>10</code> 이하이다.</p>
</li>
<li>
<p>채팅방에서 나간 유저가 닉네임을 변경하는 등 잘못 된 입력은 주어지지 않는다.</p>
</li>
</ul>
<p>채팅방에 들어오고 나가거나, 닉네임을 변경한 기록이 담긴 문자열 배열 record가 매개변수로 주어질 때, 모든 기록이 처리된 후, 최종적으로 방을 개설한 사람이 보게 되는 메시지를 문자열 배열 형태로 return 하도록 solution 함수를 완성하는 문제입니다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>하나의 Hashmap을 생성하여 (Key,Value)의 값을 (유저아이디, 유저닉네임 값으로 저장시켰습니다.</li>
<li>그리고 하나의 Queue를 생성하여 <code>Enter, Leave, Change</code>세개의 명령어들을 담게 하였습니다. 그 이유는 하나의 Queue에 <code>Pair의 값으로 (행동, 유저아이디)</code>값을 담게하여 모든 유저의 행동의 값들을 모두 담을 수 있게하였습니다. Map을 사용하게 되면 키 값이 <code>중복되는것이 허용되지 않기때문에</code> <code>Queue값으로 들어온 순서</code>대로 채팅방 화면을 처리했습니다.</li>
</ul>
<blockquote>
<p>채팅방에 입장</p>
</blockquote>
<p>채팅방에 입장하였을때는 <code>Queue와 Map에 (명령어, 유저아이디), (유저아이디, 닉네임)</code> 값을 담게하였습니다. 공통의 값은 유저아이디이기 때문에 나중에 값을 출력할때 <code>유저아이디 공통의 키</code>값으로 출력시켜주기 위함입니다.</p>
<blockquote>
<p>채팅방에 퇴장</p>
</blockquote>
<p>이미 들어온 유저였기때문에 Queue에만 해당 (명령어, 유저아이디) 값을 담아주게 하였습니다.</p>
<blockquote>
<p>채팅방 닉네임 변경</p>
</blockquote>
<p>채팅방에서 닉네임을 변경하였을때는 Map에만 값을 변경시켜주었는데요. 예를 들어 <code>(UserId, 1) → (UserId, 2)</code>로 변경을 시켜주면 해당 유저의 닉네임만 변경시켜줄 수 있도록 하였습니다. <code>Queue에는 값을 넣어주지않은 이유</code>는 Change값에 따른 값을 출력해줄 필요가 없기때문에 해당 <code>닉네임값만</code> 변경하였습니다.</p>
<blockquote>
<p>실수한 점</p>
</blockquote>
<p>결과적으로 <code>Queue의 값이 비지않을때</code> 까지 값을 반복하면서 값을 꺼내줍니다. 이쪽에서 제가 실수한 부분은 q.poll.x, q.poll.y 로 값을 꺼내주게 되었는데 poll을 해줄때마다 <code>하나의 Pair의 전체(x,y)를 가져오게</code> 되었습니다. 그래서 디버깅을 통하여 잘못된점을 인지하고 Pair p를 선언하여 하나의 <code>Pair에 있는 x,y의 값</code>을 꺼내주면서 진행하였습니다.</p>
<p><code>닉네임 님이 들어왔습니다. 닉네임 님이 나갔습니다.</code></p>
<p>와 같이 결과를 출력해주었어야했으므로 answer의 배열을 Queue의 사이즈만큼 할당한 후에 Queue의 y값 <code>즉, Map의 키값인 닉네임값을 뽑게하였습니다.</code></p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 오픈채팅방 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        String x;</span><br><span class="line">        String y;</span><br><span class="line">        Pair(String x, String y)&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        HashMap&lt;String,String&gt; command_map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        String[] answer = &#123;&#125;;</span><br><span class="line">        String record[] = &#123;<span class="string">"Enter uid1234 Muzi"</span>, <span class="string">"Enter uid4567 Prodo"</span>,<span class="string">"Leave uid1234"</span>,<span class="string">"Enter uid1234 Prodo"</span>,<span class="string">"Change uid4567 Ryan"</span>&#125;;</span><br><span class="line">        Queue&lt;Pair&gt; q = <span class="keyword">new</span> LinkedList&lt;Pair&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;record.length; i++)&#123;</span><br><span class="line">            String[] arr = record[i].split(<span class="string">" "</span>);</span><br><span class="line">            <span class="comment">// Enter [0], uid1234 [1], Muzi [2]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 채팅방에 입장하였을때</span></span><br><span class="line">            <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"Enter"</span>))&#123;</span><br><span class="line">                q.add(<span class="keyword">new</span> Pair(arr[<span class="number">0</span>],arr[<span class="number">1</span>]));</span><br><span class="line">                map.put(arr[<span class="number">1</span>],arr[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 채팅방에 떠났을때</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"Leave"</span>))&#123;</span><br><span class="line">                q.add(<span class="keyword">new</span> Pair(arr[<span class="number">0</span>],arr[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 채팅방에 이름을 변경하였을 때</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"Change"</span>))&#123;</span><br><span class="line">                map.replace(arr[<span class="number">1</span>], arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        answer = <span class="keyword">new</span> String[q.size()];</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            Pair p = q.poll();</span><br><span class="line">            <span class="comment">//Queue&lt;Pair&gt; res = q.poll</span></span><br><span class="line">            String x = p.x;</span><br><span class="line">            String y = p.y;</span><br><span class="line">            <span class="keyword">if</span>(x.equals(<span class="string">"Enter"</span>))&#123;</span><br><span class="line">                answer[cnt] = map.get(y) + <span class="string">"님이 들어왔습니다."</span>;</span><br><span class="line">                <span class="comment">//System.out.println(map.get(y) + "님이 들어왔습니다.");</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x.equals(<span class="string">"Leave"</span>))&#123;</span><br><span class="line">                answer[cnt] = map.get(y) + <span class="string">"님이 나갔습니다."</span>;</span><br><span class="line">                <span class="comment">//System.out.println(map.get(y) + "님이 나갔습니다.");</span></span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 크레인 인형뽑기</title>
    <url>/crane-claw-machine-game/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/64061" target="_blank" rel="noopener">프로그래머스 크레인 인형뽑기 게임</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>
<p>게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.</p>
</li>
<li>
<p>만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.</p>
</li>
<li>
<p>크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다.</p>
</li>
<li>
<p>제한 사항</p>
</li>
<li>
<p>board 배열은 2차원 배열로 크기는  이상  이하입니다.</p>
<p>5 x 5</p>
<p>30 x 30</p>
</li>
<li>
<p>board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.</p>
<ul>
<li>0은 빈 칸을 나타냅니다.</li>
<li>1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.</li>
</ul>
</li>
<li>
<p>moves 배열의 크기는 1 이상 1,000 이하입니다.</p>
</li>
<li>
<p>moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>두개의 동일한 인형일 경우 바구니 remove</li>
<li><strong>빈곳일 경우 아무일도 일어나지 않는다. 즉, 크레인에서 뽑은 값은 인형 N*N에서 value 를 0 으로 초기화</strong></li>
<li>바구니 크기는 충분하다</li>
<li>board range (5 &lt; board &lt; 30)</li>
<li>moves range(1 &lt; moves &lt; 1000</li>
<li>board value range(1 &lt; board value &lt; 100)</li>
<li>stack의 empty조건과 인형맵에서 값이 있을 경우만 로직을 진행</li>
<li>로직이 모두 진행되고나서 0으로 초기화 후 해당 로직을 빠져오는것이 가장 중요한 포인트였다.</li>
</ul>
<blockquote>
<p>Stack 자료구조를 사용한다.</p>
</blockquote>
<p>이 크레인인형뽑기의 문제에서 가장 중요했던 부분은 Stack을 사용하여 바구니의 역할을 하게 해야한다. 그리고 그 바구니가 비어있는지의 조건을 무조건 체크하고 들어가고, 비어있으면서도 값이 있는 경우를 조건으로 처리해야한다. 그 이유는 한가지 조건만 만족시키면 문제의 조건과 stack의 조건을 만족시키지 못한다</p>
<p>그리고, 바구니에 들어져 있는 값이 현재 뽑은 인형과의 값을 비교하여 바구니의 값을 빼주면서 answer의 값을 +2 를 해준다. 그 이유는 바구니에 들어가 있는 값(+1)과 크레인이 뽑은 값(+1)이 동일한 인형이기 때문에 이 경우 answer에다가 값을 +2를 해주었다. 결국 바구니의 값과 크레인의 값이 같으니 2개의 인형이 remove되었다고 생각하면 된다.</p>
<blockquote>
<p>인형을 뽑고나면 값을 0으로 초기화 시켜준다.</p>
</blockquote>
<p>그리고 해당 로직이 다 실행되고 나면 크레인이 뽑은 인형의 값을 '0’으로 초기화 시켜준다. 그 이유는 '0’으로 초기화 시켜주지 않으면 다음로직시에도 해당 인형을 또 뽑을 수 있기 때문이다. 그리고 이때 해당 로직을 진행후 break;문을 사용하여 해당 로직을 빠져나온다. break를 해주지 않으면 다음 로직시에 뽑으려고 하지 않았던 인형과의 충돌이 생길 수 있다.</p>
<p>예) 1번 인형을 뽑고 3번을 뽑고 다시 1번으로 오는 경우</p>
<p>Input으로 들어오는 값들의 Init 값이 1부터시작하기 때문에 moves[i]-1;을 해주면서 0(Index)의 값으로 진행시키기 위함이다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; board, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; moves)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;moves.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> moves_size = moves[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board.size(); j++)&#123;</span><br><span class="line">            <span class="comment">// 인형이 있는 경우 </span></span><br><span class="line">            <span class="keyword">if</span>(board[j][moves_size] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s.empty() &amp;&amp; s.top() == board[j][moves_size])&#123;</span><br><span class="line">                       s.pop();</span><br><span class="line">                       answer +=<span class="number">2</span>;   </span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    s.push(board[j][moves_size]); </span><br><span class="line">                &#125;</span><br><span class="line">                   board[j][moves_size] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC Gradle IntelliJ 환경설정</title>
    <url>/spring-mvc-environment/</url>
    <content><![CDATA[<h1 id="intellij-gradle-spring-mvc-hwangyeong-seoljeong"><a href="#intellij-gradle-spring-mvc-hwangyeong-seoljeong" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#intellij-gradle-spring-mvc-환경-설정"></a> IntelliJ Gradle Spring MVC 환경 설정</h1>
<h3 id="teseuteu-hwangyeong"><a href="#teseuteu-hwangyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#테스트-환경"></a> 테스트 환경</h3>
<p>OS: Mac 10.14.6 Mojave</p>
<p>gradle: v5.5.12</p>
<p>apache-tomcat: v9.0.27</p>
<h3 id="seupeuringeseo-hwangyeongseoljeongeul-hal-su-issneun-bangbeobeun-keuge-dugajiida"><a href="#seupeuringeseo-hwangyeongseoljeongeul-hal-su-issneun-bangbeobeun-keuge-dugajiida" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#스프링에서-환경설정을-할-수-있는-방법은-크게-두가지이다"></a> 스프링에서 환경설정을 할 수 있는 방법은 크게 두가지이다.</h3>
<ul>
<li>
<p>Eclipse와 STS</p>
</li>
<li>
<p>IntelliJ와 Gradle</p>
</li>
</ul>
<p>그중에서 Gradle은 아래와 같은 일반적인 시나리오에서 빌드성능에 대한 테스트결과를 공개하였다. 테스트에 사용된 하드웨어는 <code>Dell XPS 15, I7-4712HQ CPU @ 2.30GHz, 16GB of RAM, SSD, Linux Min 18.1</code>이다.</p>
<p>Apache Common Lang3를 Maven에서 Gradle로 변경하여 테스트한 결과이다. 테스트를 실행한 결과는 Gradle이 약1.7배 정도 빠르며 Build Cache로 인한 빌드는 약 72배이상 빠르다고 나와있기 때문에 IntelliJ Idea와 Gradle을 사용하였다.</p>
<p><code>결론적으로</code></p>
<ul>
<li>Gradle은 모든 시나리오에서 적어도 2배이상은 빠르다.</li>
<li>변경 사항을 반영한 빌드에서는 Gradle이 Maven에 비해서 10~100배 빠르며, 하위프로젝트가 많으면 더욱 유리하다.</li>
</ul>
<p><a href="https://gradle.org/gradle-vs-maven-performance/" target="_blank" rel="noopener">Gradle 성능 비교</a></p>
<h3 id="gradle-seoljeonghagi"><a href="#gradle-seoljeonghagi" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#gradle-설정하기"></a> Gradle 설정하기</h3>
<p><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle 공식홈페이지</a></p>
<p>2019년 11월 기준 Gradle v5.6.4 버전이 최신버전으로 나와 있으며, Gradle설치하시기전에 JDK 1.7이상</p>
<p><code>Mac환경</code> 기준으로 설명드리겠습니다. 위 링크를 클릭하여 Gradle을 받지못하신분들은 압축을 풀어 원하시는 폴더에 저장하신 후 프로젝트 준비를 해주시면 됩니다.  저 같은경우는 usr/library에 경로설정을 진행하였습니다.</p>
<p><code>Windows</code>같은 경우는 C://드라이브 경로에 압축을 풀어서 진행합니다. 그리고 Gradle을 환경설정을 하는것이 좋기때문에 환경변수에 Path에 추가적인 설정이 필요합니다.</p>
<p>[내 컴퓨터] → [속성] → [고급 시스템 설정] → [고급] → [환경변수] → [Path] → [편집]</p>
<p><code>MAC</code> 해당폴더 경로에 가서 Mac터미널에서 아래와 같은 명령어를 사용합니다.</p>
<p>Mac <code>$./gradle -version</code></p>
<p><code>windows</code>해당폴더 경로에 가서 Windows터미널에서 아래와 같은 명령어를 사용합니다. 단, 환경변수가 설정되어있어야 올바르게 작동합니다.</p>
<p>Windows <code>gradle -v</code></p>
<h1 id="spring-mvc-peurojegteu-saengseonghagi"><a href="#spring-mvc-peurojegteu-saengseonghagi" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#spring-mvc-프로젝트-생성하기"></a> Spring MVC 프로젝트 생성하기</h1>
<p>IntelliJ를 실행하고 프로젝트 생성을 눌러줍니다.</p>
<p>여기에서 Gradle을 왼쪽에 그래들을 선택한 후 Java, Web에 선택을 하고 Next를 눌러줍니다.</p>
<ul>
<li>GroupId
<ul>
<li>자신의 프로젝트를 고유하게 식별자입니다.</li>
<li>package 명명 규칙을 따른다.</li>
<li>하위 그룹은 얼마든지 추가할 수 있다.</li>
</ul>
</li>
<li>ArtifactId
<ul>
<li>제품의 이름으로, 버전 정보를 생략한 jar 파일의 이름이다.</li>
<li>프로젝트 이름과 동일하게 설정한다.</li>
<li>소문자로만 작성하며 특수문자는 사용하지 않는다.</li>
</ul>
</li>
<li>Version
<ul>
<li>SNAPSHOT: 개발용, RELEASE: 배포용</li>
<li>숫자와 점을 사용하여 버전 형태를 표현한다(1.0)</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>com.회사이름.프로그램이름</th>
<th>com.kgh.miniapp</th>
</tr>
</thead>
<tbody>
<tr>
<td>com.회사이름.플랫폼.프로그램이름</td>
<td>com.kgh.miniapp.web.miniapp</td>
</tr>
<tr>
<td>kr.co.회사이름.프로그램이름</td>
<td>kr.co.kgh.miniapp</td>
</tr>
<tr>
<td>kr.co.회사이름.플랫폼.프로그램이름</td>
<td>kr.co.kgh.web.miniapp</td>
</tr>
</tbody>
</table>
<p>위와 같은 형식으로 사용할 수 있습니다.</p>
<p>그 다음,</p>
<p>방금전에 다운받은 Gradle을 지정해주고 나머지 조건들은 그대로 두고 진행하였습니다.</p>
<p>저같은 경우는 이미 경로가 잡혀있었기 때문에 /Library/Java/JavaVirtual…으로 나오게되었습니다.</p>
<p>이제 Finish를 눌러 프로젝트를 생성해보겠습니다.</p>
<p><code>이때 프로젝트를 생성할 폴더를 하나 미리 만들어 주셔야 그 폴더안에 모든 설정파일들이 들어가게 됩니다. 만약 많은 폴더들이 존재하고 있는곳에 프로젝트를 finish누르게 된다면 시각적으로나 관리면에서 좋지않은 효율이 발생할 가능성이 높습니다.</code></p>
<p>이제 프로젝트가 Web, MVC형태로 만들어지게 되었습니다. 이제는 아직 추가되지 않은 스프링프레임 워크를 추가해보도록 하겠습니다.</p>
<p><code>해당 최상위 프로젝트에서 오른쪽 마우스 클릭 후 Add Framework Support를 눌러줍니다.</code></p>
<p>그 다음, Spring을 선택한후 OK를 클릭해줍니다. 이제 gradle.Build에다가 Maven Spring에 적용되던것들을 이제 build.gradle에 넣어주려고 합니다.</p>
<p>위에서 말씀드렸다시피 Eclipse+Maven조합, IntelliJ+Gradle조합 둘중하나로 프로젝트를 구성할 수 있기 때문입니다. 이제 그러면 build.gradle에 코드를 추가해봅시다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">    version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이제 해당 코드를 넣어주면 자동으로 다운로드와 빌드가 실행됩니다.</p>
<h1 id="lombokpeulreogeuin-cuga"><a href="#lombokpeulreogeuin-cuga" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#lombok플러그인-추가"></a> Lombok플러그인 추가</h1>
<p>이제 Lombok을 사용하기 위해 추가적인 설정을 해봅시다.</p>
<p><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">Lombok공식사이트</a></p>
<h3 id="lombokeul-sayonghamyeon-daeumgwa-gateun-ijeomeul-gajigo-issseubnida"><a href="#lombokeul-sayonghamyeon-daeumgwa-gateun-ijeomeul-gajigo-issseubnida" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#lombok을-사용하면-다음과-같은-이점을-가지고-있습니다"></a> Lombok을 사용하면 다음과 같은 이점을 가지고 있습니다.</h3>
<p>① <strong>lombok</strong> - Java 기반에서 <strong>기계적으로 작성하는 VO, DTO, Entity 관련 작업</strong>을 보다 쉽게 하게 해주는 도구입니다.</p>
<p>② Getter, Setter, ToString, hashCode 관련 메소드 작업 관련 Class(클래스) <strong>코드를 깔끔하게 작성</strong>할 수 있습니다.</p>
<p>③ <strong>Spring(SpringSTS)</strong> 프로젝트에서 사용할 경우 <strong>JPA 환경과 함께 일관화 되고 가독성이 좋은</strong> 애플리케이션을 작성할 수 있습니다.</p>
<p>④ <strong>단점</strong>은 협업 모든 인원이 <strong>lombok을 설치해야 한다는 것</strong>과 추가 어노테이션 사용할 경우 <strong>소스코드 분석이 난해해지는 것</strong> 등이 있습니다.</p>
<p>이제 Lombok 장단점을 알았으니, 진행해봅시다.</p>
<p>상단에 <code>IntelliJIdea</code>를 눌러주시고 <code>Preferences</code>를 클릭해주세요. 그리고 왼쪽 상단에 <code>Plugin</code>을 클릭한다음 <code>lombok을 검색</code>하여 <code>install</code>해줍니다.</p>
<p>플러그인을 사용하고나면 Intellij를 재시작하게 되고, 이제 build.gradle 파일에 Lombok을 아래와 같이 추가해줍니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>위와 같은 코드를 작성하면 <code>IntelliJ Idea</code>에서 자동으로 빌드 및 컴파일을 진행합니다</p>
<blockquote>
<p>이때 주의 하실 사항이 있습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br></pre></td></tr></table></figure>
<p>원인은 <code>IntelliJ - How to solve lombok &quot;Cannot resolve symbol 'log'&quot;</code> 컴파일시 해당 에러가 나타났습니다.</p>
<p>해결방법은 두가지가 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line">or</span><br><span class="line">compileOnly <span class="string">'org.projectlombok:lombok:1.18.6'</span></span><br><span class="line">annotationProcessor <span class="string">'org.projectlombok:lombok:1.18.6'</span></span><br></pre></td></tr></table></figure>
<p>둘중 하나를 이용하면 에러를 해결할 수 있습니다. 정확한 원인은 컴파일대상과 IDE해석상의 문제가 발생한것으로 보입니다.</p>
<h3 id="lombok-keompail-hwangyeong"><a href="#lombok-keompail-hwangyeong" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#lombok-컴파일-환경"></a> Lombok 컴파일 환경</h3>
<p>이제 Lombok을 제대로 사용하기위해서 컴파일 환경을 설정해주어야합니다.</p>
<p><code>상단에 IntelliJIdea Preferences-&gt;build,Execution, Deployment -&gt;Compiler-&gt;Annotaion Processors</code> 를 클릭해서 들어옵니다.</p>
<p>이제 오른쪽 상단에 있는 Enable annotation processing을 클릭하여 컴파일할때 같이 돌아가도록 동작시켜줍니다. 그리고 OK를 누릅니다.</p>
<h1 id="log4j-raibeureori"><a href="#log4j-raibeureori" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#log4j-라이브러리"></a> Log4j 라이브러리</h1>
<p>이제 테스트나 Tomcat메시지를 조금 더 잘 확인할 수 있도록 log4j라이브러리를 사용할 것입니다.</p>
<p>System.out.println과 같이 로그를 찍을 필요가 없고 log를 사용할 것입니다.</p>
<p>build.gradle에 추가하여 log4j라이브러리를 사용해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-webmvc'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line">    compile group: <span class="string">'log4j'</span>, name: <span class="string">'log4j'</span>, version: <span class="string">'1.2.17'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="log4j-properties-seoljeonghagi"><a href="#log4j-properties-seoljeonghagi" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#log4j-properties-설정하기"></a> log4j properties 설정하기</h3>
<p><code>src내의 resource</code> 경로에 log4.j.properties파일을 작성합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log4j.properties</span><br><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"></span><br><span class="line"># Direct log messages to stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern= %-<span class="number">5</span>p %c&#123;<span class="number">1</span>&#125;:%L - %m%n</span><br></pre></td></tr></table></figure>
<p>다음과 같은 코드를 넣어줍니다. Log4j를 이용하기 위해서는 설정파일과 객체파일을 생성해야하므로 이것들을 properties에 담기위한 작업입니다.</p>
<h1 id="tomcatseoljeonghagi"><a href="#tomcatseoljeonghagi" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#tomcat설정하기"></a> Tomcat설정하기</h1>
<p>Tomcat버전 apache-tomcat: v9.0.27</p>
<p>Intellij는 Tomcat을 설정하고 프로젝트실행에 Tomcat에 프로젝트를 추가하는 방식을 사용합니다.</p>
<p>그림</p>
<p>톰캣을 사용하기위해서 해당 Run-&gt;Edit Configuration을 선택합니다. 그리고 Deployment를 선택하여 +버튼으로 해당 톰켓 폴더를 선택해줍니다. 이제 그러면 tomcat이 활성화되고 실행이 가능합니다.</p>
<blockquote>
<p>톰켓 실행시 오류</p>
</blockquote>
<p><code>[IntelliJ says 'cannot run program '/path/to/tomcat/bin/catalina.sh' error=13 permission denied](https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per)</code></p>
<p>라는 오류가 발생하면</p>
<p><code>chmod a+x /path/to/tomcat/bin/catalina.sh</code></p>
<p>해당 톰켓 경로를 직접 지정해서 경로 권한을 바꿔주어야합니다. 임의로 주어진 예시입니다.</p>
<h1 id="spring-mvccugawa-xmlpail-saengseong"><a href="#spring-mvccugawa-xmlpail-saengseong" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#spring-mvc추가와-xml파일-생성"></a> Spring MVC추가와 XML파일 생성</h1>
<p>build.gradle에 spring-webmvc를 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line"><span class="comment">//    testCompile group: 'junit', name: 'junit', version: '4.12'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-webmvc'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line">    compile group: <span class="string">'log4j'</span>, name: <span class="string">'log4j'</span>, version: <span class="string">'1.2.17'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compile group에 추가된 Name 'spring-webmvc’를 추가해줍니다.</p>
<h3 id="ije-root-context-xmlgwa-servlet-context-xmleul-cugahaejubnida"><a href="#ije-root-context-xmlgwa-servlet-context-xmleul-cugahaejubnida" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#이제-root-contextxml과-servlet-contextxml을-추가해줍니다"></a> 이제 root-context.xml과 servlet-context.xml을 추가해줍니다.</h3>
<p>src밑에 webapp폴더에 필요한 폴더 구조를 생성해서 사용합니다. webapp밑에 'WEB-INF’폴더를 먼저 생성하고 Spring,appServlet폴더를 생성합니다.</p>
<p>이제, WEB-INF밑에 spring폴더에는 root-context.xml, servlet-context.xml 파일을 생성합니다. XML파일을 직접 생성할 수도 있지만 메뉴를 이용해서 생성할 수 있습니다.</p>
<p>src 오른쪽마우스 -&gt; new -&gt; XML Configuration -&gt; Spring config를 선택하여 해당 root-context.xml, servlet-context.xml을 생성해줍니다.</p>
<p>servlet-contex.xml로 화면을 이동하면 Application Context…와 같은 메시지가 보이게 됩니다.</p>
<p>그리고 Project Structure를 확인해보면 root-context.xml과 servlet-context.xml파일이 추가된것을 확인할 수 있습니다.</p>
<h1 id="controller-cugahagi"><a href="#controller-cugahagi" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#controller-추가하기"></a> Controller 추가하기</h1>
<p>main폴더내에 java폴더 안에 org.kgh.controller라고 패키지를 생성하겠습니다. 생성된 패키지에 TestController클래스를 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.kgh.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Log</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"테스트중입니다."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이 @Log4j, Lombok을 이용하는 컴파일이 정상적으로 실행되는지 확인합니다.</p>
<p>servlet-context.xml에서 설정해보겠습니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.kgh.controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>이와 같이 설정해주게 되면 정확히 맵핑이 되어 진행될것입니다. 이제는 file-Project Structure내에 Facets항목을 열어서 web.xml을 추가해줍니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>다음과 같이 매핑되는것을 확인할 수 있고, 이제 톰캣을 확인해보면 정상적으로 서버가 구동되는것을 확인할 수 있습니다.</p>
<h1 id="reference"><a href="#reference" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#reference"></a> reference</h1>
<p><a href="https://gradle.org/releases/" target="_blank" rel="noopener">https://gradle.org/releases/</a></p>
<p><a href="https://www.holaxprogramming.com/2017/07/04/devops-gradle-is-faster-than-maven/" target="_blank" rel="noopener">https://www.holaxprogramming.com/2017/07/04/devops-gradle-is-faster-than-maven/</a></p>
<p><a href="https://blog.naver.com/PostView.nhn?blogId=sharplee7&amp;logNo=221412143968" target="_blank" rel="noopener">https://blog.naver.com/PostView.nhn?blogId=sharplee7&amp;logNo=221412143968</a></p>
<p><a href="https://niceman.tistory.com/99" target="_blank" rel="noopener">https://niceman.tistory.com/99</a></p>
<p><a href="https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per" target="_blank" rel="noopener">https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per</a></p>
]]></content>
      <categories>
        <category>SPRING/SPRINGBOOT</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
        <tag>environment</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 로봇청소기 14503</title>
    <url>/robot-vacuum-cleaner/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 로봇청소기 14503</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>장소 조건</li>
</ul>
<p>로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.</p>
<ul>
<li>로봇청소기의 작동 방식</li>
</ul>
<p>로봇 청소기는 다음과 같이 작동한다.</p>
<ol>
<li>현재 위치를 청소한다.</li>
<li>현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
<ol>
<li>왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.</li>
<li>왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.</li>
<li>네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.</li>
<li>네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.</li>
</ol>
</li>
</ol>
<p>단, 로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>로봇이 북동남서의 방향에 따른 왼쪽 회전의 경우를 잘 생각해주어야 합니다.</li>
<li>로봇이 후진하는 경우에 대해서 좌표값을 잘 이해할 수 있어야합니다.</li>
</ul>
<p>로봇이 왼쪽방향으로 부터 차례대로 탐색을 진행 할 수 있어야 한다.</p>
<p><code>북(0) → 서(3), 서(3) → 남(2), 남(2) → 동(1), 동(1) → 북(0)</code></p>
<p>하나의 예를 들어서 설명해보겠습니다. 첫번째 테스트 케이스를 예로 들어보겠습니다. 현재 방향이 북(0), r = 1, c = 1 의 값을 갖습니다. 현재 (1,1)의 위치에서 북쪽방향을 바라보고있는 로봇청소기 입니다. 로봇청소기가 이제 왼쪽으로 값을 회전시키기 위해서는 어떻게 할 수 있을까요?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>현재 위치가 0번 즉, 북쪽을 바라보고 있습니다. 북쪽을 바라보고 있으면서 이제 로봇청소기가 왼쪽으로 탐색을 진행해야하기때문에 서쪽방향으로 이동할 수 있어야합니다. 그러면 현재 (1,1)의 위치에서 (현재 R 위치-1),(현재 C위치 - 0) 의 방향으로 이동을 시키면 왼쪽으로 이동시킬 수 있겠습니다.</p>
<p>그래서 dx,dy의 값의 기준도 (북→서, 서→남, 남→동, 동→북) 의 형식으로 dx,dy의 값을 기준을 잡았습니다.</p>
<blockquote>
<p>방향 회전</p>
</blockquote>
<p>그러면 이것을 방향회전하는 경우로 바꾸려면 어떻게 진행해야 할까요? 현재 북쪽을 제외한 나머지는 차이가 1이나는것을 확인할 수 있습니다.</p>
<p><code>북(0) → 서(3), 서(3) → 남(2), 남(2) → 동(1), 동(1) → 북(0)</code></p>
<p>이것을 코드로 표현한다면 북쪽을 제외한 나머지는 차이가 d-1만큼 차이가 나게됩니다. 그러면 북쪽의 값은 d-1이 음수가 되는경우 즉, d가 0(북쪽)일 경우 이 값을 3으로 변경해주면 됩니다.</p>
<p>코드에서 표현한 것은</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> next_dir = d<span class="number">-1</span> &lt; <span class="number">0</span> ? <span class="number">3</span> : d<span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p>아래와 같이 표현할 수 있습니다.</p>
<p>또 다른 방식으로는</p>
<p>북쪽을 제외한 값들이 차이가 1이나고 북쪽(0)과 이동하려는 왼쪽의 서쪽값이(3)이 되기때문에 이것을 코드로 표현하면</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> next_dir = (d+<span class="number">3</span>) % <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>의 형태로도 나타낼 수 있습니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">d = (<span class="number">0</span> + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">0</span> 나머지: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">d = (<span class="number">1</span> + <span class="number">3</span> )% <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">d = (<span class="number">2</span> + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = (<span class="number">3</span> + <span class="number">3</span>) % <span class="number">4</span>  </span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>의 형태를 띄기 때문에 이것을 표현한 것과 같습니다.</p>
<blockquote>
<p>방향 후진</p>
</blockquote>
<p>방향 후진의 경우에는 모든 4개의 방향을 탐색하고 나고나서도 청소가 되어있으면 다시 제자리로 돌아와서 후진을 해주면됩니다.</p>
<p>예를 들어서 서쪽 기준으로 (남,동,북,서)를 탐색한다고 생각을 하면 모든 방향이 청소가 되어 있거나 벽일 경우면 다시 제자리 서쪽으로 돌아오게 될 것입니다. 이제 서쪽기준으로 후진을 하게 되면 (1,0) 만큼 후진을 진행하게 될 것입니다. 남쪽 기준으로 탐색을 한다고 하면 다시 남쪽으로 돌아온다면 (0,-1)만큼 후진을 진행하면 됩니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> back_dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> back_dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>이와 같이 후진하는 경우에 대해서도 배열형태로 확인을 할 수 있습니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  로봇청소기.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/09.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> back_dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> back_dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX_SIZE][MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> r,c,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 뒤에가 벽이라면 종료 시켜준다.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[r][c] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 현재 위치 청소</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[r][c] == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">map</span>[r][c] = <span class="number">2</span>;      <span class="comment">// 현재 위치 청소</span></span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//int next_dir = d-1 &lt; 0 ? 3 : d-1;</span></span><br><span class="line">        <span class="keyword">int</span> next_dir = (d+<span class="number">3</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> next_x = r + dx[next_dir];</span><br><span class="line">        <span class="keyword">int</span> next_y = c + dy[next_dir];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 빈칸 이면 청소</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[next_x][next_y] == <span class="number">0</span>)&#123;</span><br><span class="line">            dfs(next_x, next_y, next_dir);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 빈칸이 아닐 경우</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            d = next_dir;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4번의 방향을 모두돌고 다시 제자리로 돌아가는것이므로 만약에 0에서 시작해서 3까지 이동해서 모든 값들의 방향이 이동되어서 3일 경우 0의 자리로 돌아가주는것을 생각해주어야한다. 그리고 나서 후진을 한다.</span></span><br><span class="line">    <span class="keyword">int</span> next_x = r + back_dx[d]; <span class="comment">// 기존의 방향대로 회전시켜준다.</span></span><br><span class="line">    <span class="keyword">int</span> next_y = c + back_dy[d];</span><br><span class="line">    dfs(next_x, next_y, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(r,c,d);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 예산</title>
    <url>/budget/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12982" target="_blank" rel="noopener">프로그래머스 예산</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.</li>
<li>d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.</li>
<li>budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>이문제를 풀기 위해서 가장 중요한것은 처음에 이것을 DFS로 풀어야하나? 라는 생각을 했다는 것입니다. <code>최대 몇 개의 부서에 물품을 지원</code> 이라는 말에서 dfs를 통한 모든 개수를 구한 후 *max_element를 사용해서 값을 구하면 되지 않을까 라는생각을 하였습니다. 하지만 이 문제는 순열과 조합의 문제가 아니라 단순히 구현문제였습니다.</p>
<p>모든 예산을 sort()정렬을 시킨 후 가장 작은 예산의 문제부터 풀어나가면서 answer의 값을 +1 씩 늘려가면 최종적으로 최대 구할 수 있는 예산의 수를 확인할 수 있습니다.</p>
<p>그리고 budget 현재 예산에서 d[i]만큼을 값을 빼주면서 계속 진행해 나가면 됩니다. 작은값부터 이루어져 나가니 다른 경우는 신경쓸 필요가 없다는 것입니다.</p>
<p>왜 이것을 DFS로 풀려고 했을까? 맨처음 basement cnt를 둘까 sum을 둘까라는 고민을 하게되었는데 너무 어렵게 생각을 하게 되었습니다. 여러 조합을 끼워맞춰서 가장 큰 값을 구하려고 하였던것이 오류였습니다. 단순히 정렬한번만으로도 충분히 풀 수 있었던 그런 문제였습니다.</p>
<blockquote>
<p>요약</p>
</blockquote>
<p>그리디 알고리즘을 사용해서 d의 각 원소는 부서별로 신청한 금액을 오름차순 정렬 후 적은금액부터 예산을 처리합니다. 그리고 d의 요소들과 budget을 비교해나가면서 예산금액을 (budget - d)로 연산하면서 나갑니다. 단, budget이 0보다 클 경우에만 가능합니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d, <span class="keyword">int</span> budget)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    sort(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;d.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(budget - d[i] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            answer +=<span class="number">1</span>;</span><br><span class="line">            budget = budget - d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>카카오</tag>
        <tag>그리디</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 K번째수</title>
    <url>/k-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42748?language=java" target="_blank" rel="noopener">프로그래머스 K번째수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<ul>
<li>array의 길이는 1 이상 100 이하입니다.</li>
<li>array의 각 원소는 1 이상 100 이하입니다.</li>
<li>commands의 길이는 1 이상 50 이하입니다.</li>
<li>commands의 각 원소는 길이가 3입니다.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>K번째수는 정렬문제입니다. 문제에서 말해주는 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하는 문제입니다.</p>
<ul>
<li>i번째 숫자부터 j번째 숫자까지 자르고 나서 ArrayList를 사용하여 값들을 담아주게 하였습니다.</li>
<li>해당 값들은 Collections.sort()함수를 사용하여 오름차순으로 정렬시켜주었습니다.</li>
<li>리스트를 순회하면서 리스트의 인덱스값과 k-1값이 같은경우 answer값에 담아주었습니다. 왜 k-1의 값과 인덱스값을 비교하였을까요. i번째는 1부터 시작하고 배열이 0번 인덱스부터 할당되어 있기때문에 이렇게 풀이해주었습니다.</li>
</ul>
<blockquote>
<p>K번째수 예시</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">array가 [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>], i = <span class="number">2</span>, j = <span class="number">5</span>, k = <span class="number">3</span>이라면</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. array의 <span class="number">2</span>번째부터 <span class="number">5</span>번째까지 자르면 [<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>]입니다.</span><br><span class="line"><span class="number">2</span>. <span class="number">1</span>에서 나온 배열을 정렬하면 [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]입니다.</span><br><span class="line"><span class="number">3</span>. <span class="number">2</span>에서 나온 배열의 <span class="number">3</span>번째 숫자는 <span class="number">5</span>입니다.</span><br></pre></td></tr></table></figure>
<p>여기서 주의할점은 command가 2차원배열로 주어진다는것입니다. 그렇기때문에 commands [[2, 5, 3], [4, 4, 1], [1, 7, 3]] 의 경우 배열하나당 하나의 경우라고 생각하셔야합니다. return값이 3개를 반환하는것을 보면 확인하실 수 있습니다.</p>
<p>기존의 값들이 변하면 안되기때문에 해당 배열을 Arrays.copy() 를 사용하였고 List의 값을 매번 경우의 수마다 clear()시켜서 갱신시켜주었습니다. 갱신을 시켜주지 않으면 기존의 값들과 섞여서 올바르지 않은 결과값을 노출합니다.</p>
<blockquote>
<p>시간복잡도<br>
시간복잡도 같은 경우는 command.size를 N, array.size를 M으로 놓으면<br>
O(N*M) 이라고 할 수 있습니다. command의 길이는 1~50이하, arrays의 길이는 1~100이하 이기때문에 시간복잡도의 5000번의 정도의 연산이 이루어지므로 1초의 시간제한에 문제가 없습니다.</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">k</span>번째수 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] commands = &#123;&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;commands.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> copy[] = array.clone();</span><br><span class="line">            <span class="keyword">int</span> start = commands[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> end = commands[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> k = commands[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=start-<span class="number">1</span>; j&lt;end; j++)&#123;</span><br><span class="line">                ans.add(copy[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(ans);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;ans.size(); m++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(m == k-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(ans.get(k-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 모의고사</title>
    <url>/mock-test/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p>(프로그래머스 모의고사)[<a href="https://programmers.co.kr/learn/courses/30/lessons/42840" target="_blank" rel="noopener">https://programmers.co.kr/learn/courses/30/lessons/42840</a>]</p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …</p>
<p>2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, …</p>
<p>3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, …</p>
<p>1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
<h3 id="jehan-jogeon"><a href="#jehan-jogeon" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#제한-조건"></a> 제한 조건</h3>
<ul>
<li>시험은 최대 10,000 문제로 구성되어있습니다.</li>
<li>문제의 정답은 1, 2, 3, 4, 5중 하나입니다.</li>
<li>가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>모의고사 문제를 풀때 가장 중요한것은 수포자가 찍는 방식에 대한 패턴을 찾아내는것입니다.</li>
<li>1번~3번 수포자들의 패턴을 찾아보면</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> st1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st2[<span class="number">8</span>] = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st3[<span class="number">10</span>] = &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>다음과 같은 패턴을 찾을 수 있습니다.</p>
<blockquote>
<p>특정 패턴 규칙 구하기<br>
5번째마다 같은패턴 8번째마다 같은 패턴 10번째마다 같은 패턴 이것을 코드로 나타내면 어떻게 나타낼 수 있을까요?</p>
</blockquote>
<p>바로 (idx % 5),(idx % 8),(idx % 10) 의 형식으로 나타내면 5번째마다 패턴으로 규칙적으로 구할 수 있습니다.</p>
<p>예를 들어보겠습니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span> 일 경우 <span class="number">0</span> % <span class="number">5</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span> 일 경우 <span class="number">1</span> % <span class="number">5</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">2</span> 일 경우 <span class="number">2</span> % <span class="number">5</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">3</span> 일 경우 <span class="number">3</span> % <span class="number">5</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">4</span> 일 경우 <span class="number">4</span> % <span class="number">5</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">5</span> 일 경우 <span class="number">5</span> % <span class="number">5</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>i=0부터 시작하며 i번째는 시험문제라고 생각하겠습니다.</p>
<p>i가 5가 되는 순간 나머지는 0이 되게됩니다. 따라서 0~4까지 총 5번의 패턴을 확인할 수 있는것입니다.</p>
<p>만약 나머지값이 answer[i]과 같다면, 즉 문제의 정답과 같다면 문제의 정답의 개수를 늘려주는것입니다.</p>
<blockquote>
<p>가장 높은 점수 찾기</p>
</blockquote>
<p>그래서 총 3명의 수포자들중에서 가장 높은 점수를 얻은 사람을 winner을 구해주고 만약 다시 모든 수포자의 점수를 점수가 가장높은점수와 같을 경우 answer에 값을 넣어주게됩니다. answer에는 수포자의 1,2,3번중 가장높은 점수를 받은 사람이 들어가있게됩니다. (단, 여럿일 경우도 존재하므로 그부분도 확인해야합니다)</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> st1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st2[<span class="number">8</span>] = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st3[<span class="number">10</span>] = &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solution(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> winner;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st_score(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answers;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;answer.size(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(st1[i % <span class="number">5</span>] == answer[i])&#123;</span><br><span class="line">            st_score[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st2[i % <span class="number">8</span>] == answer[i])&#123;</span><br><span class="line">            st_score[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st3[i % <span class="number">10</span>] == answer[i])&#123;</span><br><span class="line">            st_score[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    winner = max(max(st_score[<span class="number">0</span>], st_score[<span class="number">1</span>]),st_score[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(winner == st_score[i])&#123;</span><br><span class="line">            answers.push_back(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 모의고사 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; winner = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] student1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] student2 = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] student3 = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] students = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] answers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] answer = &#123;&#125;; <span class="comment">// 출력값</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;answers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(student1[i % student1.length] == answers[i])&#123;</span><br><span class="line">                students[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(student2[i%student2.length] == answers[i])&#123;</span><br><span class="line">                students[<span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(student3[i%student3.length] == answers[i])&#123;</span><br><span class="line">                students[<span class="number">2</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> win = students[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 가장높은 점수를 받은 사람 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;students.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(win &lt; students[i])&#123;</span><br><span class="line">                win = students[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 같은 값을 가진 여럿사람일 경우도 있기때문에 확인을 해서 넣어줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;students.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(win == students[i])&#123;</span><br><span class="line">                winner.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = <span class="keyword">new</span> <span class="keyword">int</span> [winner.size()];</span><br><span class="line">        <span class="comment">// 가장 높은 점수를 가진사람의 값을 answer에 담아줍니다.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;winner.size();i++)&#123;</span><br><span class="line">            answer[i]=winner.get(i)+<span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>01.Rxjava와 리액티브 프로그래밍</title>
    <url>/reactive-programming-section01/</url>
    <content><![CDATA[<h1 id="what-is-rxjava"><a href="#what-is-rxjava" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#what-is-rxjava"></a> What is RxJava?</h1>
<p>자바(Java)에서 리액티브 프로그래밍(Reactive Programming)을 구현하는데 사용하는 <code>라이브러리</code>입니다.</p>
<p>이벤트 처리와 같은 <code>비동기</code> 처리에 최적화됐으며, <code>2.0버전부터 Reactive Streams 사양을 구현</code>합니다. Reactive Streams 사양을 구현합니다. Reactive Streams는 어떤 라이브러리나 프레임워크라도 데이터 스트림을 비동기로 처리하는 공통 메커니즘을 인터페이스로 제공합니다.</p>
<p>즉, <code>RxJava2.0</code>부터는 Reative Streams API를 의존하고 Reactive Streams를 제외한 다른 라이브러리는 의존하지 않습니다.  RxJava는 <code>함수형 리액티브(Functional Reactive Programming)</code>은 아니지만, 함수형 프로그램의 영향을 받아 함수형 인터페이스를 인자로 전달받는 메서드가 많습니다. 이러한 함수형 인터페이스를 사용하는 메서드들을 조합하면 함수형 프로그래밍을 하는 것 처럼 데이터를 <code>필터링하거나 변환</code>하는 등의 처리를 유연하게 할 수 있습니다.</p>
<h2 id="rxjavayi-jiweon-beojeon"><a href="#rxjavayi-jiweon-beojeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#rxjava의-지원-버전"></a> Rxjava의 지원 버전</h2>
<p><code>Java 6 버전</code> 이상과 <code>안드로이드2.3버전 진저브레드(gingerbread)이상</code>을 지원합니다.</p>
<h2 id="rxjava-gibon-culryeoghaebogi"><a href="#rxjava-gibon-culryeoghaebogi" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#rxjava-기본-출력해보기"></a> RxJava 기본 출력해보기</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxjavaOutput</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Flowable&lt;String&gt; flowable = Flowable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line">        flowable.subscribe(data-&gt; System.out.println(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ceori-sunseo"><a href="#ceori-sunseo" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#처리-순서"></a> 처리 순서</h2>
<ul>
<li>just 메서드 인자로 전달된 데이터를 통지하는 생산자(Flowable)를 생성합니다.</li>
<li>생산자가 데이터를 통지하면 소비자(람다식으로 구현된 함수형 인터페이스) 데이터 출력이 됩니다.</li>
</ul>
<h1 id="what-is-reactive-programming"><a href="#what-is-reactive-programming" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#what-is-reactive-programming"></a> What is reactive programming?</h1>
<p>데이터가 통지될 때마다 관련 프로그램이 반응(reaction)해 데이터를 처리하는 프로그래밍 방식입니다.</p>
<h2 id="example-of-reactive-programming"><a href="#example-of-reactive-programming" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-of-reactive-programming"></a> Example of reactive programming</h2>
<p>GPS위치 정보가 변경될 때의 데이터 전송 흐름을 상상해보면 이해하기 쉽습니다. 이동해 위치 정보가 변경될 때마다 데이터를 전송하고 이동을 멈추면 데이터전송을 중지하는 것처럼 생성되는 데이터를 한 번에 보내지 않고 각각의 데이터가 생성될 때마다 순서대로 보냅니다. 이러한 데이터의 흐름을 <code>데이터 스트림(data stream)</code> 이라고 합니다.</p>
<p>이미 생성된 데이터 집합인 <code>리스트(list)</code>같은 <code>컬렉션(collection)</code> 과는 다르게 앞으로 발생할 가능성이 있는 데이터 까지도 포함하는 데이터 집합체 입니다.</p>
<p>데이터 스트림은 이벤트와도 관련이 있어서 문자열을 입력하는 행위는 입력한 데이터가 순서대로 생성하는것으로 생각 할 수 있습니다.</p>
<p>예를 들어, <code>&quot;abc&quot;</code>라고 입력하면 입력 이벤트가 발생할때 다음과 같은 데이터가 생성된다고 생각할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. [a]</span><br><span class="line"><span class="number">2</span>. [ab]</span><br><span class="line"><span class="number">3</span>. [abc]</span><br></pre></td></tr></table></figure>
<p>마찬가지로 버튼을 누르는 행위에 대한 구체적인 데이터가 없더라도 버튼 이벤트와 같은 데이터가 생성된다고 생각할 수 있습니다. 버튼을 여러번 누른다면 <code>누른 횟수만큼 버튼을 누른다</code> 라는 이벤트가 발생할 수 있습니다.</p>
<p>즉, 이벤트도 발생할 때마다 데이터를 전송하는 데이터 스트림으로 다룰 수 있습니다. 데이터 스트림으로 데이터를 전달받은 프로그램이 그때마다 적절히 처리 할 수 있게 구성됐습니다.</p>
<p><strong>⇒ 결론적으로 필요한 데이터를 직접 가져와 처리하는것이 아니라 보내온 <code>데이터</code>를 <code>받은 시점에 반응</code>해 이를 처리하는 프로그램을 만드는것이 리액티브 프로그래밍입니다.</strong></p>
<p>또 다른 예로, 상품가격과 부가가치세 세율로 부가가치세를 계산하는 프로그램이 있다고 할때, 리액티브 프로그래밍이 아니라면 상품가격과 부가가치세 세율을 얻는 것만으로는 어떤 일도 일어나지 않습니다.</p>
<p>값을 얻은 후에 <code>부가가치세를 계산한다</code> 라는 <code>행위(action)</code>이 이루어져야 비로소 부가 가치세를 계산합니다. 또한, 부가 가치세를 계산한 후 상품가격이 변경되더라도 다시 계산처리 <code>행위</code>가 이루어지지 않는 한 부가가치세는 변경되지 않습니다.</p>
<h2 id="riaegtibeu-peurogeuraemingi-anilddae"><a href="#riaegtibeu-peurogeuraemingi-anilddae" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#리액티브-프로그래밍이-아닐때"></a> 리액티브 프로그래밍이 아닐때</h2>
<ol>
<li>입력한다</li>
<li>버튼이 눌린다</li>
<li>계산 결과를 표시한다</li>
</ol>
<p>상품 가격이 바뀌어도 세금계산 버튼을 누르지 않으면 부가가치세가 바뀌지 않는다.</p>
<h2 id="riaegtibeu-peurogeuraemingil-ddae"><a href="#riaegtibeu-peurogeuraemingil-ddae" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#리액티브-프로그래밍일-때"></a> 리액티브 프로그래밍일 때</h2>
<ol>
<li>입력한다</li>
<li>입력한 내용을 통지한다</li>
<li>통지를 받아 계산하고 결과를 표시한다</li>
</ol>
<p>상품가격이 바뀔 때마다 부가가치세가 자동으로 계산된다.</p>
<hr>
<p>상품 가격 변동을 감지하는 <code>리스너(listener)</code>를 이용해 자동으로 부가가치세를 계산하는 프로그램과 어떤 차이가 있는지 의문이 생길 수 있습니다.</p>
<p>예를 들어, 상품가격이 변경 될때 반응하면서 상품가격에 해당하는 부가가치세를 다시 계산해 표시하는 것을 리액티브 프로그래밍이라 할 수 없습니다.</p>
<p><code>리스너(listener)가 반응</code>하면서 부가가치세 항목에 <code>새로운 데이터가 전달되고 부가가치세 항목에서 계산 프로그램을 실행해 결과를 부가가치세로 표시</code>한다고 생각하면 리액티브 프로그래밍이라고 할 수 있습니다.</p>
<p>⇒ 리액티브 프로그래밍에서 데이터를 생산하는 측이 데이터를 전달하는것까지 책임집니다. 데이터를 생산하는측(상품가격)은 데이터를 전달하는것까지 책임집니다.  그러므로 데이터를 생산하는 측은 데이터를 소비하는 측(예 부가가치세)이 전달 받은 데이터로 무엇을 하는지 관여하지 않아도 됩니다.</p>
<p>데이터를 생산하는 측은 데이터를 소비하는 측에 무엇을 하든지 관계가 없으므로 <code>소비하는 측의 처리를 기다릴 필요가 없습니다.</code> 그러므로 데이터를 통지한 후 데이터를 소비하는 측에서 <code>데이터를 처리하는 도중</code>이라도 데이터를 생산하는 측은 <code>바로 다음 데이터를 처리</code> 할 수 있습니다.</p>
<h2 id="siseutem-gucugyi-gwanjeom"><a href="#siseutem-gucugyi-gwanjeom" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#시스템-구축의-관점"></a> 시스템 구축의 관점</h2>
<p>리액티브 프로그래밍은 <code>마이크로서비스(Miscroservice)</code>와 같이 분산 시스템으로 프로그램을 구현하는데 적합해 최근 주목을 받고 있습니다.</p>
<p><code>리액티브 프로그래밍(Programming)</code>과 <code>리액티브 시스템(System)</code>으로 부르지 않고 리액티브 시스템이 리액티브 프로그래밍으로 구현된 시스템을 의미하지 않기 때문입니다.</p>
<h2 id="riaegtibeu-siseutemiran"><a href="#riaegtibeu-siseutemiran" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#리액티브-시스템이란"></a> 리액티브 시스템이란?</h2>
<p>메시지를 보내 데이터를 처리하고 상황에 따라 스케일 아웃(scale out)과 스케일 인(scale in)을 자동으로 수행해 장애 내성을 높임으로써 항상 <code>빠르게 수용</code>할 수 있는 시스템을 말합니다.(인프라 조건+)</p>
<h1 id="rxjavayi-gaeyo"><a href="#rxjavayi-gaeyo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#rxjava의-개요"></a> RxJava의 개요</h1>
<p>에릭마이어가 개발한 .net 프레임워크의 실험적인 라이브러리인 Reactive Extensions 를 줄여서 2009년 마이크로소프트에서 공개하고 2013년 넷플릭스가 자바로 이식한 것이 Rxjava의 시작입니다.</p>
<p>현재 Reative Extensions를 다루는 라이브러리는 <code>ReactiveX</code> 라는 오픈소스 프로젝트로 바뀌어 Java, .Net, javascript, Swift 등 여러 프로그래밍 언어를 지원하고 있습니다.</p>
<p><code>RxJava 1.x버전</code> 때는 자바에 Reactive Extensions를 이식하는 개발이 진행됐고, 리액티브 프로그래밍 개념이 널리 알려지면서 Reactive Extensions와 별도로 여러 업체와 단체에서 데이터 스트림을 비동기로 다루는 라이브러리와 프레임워크를 출시하였습니다.</p>
<p>라이브러리, 프레임워크 차이로 단체들이 데이터 스트림을 비동기로 다루는 최소한의 API를 정하고 제공했습니다. <code>2015년 4월 자바기반의 Reactive Streams for JVM</code> 버전이 <code>1.0.0</code>을 릴리즈하게 되었습니다.</p>
<p><code>Rxjava 1.x버전</code>때는 Reative Streams를 지원하지 않았지만, <code>Rxjava 2.x버전</code>때는 Reative Streams를 지원하여 2016년 10월에 Rxjava2.0이 릴리즈 되었습니다. Rxjava2.0버전부터 내부를 완전히 새롭게 구현하여 성능개선과 배압(back pressure) 사양에 따라 사용하는 API가 변경됐습니다.</p>
<p>그리고, Rxjava 1.x버전에서 2.x버전으로 전환할 때는 API 변경 작업도 반영해야 하므로 2.x버전으로 간단하게 전환할 수가 없습니다. 그 이유는 <code>내부구현을 모두 바꾸었기 때문입니다.</code></p>
<ul>
<li>버전별 루트 패키지</li>
</ul>
<table>
<thead>
<tr>
<th>버전</th>
<th>패키지</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.x</td>
<td>rx</td>
</tr>
<tr>
<td>2.x</td>
<td>io.reactivex</td>
</tr>
</tbody>
</table>
<p>따라서, RxJava의 두 버전을 같은 프로젝트에 함께 사용할 수는 있으나 프로젝트 내부에서 Rxjav에 의존하는 다른 라이브러리를 사용한다면 라이브러리가 어떤 버전을 지원하느냐에 따라 두 버전을 함께 사용하지 못할 수도 있습니다.</p>
<ul>
<li>두 버전을 사용하는것은 바람직 하지 않습니다.</li>
</ul>
<p>Rxjava의 실험적인 API가 있습니다. 해당 에너테이션이 붙어 있는것은 <code>개발중이거나 실험중인 API</code>입니다.</p>
<ul>
<li>@Beta @Experimental</li>
</ul>
<p>추가로 <code>io.reactivex.internal</code>로 시작하는 패키지에 있는 클래스는 <code>Rxjava 내부</code>에서 기본으로 사용하는 클래스입니다. 가능하면 클래스에 의존하지 않는 편이 더 낫습니다.</p>
<h1 id="rxjavayi-teugjing"><a href="#rxjavayi-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#rxjava의-특징"></a> RxJava의 특징</h1>
<p>Rxjava는 디자인 패턴인 옵저버(Observer)패턴을 잘 확장했습니다.</p>
<h2 id="objeobeopaeteoniran"><a href="#objeobeopaeteoniran" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#옵저버패턴이란"></a> 옵저버패턴이란?</h2>
<p>감시 대상 객체의 상태가 변하면 이를 관찰하는 객체에 알려주는 구조입니다. 이 패턴의 특징을 살리면 데이터를 생성하는 측과 데이터를 소비하는 측으로 나눌 수 있습니다.</p>
<p>또한, 옵저버패턴에 완료와 에러통지를 할 수 있어서 모든 데이터 통지가 끝나거나 에러가 발생하는 시점에 별도로 대응해줄수도 있습니다.</p>
<h2 id="bidonggi-ceori"><a href="#bidonggi-ceori" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#비동기-처리"></a> 비동기 처리</h2>
<p>Rxjava의 또 다른 특징으로 쉬운 비동기 처리를 들 수 있습니다. Reactive Streams 규칙의 근간이 되는 <code>Observable규약</code> 이라는 Rxjava개발 가이드라인을 따른 구현이라면 직접 스레드(thread)를 관리하는 번거로움에서 해방되고 구현도 쉽게 가능합니다. 또한, 동기 처리나 비동기 처리나 구현 방법에는 큰 차이가 없는 것도 Rxjava의 특징입니다.</p>
<p>RxJava는 함수형 프로그래밍의 영향을 받아 함수형 인터페이스로 인자를 전달받는 메서드를 사용해 대부분의 처리를 구현합니다. 입력과 결과만 정해져 있으면 구체적인 처리는 개발자에게 맡길 수 잇으므로 더욱 자유로운 구현이 가능합니다.</p>
<h2 id="hamsuhyeong-peurogeuraemyi-weoncig"><a href="#hamsuhyeong-peurogeuraemyi-weoncig" class="header-anchor">4.3. </a><a class="markdownIt-Anchor" href="#함수형-프로그램의-원칙"></a> 함수형 프로그램의 원칙</h2>
<ul>
<li>처리 작업의 영향 범위를 좁힐 수 있고 동시에 복잡하지않게 비동기 처리를 할  수 있습니다.</li>
</ul>
]]></content>
      <categories>
        <category>RXJAVA</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>리액티브프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 연구소 14502</title>
    <url>/beakjoon-laboratory-14502/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 연구소 14502</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>연구소는 크기가 <code>N×M</code>입니다.</li>
<li>연구소에서 <code>빈곳 0, 벽 1, 바이러스 2</code>의 값이 주어지게 됩니다.</li>
<li>벽을 3개만 세운 뒤 바이러스가 퍼질 수 없는 안전영역의 최댓값을 구하는 문제입니다.</li>
<li>지도의 세로 크기 N과 가로 크기 M (3 ≤ N, M ≤ 8)</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p><code>0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</code> 라는 조건이 있는 문제입니다.</p>
<p>이 문제를 풀때 가장 중요한점은 DFS로 접근해야 하는가? BFS로 접근해야 하는가를 많이 고민하였던 문제였습니다.</p>
<p>Basement  조건이 <code>벽을 3개</code> 세울 때 조합의 경우의 수를 사용하기 위해서 DFS를 사용하였으며, 연구소에서 바이러스들이 전염시키는 과정은 BFS로 풀이를 진행하였습니다.</p>
<ul>
<li>값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 됩니다.</li>
<li>빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</li>
<li>DFS 에서의 수행은 빈칸의 개수가 기준이 되므로 empty_size를 선언해서 받아오게 하였습니다.</li>
<li>CNT 값이 3일 경우 3개의 벽을 모두 세운 경우이므로 기존의 값은 변화가 되면 안되기때문에 맵을 Copy시켜줍니다.</li>
<li>이제 BFS를 수행하기위해 각각의 경우에 있어서 Check변수가 1일 경우에만 벽을 세워주게 됩니다.</li>
<li>바이러스가 전파시에 <code>현재 바이러스의 값 2</code>인 좌표 (x,y)의 점을 기준으로 <code>BFS</code>를 수행합니다.</li>
<li>모든 BFS경우를 돌고나서 아직 전염되지 않은 값이 있는곳이 <code>안전지대</code>입니다. 그 곳의 값을 <code>safe_size 카운팅</code> 시켜줍니다.</li>
<li>각 경우마다 안전영역의 최대의 값을 구해주어야하므로 최댓값을 갱신시켜줍니다.</li>
<li>각 경우마다 경우의 수가 달라지므로 visited 변수를 초기화 시켜줍니다.</li>
</ul>
<blockquote>
<p>즉, DFS 반복 → basement 확인 → BFS (x,y)좌표로 부터 바이러스 전염 → 안전영역의 최댓값</p>
</blockquote>
<h1 id="puli-kodeu"><a href="#puli-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이-코드"></a> 풀이 코드</h1>
<blockquote>
<p>C++</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  연구소14502.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/07.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> copy_map[MAX][MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; empty;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> empty_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> check[MAX*MAX];     <span class="comment">// size를 MAX * MAX를 해준이유는 빈칸이 N*M까지 나올 수 있기 때문입니다.</span></span><br><span class="line"><span class="keyword">int</span> visited[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    visited[x][y] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[mx][my] == <span class="number">0</span> &amp;&amp; copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    visited[mx][my] = <span class="number">1</span>;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    q.push(&#123;mx,my&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">        <span class="comment">// 기존의 맵을 변경시키면 안되기때문에 값을 카피시켜줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 벽을 세우기 하나의 경우마다의 벽을 세워야함.</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;empty_size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = empty[i].first;</span><br><span class="line">                <span class="keyword">int</span> y = empty[i].second;</span><br><span class="line">                copy_map[x][y] = <span class="number">1</span>;</span><br><span class="line">                count +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// virus 전염시키기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;virus.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = virus[i].first;</span><br><span class="line">            <span class="keyword">int</span> y = virus[i].second;</span><br><span class="line">            bfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> safe_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe_size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans &lt; safe_size)&#123;</span><br><span class="line">            ans = safe_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 조합의 형식으로 3개가 뽑힐때까지 뽑았다가 종료되는 시점에 그 값을 다시 false로 만들고 다시 조합의 경우를 뽑습니다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;empty_size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 된다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 0: 빈칸</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                empty.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2: 바이러스</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                virus.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</span></span><br><span class="line">    empty_size = empty.<span class="built_in">size</span>();</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JAVA</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copy_map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Dot&gt; virusList = <span class="keyword">new</span> ArrayList&lt;Dot&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir =&#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wallDfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map Copy</span></span><br><span class="line">            copyMapFunc();</span><br><span class="line">            <span class="comment">// virus spread</span></span><br><span class="line">            <span class="keyword">for</span>(Dot dot : virusList)&#123;</span><br><span class="line">                virusSpreadBfs(dot.x, dot.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// safe Area</span></span><br><span class="line">            ans = Math.max(ans, getSafeArea());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n * m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i / m;</span><br><span class="line">            <span class="keyword">int</span> y = i % m;</span><br><span class="line">            <span class="keyword">if</span>(map[x][y] == <span class="number">1</span> || map[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            wallDfs(i+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">            map[x][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 맵 카</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyMapFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 바이러스 퍼트리기</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpreadBfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    virusSpreadBfs(mx,my);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 안전영역 개수 체크</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSafeArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> safe = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> safe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    4 6</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">    1 0 0 0 0 2</span></span><br><span class="line"><span class="comment">    1 1 1 0 0 2</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        copy_map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                    virusList.add(<span class="keyword">new</span> Dot(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        wallDfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 같은숫자는 싫어</title>
    <url>/dont-like-same-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12906#" target="_blank" rel="noopener">프로그래머스 같은숫자는 싫어</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,</p>
<p>arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.<br>
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.<br>
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>연속되는 같은 숫자를 체크해서 넣어주면 되는 문제입니다.</li>
<li>연속되는 같은 숫자를 체크하기위해서는 가장 맨처음에 있는 값을 answer값에 넣어주게 됩니다.<br>
맨처음에 있는값을 answer값에 넣어주는이유는 첫번째 연속되는 숫자값은 신경쓰지 않고 그다음부터나오는 값들로만 값을 체크하기 위해서입니다.</li>
<li>두값을 비교해나가면서 앞에있는 값과 뒤에 있는 값이 같지않을경우 해당 값을 넣어주게됩니다.</li>
<li>주의해야할점은 숫자하나만 남기고 전부 제거해야합니다.<br>
처음에 잘못생각하였던 부분이 연속되는부분만 반환되는줄 알았지만 예를 들어, [0,0,1]일 경우 answer = [0,1] 이 반환되게 됩니다. 이부분만 잘 주의하신다면 잘구현하실 수 있을것입니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 같은숫자는싫어 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    answer.add(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i-<span class="number">1</span>] != arr[i])&#123;</span><br><span class="line">            answer.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Integer a : answer)&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 윤년</title>
    <url>/leap-year/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12901" target="_blank" rel="noopener">프로그래머스 2016</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT</p>
<p>입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요.</p>
<p>제한 조건<br>
2016년은 윤년입니다.<br>
2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>1월 1일은 금요일이므로 금요일부터 값을 시작시킨다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>윤년은 1월부터 12월 까지 해당 값을 가진다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span></span><br></pre></td></tr></table></figure>
<ul>
<li>해당 a월까지의 값을 sum에 더해주면서 진행한다.<br>
sum값에는 a월까지의 더한 값이 있다.</li>
<li>모두 더해진 sum값에 1월 1일이 포함되어있는 값을 빼준다.<br>
해당 b일도 sum값에 추가해준다.<br>
위에 모든달에는 1월1일이 포함된 값이다 따라서 -1을 해주어야한다.</li>
<li>윤년은 모든일수에 % 7 을 나눈 나머지를 뜻한다.<br>
몫이 아니라 나머지라는것에 주의한다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> month[] = &#123; <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        String[] day = &#123;<span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;a; i++)&#123;</span><br><span class="line">            sum += month[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1월1일도 포함되어있으므로 -1</span></span><br><span class="line">        sum += (b-<span class="number">1</span>);</span><br><span class="line">        answer = day[sum % <span class="number">7</span>];</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 소수</title>
    <url>/prime-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12921" target="_blank" rel="noopener">프로그래머스 소수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.</p>
<p>소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.<br>
(1은 소수가 아닙니다.)</p>
<p>제한 조건<br>
n은 2이상 1000000이하의 자연수입니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>에라토스테네스의 체를 사용합니다.</li>
<li>일반 소수처럼 구현하게 되면 효율성에서 통과를 하지 못합니다.</li>
</ul>
<blockquote>
<p>에라토스테네스의 체 원리<br>
1부터 N까지의 모든 소수를 구하려면 에라토스테네스의 체를 사용한다</p>
</blockquote>
<p>1.2부터 N까지 모든 수를 써놓는다<br>
2.아직지워지지 않은수중에서 가장 작은값을 찾는다<br>
3. 해당 소수 값은 소수가 된다.<br>
4. 이제 그수의 배수를 모두 지운다.</p>
<p>해당원리를 가지고 에라토스 테네스의 체를 구현하게된다면 쉽게 구할수 있습니다.</p>
<p>에라토스테네스의 체를 쓰면서 두가지 경우를 실험하였는데, 하나의 경우는 효율성에서 통과를 하지 못하였고, 하나는 통과를 하였습니다. 그 이유가 있었는데 내부 for문에서 N의 크기에 따라 i<em>i를 할지 i</em>2, i+i의 값에 따라 효율성이 달라지게 됩니다. 그 이유는 i가 100만일 경우 i*i는 100만을 넘어가기 때문입니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<blockquote>
<p>효율성 실패</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 소수찾기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1000001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        check[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        check[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i; j&lt;=n; j+=i)&#123;</span><br><span class="line">                    check[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>효율성 통과</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 소수찾기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1000001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        check[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        check[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i; j&lt;=n;j+=i)&#123;</span><br><span class="line">                    check[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>소수</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 문자열내 p와 y의 개수</title>
    <url>/string-p-y-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12916" target="_blank" rel="noopener">프로그래머스 문자열내 p와 y의 개수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 'p’의 개수와 'y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. ‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.</p>
<p>예를 들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>String toLowerCase를 사용하여 모두 소문자로 바꿔준후 개수를 체크하여 리턴하였습니다.</li>
<li>만약 p와 y가 하나도 없다면 기존 Boolean true값을 리턴하게 됩니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line">        Boolean answer = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'p'</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'y'</span>)&#123;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == s.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">                    answer = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 두 정수 사이의합</title>
    <url>/two-number-between-sum/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12912?language=java" target="_blank" rel="noopener">프로그래머스 두 정수 사이의 합</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.<br>
예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.</p>
<p>제한 조건<br>
a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.<br>
a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.<br>
a와 b의 대소관계는 정해져있지 않습니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>a &gt; b 보다 크거나 같을 경우 for문의 범위를 b&lt;=a로 지정한다.</li>
<li>a &lt; b 보다 작거나 같을 경우 for문의 범위를 a&lt;=b로 지정한다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 두정수사이의합 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &gt;= b) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=b; i&lt;=a; i++)&#123;</span><br><span class="line">                answer += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt;= b)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=a; i&lt;=b; i++)&#123;</span><br><span class="line">                answer += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 서울에서 김서방 찾기</title>
    <url>/mr-kim-search/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12919?language=java" target="_blank" rel="noopener">프로그래머스 서울에서 김서방 찾기</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>String형 배열 seoul의 element중 Kim의 위치 x를 찾아, 김서방은 x에 있다는 String을 반환하는 함수, solution을 완성하세요. seoul에 Kim은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.</p>
<p>제한 사항<br>
seoul은 길이 1 이상, 1000 이하인 배열입니다.<br>
seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.<br>
Kim은 반드시 seoul 안에 포함되어 있습니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>문자열을 정수로 변환해서 출력시킬 수 있는지에 관한 문제입니다.</li>
<li>문자열을 정수로 변환 String to int Integer.parseInt()</li>
<li>정수를 문자열로 변환 int to String Integer.toString()</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 서울에서김서방찾기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] seoul = &#123;<span class="string">"Jane"</span>,<span class="string">"Kim"</span>&#125;;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;seoul.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(seoul[i].equals(<span class="string">"Kim"</span>))&#123;</span><br><span class="line">                answer += (<span class="string">"김서방은"</span> +Integer.toString(i)+ <span class="string">"에 있다"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>string-desc-arrange</title>
    <url>/string-desc-arrange/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12917?language=java" target="_blank" rel="noopener">프로그래머스 문자열 내림차순으로 배치하기</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.<br>
s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>String문자열을 toCharArray() 함수를 사용하여 char[] 배열형태로 변환시켜줍니다.</li>
<li>Arrays.sort를 사용해서 오름차순 정렬을 해준 후에 역순으로 answer문자열에 값을 더해줍니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열을내림차순으로배치하기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"Zbcdefg"</span>;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span>[] ch = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(ch);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ch.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            answer += ch[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(answer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">정렬 예시</span></span><br><span class="line"><span class="comment">sort(T[] a, Comparator&lt;? super T&gt; c)</span></span><br><span class="line"><span class="comment">Arrays.sort(a, Collections.reverseOrder());</span></span><br><span class="line"><span class="comment">Collections.sort(list, Collections.reverseOrder());</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>정렬</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연산자끼워넣기2 15658</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%97%B0%EC%82%B0%EC%9E%90%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B02-15658/</url>
    <content><![CDATA[<p><a href="https://www.acmicpc.net/problem/15658" target="_blank" rel="noopener">연산자끼워넣기(2)15658</a></p>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<blockquote>
<p>DFS</p>
</blockquote>
<ul>
<li>재귀호출로 백트래킹으로 구해줍니다.</li>
<li>연산자끼워넣기 1번문제와 같은 원리입니다. 정답 또한 같습니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<blockquote>
<p>DFS 백트래킹</p>
</blockquote>
<ul>
<li>맨처음 dfs(v,1,v[0],plus,minus,multi,div); 호출할 때 왜 idx = 1로 시작하고, sum의 값을 v[0]의 값을 넘겨주는가에 대한 의문을 갖고 계신분들이 있습니다. idx를 1로 시작한 이유는 곱하기나, 나눗셈의 경우에서 sum의 값이 0일 경우 올바르지 않은 값이 연산되게 됩니다. 따라서, v[0] (+, -, *, /) v[1] 의 형태로 연산이 되게 됩니다. 따라서 올바른 값을 구할 수 있습니다. 곰곰히 생각해보시면 어떤 말씀인지 알 것이라 생각합니다.</li>
<li>입력받은 plus,minus,multi,div의 개수를 0보다 클 경우에는 계속해서 재귀호출을 합니다.</li>
<li>시간복잡도 계산 총 연산자(+,-,*,/) 4개의 연산자이고, 총 N은 (2&lt;=N&lt;=11) 11까지 이므로 4^10 = 1048570의 복잡도를 가지게 됩니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>만약 v.size() == idx 모든 원소의 개수를 확인하였을 경우에 현재 sum값을 res 벡터에 값을 넣어줍니다. 그 후 <code>auto p = minmax_element(res.begin(), res.end());</code>를 사용하여 최댓값과 최솟값을 구해주게 됩니다. 이렇게 구하지 않고도 문제의 조건에서보면  <code>최댓값과 최솟값이 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다</code> 라는 조건이 있습니다.<br>
이러한 것들에 따라 값을 max함수와 min함수를 사용하면서 최댓값과 최솟값을 구해줍니다.<br>
다른분들의 풀이를 보니 이런식으로 사용하시는것을 보고 배우게 되었습니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxResult = -MAX, minResult = MAX;</span><br><span class="line"> maxResult = <span class="built_in">max</span>(maxResult, sum);</span><br><span class="line"> minResult = <span class="built_in">min</span>(minResult, sum);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; maxResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; minResult &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-puli"><a href="#dfs-baegteuraeking-puli" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-풀이"></a> DFS 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  12_백준_연산자끼워넣기2_15658.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> sum, <span class="keyword">int</span> idx, <span class="keyword">int</span> plus, <span class="keyword">int</span> minus, <span class="keyword">int</span> multi, <span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        res.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum+v[idx],idx+<span class="number">1</span>, plus<span class="number">-1</span>,minus,multi,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum-v[idx],idx+<span class="number">1</span>, plus,minus<span class="number">-1</span>,multi,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum*v[idx],idx+<span class="number">1</span>, plus,minus,multi<span class="number">-1</span>,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum/v[idx],idx+<span class="number">1</span>, plus,minus,multi,div<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">int</span> plus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> multi=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cal=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cal;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            plus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            minus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            multi = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            div = cal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(v, v[<span class="number">0</span>],<span class="number">1</span>,plus, minus, multi, div);</span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">" "</span> &lt;&lt;  *p.first;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>DFS</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 퇴사 14501</title>
    <url>/%EB%B0%B1%EC%A4%80%ED%87%B4%EC%82%AC14501/</url>
    <content><![CDATA[<h2 id="baegjuntoesa14501"><a href="#baegjuntoesa14501" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준퇴사14501"></a> <a href="https://www.acmicpc.net/problem/14501" target="_blank" rel="noopener">백준퇴사14501</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>백트래킹 재귀호출</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>맨 처음에 조합으로 next_permutation을 사용해서 해당 T[i]만큼 false를 만들면서 오는 경우를 찾으면 어떨까 라고 생각하였지만, 직감적으로 쉽지않다는것을 느꼈습니다. 그래서 재귀함수로 풀어보자 라는 생각으로 풀게되었습니다.</li>
<li>이 부분이 가장 중요한 부분입니다. 재귀 백트래킹으로 <code>idx==n+1</code>과 같을때 <code>basement 정답을 찾았을 경우를 확인</code>하였습니다. 그리고 idx값이 n+1보다 클 경우 조건에 퇴사할 수 없으므로 <code>return으로 종료</code>시켜주었습니다.</li>
<li>기존것과 다르게 이것은 선택할지 말지에 대한 경우를 잘 확인해주어야합니다. 예를 들면, [1,2,3,4,5]라는 T배열이있다고 가정하면 1,2,3,4,5라는 값을 모두 사용하는것이 아니라 날짜가 <code>n+1과 같은경우</code>를 찾는 경우이기 때문에 1,2,3,4,5라는 값을 모두 사용할 수 있고, 최소 하나이상의 값만 사용할 수 있습니다.</li>
<li>너무 습관적으로 for문안에다가 재귀함수를 호출하였는데, 이 문제는 조합이나 순열문제가 아니라 말그대로 브루트포스문제였습니다. for을 작성하게 되면 1,2,3,4,5의 모든 값에 대한 경우의 수를 확인하는것입니다. 익숙함에 속아버렸습니다.</li>
<li>dfs를 호출할때 이것도 무의식적으로 <code>dfs(0,0)</code>을 호출하였는데, 문제의 조건에서 보면 <code>최소 1일</code>부터이기 때문에 초기조건을 1부터 시작하였습니다.<code>idx는 상담일 day와 같습니다.</code></li>
<li>최대값을 찾아주는것은 max_num이라는 변수를 활용하여서 그때마다 비교해서 업데이트를 해주었습니다. max_elements를 사용할 수도 있었지만, 빠르게 비교해주기위해서 이런 로직을 사용하였습니다.</li>
</ul>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="baegteuraeking-dfs"><a href="#baegteuraeking-dfs" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#백트래킹-dfs"></a> 백트래킹 DFS</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  11_백준_퇴사_14501.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 17/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max_num)&#123;</span><br><span class="line">            max_num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(sum+P[idx], idx+T[idx]);</span><br><span class="line">    dfs(sum,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; T[i] &gt;&gt; P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>혹시라도 0,1에서 왜 시작하는거지? 라는 의문이 있으신분은 아래와 같이 구현하여도 상관은 없습니다. 단지 문제의 조건에 부합시키기 위해 위와 같이 작성한것 뿐입니다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  11_백준_퇴사_14501.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 17/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max_num)&#123;</span><br><span class="line">            max_num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(sum+P[idx], idx+T[idx]);</span><br><span class="line">    dfs(sum,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; T[i] &gt;&gt; P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 부분수열의합 1182</title>
    <url>/%EB%B0%B1%EC%A4%80%EB%B6%80%EB%B6%84%EC%88%98%EC%97%B4%EC%9D%98%ED%95%A91182/</url>
    <content><![CDATA[<h2 id="baegjun-bubunsuyeolyihab-1182"><a href="#baegjun-bubunsuyeolyihab-1182" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-부분수열의합-1182"></a> <a href="https://www.acmicpc.net/problem/1182" target="_blank" rel="noopener">백준 부분수열의합 1182</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>재귀호출 사용, 조합 사용</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>next_permutation을 사용한 조합을 이용한 풀이 방법 1<br>
순열과 조합중 조합을 사용하여 각각의 부분집합의 경우를 모두 구해준다. 하나씩 check변수에 모든 값을 true로 바꾸어준 후, 맨 앞에 있는 값들을 false로 바꾸면서 모든 부분집합의 경우를 구해준다.</p>
</li>
<li>
<p>재귀함수 백트래킹을 이용한 풀이 방법 2</p>
</li>
</ul>
<ol>
<li><code>m == 0 일때 공집합</code>을 빼주어야한다. 양수라고 하였음. 정수에서 양수의 크기만 가지므로 공집합은 제외해야함</li>
<li>int cnt = 0;의 값이 계속초기화된다고 할 수 있지만, 결과값 반환할때는 그값이 더해진값만 반환된다.</li>
<li><strong>경우의 수</strong> 의 문제임 따라서, 그값이 1로반환되어 한번의 경우의수 0번의 경우의수를 반환하여 더해가다보면 최종 경우의 수를 반환하게 된다.</li>
<li>정답일 경우는 sum == m이 같고, cnt ==값이 5개일때만 가능하다.</li>
<li>비정답일 경우는 sum == m이 아닌경우에 cnt==값이 5개 일경우는 불가능하다.<br>
예를 들면, 도달했지만 값이 다를 수 있음 반례임</li>
</ol>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<p>재귀 백트래킹 풀이 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> n,<span class="keyword">int</span> m, <span class="keyword">int</span> idx, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ans.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            s += ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == m)&#123;</span><br><span class="line">            cnt +=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        ans.push_back(v[i]);</span><br><span class="line">        dfs(v,n,m,i,sum);</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,n,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>재귀 백트래킹 풀이 2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> m, <span class="keyword">int</span> cnt,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 합이 m과 같을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">            ans +=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,m,cnt+<span class="number">1</span>,sum+v[cnt]);</span><br><span class="line">    dfs(v,m,cnt+<span class="number">1</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//공집합 빼주기</span></span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">        ans -=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>next_permutation 조합 풀이</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">bool</span> check[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] != <span class="literal">true</span>)&#123;</span><br><span class="line">                    sum += v[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">                cnt +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(check,check+n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
        <tag>조합</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 암호만들기 1759</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%95%94%ED%98%B8%EB%A7%8C%EB%93%A4%EA%B8%B01759/</url>
    <content><![CDATA[<h2 id="baegjunamhomandeulgi1759"><a href="#baegjunamhomandeulgi1759" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준암호만들기1759"></a> <a href="https://www.acmicpc.net/problem/1759" target="_blank" rel="noopener">백준암호만들기1759</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li><code>Recursive</code>를 활용한 풀이 <code>백트래킹 두가지 방법</code>으로 풀겠습니다.</li>
<li>include<algorithm>헤더에 sort함수를 사용하겠습니다. 그 이유는 사전식으로 가능성 있는 암호를 모두 출력한다. 라는 조건이 있기 때문입니다.</algorithm></li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>
<p>조합의 방식으로 풀어야합니다. 어떻게 조합으로 풀어야된다는 생각을 하였을까요? 문자의 종류는 C가지, 암호는 서로 다른 L개의 알파벳 소문자들로 구성된다고 문제에 나와있다. 이것이 뜻하는 바는 바로 <code>C개의 문자중 L개를 뽑는 방식이다</code> 결국 조합을 나타내는 문제라는 것입니다.</p>
</li>
<li>
<p>백트래킹을 푸는 방식은 두가지 방법이 있습니다. 개인마다 풀이의 차이이긴 하나 개인적으로 1번풀이로 진행합니다.</p>
</li>
</ul>
<ol>
<li>vector와 check변수를 활용한 풀이</li>
<li>vector 알파벳을 선택하는 recursive(), 알파벳을 선택하지 않는 recursive()</li>
</ol>
<ul>
<li>
<p>재귀함수 호출시 <code>idx변수와 cnt변수</code>를 사용합니다. <code>Idx변수는 시작점을 결정해주는 변수</code>, <code>cnt는 몇 개를 뽑아야하는지 그리고 재귀 호출 종료 해당 basement 조건</code>이 됩니다.</p>
</li>
<li>
<p>그리고, 조합은 순열과 다르게 해당 지정된 idx값 이하의 값들은 구성하지 않습니다. 예를 들어, <code>123 213 312</code> 는 <code>모두 동일한 경우</code>로 생각합니다. 조합을 구현하기 위해서는 check배열변수와 알파벳을 담기위한 vector<char>를 선언합니다.</char></p>
</li>
<li>
<p>해당값이 사용되었더라면 <code>check[i] == true로 확인하여 continue</code>를 진행합니다. 그리고 나서 다음 반복문 수가 진행되면서 해당값이 사용되지 않았다면 해당 값을 <code>check=true</code>를 진행하고, vector에 해당되는 알파벳을 <code>push_back</code>을 해주게됩니다. 그리고나서 재귀호출을 하면서 cnt+1의 값을 해주며 idx의 값은 i의 값을 넣어주면서 진행합니다. cnt값은 내가 고를 값이며, <code>idx의 값은 해당 기준이 되는 값이기때문에 반복문을 돌면서 해당값에 대한 재귀호출</code>을 반복하게 하게됩니다.</p>
</li>
<li>
<p>만약 cnt의 값이 내가 구하고자하는 n의 값과 같다면 해당 경우를 구한것이기 때문에 실질적인 로직을 작성합니다.</p>
</li>
<li>
<p><code>알파벳은 자음 21가지, 모음 [a,e,i,o,u] 5가지</code>로 구성됩니다. 따라서, push_back으로 넣었던 vector의 값을 하나씩 꺼내면서 해당 알파벳이 <code>[a,e,i,o,u]</code>중에 하나 일 경우 모음에 대한 개수를 증가시켜주고, 이와반대로 자음일 경우 자음의 개수를 증가시켜줍니다.</p>
</li>
<li>
<p>모음의 개수는 1이상이여야하고, 자음의 개수는 2이상이여야합니다. 만약 이 해당되는 조건에 만족한다면 해당 vector에 있는 값을 모두 출력시켜주게 됩니다.</p>
</li>
<li>
<p>그리고, Return값으로 해당 재귀함수가 종료되고나서 check=false로 방문을 해제시키고, 마지막에 들어있던 벡터값도 빼주게 됩니다. 그리고나서 다음에 해당하는 경우의 수로 재귀함수가 호출되면서 조합에 대한 모든경우를 구할 수 있게됩니다.</p>
</li>
<li>
<p><code>idx변수는 해당 기준이 되는점이고, cnt는 해당종료 조건(몇개를 뽑을지 조건)입니다.</code></p>
</li>
<li>
<p><code>2번 백트래킹방식으로 사용할 경우 선택한 경우, 선택하지 않은경우를 cnt값을 더해주는지 안더해주는지 경우로 나누어서 재귀호출이 진행되게 됩니다. 2번방식은 개인적으로 직관적인 판단하기가 힘들고 1번방식이 직관적인 이해가 더 쉬웠습니다.</code></p>
</li>
<li>
<p><code>조합과 반대로 순열은 idx변수가 사라지게 됩니다. 왜냐하면 기준이 되는점을 확인해야합니다. 예를 들어서 [1,2,3,4,5] [2,1,3,4,5]는 조합과 다르게 다른경우의 수로 나타냅니다. 조합은 저것을 하나의 경우의수로 판단하기 때문입니다. 그리고 순열은 idx를 사용하지 않으므로 해당되는 모든값에 첫번째 값부터 다시 확인을 진행한다는 차이점이 있습니다.</code></p>
</li>
</ul>
<h3 id="dfs-baegteuraeking-1beon-bangsig"><a href="#dfs-baegteuraeking-1beon-bangsig" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-1번-방식"></a> DFS 백트래킹 1번 방식</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; str;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ja = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'a'</span> || str[i] == <span class="string">'e'</span> || str[i] == <span class="string">'i'</span> || str[i] == <span class="string">'o'</span> ||str[i] == <span class="string">'u'</span>)&#123;</span><br><span class="line">                mo +=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ja +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mo &gt;=<span class="number">1</span> &amp;&amp; ja &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        str.push_back(v[i]);</span><br><span class="line">        dfs(v,m,n,i,cnt+<span class="number">1</span>);</span><br><span class="line">        str.pop_back();</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    dfs(v,m,n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-2beonbangsig"><a href="#dfs-baegteuraeking-2beonbangsig" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-2번방식"></a> DFS 백트래킹 2번방식</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">string</span> str, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(str.length() == n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ja=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mo=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'a'</span> || str[i] == <span class="string">'e'</span>|| str[i] == <span class="string">'i'</span> || str[i] == <span class="string">'o'</span> || str[i] == <span class="string">'u'</span>)&#123;</span><br><span class="line">                mo +=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ja +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mo &gt;= <span class="number">1</span> &amp;&amp; ja &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v.<span class="built_in">size</span>() == idx)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//알파벳 선택 하는 경우</span></span><br><span class="line">    dfs(v,n,m,str+v[idx],idx+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//알파벳 선택 하지 않는 경우</span></span><br><span class="line">    dfs(v,n,m,str,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    dfs(v,n,m,<span class="string">""</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연산자끼워넣기 14888</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%97%B0%EC%82%B0%EC%9E%90%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B014888/</url>
    <content><![CDATA[<h2 id="yeonsanjaggiweoneohgi14888"><a href="#yeonsanjaggiweoneohgi14888" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#연산자끼워넣기14888"></a> <a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">연산자끼워넣기14888</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<blockquote>
<p>next_permutation</p>
</blockquote>
<ul>
<li>값을 저장 시킬 vector<int> v;</int></li>
<li>연산자의 개수를 1,2,3,4 의 값으로 넣을 vector<int> cal;</int></li>
<li>#include<algorithm>헤더에 minmax_element으로 최대값과 최소값 구해줍니다.</algorithm></li>
</ul>
<hr>
<blockquote>
<p>DFS</p>
</blockquote>
<ul>
<li>재귀호출로 백트래킹으로 구해줍니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<blockquote>
<p>next_permutation</p>
</blockquote>
<ul>
<li>n을 입력받아 수를 v에 입력을 받아줍니다.</li>
<li><code>+, -, *, /</code>의 개수를 확인해서 cal 변수에 1,2,3,4를 나누어서 넣어줍니다. 예를 들면, 2 0 1 0 일경우 +의 개수는 2개이므로 1을 두번넣어주고, *의 개수는 1개이므로 3을 한번넣어주고 해당 cal 벡터에는 [1, 1, 3]이 됩니다.</li>
<li>cal에 담긴 벡터를 next_permutation을 돌려주면서 순열값 모든경우의 수를 구해줍니다.</li>
<li>cal값이 1일 경우 + , 2일경우 -, 3일 경우 *, 4일 경우 / 의 연산대로 조건을 처리해줍니다.</li>
<li>이때, sum = v[0]을 해준이유는 순차적으로 계산을 진행해야하므로 가장 맨처음에 존재하는 값을 sum에 담고 시작하였습니다. 연산자의 개수는 수의 N-1개이기때문에 미리 sum에 값을 넣어주었습니다. 예를 들면 10 + 20를 연산해야 한다고 할 경우 sum = 10을 두고 sum + 20으로 연산을 처리하기위해서 입니다.</li>
<li>조건에 보면 <code>식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 합니다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다.</code>을 해주어야하므로 sum의 값이 음수일 경우 sum = -sum 으로 양수 값을 변경하고, sum = (sum / v[i]) 을 계산해준 후 다시 음수값으로 변경하였습니다. sum이 양수일 경우 sum = (sum / v[i])로 로직대로 처리하였습니다.</li>
<li>minmax_element를 사용하여 max, min값을 동시에 구하였습니다. <code>auto p = minmax_element(ans.begin(), ans.end());</code>의 형식으로 최대값과 최소값을 모두 구할 수 있습니다. *p.second는 최소값, *p.first는 최대값입니다.</li>
</ul>
<h2 id="haedang-yeonsanjae-gajungcireul-buyeohayeo-geu-gabse-ddara-sunyeoleul-tonghae-modeungyeonguyi-sureul-guhaneungeosi-ki-pointeuyeossseubnida"><a href="#haedang-yeonsanjae-gajungcireul-buyeohayeo-geu-gabse-ddara-sunyeoleul-tonghae-modeungyeonguyi-sureul-guhaneungeosi-ki-pointeuyeossseubnida" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#해당-연산자에-가중치를-부여하여-그-값에-따라-순열을-통해-모든경우의-수를-구하는것이-키-포인트였습니다"></a> 해당 +,-,*,/ 연산자에 가중치를 부여하여 그 값에 따라 순열을 통해 모든경우의 수를 구하는것이 키 포인트였습니다.</h2>
<blockquote>
<p>DFS 백트래킹</p>
</blockquote>
<ul>
<li>맨처음 dfs(v,1,v[0],plus,minus,multi,div); 호출할 때 왜 idx = 1로 시작하고, sum의 값을 v[0]의 값을 넘겨주는가에 대한 의문을 갖고 계신분들이 있습니다. idx를 1로 시작한 이유는 곱하기나, 나눗셈의 경우에서 sum의 값이 0일 경우 올바르지 않은 값이 연산되게 됩니다. 따라서, v[0] (+, -, *, /) v[1] 의 형태로 연산이 되게 됩니다. 따라서 올바른 값을 구할 수 있습니다. 곰곰히 생각해보시면 어떤 말씀인지 알 것이라 생각합니다.</li>
<li>입력받은 plus,minus,multi,div의 개수를 0보다 클 경우에는 계속해서 재귀호출을 합니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>만약 v.size() == idx 모든 원소의 개수를 확인하였을 경우에 현재 sum값을 res 벡터에 값을 넣어줍니다. 그 후 <code>auto p = minmax_element(res.begin(), res.end());</code>를 사용하여 최댓값과 최솟값을 구해주게 됩니다. 이렇게 구하지 않고도 문제의 조건에서보면  <code>최댓값과 최솟값이 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다</code> 라는 조건이 있습니다.<br>
이러한 것들에 따라 값을 max함수와 min함수를 사용하면서 최댓값과 최솟값을 구해줍니다.<br>
다른분들의 풀이를 보니 이런식으로 사용하시는것을 보고 배우게 되었습니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxResult = -MAX, minResult = MAX;</span><br><span class="line"> maxResult = <span class="built_in">max</span>(maxResult, sum);</span><br><span class="line"> minResult = <span class="built_in">min</span>(minResult, sum);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; maxResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; minResult &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-puli"><a href="#dfs-baegteuraeking-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-풀이"></a> DFS 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorihtm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> idx,<span class="keyword">int</span> sum, <span class="keyword">int</span> plus, <span class="keyword">int</span> minus, <span class="keyword">int</span> multi, <span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        res.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> plus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> multi=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> input;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        v.push_back(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cal;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cal;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            plus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            minus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            multi = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            div = cal;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(v,<span class="number">1</span>,v[<span class="number">0</span>],plus,minus,multi,div);</span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">' '</span> &lt;&lt;  *p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next-permutation-puli"><a href="#next-permutation-puli" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#next_permutation-풀이"></a> next_permutation 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  08_백준_연산자끼워넣기_14888.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 02/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cal;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = v[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                sum = sum + v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">                sum = sum - v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">3</span>)&#123;</span><br><span class="line">                sum = sum * v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    sum = -sum;</span><br><span class="line">                    sum = (sum / v[i]);</span><br><span class="line">                    sum = -sum;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sum = (sum / v[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(sum);</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(cal.<span class="built_in">begin</span>(), cal.<span class="built_in">end</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.first &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>DFS</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 로또 6603</title>
    <url>/%EB%B0%B1%EC%A4%806603%EB%A1%9C%EB%98%90/</url>
    <content><![CDATA[<h2 id="roddo6603"><a href="#roddo6603" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#로또6603"></a> <a href="https://www.acmicpc.net/problem/6603" target="_blank" rel="noopener">로또6603</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>vector<int> check 변수에 6개를 뽑는 경우의 수 이므로, k-6개만큼은 0을 푸쉬백 해주고, 6개까지에 1을 넣어줍니다.</int></li>
<li>check배열로 next_permutation을 수행합니다. true인경우가 조합을 구하는 경우의 수입니다.</li>
<li>테스트케이스를 돌면서 vector<int>v, vector<int> check의 값의 초기화값을 잘 생각해주어야한다. 초기화가 원활하게 이루어지지않을 경우 이상한 값을 가득담고있습니다.<br>
<code>값이 들어있는 vector&lt;int&gt; v; 변수를 next_permutation을 하는것이 아니라 check변수를 수행하는것입니다.</code></int></int></li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>처음에 check배열을 선언해서 단순히 1의 값만넣어서 체크하였지만, check[i]==1 의 경우만 체크해주었다. 하지만, 조합이 나오는것이 아니라 순열의 값이 나오게 되어 올바르지 않은 값이다. 그 이유는 단순히 check배열을 사용하여 true,false값을 사용할 경우에는 중복된 값을 체크 할 수가 없다. check된 값을 next_permutation을 돌려주어야지 조합의 경우를 찾을 수 있습니다.</li>
<li>순열과 조합중에 조합 중복을 제거해야합니다.</li>
<li>push_back 을 0 과 1을 해주는 경우를 잘 생각해야합니다. 6개를 뽑는 경우의 수 이므로, k-6개만큼은 0을 푸쉬백 해주고, 6개까지에 1을 넣어줍니다.</li>
<li>가장 중요한점은 왜 0 111111이 들어가는데 어떻게 이것을 조합을 뽑을지에 대한 고민을 했다. 단순히 0,1과으로 조합의 경우를 세어준것입니다. 순열의 경우에는 이전에 보았던 값들도 확인해주어야하지만, 조합의 경우는 이전의 값을 확인하지 않는다는것이다.</li>
<li>next_permutation을 돌리게 되면서 그 순열의 값들은 계속해서 변경되기때문에 중복없는 값을 계속해서 체크해서 나갈 수 있다는점입니다.</li>
<li>next_permuation을 돌린 후 그 값을 모두 ans 저장시켜 sort(ans.begin(), ans.end())를 통하여 값을 오름차순 정렬을 시켜줍니다.<br>
<code>단순히 check배열로 true를 체크하는것이 아니라, check vector의 값으로 next_permutation을 돌려주면서 check[i]== true일 경우 N개중 K개를 고르는 경우를 구할 수 있습니다.</code></li>
</ul>
<h3 id="next-permutationpuli"><a href="#next-permutationpuli" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#next_permutation풀이"></a> next_permutation풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  07_백준_로또_6603.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 02/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; check;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-6</span>; i++)&#123;</span><br><span class="line">            check.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">            check.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                    curr.push_back(v[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(curr);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(check.<span class="built_in">begin</span>(),check.<span class="built_in">end</span>()));</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;ans[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i][j] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="baegteuraeking-puli"><a href="#baegteuraeking-puli" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#백트래킹-풀이"></a> 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">13</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">6</span>)&#123;</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        ans.push_back(v[i]);</span><br><span class="line">        dfs(v,i,cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dfs(v,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 외원판순회2 10971</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%99%B8%EC%9B%90%ED%8C%90%EC%88%9C%ED%9A%8C2-10971/</url>
    <content><![CDATA[<h2 id="baegjunoeweonpansunhoe2-10971"><a href="#baegjunoeweonpansunhoe2-10971" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준외원판순회2-10971"></a> <a href="https://www.acmicpc.net/problem/10971" target="_blank" rel="noopener">백준외원판순회2 10971</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>W[i][j]는 도시 i에서 도시 j로 가기 위한 비용이므로 모든 경우의 수 완전탐색을 수행합니다.</li>
<li>N까지의 값을 vector에 넣어서 next_permutation을 수행합니다. next_permutation을 수행하는이유는 예를 들어 N이 4라고 하였을 경우 0,1,2,3까지의 값들을 vector에 넣고 모든 경우의 수를 만들어서 w[0][0], w[0][1]…w[0][3], w[1][0],w[1][1]…w[1][3]까지의 경우를 수행합니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>잘못 접근하였던점 저 맵을 보는순간 비에프에스로 풀어도될 것같은데 라는생각을 하였습니다. 하지만, 전혀 다른 문제였으며 완전탐색을 통해 풀어야합니다.</li>
<li>n값과 w 이차원배열에 비용을 입력받는다.</li>
<li>w[i][i] = 0일 경우 비용이 없습니다.</li>
<li>모든 각 노드간의 간선의 비용에 따른 최소비용을 찾습니다.</li>
<li>마지막노드와 첫번째 노드를 연결시키는 부분이 가장 핵심문제입니다.</li>
<li>직접 손으로 그래프를 그려보았습니다.</li>
<li>시간복잡도 O(N*N!) N! = 10! = 3628800</li>
</ul>
<p><code>마지막노드에서 첫번째노드를 연결시킬 방법의 조건을 잘 찾아야한다. 가는경우의수와 다시 돌아오는 경우의수를 체크합니다.</code></p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="next-permutationeul-sayonghan-puli"><a href="#next-permutationeul-sayonghan-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#next_permutation을-사용한-풀이"></a> next_permutation을 사용한 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  06_백준_외원판순회2_10971.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=<span class="number">210000000</span>;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(w[v[i]][v[i+<span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">                    check = <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    sum = sum + w[v[i]][v[i+<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(check &amp;&amp; w[v[n<span class="number">-1</span>]][v[<span class="number">0</span>]] != <span class="number">0</span>)&#123;</span><br><span class="line">            sum = sum + w[v[n<span class="number">-1</span>]][v[<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">min</span> &gt; sum)&#123;</span><br><span class="line">               <span class="built_in">min</span> = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">min</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 차이를최대로 10819</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%B0%A8%EC%9D%B4%EB%A5%BC%EC%B5%9C%EB%8C%80%EB%A1%9C10819/</url>
    <content><![CDATA[<h2 id="baegjun-caireulcoedaero-10819"><a href="#baegjun-caireulcoedaero-10819" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-차이를최대로-10819"></a> <a href="https://www.acmicpc.net/problem/10819" target="_blank" rel="noopener">백준 차이를최대로 10819</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>#include<algorithm>헤더에 있는 next_permutation()함수를 호출하여 순열과조합을 구현합니다.</algorithm></li>
<li>next_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 다음 순열을 구하고 true를 반환한다. 다음 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 작다면) false를 반환합니다.</li>
<li>prev_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 이전 순열을 구하고 true를 반환한다. 이전 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 크다면) false를 반환합니다.</li>
<li>#include<algorithm>헤더에 있는 abs절대값 함수를 사용합니다.(해당조건)</algorithm></li>
<li></li>
</ul>
<p><code>반드시 정렬이 수행되어야만 올바를 결과값을 얻을 수 있습니다.</code></p>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>|A[0] - A[1]| + |A[1] - A[2]| + … + |A[N-2] - A[N-1]|의 조건에 따라 반복문을 통하여 해당조건에 순열의 첫번째 경우, 두번째 경우, …마지막 경우에 따라 int sum의 값에 저장한 후 그 값을 max값과 비교한다. 최대값을 구해야하므로 이러한 일련의 과정이 필요합니다.</li>
<li>sum += abs(v[i] - v[i+1]); 의 식으로 현재 순열과조합의 경우에서 값들의 합을 구합니다. 이때 i값과 i+1값의 범위가 벗어나지 않는지 반드시 확인합니다. for문을 v.size()만큼 순회하면 오버플로우가 발생합니다.</li>
<li>max값과 sum의 값을 비교한 후 sum의 값이 max값보다 클 경우 max값을 해당 sum의 값으로 업데이트 시켜줍니다.(최대값)</li>
<li>next_permutation의 수행이 모두 끝나면 현재 max을 출력합니다. 현재 최대값이 저장되어 있습니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="next-permutationeul-sayonghan-puli"><a href="#next-permutationeul-sayonghan-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#next_permutation을-사용한-풀이"></a> next_permutation을 사용한 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  05_백준_차이를최대로_10819.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(v[i] - v[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">max</span> &lt; sum)&#123;</span><br><span class="line">            <span class="built_in">max</span> = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 123더하기 9095</title>
    <url>/%EB%B0%B1%EC%A4%80123%EB%8D%94%ED%95%98%EA%B8%B09095/</url>
    <content><![CDATA[<h2 id="baegjun-1-2-3deohagi-9095"><a href="#baegjun-1-2-3deohagi-9095" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-123더하기-9095"></a> <a href="https://www.acmicpc.net/problem/9095" target="_blank" rel="noopener">백준 1,2,3더하기 9095</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>DFS 재귀함수 이용</li>
<li>vector에 테스트케이스 개수만큼의 값들을 넣어준 후, 반복문을 통해 각 경우에 대한 dfs를 호출하여 최종적으로 리턴되는값은 1,2,3으로 만들 수 있는 n에 대한 경우의 수입니다.</li>
<li>dfs를 이해하기에 가장 좋은 예중 하나는 n과m문제입니다. 순열과 조합에 대표적인 문제입니다. 이 시리즈들을 모두 재귀로 한번 풀어보시길 바랍니다.<br>
<a href="https://www.acmicpc.net/workbook/view/2052" target="_blank" rel="noopener">N과 M시리즈 문제집</a></li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>v == sum 일 경우 1,2,3으로 만들 수 있는 경우의 수 이기때문에 return 1을 해줍니다.</li>
<li>v &lt; sum 일 경우 return 0으로 현재 들어온 값을 재귀함수 종료시켜줍니다.</li>
<li>dfs(v,n,sum+1) 1의 경우, dfs(v,n,sum+2) 2의 경우, dfs(v,n,sum+3) 3의 경우입니다.</li>
<li>1,2,3을 더하는 경우이므로 <code>dfs(v,n,sum+1)+dfs(v,n,sum+2)+dfs(v,n,sum+3)</code> 의 값을 반환시켜주면 현재까지 경우의 수를 반환시켜줍니다.<br>
<code>언제 종료될것인가의 조건과 그 조건을 넘어섰을때 조건을 잘 생각해서 로직을 구현하여야 합니다.</code></li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="dfs"><a href="#dfs" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  04_백준_1,2,3더하기_9095.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> n,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//값에 부합할 경우</span></span><br><span class="line">    <span class="keyword">if</span>(v == sum)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//값의 범위를 넘어가게되면 그 이외의 값들이 들어가게되기때문에 반드시 필요한 조건</span></span><br><span class="line">    <span class="keyword">if</span>(v &lt; sum)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dfs(v,n,sum+<span class="number">1</span>)+dfs(v,n,sum+<span class="number">2</span>)+dfs(v,n,sum+<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dfs(v[i], n, <span class="number">0</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 날짜계산 1476</title>
    <url>/%EB%B0%B1%EC%A4%80%EB%82%A0%EC%A7%9C%EA%B3%84%EC%82%B01476/</url>
    <content><![CDATA[<h2 id="baegjun-naljjagyesan-1476"><a href="#baegjun-naljjagyesan-1476" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-날짜계산-1476"></a> <a href="https://www.acmicpc.net/problem/1476" target="_blank" rel="noopener">백준 날짜계산 1476</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>단순 반복문과 조건문을 이용한 사칙연산 문제</li>
<li>while문을 이용해 지구,태양,달이 해당 입력값과 맞을 경우 break;</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>년도가 증가할때마다 E,S,M이 1씩 증가한다.</li>
<li><code>지구 1&lt;=E&lt;=15, 태양1&lt;=S&lt;=28, 달 1&lt;=m&lt;=19</code>의 범위를 벗어나게 된다면 해당 값을 1로 초기화 시켜야합니다.</li>
<li>E == 16, S == 29, M == 19일때 1로 초기화</li>
<li>입력 x,y,z 지구,태양,달을 입력 받았을때 x == E, y == S, z == M 지구,태양,달이 같은 연도를 찾은것이므로 종료시킵니다. 이때, sum은 몇년이 지났는지를 카운팅한 변수입니다. 따라서 sum을 출력시켜 정답을 도출시킵니다.<br>
<code>계산 범위를 잘 생각해서 풀어야합니다.</code></li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="modeungyeonguyi-sureul-cajseubnida"><a href="#modeungyeonguyi-sureul-cajseubnida" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#모든경우의-수를-찾습니다"></a> 모든경우의 수를 찾습니다.</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  02_백준_날짜계산_1476.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 28/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x,y,z = <span class="number">0</span>;  <span class="comment">// 입력</span></span><br><span class="line">    <span class="keyword">int</span> e=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">1</span>;  <span class="comment">// 지구, 태양, 달</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;    <span class="comment">// 연도</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e == x &amp;&amp; s == y &amp;&amp; m == z)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e +=<span class="number">1</span>;</span><br><span class="line">        s +=<span class="number">1</span>;</span><br><span class="line">        m +=<span class="number">1</span>;</span><br><span class="line">        sum +=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지구범위</span></span><br><span class="line">       <span class="keyword">if</span>(e == <span class="number">16</span>)&#123;</span><br><span class="line">           e = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 태양범위</span></span><br><span class="line">       <span class="keyword">if</span>(s == <span class="number">29</span>)&#123;</span><br><span class="line">           s = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 달 범위</span></span><br><span class="line">       <span class="keyword">if</span>(m == <span class="number">20</span>)&#123;</span><br><span class="line">           m = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 일곱난쟁이 2309</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%9D%BC%EA%B3%B1%EB%82%9C%EC%9F%81%EC%9D%B42309/</url>
    <content><![CDATA[<h2 id="baegjun-ilgobnanjaengi-2309"><a href="#baegjun-ilgobnanjaengi-2309" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-일곱난쟁이-2309"></a> <a href="https://www.acmicpc.net/problem/2309" target="_blank" rel="noopener">백준 일곱난쟁이 2309</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>do while ~ (next_permutation)으로 계속해서 다음 조합의 경우의 수를 찾는다.</li>
<li>vector v, check변수를 선언하여 permutation을 수행한다. 9명중 7명을 뽑아야하므로 7명만큼 check=true로 변경해서 수행한다. next_permutation을 수행하면서 값들이 계속변경되기 때문에 값이 변경되면서 출력된다.</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>백설공주를 도와 키를 확인하여 난쟁이를 찾자. 9명의 난쟁이 중에 7명의 난쟁이를 골라 키의 합이 100이 되는 경우를 찾아야한다.</li>
<li>9명중에 7명을 고르는 것은 9C7 = 9C2와 같은 경우의 수이다.</li>
<li>9명중 2명을 골랐을때 두명을 고르는 수는 O(N^2) * 난쟁이의 키의 합을 고르는 복잡도 O(N) = O(N^3)의 시간복잡도를 갖는다. N=9명이므로 9^3 = 729의 모든경우의 수에서 찾을 수 있다.</li>
<li>경우 1)난쟁이가 아닌 9명중 2명을 뽑는 경우를 구해서 sum의 값에서 그 해당 값들을 뺐을때 합이 100인경우를 찾는다.</li>
<li>경우 2)next_permutation을 돌려서 9명중 7명을 선택해서 그 값이 100일때 그 값들을 출력시켜준다. 이때 check변수를 선언하여 7명을 선택해야하는 경우를 true로 바꾸어주면서 수행한다.</li>
</ul>
<p><code>주의해야 할점: 정렬이 되어있는 상태여야 한다.</code></p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="ijung-pomun"><a href="#ijung-pomun" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#이중-포문"></a> 이중 포문</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        sum += v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum - v[i] - v[j] == <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>; z&lt;n; z++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == z || j == z)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; v[z] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next-permutation-johab"><a href="#next-permutation-johab" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#next_permutation-조합"></a> next_permutation 조합</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; check(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">                sum += v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum== <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>이진 탐색 트리 BST</title>
    <url>/bst/</url>
    <content><![CDATA[<h1 id="geomsaegteuri-search-tree"><a href="#geomsaegteuri-search-tree" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#검색트리-search-tree"></a> 검색트리 Search Tree</h1>
<h3 id="gyeceungjeogin-gujoreul-pyohyeon"><a href="#gyeceungjeogin-gujoreul-pyohyeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#계층적인-구조를-표현"></a> 계층적인 구조를 표현</h3>
<ul>
<li>조직도</li>
<li>디렉토리와 서브디렉토리 구조</li>
<li>가계도</li>
</ul>
<h3 id="teuriyi-teugjing"><a href="#teuriyi-teugjing" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#트리의-특징"></a> 트리의 특징</h3>
<ul>
<li>트리는 노드(node)들과 노드들을 연결하는 링크(link)들로 구성됩니다.</li>
<li>맨 위의 노드를 <code>&quot;루트(root)&quot;</code>라고 부릅니다.</li>
<li>노드를 연결하는 선을 <code>&quot;link&quot;, &quot;edge&quot;,&quot;branch&quot;</code></li>
<li><code>부모노드 자식노드</code>로 구성되어있습니다.</li>
<li>루트노드를 제외한 트리의 모든 노드들은 <code>유일한 부모노드</code>를 갖습니다.</li>
<li>부모가 동일한 노드들을 형제 <code>&quot;sibling&quot;</code>관계라고 부릅니다.</li>
<li>자식이 없는 노드들을 <code>&quot;leaf&quot;</code>노드라고 부릅니다.</li>
<li>“leaf” 노드가 아닌것 <code>내부 노드</code>라고 부릅니다.</li>
<li><code>조상-자손 관계</code>가 있다. 부모-자식관계를 확장한것 (ancestor-descendant) 관계</li>
<li>루트는 레벨관계 <code>Level 0 ~ Level N</code> 까지 갖습니다.</li>
</ul>
<ul>
<li>트리의 기본적인 성질
<ul>
<li>노드가 N개인 트리는 항상 N-1개의 링크(link)를 가집니다.</li>
<li>트리에서 루트에서 어떤 노드로 가는 경로는 유일하다. 또한 임의의 두 노드간의 경로도 유일(존재,1개)합니다.(단, 같은 노드를 두 번 이상 방문하지 않는다)</li>
<li>트리의 높이는 레벨의 개수입니다.</li>
</ul>
</li>
</ul>
<h1 id="ijin-teuri-binary-tree"><a href="#ijin-teuri-binary-tree" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#이진-트리-binary-tree"></a> 이진 트리 Binary Tree</h1>
<h3 id="teugjing"><a href="#teugjing" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#특징"></a> 특징</h3>
<ul>
<li>이진 트리에서 각 노드는 최대 2개의 자식을 가집니다.</li>
<li>각각의 자식 노드는 자신이 부모의 왼쪽 자식인지 오른쪽 자식인지가 지정됩니다.(자식이 한 명인 경우에도)</li>
<li>서로 다른 이진트리는 값의 위치가 다르면 <code>서로 다른 이진트리</code>라고 불리온다. (자식노드가 한개인 경우에도 해당됩니다)</li>
</ul>
<h3 id="ijinteuriyi-eungyong-expression-tree-huffman-code"><a href="#ijinteuriyi-eungyong-expression-tree-huffman-code" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#이진트리의-응용-expression-tree-huffman-code"></a> 이진트리의 응용 Expression Tree, Huffman Code</h3>
<ul>
<li>
<p>(x+y) * ((a + b) / c) 를 이진 트리형태로 나타낼 수 있다. Expression트리에서 응용한다.</p>
</li>
<li>
<p>허프만 코드 ‘A’ - ‘Z’, ‘a’ - ‘z’ 파일들의 알파벳을 어떤 데이터를 압축하는 것을 뜻한다. 파일의 길이가 최소가 되도록 하는 알고리즘(파일 압축)</p>
</li>
</ul>
<h3 id="full-binary-trees-and-complete-binary-trees"><a href="#full-binary-trees-and-complete-binary-trees" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#full-binary-trees-and-complete-binary-trees"></a> Full Binary Trees And Complete Binary Trees</h3>
<ul>
<li>
<p>Full Binary Trees 모든 레벨에서 노드에 채워져 있는 경우</p>
</li>
<li>
<p>Completr Binary Trees 맨 마지막경우에는 노드가 없을 수 있다.(단, 끝에서부터 노드가 없을 수 있다.)</p>
</li>
<li>
<p>높이가 h인 full binary tree는 2^h-1개의 노드를 가진다.</p>
</li>
<li>
<p>노드가 N개인 full 혹은 complete 이진 트리의 높이는 O(logN)이다.(노드가 N개인 이진트리의 높이는 최악의 경우 N이 될 수 있다.)</p>
</li>
</ul>
<h3 id="ijinteuriyi-pyohyeon"><a href="#ijinteuriyi-pyohyeon" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#이진트리의-표현"></a> 이진트리의 표현</h3>
<ul>
<li>Heap은 Complete Binary Tree이다.</li>
<li>연결 구조 표현
<ul>
<li>각 노드에 하나에의 데이터필드와 왼쪽자식(left), 오른쪽 자식(right),그리고 부모노드§의 주소를 저장</li>
<li>부모노드는 주소는 반드시 필요한 경우가 아니면 보통 생략함</li>
</ul>
</li>
</ul>
<h3 id="ijinteuriyi-sunhoe-traversal"><a href="#ijinteuriyi-sunhoe-traversal" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#이진트리의-순회traversal"></a> 이진트리의 순회(Traversal)</h3>
<ul>
<li>
<p>순회: 이진 트리의 모든 노드를 방문하는 일</p>
</li>
<li>
<p>중순위(inorder) 순회</p>
<ul>
<li>
<p>왼쪽자식기준으로 루트노드를 중간에 방문한다.</p>
</li>
<li>
<p>왼쪽 자식 노드-&gt;루트-&gt;오른쪽 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line"><span class="built_in">print</span> key[x]</span><br><span class="line">pre-order-tree-walk(right[x])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>선순위(preorder) 순회</p>
<ul>
<li>
<p>왼쪽자식기준으로 루트노드를 처음에 방문한다.</p>
</li>
<li>
<p>루트 노드-&gt;왼쪽 자식 노드-&gt;오른쪽 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> key[x]</span><br><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line">pre-order-tree-walk(right[x])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>후순위(postorder) 순회</p>
<ul>
<li>
<p>왼쪽기준으로 루트노드를 마지막에 방문한다.</p>
</li>
<li>
<p>왼쪽 자식 노드-&gt;루트 노드-&gt;중간 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line">pre-order-tree-walk(right[x])</span><br><span class="line"><span class="built_in">print</span> key[x]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>레벨오더(level-order) 순회</p>
<ul>
<li>
<p>레벨 순으로 방문, 동일 레벨에서는 왼쪽에서 오른쪽 순서로 방문합니다.</p>
</li>
<li>
<p>큐(queue)를 이용하여 구현</p>
<p>트리에 [1,2,3,4,5,6,7]이 순서대로 있다고하면 레벨별로 하나씩 방문한다(단, 기준은 왼쪽)</p>
<hr>
<p>Level 0: 1</p>
<p>Level 1: 2,3</p>
<p>Level 2: 4,5,6,7</p>
<hr>
<p>해당 순서로 방문한다고 생각하면 됩니다.</p>
</li>
</ul>
</li>
</ul>
<h3 id="dynamic-set"><a href="#dynamic-set" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#dynamic-set"></a> Dynamic Set</h3>
<ul>
<li>
<p>여러개의 데이터의 집합을 뜻하는 말을 일컫습니다.</p>
</li>
<li>
<p>여러 개의 키(Key)를 저장합니다.</p>
</li>
<li>
<p>다음과 같은 연산들을 지원하는 자료구조입니다.</p>
<ul>
<li>INSERT - 새로운 키의 삽입</li>
<li>SEARCH - 키 탐색</li>
<li>DELETE - 키의 삭제</li>
</ul>
</li>
<li>
<p>예: 심볼 테이블</p>
</li>
</ul>
<h3 id="baeyeol"><a href="#baeyeol" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#배열"></a> 배열</h3>
<ul>
<li>정렬 O
<ul>
<li>검색: O(logN)</li>
<li>삽입: O(N)</li>
<li>삭제: O(N)</li>
</ul>
</li>
<li>정렬 X
<ul>
<li>검색: O(N)</li>
<li>삽입: O(1), O(N)</li>
<li>삭제: O(1)</li>
</ul>
</li>
</ul>
<h3 id="yeongyeolriseuteu"><a href="#yeongyeolriseuteu" class="header-anchor">2.8. </a><a class="markdownIt-Anchor" href="#연결리스트"></a> 연결리스트</h3>
<ul>
<li>
<p>정렬 O</p>
<ul>
<li>검색: O(N), O(logN)</li>
<li>삽입: O(N)</li>
<li>삭제: O(1)</li>
</ul>
</li>
<li>
<p>정렬 X</p>
<ul>
<li>검색: O(N)</li>
<li>삽입: O(1)</li>
<li>삭제: O(1)</li>
</ul>
</li>
</ul>
<p>정렬이 이루어지면 이진검색 O(logN)의 시간복잡도 만큼수행된다. 예를 들면, 1,2,4,8 의 형식으로 트리의 노드의 개수가 증가된다고 하면 2^k = N으로 나타낼 수 있다. k는 시행횟수이며, N은 입력된 개수입니다. 이것을 K = log2N으로 나타낼 수 있습니다. 이때 시간복잡도에서는 상수를 무시하기 때문에 K=logN으로 나타낼 수 있습니다. 따라서, 이진탐색의 시간복잡도는 O(logN) 입니다.</p>
<h3 id="dayanghan-bangbeobdeul"><a href="#dayanghan-bangbeobdeul" class="header-anchor">2.9. </a><a class="markdownIt-Anchor" href="#다양한-방법들"></a> 다양한 방법들</h3>
<ul>
<li>정렬된 혹은 정렬되지 않은 배열 혹은 연결 리스트를 사용할 경우 INSERT, SEARCH, DELETE 중 적어도 하나는 O(N)</li>
<li>이진탐색트리(Binary Search Tree), 레드-블랙트리, AVL-트리 등의 트리에 기반한 구조들</li>
<li>Direct Address Table, 해쉬 테이블 등</li>
</ul>
<h3 id="geomsaegteuri"><a href="#geomsaegteuri" class="header-anchor">2.10. </a><a class="markdownIt-Anchor" href="#검색트리"></a> 검색트리</h3>
<ul>
<li>Dynamic set을 트리의 형태로 구현</li>
<li>일반적으로 SEARCH, INSERT, DELETE 연산이 트리의 높이(height)에 비례하는 시간복잡도를 가짐</li>
<li>이진검색트리(Binary Search Tree), 레드-블랙 트리(Red-black tree), B-트리 등</li>
</ul>
<h1 id="ijintamsaegteuri-binary-search-tree"><a href="#ijintamsaegteuri-binary-search-tree" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#이진탐색트리-binary-search-tree"></a> 이진탐색트리 Binary Search Tree</h1>
<h3 id="ijeongeomsaegteuri-bst-teugjing"><a href="#ijeongeomsaegteuri-bst-teugjing" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#이전검색트리bst-특징"></a> 이전검색트리(BST) 특징</h3>
<ul>
<li>
<p>이진트리이면서 각노드에 하나의 키를 저장</p>
</li>
<li>
<p>각 노드 v에 대해서 그 노드의 왼쪽 부트리(subtree)에 있는 키들은 key[v]보다 작거나 같고, 오른쪽 부트리에 있는 값은 크거나 같다.</p>
</li>
<li>
<p>중위 순회의 값을 갖는다</p>
</li>
<li>
<p>각 노드의 왼쪽 서브트리에는 해당 노드의 값보다 작은 값을 지닌 노드들로 이루어져 있다.</p>
</li>
<li>
<p>각 노드의 오른쪽 서브트리에는 해당 노드의 값보다 큰 값을 지닌 노드들로 이루어져 있다.</p>
</li>
<li>
<p>중복된 노드가 없어야 한다.</p>
</li>
<li>
<p>왼쪽 서브트리, 오른쪽 서브트리 또한 이진탐색트리이다.</p>
</li>
</ul>
<h3 id="1-search"><a href="#1-search" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#1search"></a> 1.SEARCH</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RECURSIVE</span><br><span class="line"></span><br><span class="line">TREE-SEARCH(x,k) x = 루트노드, k = 찾는값</span><br><span class="line">	<span class="comment">// x가 null이거나 k == key[x]를 찾은 경우(원하는 값을 찾은 경우)</span></span><br><span class="line">	<span class="keyword">if</span> x == <span class="literal">NULL</span> || k == key[x]</span><br><span class="line">		then <span class="keyword">return</span> x;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">// 키보다 작을 경우</span></span><br><span class="line">	<span class="keyword">if</span> k &lt; key[x]</span><br><span class="line">		then <span class="keyword">return</span> TREE-SEARCH(left[x],k)</span><br><span class="line">	<span class="comment">// 키보다 클경우</span></span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		then <span class="keyword">return</span> TREE-SEARCH(right[x],k)</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NONE RECURSIVE</span><br><span class="line"></span><br><span class="line">ITERATIVE-TREE-SEARCH(x,k)</span><br><span class="line">	While x != <span class="literal">NULL</span> <span class="keyword">and</span> K != key[x]</span><br><span class="line">		<span class="keyword">do</span> <span class="keyword">if</span> k &lt; key[x]</span><br><span class="line">				then x &lt;- left[x]</span><br><span class="line">				<span class="keyword">else</span> x &lt;- rgiht[x]</span><br><span class="line">	<span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure>
<p>시간복잡도: O(h), h = 트리의 높이</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>검색트리</tag>
        <tag>이진탐색트리</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>알고리즘 N-Queen 문제</title>
    <url>/n-queen/</url>
    <content><![CDATA[<h2 id="n-queenmunje"><a href="#n-queenmunje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#n-queen문제"></a> <a href="https://www.acmicpc.net/problem/9663" target="_blank" rel="noopener">N-Queen문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>Recursive() 재귀함수 어느지점에서 종료시키고, 다시 재귀호출을 해야하는지의개념을 확실하게 알고 있어야합니다.</li>
<li>Recursive()의 개념을 잡기에 좋은 문제는 <code>백준 N과 M시리즈</code> 입니다. 개념이 약하신분들은 순열과 조합의 개념부터 확실히 잡고 오시는것이 좋을 것이라고 생각을 합니다.</li>
<li><code>백트래킹 깊이우선탐색(DFS)</code>의 개념을 알아야합니다. 깊이우선탐색은 보통 <code>Recursive, Stack</code>를 사용합니다. Recursive가 직관적이고 코드이해하기도 쉽고, 스택보다는 구현이 덜 복잡하다는 장점이 있어서 Recursive로 구현하겠습니다.</li>
</ul>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>깊이우선탐색(DFS) 진행한 Level과 모든 말을 놓는 경우의 수가 같을때 재귀호출을 종료해야합니다.</p>
</li>
<li>
<p>N<em>N</em>N … N^N의 시간복잡도를 갖습니다.</p>
</li>
<li>
<p>백트래킹의 개념에 대해 알고 있어야 한다. 깊이우선탐색의 트리형태로 어떻게 진행하는지 직접 손으로 써보면서 진행해야합니다.</p>
</li>
<li>
<p>상태공간트리의 개념을 알고 있어야합니다.</p>
<ul>
<li>상태공간트리란 찾는 해를 포함하는 트리이며 이트리안에 어떠한 노드에 해당하는 이 트리를 체계적으로 탐색하면서 반드시 해를 찾을 수 있어야합니다.</li>
</ul>
</li>
<li>
<p>해당 퀸이 열 있는지 체크와 대각선을 체크해야합니다.</p>
</li>
</ul>
<p>예를 들어 설명하겠습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start에서 시작하면서 트리의 형태로 가지를 치면서 진행합니다. start-&gt; (0,0) (0,1) (0,2) (0,3)  첫번째 열에서 갈수 있는 모든 경우의 수입니다.</span><br><span class="line"></span><br><span class="line">(1,0) (1,1) (1,2) .... 두번째 열에서 갈 수 있는 경우의 수</span><br><span class="line"></span><br><span class="line">(level, 1) (level, 2) (level, 3) Level 크기에서 갈 수 있는 경우의 수</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Level 0</td>
<td>(0,0)</td>
<td>(0,1)</td>
<td>(0,2)</td>
<td>(0,3)</td>
</tr>
<tr>
<td>Level 1</td>
<td>(1,0)</td>
<td>(1,1)</td>
<td>(1,2)</td>
<td>(1,3)</td>
</tr>
<tr>
<td>Level 2</td>
<td>(2,0)</td>
<td>(2,1)</td>
<td>(2,2)</td>
<td>(2,3)</td>
</tr>
<tr>
<td>Level 3</td>
<td>(3,0)</td>
<td>(3,1)</td>
<td>(3,2)</td>
<td>(3,3)</td>
</tr>
</tbody>
</table>
<hr>
<p>다음의 상황은 <code>Level 0 ~ Level N</code> 의 경우까지 진행하는 경우라고 생각하겠습니다.</p>
<ul>
<li>
<p>Level0의 경우에서 갈 수 있는 모든경우를 탐색하면서 퀸을 놓습니다. 그리고 다음 Level1으로 진행하면서 열에 들어갈 수 있는 경우를 확인하면서 진행합니다. 이때 알아야 하는 부분이 Promissing의 개념입니다.</p>
</li>
<li>
<p>즉,<code>Level0 (0,0)</code>에 퀸을 놓으면 <code>Level1 (1,0)</code>에 퀸을 놓는 경우를 확인해보겠습니다. 퀸을 놓을 수 있는 조건은 <code>동, 서, 남, 북, 대각선</code>에 퀸이 위치해있으면 놓을 수 없습니다. 그러면 당연히 (1,0)은 확인할 필요도 없이 놓을 수 없는 경우의 수라는것입니다. 이것을 Promissing의 개념을 확인하여 더 갈 수 있는지 없는지를 판단하는 것입니다. 체크한다고 하시면 됩니다.</p>
</li>
<li>
<p>레벨의 수가 결국 말의 개수를 뜻합니다. 제 코드에서는 cols라는 배열이 쓰이는데 이것은 현재 말이 어디에 놓였는지에 대한 위치입니다. cols[1] : 1번말이 놓인 열 , cols[2] : 2번말이 놓인 열 … cols[i] = j (i번말이 j에 놓였다는 의미입니다. i는 결국 레벨입니다.)</p>
</li>
<li>
<p>Promissing Test를 진행할 때 마지막에 놓인 이 말이 이전에 놓인 다른 말들과 충돌하는지 검사를 하면 퀸을 놓을수 있는지 없는지를 확인 할 수 있습니다.</p>
</li>
</ul>
<h3 id="recursive-seolgye"><a href="#recursive-seolgye" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#recursive-설계"></a> Recursive 설계</h3>
<ol>
<li>promising()함수를 호출합니다. 진행이 가능한지 여부를 확인하고 아니면 false, 가능하면 true를 리턴합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line"> <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Level과 N의 값이 같은 경우(성공한 경우)</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">      <span class="comment">// 기존의 N-queen의 위치를 구하면 종료하는 형식이였지만, 모든 경우의 수를 구하기 위해서는 해당 cnt값을 증가시켜주어서 확인할 수 있다.</span></span><br><span class="line">      cnt+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Level과 N의 값이 같지 않은 경우 Recursive() 재귀 함수 호출</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">     cols[level+<span class="number">1</span>] = i;</span><br><span class="line">     <span class="comment">// 다음 레벨로 재귀 호출</span></span><br><span class="line">     <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="promising-test-seolgye"><a href="#promising-test-seolgye" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#promising-test-설계"></a> Promising Test 설계</h3>
<ol>
<li>같은 열을 확인하여야합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">      <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>같은 대각선에 놓였는지를 확인하여야 합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-dfs-baegteuraeking-haedang-gabs-cajgi-gibon-gaenyeom"><a href="#1-dfs-baegteuraeking-haedang-gabs-cajgi-gibon-gaenyeom" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-dfs-백트래킹-해당-값-찾기기본-개념"></a> 1. DFS 백트래킹 해당 값 찾기(기본 개념)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  n-queen.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 22/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cols[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">promissing</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;level; i++)&#123;</span><br><span class="line">        <span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">        <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; i &lt;&lt; <span class="string">","</span> &lt;&lt; cols[i] &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        cols[level+<span class="number">1</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 성공할 경우</span></span><br><span class="line">        <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">8</span>;</span><br><span class="line">    recursive(<span class="number">0</span>,N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-dfs-baegteuraeking-haedang-gabs-cajgi-gyeonguyi-su-cajgi-baegjun-munje"><a href="#2-dfs-baegteuraeking-haedang-gabs-cajgi-gyeonguyi-su-cajgi-baegjun-munje" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#2-dfs-백트래킹-해당-값-찾기경우의-수-찾기-백준-문제"></a> 2. DFS 백트래킹 해당 값 찾기(경우의 수 찾기 백준 문제)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  n-queen.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 22/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cols[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">promissing</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;level; i++)&#123;</span><br><span class="line">        <span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">        <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">        <span class="comment">// 기존의 N-queen의 위치를 구하면 종료하는 형식이였지만, 모든 경우의 수를 구하기 위해서는 해당 cnt값을 증가시켜주어서 확인할 수 있다.</span></span><br><span class="line">        cnt+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        cols[level+<span class="number">1</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 성공할 경우</span></span><br><span class="line">        <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    recursive(<span class="number">0</span>,N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>DFS</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 더 맵게</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EB%8D%94%EB%A7%B5%EA%B2%8C/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-deo-maebge-munje"><a href="#peurogeuraemeoseu-deo-maebge-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-더-맵게-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42626" target="_blank" rel="noopener">프로그래머스 더 맵게 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>이번 문제를 해결하기 위해서는 단순 sort를 사용하는것이 아니라 우선순위큐 <code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</code>  오름차순 형식으로 써주어야합니다.</li>
<li>단순히 while문을 통해서 안에서 sort를 처리하려고 하였지만 16번 테스트케이스를 통과하지 못하였고 효율성에서는 시간초과가 발생하였습니다. 또한, 범위값이 너무 제한적이였다. 그래서 우선순위큐를 사용하였습니다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scoville의 길이는 1 이상 1,000,000 이하입니다.</span><br><span class="line">K는 0 이상 1,000,000,000 이하입니다.</span><br><span class="line">scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</span><br></pre></td></tr></table></figure>
<ul>
<li>주의해야할점은 <code>우선순위큐 push는 맨앞으로 들어간다는것과 top에 있는것도 0번째 인덱스에 있는 값</code>입니다.</li>
</ul>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ol>
<li>스코빌 벡터에 있는 값을 우선순위큐에 넣어준다. <code>greater&lt;int&gt;</code>를 옵션으로 지정하였기 때문에 자동으로 오름차순으로 정렬해줍니다. 만약 내림차순으로 하고 싶은경우 less<int>옵션을 사용하시면 됩니다.</int></li>
<li><code>첫번째, 두번째값을 통하여 스코빌 지수</code>를 구합니다. <code>단 q.top()의 값이 K보다 작아야합니다.</code> 반복문 조건</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">예시</span><br><span class="line">스코빌 1 2 3 9 10일경우  </span><br><span class="line">(1 + 2 * 2) 5 3 9 10 으로 변경됩니다. 우선순위큐 이므로 3 5 9 10 정렬됩니다.</span><br><span class="line">(3 + 5 * 2) 13 9 10 으로 변경됩니다. 우선순위큐 이므로 9 10 13 정렬됩니다.</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>기존의 while문에서는 sort를 다시해주어야하는데 우선순위 큐가 자동으로 정렬시켜주기때문에 필요없는 과정입니다.</li>
<li>만약 우선순위큐의 사이즈가 2이하가 되면 더이상 구할 수 없으므로 Return -1을 실행합니다. 그게 아니라면 계속 진행하고 q.top()의 값이 K보다 큰 경우가 있으면 더이상 반복문을 반복하지 않습니다.</li>
</ol>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-ilbanjeogin-sort-puli-sigancogwa"><a href="#1-ilbanjeogin-sort-puli-sigancogwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-일반적인-sort-풀이시간초과"></a> 1. 일반적인 sort 풀이(시간초과)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  더맵게 일반 정렬.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scoville;</span><br><span class="line">  </span><br><span class="line">    scoville.push_back(<span class="number">3</span>);</span><br><span class="line">    scoville.push_back(<span class="number">9</span>);</span><br><span class="line">    scoville.push_back(<span class="number">10</span>);</span><br><span class="line">    scoville.push_back(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">int</span> K=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = scoville.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        sort(scoville.<span class="built_in">begin</span>(),scoville.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 스코빌 첫번째 값이 K보다 작아야하고, cnt 값이 해당 스코빌 사이즈값이전까지 돌아아한다, 그리고 스코빌 사이즈는 2보다 커야한다. 아니면 -&gt; 메모리 에러남</span></span><br><span class="line">        <span class="keyword">if</span>(scoville[<span class="number">0</span>] &lt; K &amp;&amp; cnt &lt; len &amp;&amp; scoville.<span class="built_in">size</span>() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> new_scoville=<span class="number">0</span>;</span><br><span class="line">                  </span><br><span class="line">          new_scoville = scoville[<span class="number">0</span>] + (scoville[<span class="number">1</span>] * <span class="number">2</span>);</span><br><span class="line">          scoville[<span class="number">0</span>] = new_scoville;</span><br><span class="line">          scoville.erase(scoville.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">          cnt+=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 스코빌 첫번째지수가 K보다 작으면 결국 모든것이 되지않았으니까 cnt = 0;</span></span><br><span class="line">            <span class="keyword">if</span>(scoville[<span class="number">0</span>] &lt; K)&#123;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">        answer = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        answer = cnt;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="useonsunwikyu-sayong"><a href="#useonsunwikyu-sayong" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#우선순위큐-사용"></a> 우선순위큐 사용</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  더맵게 우선순위큐.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scoville;</span><br><span class="line">    scoville.push_back(<span class="number">1</span>);</span><br><span class="line">    scoville.push_back(<span class="number">2</span>);</span><br><span class="line">    scoville.push_back(<span class="number">3</span>);</span><br><span class="line">    scoville.push_back(<span class="number">9</span>);</span><br><span class="line">    scoville.push_back(<span class="number">10</span>);</span><br><span class="line">    scoville.push_back(<span class="number">12</span>);</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> K = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scoville.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        q.push(scoville[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> min_num_first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min_num_second = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.top() &lt; K)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        min_num_first = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        min_num_second = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        res = min_num_first + (min_num_second * <span class="number">2</span>);</span><br><span class="line">        q.push(res);</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>레벨2</tag>
        <tag>우선순위큐</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 가장 큰 수</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%ED%81%B0%EC%88%98/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-gajang-keun-su-munje"><a href="#peurogeuraemeoseu-gajang-keun-su-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-가장-큰-수-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42746" target="_blank" rel="noopener">프로그래머스 가장 큰 수 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>0 또는 양의 정수 1 &lt;= numbers_length &lt;= 100,000, 0 &lt;= numbers &lt;= 1000 를 보고 O(N^2) 복잡도 불가할 것이라 예측하였습니다. 왜냐하면 (100,000)^ = 약 100억</li>
<li>String to int 변환 함수 atoi(str.c_str()), int to String 변환함수 to_string(number)
<ul>
<li><code>“String&quot; - ‘0’ =&gt; 숫자</code>로 변경이 가능합니다. <code>단, 범위는 0~9까지</code></li>
<li><code>Number + ‘0’ =&gt; 문자</code>로 변경이 가능합니다. <code>단, 범위는 0~9까지</code></li>
<li>숫자가 10이 나왔을 경우에는 <code>dec = dec * 10 + str[i] - '0'</code>의 형식으로 해주어야합니다. <code>유사문제로는 카카오 셔틀버스 문제</code>가 있습니다.</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 &gt; s2 + s1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s1 &gt; s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>string기준으로 문제를 해결해야한다.</li>
<li>맨 처음 순열과 같이 <code>DFS로 완전탐색</code>을 하였지만 <code>시간초과</code> 가 나서 sort()함수 사용해봤지만 테스트케이스는 맞지만 시간초과는 그대로여서 시간복잡도에 고민을 한번 더 하였습니다.</li>
<li><code>Sort Compare</code>로 비교 후 정렬값들을 가지고 문자열끼리 append시켜주었으면 쉽게 해결하였을 문제였습니다.</li>
<li>compare 함수 기본 형식(기본적으로 오름차순을 적용시킵니다.) 굳이 if문을 쓰지 않고 바로 return s1 &gt; s2형식으로 해주어도 됩니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-dfspuli-sigancogwa"><a href="#1-dfspuli-sigancogwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-dfs풀이시간초과"></a> 1. DFS풀이(시간초과)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  가장큰수.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 14/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value_v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;a, <span class="keyword">const</span> <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(b.<span class="built_in">size</span>() &gt; a.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> b &gt; a;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b &lt; a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//len개를 모두 선택하였을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx == len)&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            str += to_string(value_v[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> comp = atoi(str.c_str());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(comp &gt; ans)&#123;</span><br><span class="line">            ans = comp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        value_v.push_back(v[i]);</span><br><span class="line">        dfs(idx+<span class="number">1</span>, v, len);</span><br><span class="line">        value_v.pop_back();</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    s.push_back(<span class="string">"3"</span>); s.push_back(<span class="string">"30"</span>); s.push_back(<span class="string">"34"</span>);s.push_back(<span class="string">"5"</span>);s.push_back(<span class="string">"9"</span>);</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(len);</span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), compare);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        v[i] = atoi(s[i].c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,v,len);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; to_string(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string-jeongryeol-bigyo-sigancogwa-x-jeongdab"><a href="#string-jeongryeol-bigyo-sigancogwa-x-jeongdab" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#string-정렬-비교시간초과-x-정답"></a> String 정렬 비교(시간초과 X 정답)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 + s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s2 + s1 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1 + s2 &gt; s2 + s1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    numbers.push_back(<span class="number">3</span>); numbers.push_back(<span class="number">30</span>); numbers.push_back(<span class="number">34</span>);numbers.push_back(<span class="number">5</span>);numbers.push_back(<span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> numbers_len = numbers.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers_len; i++)&#123;</span><br><span class="line">        s.push_back(to_string(numbers[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), compare);</span><br><span class="line">    <span class="keyword">int</span> s_len = s.<span class="built_in">size</span>();</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s_len; i++)&#123;</span><br><span class="line">          ans += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">0</span>] == <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>유사문제: <a href="https://www.acmicpc.net/problem/1422" target="_blank" rel="noopener">백준 1422 숫자의 신</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>레벨2</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 H-index</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4H-INDEX/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-h-index-munje"><a href="#peurogeuraemeoseu-h-index-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-h-index-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42747" target="_blank" rel="noopener">프로그래머스 H-index 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>정렬문제인 만큼 <code>#include &lt;algorithm&gt; 헤더에 있는 sort를 이용하면 됩니다.</code></li>
<li>sort는 기본적으로 오름차순 정렬로 되어있습니다. 별 다른 옵션을 주지 않아도 오름차순 정렬을 하게 됩니다. 그 외 <code>내림차순정렬</code>을 이용 할 때는 다음과 같은 두가지 방법을 사용할 수 있습니다.</li>
</ul>
<blockquote>
<p>1.compare함수를 이용한 내림차순 방법</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool compare(int v1,int v2)&#123;</span><br><span class="line">    return v1 &lt; v2;</span><br><span class="line">&#125;</span><br><span class="line">sort(citations.begin(),citations.end(),compare);</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>greater<int>() 함수 옵션을 사용한 내림차순 정렬</int></li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort(citations.begin(),citations.end(),greater&lt;int&gt;());</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li><code>H-index</code>의 개념을 알고가셔야 합니다. 논문 n편중 h번이상 인용된 논문이 h편이상이고 h번 이하 인용되었다면 h가 H-index가 됩니다.</li>
<li>첫번째 <code>테스트 케이스인 [3,0,6,1,5]</code>로 예를 들어 설명하겠습니다.</li>
</ul>
<blockquote>
<p>오름차순 정렬 전</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">DATA</th>
<th style="text-align:left">INDEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>오름차순 정렬 후</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">DATA</th>
<th style="text-align:left">INDEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<hr>
<h2 id><a href="#" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#"></a> </h2>
<ul>
<li>정렬전과 정렬후의 과정입니다.<code>H-index</code>라는것을 맨처음에 모든 값의 합을 나눈 평균의 값이 H-Index라고 생각을 하여 아주 단순하게 생각했습니다. 당연히 틀린것이였습니다.</li>
<li><em>index</em>를 가지고 생각했어야 했는데, 값을 가지고 생각을 하였습니다. 위의 테스트케이스는 총 5편의 논문이 쓰여졌으며  <code>인덱스값이 DATA의 값보다 커지는 시점</code> <code>index &gt; data</code>을 찾아야 합니다. 그 시점이 H-index지점입니다.데이터값은 뒤에서부터 비교하고 인덱스값은 앞에서 비교하게 됩니다. 따라서 citations.size()-i-1의 형식이 나오게됩니다. -1을 해주는이유는 for문에서는citiation-1지점까지만 순회하기때문에 이에 따라 -1을 붙여준것입니다. 어디서부터 시작하고 어디서부터 끝내는지에 대해서 한번더 고민해보시면 되겠습니다.</li>
<li>Data = 5, Index = 3의 지점이 H-index에 해당하는값 입니다. <code>index&gt;data</code>의 지점에 index는 3의 값을 반환하게 됩니다. 이 값은 결국 h-index의 값을 나타내는것이며 <code>총 5편의 논문과 3회이상의 인용된 논문 3편, 3회 이하 인용된 논문 2편</code>이 되게 됩니다. 따라서 h-index의 값을 정확하게 도출해냈다고 할 수 있습니다.</li>
<li>문제들을 너무 어렵게 생각하여 풀었는데, <code>index</code>에 대해 유연하게 접근하면 쉽게 풀 수 있었던 문제라고 생각합니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-jeongryeol-puli"><a href="#1-jeongryeol-puli" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#1-정렬-풀이"></a> 1. 정렬 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 오름차순 정렬, 내림차순은 그 반대 v1 &gt; v2</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &lt; v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; citations;</span><br><span class="line">    citations.push_back(<span class="number">3</span>);</span><br><span class="line">    citations.push_back(<span class="number">0</span>);</span><br><span class="line">    citations.push_back(<span class="number">6</span>);</span><br><span class="line">    citations.push_back(<span class="number">1</span>);</span><br><span class="line">    citations.push_back(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    sort(citations.<span class="built_in">begin</span>(),citations.<span class="built_in">end</span>(),compare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;citations.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= citations[citations.<span class="built_in">size</span>()-i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>레벨2</tag>
        <tag>H-INDEX</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 위장</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EC%9C%84%EC%9E%A5/</url>
    <content><![CDATA[<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42578" target="_blank" rel="noopener">프로그래머스 위장문제</a></p>
<hr>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>
<p>옷 종류 = KEY, 옷 이름= VALUE를 두고 문제를 해결해야 한다고 생각하였습니다.</p>
</li>
<li>
<p><strong>#include&lt;unordered_map&gt;</strong> 헤더에 포함된 <strong>unordered_map&lt;string,int&gt;</strong> 형태로 사용하려고 하였습니다.</p>
<ul>
<li>unordered와 map중 unordered 자료구조를 사용한 이유는 map은 balanced tree의 형태를 가지고 있고, unordered_map는 hash형태로 이루어져있기 때문에 성능차이의 이슈로 특별한 이유가 없는 한 unordered_map을 사용하려고 합니다.</li>
<li>주어진 파라미터 <em>vector&lt;vector<string>&gt; clothes;</string></em> 의 형태가 주어졌는데요. 헷갈리는 부분이 있어서 설명하고 넘어가겠습니다. <em>vector&lt;vector<string></string></em>  2차원 벡터는 2차원 배열과 형태가 같습니다.</li>
<li>그리고, 2차원 벡터에 값을 넣게 될경우 주의해야할 점이 한가지 있습니다. 직접 접근해서 벡터값을 넣지 못하게 되어있다는것입니다. <em>clothes[0].push_back(“yellow_hat”)</em> 처럼 값을 넣으려고 하였지만, Xcode에서 <em>Invalid operands to binary expression</em> 에러가 나타났습니다. 직접적으로 2차원벡터에 값을 바로 접근하기가 불가능한 모양입니다. 그래서 1차원 벡터를 생성시킨 후 값을 넣어준 다음, 2차원 벡터에 값이 들어간 벡터를 넣었습니다. <s>프로그래머스에서 테스트케이스로 바로 Input을 주기 때문에 이러한 과정이 필요없지만, 직접 소스코드를 Xcode에 작성하면서 디버깅도 해보는편이라 저런형식으로 넣어주게 되었습니다.</s></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; clothes;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1.push_back(<span class="string">"yellow_hat"</span>); v1.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">v2.push_back(<span class="string">"blue_sunglasses"</span>); v2.push_back(<span class="string">"eyewear"</span>);</span><br><span class="line">v3.push_back(<span class="string">"green_turban"</span>); v3.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">clothes.push_back(v1);</span><br><span class="line">clothes.push_back(v2);</span><br><span class="line">clothes.push_back(v3);</span><br></pre></td></tr></table></figure>
<ul>
<li>1차원 행부분에서 열부분을 참고하시면 모든값들을 가져올 수 있겠습니다. 그리고, auto를 사용하셔서 값들을 가져올 수도 있습니다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>아래와 같은 3가지 형식으로 사용하시면 됩니다.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">    m[clothes[i][<span class="number">1</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p : clothes)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; p.at(<span class="number">0</span>);</span><br><span class="line">  	<span class="built_in">cout</span>&lt;&lt; p[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s : clothes)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>map에 있는 값들을 모두 확인하기 위해서는<strong>iterator</strong> 를 사용하셔야 합니다. 사용하실 방식은 다음과 같습니다. map과 map::iterator를 선언시켜줍니다. 그리고 iter 변수를 사용해서 unordered_map에 있는 모든 값들을 탐색을 시작하게 됩니다. iter-&gt;first, iter-&gt;second로 참조하여 접근하게 되면 해당 맵의 &lt;string,int&gt;형태로 저장된 값을 가져올 수 있습니다.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=m.<span class="built_in">begin</span>(); iter != m.<span class="built_in">end</span>(); iter++)&#123;</span><br><span class="line">    answer *= (iter-&gt;second+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>–</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>첫번째 테스트 케이스를 예시로 설명해보겠습니다. [headergear, eyewear] 의 두가지 종류가 있습니다. headgear를 입거나 안입는 경우 headgear = 2가지 경우, eyewear를 입거나 안입는 경우 1가지 경우입니다. 이것을 경우의 수로 적용시켜보겠습니다. (headgear +1)* (eyewear + 1)로 적용시키면 (2+1) * (1+1) = 6 - 1 = 5가지가 됩니다.</p>
<ul>
<li>이때 +1을 왜 더하는거야? 라고 생각하실분이 있으실 것입니다. 그 이유는 의상을 입을까? 말까? 라는 경우를 고려해주어야하기 때문입니다. 그래서 +1을 해주게 되는것입니다.</li>
<li>마지막에 -1은 또 왜해주나요? 적어도 하나의 의상을 입어야하므로 모두 입지않는 경우의 수인 1가지 경우를 빼주어야 결국 모든 경우의 수의 조합이 나오게 될 것입니다.</li>
</ul>
</li>
<li>
<p>모든 원소는 문자열로 이루어져있고, clothes는 [의상의 이름, 의상의 종류]의 형태를 가지고 있다. 따라서 해시 자료구조형을 사용해서 접근하면 된다. 처음에는 조합개념으로 dfs를 진행하려고 하였지만, 선택한 개수가 매번달라지는 경우때문에 dfs를 사용하지 않았습니다.</p>
</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  위장문제.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 15/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; clothes;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    v1.push_back(<span class="string">"yellow_hat"</span>); v1.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">    v2.push_back(<span class="string">"blue_sunglasses"</span>); v2.push_back(<span class="string">"eyewear"</span>);</span><br><span class="line">    v3.push_back(<span class="string">"green_turban"</span>); v3.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">    clothes.push_back(v1);</span><br><span class="line">    clothes.push_back(v2);</span><br><span class="line">    clothes.push_back(v3);</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        m[clothes[i][<span class="number">1</span>]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="keyword">for</span>(iter=m.<span class="built_in">begin</span>(); iter != m.<span class="built_in">end</span>(); iter++)&#123;</span><br><span class="line">        answer *= (iter-&gt;second+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; answer<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>위장</tag>
        <tag>레벨2</tag>
        <tag>해시</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Command</title>
    <url>/hexo-%20command/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start"><a href="#quick-start" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="front-formatter"><a href="#front-formatter" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#front-formatter"></a> front formatter</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post.md 머리말</span></span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 태그명 #(예) 헥소</span><br><span class="line">- 깃허브</span><br><span class="line"></span><br><span class="line"># 또는 아래와 같이 사용 할수 있다.</span><br><span class="line">tags: [헥소, 깃허브]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 카테고리명 #(예) 깃허브</span><br><span class="line">- 서브카테고리명 #(예) 헥소</span><br><span class="line"></span><br><span class="line"># 또는 아래 처럼 사용 할수 있다.</span><br><span class="line">categories: [깃허브, 헥소]</span><br></pre></td></tr></table></figure>
<h3 id><a href="#" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#"></a> </h3>
<h3 id="create-a-new-post"><a href="#create-a-new-post" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new draft <span class="string">"My new Draft"</span></span><br><span class="line">$ hexo new layout <span class="string">"My New layout"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server"><a href="#run-server" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server post</span><br><span class="line">$ hexo server draft</span><br><span class="line">$ hexo server layout</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files"><a href="#generate-static-files" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a href="#deploy-to-remote-sites" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="generate-static-files-and-deploy-to-remote-sites"><a href="#generate-static-files-and-deploy-to-remote-sites" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#generate-static-files-and-deploy-to-remote-sites"></a> Generate static files and Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<h3 id="image-files-path"><a href="#image-files-path" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#image-files-path"></a> image files path</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source/images/image file path</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ETC</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>command</tag>
      </tags>
  </entry>
</search>
