<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codility PermMissingElem</title>
    <url>/Codility-20210228-codility-permmissingelem/</url>
    <content><![CDATA[<h1 id="codility-permmissingelem"><a href="#codility-permmissingelem" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-permmissingelem"></a> <a href="https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/" target="_blank" rel="noopener">codility PermMissingElem</a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ol>
<li>check변수를 선언하여 나온 elements를 모두 체크를 시켜줍니다.</li>
<li>값은 1부터 range까지 진행되므로 1부터 진행하여 check값까지 진행하면서 false인값일때 해당 엘리먼트의 값을 반환시켜줍니다.</li>
</ol>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermMissingElem_lesson03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[A.length+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 0, 1, 2, 3</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++)&#123;</span><br><span class="line">            check[A[i]] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=check.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                answer = i;</span><br><span class="line">                System.out.println(answer);</span><br><span class="line">                <span class="keyword">return</span> answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codility</category>
      </categories>
      <tags>
        <tag>Codility</tag>
        <tag>TimeComplexity</tag>
      </tags>
  </entry>
  <entry>
    <title>Codility Frog Jump</title>
    <url>/Codility-20210228-codility-frog-jump/</url>
    <content><![CDATA[<h1 id="codility-frog-jump"><a href="#codility-frog-jump" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-frog-jump"></a> <a href="https://app.codility.com/programmers/lessons/3-time_complexity/frog_jmp/" target="_blank" rel="noopener">Codility frog jump</a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ol>
<li>최대한 Y의 범위까지 몇번을 점프할 수 있는지를 확인하는 문제입니다.<br>
처음에 range를 제대로 보지못하고 while문으로 처리를 하였는데 시간초과가 나왔습니다.<br>
이분탐색으로 풀어야하나라는 생각을 했지만 단순히 생각하면 매우 간단한 문제였습니다.</li>
<li>전체 범위 - 현재 위치를 빼주고 해당 점프의 value만큼을 나누어주면 몇번뛰었는지 개수를 알 수 있습니다.<br>
즉, Y-X -&gt; Y-X / D 의 값으로 나눈값을 처리하였습니다. 나머지가 0이면 해당점프까지만 진행할 수 있고, 나머지가 그것보다 크다면 그것보다 한번더 점프가 가능합니다.</li>
</ol>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<p>O(1)</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">frogjmp_lesson03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">10</span>,<span class="number">85</span>,<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> X, <span class="keyword">int</span> Y, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        <span class="comment">// 단순히 반복문으로 터지는 로직</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int jump = X;</span></span><br><span class="line"><span class="comment">        int answer = 0;</span></span><br><span class="line"><span class="comment">        while(jump &lt; Y)&#123;</span></span><br><span class="line"><span class="comment">            jump += D;</span></span><br><span class="line"><span class="comment">            answer++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println("answer = " + answer);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> jumpValue = Y-X;</span><br><span class="line">        <span class="keyword">int</span> jumpSize = jumpValue / D;</span><br><span class="line">        <span class="keyword">int</span> answer = (jumpSize % D) == <span class="number">0</span>? jumpSize : jumpSize+<span class="number">1</span>;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codility</category>
      </categories>
      <tags>
        <tag>Codility</tag>
        <tag>TimeComplexity</tag>
      </tags>
  </entry>
  <entry>
    <title>Codility Odd Occurrences In Array</title>
    <url>/Codility-20210228-codility-oddoccurrencesinarray/</url>
    <content><![CDATA[<h1 id="codility-oddoccurrencesinarray"><a href="#codility-oddoccurrencesinarray" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-oddoccurrencesinarray"></a> <a href="https://app.codility.com/programmers/lessons/2-arrays/" target="_blank" rel="noopener">Codility OddOccurrencesInArray </a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ol>
<li>map을 사용하여 짝을 이루는지 안이루는지 value를 설정합니다.<br>
만약 동일한 값이 존재하면 value+1, 그게 아니면 1</li>
<li>map에 존재하는 value중에서 홀수인 값의 key값을 리턴해주면 정답이 됩니다.<br>
저 같은 경우 홀수값이 아닌 반드시 1의 값일 경우로 조건을 걸었다가 68%에서 터져서 다시 살펴보니 문제를 잘못읽어 홀수에 대한 처리를 정확하게 하지 못했습니다.</li>
</ol>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OddOccurrencesInArray_lesson02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">9</span>&#125;);</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">42</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!m.containsKey(A[i]))&#123;</span><br><span class="line">                m.put(A[i], <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> mValue = m.get(A[i]);</span><br><span class="line">                m.put(A[i], mValue+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Integer key :  m.keySet())&#123;</span><br><span class="line">            <span class="keyword">int</span> value = m.get(key);</span><br><span class="line">            <span class="keyword">if</span>(value % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                answer = key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"answer = "</span> + answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codility</category>
      </categories>
      <tags>
        <tag>Codility</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Codility CycleRotation</title>
    <url>/Codility-20210228-codility-cycle-rotation/</url>
    <content><![CDATA[<h1 id="codility-cyclerotation"><a href="#codility-cyclerotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-cyclerotation"></a> <a href="https://app.codility.com/programmers/lessons/2-arrays/" target="_blank" rel="noopener">Codility CycleRotation</a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>linkedlist를 사용하여 뒤에있는값들을 shift해주면 간단하게 풀리는 문제.</li>
<li>만약 배열이 빈값이 들어올 경우 들어온 값을 그대로 리턴해주면 됩니다. 케이스하나에 걸려버렸습니다.</li>
</ul>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicRotation_lesson02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>&#125;,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K) &#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(A.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> A;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++)&#123;</span><br><span class="line">            linkedList.add(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> last = linkedList.removeLast();</span><br><span class="line">            linkedList.addFirst(last);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[linkedList.size()];</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : linkedList) &#123;</span><br><span class="line">            answer[idx++] = integer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codility</category>
      </categories>
      <tags>
        <tag>Codility</tag>
        <tag>Array</tag>
        <tag>linkedlist</tag>
      </tags>
  </entry>
  <entry>
    <title>Codility Binarygap</title>
    <url>/Codility-20210228-codility-binary-gap/</url>
    <content><![CDATA[<h1 id="codility-binary-gap"><a href="#codility-binary-gap" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#codility-binary-gap"></a> <a href="https://app.codility.com/programmers/lessons/2-arrays/" target="_blank" rel="noopener">Codility Binary Gap</a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>이진수를 활용하여 이진수의 1의 위치에서 가장 최댓값을 구하는 간단한 문제였습니다. 약 20분정도 소요된 문제입니다. 처음에는 Integer.binaryString() 함수를 사용하지 않고 직접 구현을 하였는데, 불 필요해보였습니다. reverse()도 따로해줘야하고 시간복잡도면에서 뛰어나지 않다고 생각을 하게 되었습니다.</p>
<ol>
<li>N의 값 이진수로 변환합니다.</li>
<li>이진수로 변환후 1의 위치를 리스트에 저장합니다.</li>
<li>리스트에 담긴 위치별로 substring을 사용하여 값에 대한 length를 체크하여 최댓값을 구해줍니다.</li>
</ol>
<p>시간복잡도: O(N)</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binaryGap_lesson01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">9</span>);</span><br><span class="line">        solution(<span class="number">1162</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code in Java SE 8</span></span><br><span class="line">        <span class="comment">/* 직접 구현하기 이진수로 변경</span></span><br><span class="line"><span class="comment">        List&lt;Integer&gt; arrList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">                while(N &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">                    int div = N % 2;</span></span><br><span class="line"><span class="comment">                    N = N / 2;</span></span><br><span class="line"><span class="comment">                    arrList.add(div);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                Collections.reverse(arrList);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String binaryStr = Integer.toBinaryString(N);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;binaryStr.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(binaryStr.charAt(i) == <span class="string">'1'</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                arrList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                String subStr = binaryStr.substring(arrList.get(i), arrList.get(i+<span class="number">1</span>));</span><br><span class="line">                answer = Math.max(answer, subStr.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println("answer = " + answer);</span></span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codility</category>
      </categories>
      <tags>
        <tag>Codility</tag>
        <tag>binary</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱서치 Bucket Aggregation(버켓 어그리게이션)</title>
    <url>/ELK-20210219-elk-bucket-aggregation/</url>
    <content><![CDATA[<h1 id="elk-elraseutigseoci-bucket-aggregation"><a href="#elk-elraseutigseoci-bucket-aggregation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#elk-엘라스틱서치-bucket-aggregation"></a> ELK  엘라스틱서치 Bucket Aggregation</h1>
<blockquote>
<p>Bucket Aggregation이란?</p>
</blockquote>
<p>집계는 데이터를 그룹화하고 통계치를 얻는 기능입니다. SQL GROUP BY 및 SQL 집계 기능과 대략 같다고 보면 가장 쉽게 이해할 수 있습니다. Elasticsearch에서는 하나의 응답에서 검색 적중을 반환하는 검색을 실행함과 동시에 그와는 별도로 집계 결과를 반환할 수 있습니다. 즉 간결한 API를 사용하여 쿼리와 여러 집계를 실행하고 두 작업(또는 둘 중 하나)의 결과를 한꺼번에 얻어 네트워크 왕복을 피할 수 있다는 점에서 강력하고 효율적입니다.</p>
<p>요약하면, 평균을 구할때는 Matrix Aggregation을 사용하고 Bucket Aggregation은 그룹 및 통계치 기능하는 종류중 하나입니다.</p>
<blockquote>
<p>AGGREGATIONS STRUCTURE(어그리게이션 구조)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET &lt;인덱스명&gt;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    … &lt;쿼리 구문&gt; …</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"&lt;임의의 aggregation 1&gt;"</span>: &#123;</span><br><span class="line">      <span class="string">"&lt;aggregation 종류&gt;"</span>: &#123;</span><br><span class="line">        … &lt;aggreagation 구문&gt; …</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"&lt;임의의 aggregation 2&gt;"</span>: &#123;</span><br><span class="line">      <span class="string">"&lt;aggregation 종류&gt;"</span>: &#123;</span><br><span class="line">        … &lt;aggreagation 구문&gt; …</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Aggregation 에는 크게 Metrics 그리고 Bucket 두 종류가 있습니다. Aggregations 구문이나 옵션에 metrics 이거나 bucket 이라고 따로 명시를 하지는 않습니다. Aggregation 종류들 중 숫자 또는 날짜 필드의 값을 가지고 계산을 하는 aggregation 들을 metrics aggregation 이라고 분류하고, 범위나 keyword 값 등을 가지고 도큐먼트들을 그룹화 하는 aggregation 들을 bucket aggregation 이라고 분류 합니다.</p>
<blockquote>
<p>basketball 인덱스 생성</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H &apos;Content-Type:application/json&apos; localhost:9200/basketball</span><br><span class="line">&#123;&quot;acknowledged&quot;:true,&quot;shards_acknowledged&quot;:true,&quot;index&quot;:&quot;basketball&quot;&#125;%</span><br></pre></td></tr></table></figure>
<blockquote>
<p>baseketball 인덱스 매핑 조회<br>
해당 basketball_mapping JSON값들을 확인해보겠습니다.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vi</span> basketball_mapping.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  2     <span class="string">"record"</span> : &#123;</span><br><span class="line">  3         <span class="string">"properties"</span> : &#123;</span><br><span class="line">  4             <span class="string">"team"</span> : &#123;</span><br><span class="line">  5                 <span class="string">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">  6                 <span class="string">"fielddata"</span> : <span class="literal">true</span></span><br><span class="line">  7             &#125;,</span><br><span class="line">  8             <span class="string">"name"</span> : &#123;</span><br><span class="line">  9                 <span class="string">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line"> 10                 <span class="string">"fielddata"</span> : <span class="literal">true</span></span><br><span class="line"> 11             &#125;,</span><br><span class="line"> 12             <span class="string">"points"</span> : &#123;</span><br><span class="line"> 13                 <span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line"> 14             &#125;,</span><br><span class="line"> 15             <span class="string">"rebounds"</span> : &#123;</span><br><span class="line"> 16                 <span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line"> 17             &#125;,</span><br><span class="line"> 18             <span class="string">"assists"</span> : &#123;</span><br><span class="line"> 19                 <span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line"> 20             &#125;,</span><br><span class="line"> 21             <span class="string">"blocks"</span> : &#123;</span><br><span class="line"> 22                 <span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line"> 23             &#125;,</span><br><span class="line"> 24             <span class="string">"submit_date"</span> : &#123;</span><br><span class="line"> 25                 <span class="string">"type"</span> : <span class="string">"date"</span>,</span><br><span class="line"> 26                 <span class="string">"format"</span> : <span class="string">"yyyy-MM-dd"</span></span><br><span class="line"> 27             &#125;</span><br><span class="line"> 28         &#125;</span><br><span class="line"> 29     &#125;</span><br><span class="line"> 30 &#125;</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<blockquote>
<p>baseketball 매핑 타입 삽입</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/basketball/record/_mapping&amp;include_type_name=true'</span> -d @basketball_mapping.json</span><br><span class="line">&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"_mapping&amp;include_type_name=true"</span>,<span class="string">"_version"</span>:5,<span class="string">"result"</span>:<span class="string">"updated"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:12,<span class="string">"_primary_term"</span>:1&#125;%</span><br></pre></td></tr></table></figure>
<p><strong>의미</strong></p>
<p>basketball: Index<br>
record: Type<br>
_mapping: Mapping<br>
-d: direct</p>
<blockquote>
<p>baseketball documents 삽입</p>
</blockquote>
<p><strong>twoteam_basketball.json</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"1"</span> &#125;     &#125;</span><br><span class="line"> 2 &#123;<span class="string">"team"</span> : <span class="string">"Chicago"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>, <span class="string">"points"</span> : 30,<span class="string">"rebounds"</span> :     3,<span class="string">"assists"</span> : 4, <span class="string">"blocks"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span>&#125;</span><br><span class="line"> 3 &#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"2"</span> &#125;     &#125;</span><br><span class="line"> 4 &#123;<span class="string">"team"</span> : <span class="string">"Chicago"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>,<span class="string">"points"</span> : 20,<span class="string">"rebounds"</span> :     5,<span class="string">"assists"</span> : 8, <span class="string">"blocks"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"1996-10-13"</span>&#125;</span><br><span class="line"> 5 &#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"3"</span> &#125;     &#125;</span><br><span class="line"> 6 &#123;<span class="string">"team"</span> : <span class="string">"LA"</span>,<span class="string">"name"</span> : <span class="string">"Kobe Bryant"</span>,<span class="string">"points"</span> : 30,<span class="string">"rebounds"</span> : 2,<span class="string">"assis    ts"</span> : 8, <span class="string">"blocks"</span> : 5, <span class="string">"submit_date"</span> : <span class="string">"2014-10-13"</span>&#125;</span><br><span class="line"> 7 &#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"4"</span> &#125;     &#125;</span><br><span class="line"> 8 &#123;<span class="string">"team"</span> : <span class="string">"LA"</span>,<span class="string">"name"</span> : <span class="string">"Kobe Bryant"</span>,<span class="string">"points"</span> : 40,<span class="string">"rebounds"</span> : 4,<span class="string">"assis    ts"</span> : 8, <span class="string">"blocks"</span> : 6, <span class="string">"submit_date"</span> : <span class="string">"2014-11-13"</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>document삽입</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_bulk'</span> --data-binary @twoteam_basketball.json</span><br><span class="line">&#123;<span class="string">"took"</span>:411,<span class="string">"errors"</span>:<span class="literal">false</span>,<span class="string">"items"</span>:[&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:1,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:201&#125;&#125;,&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"2"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:2,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:201&#125;&#125;,&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"3"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:3,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:201&#125;&#125;,&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"4"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:4,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:201&#125;&#125;]&#125;%</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Term Aggregation(GROUP BY TEAM)</p>
</blockquote>
<p><strong>terms_aggs.json 데이터 확인</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi terms_aggs.json</span><br><span class="line"></span><br><span class="line">1 &#123;</span><br><span class="line">2     <span class="string">"size"</span> : 0,</span><br><span class="line">3     <span class="string">"aggs"</span> : &#123;</span><br><span class="line">4         <span class="string">"players"</span> : &#123;</span><br><span class="line">5             <span class="string">"terms"</span> : &#123;</span><br><span class="line">6                 <span class="string">"field"</span> : <span class="string">"team"</span></span><br><span class="line">7             &#125;</span><br><span class="line">8         &#125;</span><br><span class="line">9     &#125;</span><br><span class="line">10 &#125;</span><br></pre></td></tr></table></figure>
<p><strong>terms_aggs.json 조회</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$curl -XGET -H &apos;Content-Type:application/json&apos; &apos;localhost:9200/_search?pretty&apos; --data-binary @terms_aggs.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 880,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 7,</span><br><span class="line">    &quot;successful&quot; : 6,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 1,</span><br><span class="line">    &quot;failures&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;shard&quot; : 0,</span><br><span class="line">        &quot;index&quot; : &quot;basketball&quot;,</span><br><span class="line">        &quot;node&quot; : &quot;gsruIbFGTQmlTUIk7jr1Aw&quot;,</span><br><span class="line">        &quot;reason&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;illegal_argument_exception&quot;,</span><br><span class="line">          &quot;reason&quot; : &quot;Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [team] in order to load field data by uninverting the inverted index. Note that this can use significant memory.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 48,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;players&quot; : &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot; : 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot; : 0,</span><br><span class="line">      &quot;buckets&quot; : [ ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 Aggregation을 조회해온것을 확인할 수 있습니다.</p>
<blockquote>
<p>AGGS(STATS GROUP BT TEAM)</p>
</blockquote>
<p><strong>vi stats_by_team.json 데이터확인</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vi</span> stat_by_team.json</span><br><span class="line">1 &#123;</span><br><span class="line"> 2     <span class="string">"size"</span> : 0,</span><br><span class="line"> 3     <span class="string">"aggs"</span> : &#123;</span><br><span class="line"> 4         <span class="string">"team_stats"</span> : &#123;</span><br><span class="line"> 5             <span class="string">"terms"</span> : &#123;</span><br><span class="line"> 6                 <span class="string">"field"</span> : <span class="string">"team"</span></span><br><span class="line"> 7             &#125;,</span><br><span class="line"> 8             <span class="string">"aggs"</span> : &#123;</span><br><span class="line"> 9                 <span class="string">"stats_score"</span> : &#123;</span><br><span class="line">10                     <span class="string">"stats"</span> : &#123;</span><br><span class="line">11                         <span class="string">"field"</span> : <span class="string">"points"</span></span><br><span class="line">12                     &#125;</span><br><span class="line">13                 &#125;</span><br><span class="line">14             &#125;</span><br><span class="line">15         &#125;</span><br><span class="line">16     &#125;</span><br><span class="line">17 &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Aggregation 내용 확인하기</p>
</blockquote>
<p>size는 보기편하기위해서 넣어준 속성이되고, 팀별로 documents들을 묶고, 나머지 어그리제이션을 사용하여 점수별로 Stat를 한번 표시해라 라는 의미가 됩니다. 각 팀별로 통계분석을 도출하면 되는 뜻입니다.</p>
<p><strong>AGGS(STATS GROUP BT TEAM)조회</strong></p>
<blockquote>
<p>결과값 데이터가 제대로 들어가지않은부분이 있어서 다시 수정 필요.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_search?q=points&amp;pretty'</span> --data-binary @stats_by_team.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 44,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 7,</span><br><span class="line">    <span class="string">"successful"</span> : 6,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 1,</span><br><span class="line">    <span class="string">"failures"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"shard"</span> : 0,</span><br><span class="line">        <span class="string">"index"</span> : <span class="string">"basketball"</span>,</span><br><span class="line">        <span class="string">"node"</span> : <span class="string">"gsruIbFGTQmlTUIk7jr1Aw"</span>,</span><br><span class="line">        <span class="string">"reason"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">          <span class="string">"reason"</span> : <span class="string">"Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [team] in order to load field data by uninverting the inverted index. Note that this can use significant memory."</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 0,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : null,</span><br><span class="line">    <span class="string">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"team_stats"</span> : &#123;</span><br><span class="line">      <span class="string">"doc_count_error_upper_bound"</span> : 0,</span><br><span class="line">      <span class="string">"sum_other_doc_count"</span> : 0,</span><br><span class="line">      <span class="string">"buckets"</span> : [ ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference</p>
</blockquote>
<p><a href="https://esbook.kimjmin.net/08-aggregations/8.2-bucket-aggregations" target="_blank" rel="noopener">https://esbook.kimjmin.net/08-aggregations/8.2-bucket-aggregations</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Aggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱서치 Metric Aggregation(메트릭 어그리게이션)</title>
    <url>/ELK-20210219-elk-metric-aggregation/</url>
    <content><![CDATA[<h1 id="elraseutigseoci-metric-eogeurigeisyeon-metric-aggregation"><a href="#elraseutigseoci-metric-eogeurigeisyeon-metric-aggregation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#엘라스틱서치-metric-어그리게이션metric-aggregation"></a> 엘라스틱서치 Metric 어그리게이션(Metric Aggregation)</h1>
<blockquote>
<p>Aggregation ?</p>
</blockquote>
<p>Elasticsearch 는 검색엔진으로 개발되었지만 지금은 로그분석을 비롯해 다양한 목적의데이터 시스템으로 사용되고 있습니다. Elasticsearch가 이렇게 다양한 용도로 활용이 될 수 있는 이유는 데이터를 단순히 검색만 하는 것이 아니라 여러가지 연산을 할 수 있는 Aggregation 기능이 있기 때문입니다</p>
<blockquote>
<p>메트릭 어그리게이션(Metric Aggregation)?<br>
가장 흔하게 사용되는 metrics aggregations 은 min, max, sum, avg aggregation 입니다. 순서대로 명시한 필드의 최소, 최대, 합, 평균 값을 가져오는 aggregation 입니다.<br>
엘라스틱서치안에 있는 Document안에 있는 값을 조합을 통하여 값을 핸들링할때 사용하는 컨셉이라고 할 수 있습니다.</p>
</blockquote>
<blockquote>
<p>메트릭 어그리게이션(Metric Aggregation) 구조</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET my_stations/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: 0,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"all_passangers"</span>: &#123;</span><br><span class="line">      <span class="string">"sum"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"passangers"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Data</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"team"</span> : <span class="string">"Chicago Bulls"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>, <span class="string">"points"</span> : 30,<span class="string">"rebounds"</span> : 3,<span class="string">"assists"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span>&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"team"</span> : <span class="string">"Chicago Bulls"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>,<span class="string">"points"</span> : 20,<span class="string">"rebounds"</span> : 5,<span class="string">"assists"</span> : 8, <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Data Insert</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_bulk'</span> --data-binary @simple_basketball.json</span><br><span class="line">&#123;<span class="string">"took"</span>:58,<span class="string">"errors"</span>:<span class="literal">false</span>,<span class="string">"items"</span>:[&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:2,<span class="string">"result"</span>:<span class="string">"updated"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:2,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:200&#125;&#125;,&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"2"</span>,<span class="string">"_version"</span>:2,<span class="string">"result"</span>:<span class="string">"updated"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:3,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:200&#125;&#125;]&#125;%</span><br></pre></td></tr></table></figure>
<p>다음과 같은 데이터를 -XPOST 옵션과 --data-binary를 통해 넣어주겠습니다.<br>
평균값을 넣어주는 json파일의 형식을 조회해오면 다음과 같은 값들을 넣을 수 있습니다.</p>
<blockquote>
<p>평균값 json 조회</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET localhost:9200/_search\?pretty --data-binary @avg_point_aggs.json</span><br></pre></td></tr></table></figure>
<blockquote>
<p>평균값 json 조회 결과</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_search?pretty'</span> --data-binary @avg_points_aggs.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 21,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 7,</span><br><span class="line">    <span class="string">"successful"</span> : 7,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 50,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : null,</span><br><span class="line">    <span class="string">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"avg_score"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 25.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 Metric Aggregation을 사용하여 평균값을 구한것을 확인할 수 있습니다.</p>
<blockquote>
<p>최댓값 구하기</p>
</blockquote>
<p><strong>Data</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"size"</span> : 0,</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"max_score"</span> : &#123;</span><br><span class="line">            <span class="string">"max"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"points"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>최댓값 조회</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_search?pretty'</span> --data-binary @max_points_aggs.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 36,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 7,</span><br><span class="line">    <span class="string">"successful"</span> : 7,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 50,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : null,</span><br><span class="line">    <span class="string">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"max_score"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 30.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 Metric Aggregation을 사용하여 최댓값을 구한것을 확인할 수 있습니다.</p>
<blockquote>
<p>최솟값 구하기</p>
</blockquote>
<p><strong>Data</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"size"</span> : 0,</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"min_score"</span> : &#123;</span><br><span class="line">            <span class="string">"min"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"points"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>최솟값 조회</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_search?pretty'</span> --data-binary @min_points_aggs.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 268,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 7,</span><br><span class="line">    <span class="string">"successful"</span> : 7,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 50,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : null,</span><br><span class="line">    <span class="string">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"min_score"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 20.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 Metric Aggregation을 사용하여 최솟값을 구한것을 확인할 수 있습니다.</p>
<blockquote>
<p>모든합(SUM) 구하기</p>
</blockquote>
<p><strong>Data</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"size"</span> : 0,</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"sum_score"</span> : &#123;</span><br><span class="line">            <span class="string">"sum"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"points"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>모든합 조회</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_search?pretty'</span> --data-binary @sum_points_aggs.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 17,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 7,</span><br><span class="line">    <span class="string">"successful"</span> : 7,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 50,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : null,</span><br><span class="line">    <span class="string">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"sum_score"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 50.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 Metric Aggregation을 사용하여 모든합을 구한것을 확인할 수 있습니다.</p>
<blockquote>
<p>모든값 목록 (STAT) 구하기</p>
</blockquote>
<p><strong>Data</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"size"</span> : 0,</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"stats_score"</span> : &#123;</span><br><span class="line">            <span class="string">"stats"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"points"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>모든값 목록 (STAT) 구하기</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_search?pretty'</span> --data-binary @stat_points_aggs.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 66,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 7,</span><br><span class="line">    <span class="string">"successful"</span> : 7,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 50,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : null,</span><br><span class="line">    <span class="string">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"stats_score"</span> : &#123;</span><br><span class="line">      <span class="string">"count"</span> : 2,</span><br><span class="line">      <span class="string">"min"</span> : 20.0,</span><br><span class="line">      <span class="string">"max"</span> : 30.0,</span><br><span class="line">      <span class="string">"avg"</span> : 25.0,</span><br><span class="line">      <span class="string">"sum"</span> : 50.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 Metric Aggregation을 사용하여 모든 연사결과의 목록을 구한것을 확인할 수 있습니다.</p>
<blockquote>
<p>Reference</p>
</blockquote>
<p><a href="https://esbook.kimjmin.net/08-aggregations/8.1-metrics-aggregations" target="_blank" rel="noopener">https://esbook.kimjmin.net/08-aggregations/8.1-metrics-aggregations</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>MetricAggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱서치 Search Function</title>
    <url>/ELK-20210219-elk-search-function/</url>
    <content><![CDATA[<h1 id="elk-elraseutig-seoci-searchfunction"><a href="#elk-elraseutig-seoci-searchfunction" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#elk-엘라스틱-서치-searchfunction"></a> ELK 엘라스틱 서치 SearchFunction</h1>
<p>이번에 포스팅에서는 ELK의 SearchFunction에 대해서 살펴보겠습니다.</p>
<blockquote>
<p>Data</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type:application/json'</span> <span class="string">'localhost:9200/_bulk'</span> --dat</span><br><span class="line">a-binary @simple_basketball.json</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"took"</span>:1391,<span class="string">"errors"</span>:<span class="literal">false</span>,<span class="string">"items"</span>:[&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:0,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:201&#125;&#125;,&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"2"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:1,<span class="string">"_primary_term"</span>:1,<span class="string">"status"</span>:201&#125;&#125;]&#125;%</span><br></pre></td></tr></table></figure>
<p>다음과 같은 데이터를 가지고 확인을 해보겠습니다. 그러면 두개의 Document가 삽입되게 됩니다.</p>
<blockquote>
<p>Search</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET localhost:9200/basketball/record/_search\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 80,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 1,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 2,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : 1.0,</span><br><span class="line">    <span class="string">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"basketball"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"record"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : 1.0,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">          <span class="string">"team"</span> : <span class="string">"Chicago Bulls"</span>,</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>,</span><br><span class="line">          <span class="string">"points"</span> : 30,</span><br><span class="line">          <span class="string">"rebounds"</span> : 3,</span><br><span class="line">          <span class="string">"assists"</span> : 4,</span><br><span class="line">          <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"basketball"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"record"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : 1.0,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">          <span class="string">"team"</span> : <span class="string">"Chicago Bulls"</span>,</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>,</span><br><span class="line">          <span class="string">"points"</span> : 20,</span><br><span class="line">          <span class="string">"rebounds"</span> : 5,</span><br><span class="line">          <span class="string">"assists"</span> : 8,</span><br><span class="line">          <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 데이터가 정상적으로 들어가고 Documents가 조회되는것들을 확인할 수 있습니다.</p>
<blockquote>
<p>SEARCH -URI</p>
</blockquote>
<p>-URI 옵션을 사용하여 제가 조회할 데이터들을 조회할 수 있습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'localhost:9200/basketball/record/_search?q=points:30&amp;pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 18,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 1,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 1,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : 1.0,</span><br><span class="line">    <span class="string">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"basketball"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"record"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : 1.0,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">          <span class="string">"team"</span> : <span class="string">"Chicago Bulls"</span>,</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>,</span><br><span class="line">          <span class="string">"points"</span> : 30,</span><br><span class="line">          <span class="string">"rebounds"</span> : 3,</span><br><span class="line">          <span class="string">"assists"</span> : 4,</span><br><span class="line">          <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SEARCH - REQUEST BODY</p>
</blockquote>
<p>이번에 살펴볼 옵션은 -REQUEST BODY옵션입니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET -H <span class="string">'Content-Type:application/json'</span> localhost:9200/basketball/record/_search -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"query" : &#123;</span></span><br><span class="line"><span class="string">"term" : &#123;"points" : 30&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line">&#123;<span class="string">"took"</span>:16,<span class="string">"timed_out"</span>:<span class="literal">false</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:1,<span class="string">"successful"</span>:1,<span class="string">"skipped"</span>:0,<span class="string">"failed"</span>:0&#125;,<span class="string">"hits"</span>:&#123;<span class="string">"total"</span>:&#123;<span class="string">"value"</span>:1,<span class="string">"relation"</span>:<span class="string">"eq"</span>&#125;,<span class="string">"max_score"</span>:1.0,<span class="string">"hits"</span>:[&#123;<span class="string">"_index"</span>:<span class="string">"basketball"</span>,<span class="string">"_type"</span>:<span class="string">"record"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_score"</span>:1.0,<span class="string">"_source"</span>:&#123;<span class="string">"team"</span> : <span class="string">"Chicago Bulls"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>, <span class="string">"points"</span> : 30,<span class="string">"rebounds"</span> : 3,<span class="string">"assists"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span>&#125;&#125;]&#125;&#125;%</span><br></pre></td></tr></table></figure>
<p>다음과 같이 직접 REQUEST BODY를 사용하여 값을 조회해오는모습을 볼 수 있습니다.<br>
-d는 Direct로 처리하기 위한 옵션입니다.</p>
<blockquote>
<p>참고사항</p>
</blockquote>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-request-body.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-request-body.html</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>SearchFunction</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱 서치 Mapping</title>
    <url>/ELK-20210219-elk-mapping/</url>
    <content><![CDATA[<h1 id="elk-elraseutigseoci-mapping"><a href="#elk-elraseutigseoci-mapping" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#elk-엘라스틱서치-mapping"></a> ELK 엘라스틱서치 MAPPING</h1>
<p>ELK에서 말하는 개념은 RDS에서 스키마와 동일한 의미를 가지고 있습니다.<br>
Mapping없이 ELK 데이터를 넣는것은 상당히 위험하고 Document Mapping이 되어있지않다면 Date, String과 같은 구별이 가지않을 수 있습니다.</p>
<p>잘못지정된 타입같은 경우 Kibana를 사용하여 데이터를 분리하여 보여주고 싶거나 데이터값의 평균값을 구할때 제대로된 계산이 처리되지 않을 수 있습니다.</p>
<blockquote>
<p>Mapping JSON</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"class"</span> : &#123;</span><br><span class="line">        <span class="string">"properties"</span> : &#123;</span><br><span class="line">            <span class="string">"title"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"professor"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"major"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"semester"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"student_count"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"unit"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"rating"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"submit_date"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"date"</span>,</span><br><span class="line">                <span class="string">"format"</span>: <span class="string">"yyyy-MM-dd"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"school_location"</span> : &#123;</span><br><span class="line">                <span class="string">"type"</span> : <span class="string">"geo_point"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>현재 Mapping 관계를 사용해보기 위해서 사용해볼 json형식은 다음과 같습니다.<br>
Type:geo_point 같은 경우 Kibana Data시각화할때, 지도위에서 학교위치를 직접 표시할 수 있습니다. Type이 Date Format을 사용할경우 날짜별로 시각화를 처리할 수도 있습니다.</p>
<p>이제 다음과 같이 이전에 사용하였던 classes인덱스를 삭제해주고 다시 classes라는 인덱스를 재생성하여 Mapping 처리를  알아 보도록 하겠습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -XDELETE http://localhost:9200/classes</span><br><span class="line">&#123;<span class="string">"acknowledged"</span>:<span class="literal">true</span>&#125;%</span><br><span class="line"> kgh  ~</span><br><span class="line"><span class="variable">$curl</span> -XPUT http://localhost:9200/classes</span><br><span class="line">&#123;<span class="string">"acknowledged"</span>:<span class="literal">true</span>,<span class="string">"shards_acknowledged"</span>:<span class="literal">true</span>,<span class="string">"index"</span>:<span class="string">"classes"</span>&#125;%</span><br><span class="line"> kgh  ~</span><br><span class="line"><span class="variable">$curl</span> -XGET http://localhost:9200/classes\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"classes"</span> : &#123;</span><br><span class="line">    <span class="string">"aliases"</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">"mappings"</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">"settings"</span> : &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"routing"</span> : &#123;</span><br><span class="line">          <span class="string">"allocation"</span> : &#123;</span><br><span class="line">            <span class="string">"include"</span> : &#123;</span><br><span class="line">              <span class="string">"_tier_preference"</span> : <span class="string">"data_content"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"number_of_shards"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"provided_name"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"creation_date"</span> : <span class="string">"1613711830633"</span>,</span><br><span class="line">        <span class="string">"number_of_replicas"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"uuid"</span> : <span class="string">"q99TJFowRqu7LFB1DjowZQ"</span>,</span><br><span class="line">        <span class="string">"version"</span> : &#123;</span><br><span class="line">          <span class="string">"created"</span> : <span class="string">"7110199"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 인덱스를 삭제하고 재 생성한것을 보실 수 있습니다. 여기서 중요한점은<br>
mapping이 현재 비어져있다는것입니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">'Content-Type:application/json'</span> <span class="string">'http://localhost:9200/classes/class/_mapping?include_type_name=true'</span> -d @classesRating_mapping.json</span><br><span class="line">&#123;<span class="string">"acknowledged"</span>:<span class="literal">true</span>&#125;%</span><br></pre></td></tr></table></figure>
<p>Elasticsearch 6.0 will show this error. 가 발생하였는데, 제가 지금쓰고 있는 버전은 7.11버전을 사용중입니다.<br>
즉, elasticsearch 7.x 버전부터는 curl 리퀘스트에서 헤더를 명확히 설정해주어야하고 또 mappign을 생성할 때에는 include_type_name을 true로 설정해주어야합니다.<br>
이에 대해서 원인을 찾아보니 elasticsearch가 mapping 타입 중 string을 삭제하고 text로 변경하여 사용하고있다고 합니다.</p>
<p>버전별로 생기는 미세한 차이점을 잘 체크하면서 변경된 사항을 잘 확인해야될 것 같습니다.</p>
<p><a href="https://stackoverflow.com/questions/47452770/no-handler-for-type-string-declared-on-field-name" target="_blank" rel="noopener">https://stackoverflow.com/questions/47452770/no-handler-for-type-string-declared-on-field-name</a></p>
<blockquote>
<p>이제 다음과 같이 ELK 매핑이 되었는지 확인을 해보겠습니다.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -XGET http://localhost:9200/classes\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"classes"</span> : &#123;</span><br><span class="line">    <span class="string">"aliases"</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">"mappings"</span> : &#123;</span><br><span class="line">      <span class="string">"properties"</span> : &#123;</span><br><span class="line">        <span class="string">"major"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"professor"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"rating"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"school_location"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"geo_point"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"semester"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"student_count"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"submit_date"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"date"</span>,</span><br><span class="line">          <span class="string">"format"</span> : <span class="string">"yyyy-MM-dd"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"title"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"unit"</span> : &#123;</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"settings"</span> : &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"routing"</span> : &#123;</span><br><span class="line">          <span class="string">"allocation"</span> : &#123;</span><br><span class="line">            <span class="string">"include"</span> : &#123;</span><br><span class="line">              <span class="string">"_tier_preference"</span> : <span class="string">"data_content"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"number_of_shards"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"provided_name"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"creation_date"</span> : <span class="string">"1613711830633"</span>,</span><br><span class="line">        <span class="string">"number_of_replicas"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"uuid"</span> : <span class="string">"q99TJFowRqu7LFB1DjowZQ"</span>,</span><br><span class="line">        <span class="string">"version"</span> : &#123;</span><br><span class="line">          <span class="string">"created"</span> : <span class="string">"7110199"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이제 이런식으로 매핑을 진행하면 시각화에서 조금더 유연하게 처리가 가능하게 됩니다.다시 Document에 값을 집어 넣어보도록 하겠습니다.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H 'Content-Type:application/json' http://localhost:9200/_bulk\?pretty --data-binary @Classes.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1703</span>,</span><br><span class="line">  <span class="attr">"errors"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"items"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"6"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"7"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"8"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"9"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"10"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"11"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">9</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"12"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"13"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">11</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"14"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">12</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"15"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">13</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"16"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">14</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"17"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">15</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"18"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">16</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"19"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">17</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"20"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"21"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">19</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"22"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">20</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"23"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">21</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"24"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">22</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"25"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">23</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>최종 출력</p>
</blockquote>
<p>이제 제대로 값들이 들어간것을 확인할 수 있습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/classes/class/1\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Machine Learning"</span>,</span><br><span class="line">    <span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,</span><br><span class="line">    <span class="string">"major"</span> : <span class="string">"Computer Science"</span>,</span><br><span class="line">    <span class="string">"semester"</span> : [</span><br><span class="line">      <span class="string">"spring"</span>,</span><br><span class="line">      <span class="string">"fall"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"student_count"</span> : 100,</span><br><span class="line">    <span class="string">"unit"</span> : 3,</span><br><span class="line">    <span class="string">"rating"</span> : 5,</span><br><span class="line">    <span class="string">"submit_date"</span> : <span class="string">"2016-01-02"</span>,</span><br><span class="line">    <span class="string">"school_location"</span> : &#123;</span><br><span class="line">      <span class="string">"lat"</span> : 36.0,</span><br><span class="line">      <span class="string">"lon"</span> : -120.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Mapping</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱서치 BULK</title>
    <url>/ELK-20210219-elk-bulk/</url>
    <content><![CDATA[<h1 id="elk-elraseutigseoci-bulk"><a href="#elk-elraseutigseoci-bulk" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#elk-엘라스틱서치-bulk"></a> ELK 엘라스틱서치 BULK</h1>
<blockquote>
<p>Elastic BULK란 무엇일까요?</p>
</blockquote>
<p>간단히 말해 여러개의 Document를 한번에 ElasticSearch에 넣는 방식을 말합니다.</p>
<p>그러면 바로 실습으로 알아보도록 하겠습니다.</p>
<p>제가 사용할 실습 json파일은 다음과 같습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Machine Learning"</span>,<span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>, <span class="string">"fall"</span>],<span class="string">"student_count"</span> : 100,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 5, <span class="string">"submit_date"</span> : <span class="string">"2016-01-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 36.00, <span class="string">"lon"</span> : -120.00&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Network"</span>,<span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 50,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"2016-02-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 36.00, <span class="string">"lon"</span> : -120.00&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Operating System"</span>,<span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>],<span class="string">"student_count"</span> : 50,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"2016-03-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 36.00, <span class="string">"lon"</span> : -120.00&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"5"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Machine Learning"</span>,<span class="string">"Professor"</span> : <span class="string">"Tim Cook"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>],<span class="string">"student_count"</span> : 40,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-04-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 39.00, <span class="string">"lon"</span> : -112.00&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"6"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Network"</span>,<span class="string">"Professor"</span> : <span class="string">"Tim Cook"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"summer"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-02-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 36.00, <span class="string">"lon"</span> : -120.00&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"7"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Operating System"</span>,<span class="string">"Professor"</span> : <span class="string">"Jeniffer Anderson"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"winter"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 1, <span class="string">"submit_date"</span> : <span class="string">"2016-11-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 39.97, <span class="string">"lon"</span> : -89.78&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"8"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Algorithm"</span>,<span class="string">"Professor"</span> : <span class="string">"Tim Cook"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 80,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-10-22"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 39.97, <span class="string">"lon"</span> : -89.78&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"9"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Data Structure"</span>,<span class="string">"Professor"</span> : <span class="string">"Tim Cook"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"winter"</span>],<span class="string">"student_count"</span> : 50,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-07-22"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 39.97, <span class="string">"lon"</span> : -89.78&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"10"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Computer Graphic"</span>,<span class="string">"Professor"</span> : <span class="string">"Jeniffer Anderson"</span>,<span class="string">"major"</span> : <span class="string">"Computer Science"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>],<span class="string">"student_count"</span> : 60,<span class="string">"unit"</span> : 2,<span class="string">"rating"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"2016-11-12"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 39.97, <span class="string">"lon"</span> : -89.78&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"11"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Music Fundamental"</span>,<span class="string">"Professor"</span> : <span class="string">"Jay Z"</span>,<span class="string">"major"</span> : <span class="string">"Music"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 100,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 5, <span class="string">"submit_date"</span> : <span class="string">"2016-05-22"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.51, <span class="string">"lon"</span> : -74.83&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"12"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Vocal Techniques"</span>,<span class="string">"Professor"</span> : <span class="string">"Beyonce"</span>,<span class="string">"major"</span> : <span class="string">"Music"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 5, <span class="string">"submit_date"</span> : <span class="string">"2016-11-22"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.51, <span class="string">"lon"</span> : -74.83&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"13"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Guitar Techiniques"</span>,<span class="string">"Professor"</span> : <span class="string">"Eric Clapton"</span>,<span class="string">"major"</span> : <span class="string">"Music"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>, <span class="string">"fall"</span>],<span class="string">"student_count"</span> : 20,<span class="string">"unit"</span> : 2,<span class="string">"rating"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"2016-03-12"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.51, <span class="string">"lon"</span> : -74.83&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"14"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Finance"</span>,<span class="string">"Professor"</span> : <span class="string">"Bill Gates"</span>,<span class="string">"major"</span> : <span class="string">"Accounting"</span>,<span class="string">"semester"</span> : [<span class="string">"winter"</span>],<span class="string">"student_count"</span> : 50,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-01-12"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.51, <span class="string">"lon"</span> : -74.83&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"15"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Marketing"</span>,<span class="string">"Professor"</span> : <span class="string">"Bill Gates"</span>,<span class="string">"major"</span> : <span class="string">"Accounting"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>],<span class="string">"student_count"</span> : 60,<span class="string">"unit"</span> : 2,<span class="string">"rating"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"2016-01-22"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.51, <span class="string">"lon"</span> : -74.83&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"16"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Accounting Information Systems"</span>,<span class="string">"Professor"</span> : <span class="string">"Tom Cruise"</span>,<span class="string">"major"</span> : <span class="string">"Accounting"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 100,<span class="string">"unit"</span> : 2,<span class="string">"rating"</span> : 1, <span class="string">"submit_date"</span> : <span class="string">"2016-11-12"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.51, <span class="string">"lon"</span> : -74.83&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"17"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Individual Taxation"</span>,<span class="string">"Professor"</span> : <span class="string">"Tom Cruise"</span>,<span class="string">"major"</span> : <span class="string">"Accounting"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 1,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-08-02"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.32, <span class="string">"lon"</span> : -94.74&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"18"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Auditing"</span>,<span class="string">"Professor"</span> : <span class="string">"Victoria Park"</span>,<span class="string">"major"</span> : <span class="string">"Accounting"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>, <span class="string">"fall"</span>],<span class="string">"student_count"</span> : 20,<span class="string">"unit"</span> : 2,<span class="string">"rating"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"2016-09-13"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.32, <span class="string">"lon"</span> : -94.74&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"19"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Cell Biology"</span>,<span class="string">"Professor"</span> : <span class="string">"Anjella Kim"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 40,<span class="string">"unit"</span> : 5,<span class="string">"rating"</span> : 5, <span class="string">"submit_date"</span> : <span class="string">"2016-02-22"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 42.32, <span class="string">"lon"</span> : -94.74&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"20"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Physiology"</span>,<span class="string">"Professor"</span> : <span class="string">"Jack Berk"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"summer"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 5,<span class="string">"rating"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"2016-11-12"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 32.69, <span class="string">"lon"</span> : -99.44&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"21"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Neuroscience"</span>,<span class="string">"Professor"</span> : <span class="string">"Jihee Yang"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>, <span class="string">"fall"</span>],<span class="string">"student_count"</span> : 20,<span class="string">"unit"</span> : 5,<span class="string">"rating"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"2016-06-03"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 32.69, <span class="string">"lon"</span> : -99.44&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"22"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Immunology"</span>,<span class="string">"Professor"</span> : <span class="string">"Meredith Lee"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"winter"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 2, <span class="string">"submit_date"</span> : <span class="string">"2016-06-21"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 32.69, <span class="string">"lon"</span> : -99.44&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"23"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Genetics"</span>,<span class="string">"Professor"</span> : <span class="string">"David Pollack"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"spring"</span>],<span class="string">"student_count"</span> : 20,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"2016-06-30"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 28.22, <span class="string">"lon"</span> : -81.87&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"24"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Biochemistry"</span>,<span class="string">"Professor"</span> : <span class="string">"John Miller"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 3,<span class="string">"rating"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"2016-01-11"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 28.22, <span class="string">"lon"</span> : -81.87&#125;&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"classes"</span>, <span class="string">"_type"</span> : <span class="string">"class"</span>, <span class="string">"_id"</span> : <span class="string">"25"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"title"</span> : <span class="string">"Anatomy"</span>,<span class="string">"Professor"</span> : <span class="string">"Tom Johnson"</span>,<span class="string">"major"</span> : <span class="string">"Medical"</span>,<span class="string">"semester"</span> : [<span class="string">"fall"</span>],<span class="string">"student_count"</span> : 30,<span class="string">"unit"</span> : 5,<span class="string">"rating"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"2016-11-12"</span>, <span class="string">"school_location"</span> : &#123;<span class="string">"lat"</span> : 28.22, <span class="string">"lon"</span> : -81.87&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>Bulk 파일을 보면 Meta Information의 형식으로 가지고 있습니다.</p>
<blockquote>
<p>Bulk를 사용하여 값들을 Document에 삽입해보도록 하겠습니다.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type:application/json'</span> http://localhost:9200/_bulk/\?pretty --data-binary @classes.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 591,</span><br><span class="line">  <span class="string">"errors"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"items"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 7,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"updated"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 6,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 7,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 8,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 9,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"6"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 10,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"7"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 11,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"8"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 12,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"9"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 13,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"10"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 14,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"11"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 15,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"12"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 16,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"13"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 17,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"14"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 18,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"15"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 19,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"16"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 20,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"17"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 21,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"18"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 22,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"19"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 23,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"20"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 24,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"21"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 25,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"22"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 26,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"23"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 27,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"24"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 28,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"25"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 29,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같은형식으로 bulk파일들이 정상적으로 document에 들어간것을 확인할 수 있습니다</p>
<blockquote>
<p>Bulk Document 조회</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET localhost:9200/classes/class/1\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 7,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 6,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Machine Learning"</span>,</span><br><span class="line">    <span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,</span><br><span class="line">    <span class="string">"major"</span> : <span class="string">"Computer Science"</span>,</span><br><span class="line">    <span class="string">"semester"</span> : [</span><br><span class="line">      <span class="string">"spring"</span>,</span><br><span class="line">      <span class="string">"fall"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"student_count"</span> : 100,</span><br><span class="line">    <span class="string">"unit"</span> : 3,</span><br><span class="line">    <span class="string">"rating"</span> : 5,</span><br><span class="line">    <span class="string">"submit_date"</span> : <span class="string">"2016-01-02"</span>,</span><br><span class="line">    <span class="string">"school_location"</span> : &#123;</span><br><span class="line">      <span class="string">"lat"</span> : 36.0,</span><br><span class="line">      <span class="string">"lon"</span> : -120.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 첫번째에 들어있는 document값을 정상적으로 조회한것을 확인할 수 있습니다.<br>
여기서 주의할점은 pretty연산을 진행하기전에 앞에 \를 붙여실행해야 정상적으로 원하는 결과를 볼 수 있습니다.</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>BULK</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱서치 Data CRUD</title>
    <url>/ELK-20210219-elk-crud/</url>
    <content><![CDATA[<h1 id="elraseutigseoci-deiteo-ibryeog-johoe-sagje-get-post-put-delete"><a href="#elraseutigseoci-deiteo-ibryeog-johoe-sagje-get-post-put-delete" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#엘라스틱서치-데이터-입력-조회-삭제-get-post-put-delete"></a> 엘라스틱서치 데이터 입력 조회 삭제 (GET, POST, PUT, DELETE)</h1>
<p>이번 시간에 살펴볼 내용은 엘라스틱서치에서 Data CRUD를 실습해보는 시간을 가져보겠습니다.</p>
<p>그전에 엘라스틱서피와 RDS와의 차이점을 살펴보겠습니다.</p>
<blockquote>
<p>ELASTIC SEARCH VS RDS</p>
</blockquote>
<table>
<thead>
<tr>
<th>Elastic Search</th>
<th style="text-align:center">RDS</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Index</code></td>
<td style="text-align:center">Database</td>
</tr>
<tr>
<td><code>Type</code></td>
<td style="text-align:center">Table</td>
</tr>
<tr>
<td><code>Document</code></td>
<td style="text-align:center">Row</td>
</tr>
<tr>
<td><code>Field</code></td>
<td style="text-align:center">Column</td>
</tr>
<tr>
<td><code>Mapping</code></td>
<td style="text-align:center">Schema</td>
</tr>
</tbody>
</table>
<p>엘라스틱서치에서는 REST API를 사용합니다.</p>
<table>
<thead>
<tr>
<th>Elastic Search</th>
<th style="text-align:center">RDS</th>
<th style="text-align:center">CRUD</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GET</code></td>
<td style="text-align:center">Select</td>
<td style="text-align:center">Read</td>
</tr>
<tr>
<td><code>PUT</code></td>
<td style="text-align:center">Update</td>
<td style="text-align:center">Update</td>
</tr>
<tr>
<td><code>POST</code></td>
<td style="text-align:center">Insert</td>
<td style="text-align:center">Create</td>
</tr>
<tr>
<td><code>DELETE</code></td>
<td style="text-align:center">Delete</td>
<td style="text-align:center">Delete</td>
</tr>
</tbody>
</table>
<p>다음과 같이 표를 보면 CRUD의 역할과 동일하게 처리한다라고 생각을 하면됩니다.</p>
<blockquote>
<p>GET 조회시</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/classes</span><br><span class="line">&#123;<span class="string">"error"</span>:&#123;<span class="string">"root_cause"</span>:[&#123;<span class="string">"type"</span>:<span class="string">"index_not_found_exception"</span>,<span class="string">"reason"</span>:<span class="string">"no such index [classes]"</span>,<span class="string">"resource.type"</span>:<span class="string">"index_or_alias"</span>,<span class="string">"resource.id"</span>:<span class="string">"classes"</span>,<span class="string">"index_uuid"</span>:<span class="string">"_na_"</span>,<span class="string">"index"</span>:<span class="string">"classes"</span>&#125;],<span class="string">"type"</span>:<span class="string">"index_not_found_exception"</span>,<span class="string">"reason"</span>:<span class="string">"no such index [classes]"</span>,<span class="string">"resource.type"</span>:<span class="string">"index_or_alias"</span>,<span class="string">"resource.id"</span>:<span class="string">"classes"</span>,<span class="string">"index_uuid"</span>:<span class="string">"_na_"</span>,<span class="string">"index"</span>:<span class="string">"classes"</span>&#125;,<span class="string">"status"</span>:404&#125;%</span><br></pre></td></tr></table></figure>
<p>curl의 -XGET 옵션을 통하여 엘라스틱서치의 9200번 포트로 접근해줍니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/classes</span><br><span class="line"></span><br><span class="line">http://localhost:9200 - 엘라스틱서치 주소</span><br><span class="line">classes - Index</span><br></pre></td></tr></table></figure>
<blockquote>
<p>GET 조회시 깔끔하게 보고싶다면?</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/classe\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"error"</span> : &#123;</span><br><span class="line">    <span class="string">"root_cause"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">        <span class="string">"reason"</span> : <span class="string">"no such index [classe]"</span>,</span><br><span class="line">        <span class="string">"resource.type"</span> : <span class="string">"index_or_alias"</span>,</span><br><span class="line">        <span class="string">"resource.id"</span> : <span class="string">"classe"</span>,</span><br><span class="line">        <span class="string">"index_uuid"</span> : <span class="string">"_na_"</span>,</span><br><span class="line">        <span class="string">"index"</span> : <span class="string">"classe"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"type"</span> : <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">    <span class="string">"reason"</span> : <span class="string">"no such index [classe]"</span>,</span><br><span class="line">    <span class="string">"resource.type"</span> : <span class="string">"index_or_alias"</span>,</span><br><span class="line">    <span class="string">"resource.id"</span> : <span class="string">"classe"</span>,</span><br><span class="line">    <span class="string">"index_uuid"</span> : <span class="string">"_na_"</span>,</span><br><span class="line">    <span class="string">"index"</span> : <span class="string">"classe"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"status"</span> : 404</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 JSON 포멧으로 깔끔하게 결과값들을 확인할 수 있습니다.</p>
<blockquote>
<p>인덱스 생성 PUT</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -XPUT http://localhost:9200/classes</span><br><span class="line">&#123;<span class="string">"acknowledged"</span>:<span class="literal">true</span>,<span class="string">"shards_acknowledged"</span>:<span class="literal">true</span>,<span class="string">"index"</span>:<span class="string">"classes"</span>&#125;%</span><br></pre></td></tr></table></figure>
<p>다음과 같이 인덱스가 정상적으로 생성된것을 확인할 수 있습니다.</p>
<blockquote>
<p>인덱스 삭제 DELETE</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XDELETE http://localhost:9200/classes</span><br><span class="line">&#123;<span class="string">"acknowledged"</span>:<span class="literal">true</span>&#125;%</span><br></pre></td></tr></table></figure>
<p>다음과 같이 정상적으로 엘라스틱서치의 인덱스값이 삭제된것을 확인할 수 있습니다.</p>
<blockquote>
<p>Document 생성하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type: application/json'</span> http://localhost:9200/classes/class/1/ -d <span class="string">'&#123;"title" : "Algorithm", "professor" : "John"&#125;'</span></span><br><span class="line">&#123;<span class="string">"_index"</span>:<span class="string">"classes"</span>,<span class="string">"_type"</span>:<span class="string">"class"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:0,<span class="string">"_primary_term"</span>:1&#125;%</span><br></pre></td></tr></table></figure>
<p><strong>주의사항</strong><br>
curl -XPOSt <a href="http://localhost:9200/classes/class/1/" target="_blank" rel="noopener">http://localhost:9200/classes/class/1/</a> -d ‘{“title” : “Algorithm”, “professor” : “John”}’ 입력 시 www-form-urlencoded is not supported status 406 에러가 발생합니다. 높은 버전에선 -H ‘Content-Type: application/json’ 를 사용해주어야합니다.</p>
<blockquote>
<p>참고링크<br>
<a href="https://www.elastic.co/kr/blog/strict-content-type-checking-for-elasticsearch-rest-requests" target="_blank" rel="noopener">https://www.elastic.co/kr/blog/strict-content-type-checking-for-elasticsearch-rest-requests</a></p>
</blockquote>
<p><strong>Starting from Elasticsearch 6.0, all REST requests that include a body must also provide the correct content-type for that body.</strong></p>
<blockquote>
<p>Document 생성된것 확인하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -XGET http://localhost:9200/classes/class/1/\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Algorithm"</span>,</span><br><span class="line">    <span class="string">"professor"</span> : <span class="string">"John"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>파일을 사용하여 Document 생성하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type: application/json'</span> http://localhost:9200/classes/class/1/ -d @class.json</span><br><span class="line">&#123;<span class="string">"_index"</span>:<span class="string">"classes"</span>,<span class="string">"_type"</span>:<span class="string">"class"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:2,<span class="string">"result"</span>:<span class="string">"updated"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:1,<span class="string">"_primary_term"</span>:1&#125;%</span><br></pre></td></tr></table></figure>
<p>@기호를 사용하여 class.json 파일안에 있는 json 데이터를 통하여 Document를 생성하였습니다. JSON내용은 다음과같습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Machine Learning"</span>,</span><br><span class="line">    <span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,</span><br><span class="line">    <span class="string">"major"</span> : <span class="string">"Computer Science"</span>,</span><br><span class="line">    <span class="string">"semester"</span> : [<span class="string">"spring"</span>, <span class="string">"fall"</span>],</span><br><span class="line">    <span class="string">"student_count"</span> : 100,</span><br><span class="line">    <span class="string">"unit"</span> : 3,</span><br><span class="line">    <span class="string">"rating"</span> : 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Document 조회해보기</p>
</blockquote>
<p>이제 정상적으로 파일에서 가져온 Document값을 조회해보도록 하겠습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/classes/class/1/\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 2,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 1,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Machine Learning"</span>,</span><br><span class="line">    <span class="string">"Professor"</span> : <span class="string">"Minsuk Heo"</span>,</span><br><span class="line">    <span class="string">"major"</span> : <span class="string">"Computer Science"</span>,</span><br><span class="line">    <span class="string">"semester"</span> : [</span><br><span class="line">      <span class="string">"spring"</span>,</span><br><span class="line">      <span class="string">"fall"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"student_count"</span> : 100,</span><br><span class="line">    <span class="string">"unit"</span> : 3,</span><br><span class="line">    <span class="string">"rating"</span> : 5</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이렇게 정상적으로 파일에 들어가있는 값들을 통하여 document로 정상적으로 구성되었습니다.</p>
<blockquote>
<p>Data Update</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -H <span class="string">'Content-Type:application/json'</span> http://localhost:9200/classes/class/1/_update -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;"doc":&#123;"unit":1&#125;&#125;'</span></span><br><span class="line">&#123;<span class="string">"_index"</span>:<span class="string">"classes"</span>,<span class="string">"_type"</span>:<span class="string">"class"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:4,<span class="string">"result"</span>:<span class="string">"noop"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:0,<span class="string">"successful"</span>:0,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:3,<span class="string">"_primary_term"</span>:1&#125;%</span><br></pre></td></tr></table></figure>
<p>_update를 뒤에 붙여주면서 진행을 하면 해당 unit값이 업데이트된것을 확인할 수 있습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/classes/class/1\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 5,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 4,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Algorithm"</span>,</span><br><span class="line">    <span class="string">"professor"</span> : <span class="string">"John"</span>,</span><br><span class="line">    <span class="string">"unit"</span> : 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>script를 이용하여 업데이트하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -XPOST -H <span class="string">'Content-Type:application/json'</span> http://localhost:9200/classes/class/1/_update -d <span class="string">'</span></span><br><span class="line"><span class="string">quote&gt; &#123;"script":"ctx._source.unit += 5"&#125; '</span></span><br><span class="line">&#123;<span class="string">"_index"</span>:<span class="string">"classes"</span>,<span class="string">"_type"</span>:<span class="string">"class"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:6,<span class="string">"result"</span>:<span class="string">"updated"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:5,<span class="string">"_primary_term"</span>:1&#125;%</span><br><span class="line"> kgh  ~</span><br><span class="line"> </span><br><span class="line"><span class="variable">$curl</span> -XGET http://localhost:9200/classes/class/1\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"classes"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"class"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 6,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 5,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"Algorithm"</span>,</span><br><span class="line">    <span class="string">"professor"</span> : <span class="string">"John"</span>,</span><br><span class="line">    <span class="string">"unit"</span> : 7</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>{“script”:“ctx._source.unit += 5”} 과 같이 script문을 사용하면 다음과같이 정상적으로 데이터가 업데이트를 쉽게 처리할 수 있습니다.</p>
<blockquote>
<p>Reference</p>
</blockquote>
<p><a href="https://github.com/minsuk-heo/BigData" target="_blank" rel="noopener">https://github.com/minsuk-heo/BigData</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 엘라스틱서치 정의 및 설치하기</title>
    <url>/ELK-20210219-elk-install/</url>
    <content><![CDATA[<h1 id="homebrew"><a href="#homebrew" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#homebrew"></a> Homebrew</h1>
<p>Homebrew는 자유-오픈 소스 소프트웨어 패키지 관리 시스템의 하나로서 애플의 macOS 운영 체제의 소프트웨어 설치를 단순하게 만들어준다. 원래 맥스 호웰(Max Howell)이 개발한 이 패키지 관리자는 루비 온 웨일즈 공동체에서 인기를 얻었으며 확장성으로 호평을 받았습니다.홈브루는 쉬운 사용성, 명령 줄로의 통합이 가능하므로 이용이 권장됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$/bin/bash -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br></pre></td></tr></table></figure>
<p>Homebrew를 이용하기 위해 설치를 진행해줍니다.</p>
<h1 id="elkran"><a href="#elkran" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#elk란"></a> ELK란?</h1>
<h2 id="elasticsearch"><a href="#elasticsearch" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#elasticsearch"></a> ElasticSearch</h2>
<ul>
<li>ElasticSearch는 Lucene 기반으로 개발한 분산 검색엔진으로, Logstash를 통해 수신된 데이터를 저장소에 저장하는 역할을 담당합니다.</li>
<li>데이터를 중심부에 저장하여 예상되는 항목을 검색하고 예상치 못한 항목을 찾아낼 수 있습니다.</li>
<li>정형, 비정형, 위치정보, 메트릭 등 원하는 방법으로 다양한 유형의 검색을 수행하고 결합할 수 있습니다.</li>
</ul>
<h2 id="logstash"><a href="#logstash" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#logstash"></a> Logstash</h2>
<ul>
<li>오픈소스 서버측 데이터 처리 파이프라인으로, 다양한 소스에서 동시에 데이터를 수집하고 변환하여 stash 보관소로 보내는 역할을 합니다.</li>
<li>수집할 로그를 선정해서, 지정된 대상 서버(ElasticSearch)에 인덱싱하여 전송하는 역할을 담당하는 소프트웨어입니다.</li>
</ul>
<h2 id="kibana"><a href="#kibana" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#kibana"></a> Kibana</h2>
<ul>
<li>데이터를 시각적으로 탐색하고 실시간으로 분석 할 수 있습니다.</li>
<li>시각화를 담당하는 HTML와 Javascript 엔진입니다.</li>
</ul>
<h1 id="elastic-seolcihagi"><a href="#elastic-seolcihagi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#elastic-설치하기"></a> Elastic 설치하기</h1>
<blockquote>
<p>설치전 이슈</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$brew</span> tap elastic/tap</span><br><span class="line">Error:</span><br><span class="line">  homebrew-core is a shallow <span class="built_in">clone</span>.</span><br><span class="line">To `brew update`, first run:</span><br><span class="line">  git -C /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow</span><br><span class="line">This restriction has been made on GitHub<span class="string">'s request because updating shallow</span></span><br><span class="line"><span class="string">clones is an extremely expensive operation due to the tree layout and traffic of</span></span><br><span class="line"><span class="string">Homebrew/homebrew-core and Homebrew/homebrew-cask. We don'</span>t <span class="keyword">do</span> this <span class="keyword">for</span> you</span><br><span class="line">automatically to avoid repeatedly performing an expensive unshallow operation <span class="keyword">in</span></span><br><span class="line">CI systems (<span class="built_in">which</span> should instead be fixed to not use shallow clones). Sorry <span class="keyword">for</span></span><br><span class="line">the inconvenience!</span><br><span class="line">==&gt; Tapping elastic/tap</span><br><span class="line">Cloning into <span class="string">'/usr/local/Homebrew/Library/Taps/elastic/homebrew-tap'</span>...</span><br><span class="line">remote: Enumerating objects: 32, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (32/32), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (29/29), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 791 (delta 15), reused 8 (delta 3), pack-reused 759</span><br><span class="line">Receiving objects: 100% (791/791), 181.90 KiB | 432.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (601/601), <span class="keyword">done</span>.</span><br><span class="line">Tapped 17 formulae (44 files, 289.5KB).</span><br></pre></td></tr></table></figure>
<p>ELK를 설치하는데 있어서 해당오류가 발생하여 다음과 같이 해결을 진행하였습니다. 업데이트가 제대로 진행이 되지 않아 homebrew core를 업데이트를 진행하였습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$brew</span> update</span><br><span class="line">Error:</span><br><span class="line">  homebrew-core is a shallow <span class="built_in">clone</span>.</span><br><span class="line">To `brew update`, first run:</span><br><span class="line">  git -C /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow</span><br><span class="line">This restriction has been made on GitHub<span class="string">'s request because updating shallow</span></span><br><span class="line"><span class="string">clones is an extremely expensive operation due to the tree layout and traffic of</span></span><br><span class="line"><span class="string">Homebrew/homebrew-core and Homebrew/homebrew-cask. We don'</span>t <span class="keyword">do</span> this <span class="keyword">for</span> you</span><br><span class="line">automatically to avoid repeatedly performing an expensive unshallow operation <span class="keyword">in</span></span><br><span class="line">CI systems (<span class="built_in">which</span> should instead be fixed to not use shallow clones). Sorry <span class="keyword">for</span></span><br></pre></td></tr></table></figure>
<p>Homebrew를 업데이트를 진행하려고하였지만, 역시나 같은오류가 발생하여 Stackoverflow의 힘을 빌리게 되었습니다.<br>
<a href="https://stackoverflow.com/questions/65160625/cant-update-or-upgrade-homebrew" target="_blank" rel="noopener">https://stackoverflow.com/questions/65160625/cant-update-or-upgrade-homebrew</a></p>
<blockquote>
<p>homebrew core update</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/</span><br><span class="line">rm -rf homebrew-core</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
<p>다음과 같은 명령어로 현재 Homebrew 라이브러리안에 있는 탭볼륨의 코어를 삭제후 다시 설치를 진행하였습니다.</p>
<blockquote>
<p>Elastic 설치하기</p>
</blockquote>
<p>이제 본격적으로 ELK설치를 진행하겠습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/</span><br><span class="line">rm -rf homebrew-core</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">Cloning into <span class="string">'homebrew-core'</span>...</span><br><span class="line">remote: Enumerating objects: 34, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (34/34), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (24/24), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 910921 (delta 19), reused 19 (delta 10), pack-reused 910887</span><br><span class="line">Receiving objects: 100% (910921/910921), 364.35 MiB | 8.72 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (620824/620824), <span class="keyword">done</span>.</span><br><span class="line">Updating files: 100% (5773/5773), <span class="keyword">done</span>.</span><br><span class="line"> kgh  /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew   stable</span><br><span class="line"><span class="variable">$brew</span> tap elastic/tap</span><br><span class="line">Updating Homebrew...</span><br><span class="line">To restore the stashed changes to /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/adoptopenjdk/homebrew-openjdk run:</span><br><span class="line">  <span class="string">'cd /usr/local/Homebrew/Library/Taps/adoptopenjdk/homebrew-openjdk &amp;&amp; git stash pop'</span></span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 3 taps (homebrew/cask, homebrew/services and adoptopenjdk/openjdk).</span><br><span class="line">==&gt; New Casks</span><br><span class="line">accordance                             forticlient-vpn                        mubu                                   spotter</span><br><span class="line">aldente                                fspy                                   munkiadmin                             start</span><br><span class="line">astah-uml                              gather                                 opgg                                   stringz</span><br><span class="line">atemosc                                gdat                                   oss-browser                            textbuddy</span><br><span class="line">audiogridder-plugin                    google-drive                           parsify                                the-unofficial-homestuck-collection</span><br><span class="line">audiogridder-server                    grid                                   pathephone                             twobird</span><br><span class="line">bleunlock                              helo                                   pibar                                  ultdata</span><br><span class="line">brewlet                                imdone                                 pokemon-trading-card-game-online       unclack</span><br><span class="line">cakebrewjs                             imobie-m1-app-checker                  pragli                                 vine-server</span><br><span class="line">cinco                                  intellidock                            prezi-video                            vofa-plus</span><br><span class="line">colorwell                              kieler                                 ptpwebcam                              webull</span><br><span class="line">curseforge                             kiwi-for-gmail                         ray                                    wolfram-engine</span><br><span class="line">deadbeef                               lightform                              raycast                                xcodes</span><br><span class="line">decloner                               lightkey                               sengi                                  xournal-plus-plus</span><br><span class="line">deskreen                               little-navmap                          signet                                 yesplaymusic</span><br><span class="line">digital                                macfuse                                sitesucker-pro                         zy-player</span><br><span class="line">duckstation                            mathinspector                          slippi-dolphin</span><br><span class="line">f-bar                                  melonds                                space-saver</span><br><span class="line">fawkes                                 miniforge                              spaceman</span><br><span class="line">==&gt; Updated Casks</span><br><span class="line">Updated 1352 casks.</span><br><span class="line">==&gt; Deleted Casks</span><br><span class="line">archi                     clashxr                   facebook-ios-sdk          jeromelebel-mongohub      racket-cs                 tagalicious</span><br><span class="line">arrayfire                 disablemonitor            google-hangouts           oni                       ringtones                 teamspeak-client</span><br><span class="line">barxtemp                  evom                      irip                      project-slippi-dolphin    ripit                     yyets</span><br></pre></td></tr></table></figure>
<p>Homebrew 코어를 업데이트를 진행한 후 <code>$brew tap elastic/tap</code> 과 같은 명령어로 볼륨 설치를 완료하게 되었습니다.<br>
그리고 이제 elastic을 설치해보겠습니다</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install elasticsearch-full</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 1 tap (homebrew/core).</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">Updated 2 formulae.</span><br><span class="line"></span><br><span class="line">Warning: elasticsearch has been deprecated because it is switching to an incompatible license!</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/elasticsearch-7.10.2.cat</span><br><span class="line">==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/6bb47c36590116e78d</span><br><span class="line"><span class="commentspan></span><br><span class="line">==&gt; Pouring elasticsearch-7.10.2.catalina.bottle.tar.gz</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/elasticsearch/7.10.2/bin/elasticsearch-keystore create</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Data:    /usr/<span class="built_in">local</span>/var/lib/elasticsearch/</span><br><span class="line">Logs:    /usr/<span class="built_in">local</span>/var/<span class="built_in">log</span>/elasticsearch/elasticsearch_kgh.log</span><br><span class="line">Plugins: /usr/<span class="built_in">local</span>/var/elasticsearch/plugins/</span><br><span class="line">Config:  /usr/<span class="built_in">local</span>/etc/elasticsearch/</span><br><span class="line"></span><br><span class="line">To have launchd start elasticsearch now and restart at login:</span><br><span class="line"> brew services start elasticsearch</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string"> elasticsearch</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/elasticsearch/7.10.2: 156 files, 113.5MB</span></span><br></pre></td></tr></table></figure>
<h1 id="kibana-seolcihagi"><a href="#kibana-seolcihagi" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#kibana-설치하기"></a> Kibana 설치하기</h1>
<p>다음과 같은 명령어로 Kibana설치를 진행합니다</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install elastic/tap/kibana(full을 사용하지않으면 최신화적인 elasticsearch와의 버전문제가 생길 가능성이 있습니다.) 사용 X</span><br><span class="line"></span><br><span class="line">brew install elastic/tap/kibana-full(사용O)</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 1 tap (homebrew/core).</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">Updated 2 formulae.</span><br><span class="line"></span><br><span class="line">==&gt; Installing kibana-full from elastic/tap</span><br><span class="line">==&gt; Downloading https://artifacts.elastic.co/downloads/kibana/kibana-7.11.1-darwin-x86_64.tar.gz?tap=elastic/homebrew-tap</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Caveats</span><br><span class="line">Config: /usr/<span class="built_in">local</span>/etc/kibana/</span><br><span class="line">If you wish to preserve your plugins upon upgrade, make a copy of</span><br><span class="line">/usr/<span class="built_in">local</span>/opt/kibana-full/plugins before upgrading, and copy it into the</span><br><span class="line">new keg location after upgrading.</span><br><span class="line"></span><br><span class="line">To have launchd start elastic/tap/kibana-full now and restart at login:</span><br><span class="line">  brew services start elastic/tap/kibana-full</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  kibana</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/kibana-full/7.11.1: 47,465 files, 655.5MB, built in 2 minutes 10 seconds</span></span><br><span class="line"><span class="string">==&gt; `brew cleanup` has not been run in 30 days, running now...</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/bdw-gc--8.0.4_1.catalina.bottle.1.tar.gz... (513KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/certbot--1.10.1.catalina.bottle.tar.gz... (7.2MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/dialog--1.3-20201126.catalina.bottle.tar.gz... (330.7KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/emacs--27.1.catalina.bottle.tar.gz... (44.3MB)</span></span><br><span class="line"><span class="string">Removing: /usr/local/Cellar/gdbm/1.18.1... (20 files, 591.2KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/gnu-getopt--2.36.1.catalina.bottle.tar.gz... (56.2KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/go--1.15.6.catalina.bottle.tar.gz... (153.9MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/groonga--10.1.0.catalina.bottle.tar.gz... (8MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/guile--3.0.4.catalina.bottle.2.tar.gz... (11.5MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/mariadb--10.5.8.catalina.bottle.2.tar.gz... (50.6MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/nettle--3.6.catalina.bottle.tar.gz... (866.6KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/nghttp2--1.42.0_1.catalina.bottle.tar.gz... (971.0KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/node--15.5.0.catalina.bottle.tar.gz... (15.1MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/openjdk--15.0.1.catalina.bottle.tar.gz... (190.9MB)</span></span><br><span class="line"><span class="string">Removing: /usr/local/Cellar/pkg-config/0.29.2... (11 files, 627.2KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/python@3.9--setuptools--51.0.0.zip... (2.0MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/python@3.9--pip--20.3.1.tar.gz... (1.5MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/python@3.9--wheel--0.36.1.tar.gz... (62.7KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/redis--6.0.9.catalina.bottle.tar.gz... (1.8MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/sphinx-doc--3.4.1.catalina.bottle.tar.gz... (15.1MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Caches/Homebrew/unbound--1.13.0.catalina.bottle.tar.gz... (2.7MB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/pkg-config... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/tree... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libtool... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/jansson... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/gmp... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/msgpack... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/augeas... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libidn2... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/nghttp2... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/go... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/nettle... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/mariadb... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/gdbm... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/gnu-getopt... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libunistring... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/jemalloc... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/bdw-gc... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/maven... (101B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/icu4c... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/certbot... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/readline... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/sqlite... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/c-ares... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/yarn... (100B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/nvm... (99B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/emacs... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/dialog... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/openjdk... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/git-flow... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/gettext... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/git-flow-avh... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/sphinx-doc... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libtasn1... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libevent... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/openssl@1.1... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/cask... (100B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/node... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/unbound... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/zsh... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/groonga... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/guile... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/p11-kit... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libev... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/protobuf... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/libffi... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/python@3.9... (2 files, 754.7KB)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/ethereum... (64B)</span></span><br><span class="line"><span class="string">Removing: /Users/kgh/Library/Logs/Homebrew/gnutls... (64B)</span></span><br><span class="line"><span class="string">Pruned 2 symbolic links and 3 directories from /usr/local</span></span><br></pre></td></tr></table></figure>
<h1 id="elasticsearch-silhaenghagi"><a href="#elasticsearch-silhaenghagi" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#elasticsearch-실행하기"></a> Elasticsearch 실행하기</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch</span><br><span class="line">warning: no-jdk distributions that <span class="keyword">do</span> not bundle a JDK are deprecated and will be removed <span class="keyword">in</span> a future release</span><br><span class="line">warning: no-jdk distributions that <span class="keyword">do</span> not bundle a JDK are deprecated and will be removed <span class="keyword">in</span> a future release</span><br><span class="line">[2021-02-19T12:05:59,584][INFO ][o.e.n.Node               ] [kgh-2.local] version[7.10.2-SNAPSHOT], pid[94450], build[oss/tar/unknown/2021-01-16T01:34:41.142971Z], OS[Mac OS X/10.15.5/x86_64], JVM[Oracle Corporation/OpenJDK 64-Bit Server VM/15.0.1/15.0.1+9]</span><br><span class="line">[2021-02-19T12:05:59,590][INFO ][o.e.n.Node               ] [kgh-2.local] JVM home [/usr/<span class="built_in">local</span>/Cellar/openjdk/15.0.1/libexec/openjdk.jdk/Contents/Home]</span><br><span class="line">[2021-02-19T12:05:59,598][INFO ][o.e.n.Node               ] [kgh-2.local] JVM arguments [-Xshare:auto, -Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=<span class="literal">true</span>, -Dfile.encoding=UTF-8, -Djna.nosys=<span class="literal">true</span>, -XX:-OmitStackTraceInFastThrow, -XX:+ShowCodeDetailsInExceptionMessages, -Dio.netty.noUnsafe=<span class="literal">true</span>, -Dio.netty.noKeySetOptimization=<span class="literal">true</span>, -Dio.netty.recycler.maxCapacityPerThread=0, -Dio.netty.allocator.numDirectArenas=0, -Dlog4j.shutdownHookEnabled=<span class="literal">false</span>, -Dlog4j2.disable.jmx=<span class="literal">true</span>, -Djava.locale.providers=SPI,COMPAT, -Xms1g, -Xmx1g, -XX:+UseG1GC, -XX:G1ReservePercent=25, -XX:InitiatingHeapOccupancyPercent=30, -Djava.io.tmpdir=/var/folders/fy/5zsq88p55dx45pk4gmpltmmr0000gp/T/elasticsearch-9946170376789376085, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -Xlog:gc*,gc+age=trace,safepoint:file=/usr/<span class="built_in">local</span>/var/<span class="built_in">log</span>/elasticsearch/gc.log:utctime,pid,tags:filecount=32,filesize=64m, -XX:MaxDirectMemorySize=536870912, -Des.path.home=/usr/<span class="built_in">local</span>/Cellar/elasticsearch/7.10.2/libexec, -Des.path.conf=/usr/<span class="built_in">local</span>/etc/elasticsearch, -Des.distribution.flavor=oss, -Des.distribution.type=tar, -Des.bundled_jdk=<span class="literal">false</span>]</span><br><span class="line">[2021-02-19T12:05:59,599][WARN ][o.e.n.Node               ] [kgh-2.local] version [7.10.2-SNAPSHOT] is a pre-release version of Elasticsearch and is not suitable <span class="keyword">for</span> production</span><br><span class="line">[2021-02-19T12:06:00,853][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [aggs-matrix-stats]</span><br><span class="line">[2021-02-19T12:06:00,855][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [analysis-common]</span><br><span class="line">[2021-02-19T12:06:00,856][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [geo]</span><br><span class="line">[2021-02-19T12:06:00,857][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [ingest-common]</span><br><span class="line">[2021-02-19T12:06:00,858][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [ingest-geoip]</span><br><span class="line">[2021-02-19T12:06:00,859][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [ingest-user-agent]</span><br><span class="line">[2021-02-19T12:06:00,859][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [kibana]</span><br><span class="line">[2021-02-19T12:06:00,860][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [lang-expression]</span><br><span class="line">[2021-02-19T12:06:00,861][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [lang-mustache]</span><br><span class="line">[2021-02-19T12:06:00,861][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [lang-painless]</span><br><span class="line">[2021-02-19T12:06:00,862][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [mapper-extras]</span><br><span class="line">[2021-02-19T12:06:00,863][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [parent-join]</span><br><span class="line">[2021-02-19T12:06:00,864][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [percolator]</span><br><span class="line">[2021-02-19T12:06:00,864][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [rank-eval]</span><br><span class="line">[2021-02-19T12:06:00,865][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [reindex]</span><br><span class="line">[2021-02-19T12:06:00,865][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [repository-url]</span><br><span class="line">[2021-02-19T12:06:00,866][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [<span class="built_in">test</span>-delayed-aggs]</span><br><span class="line">[2021-02-19T12:06:00,867][INFO ][o.e.p.PluginsService     ] [kgh-2.local] loaded module [transport-netty4]</span><br><span class="line">[2021-02-19T12:06:00,868][INFO ][o.e.p.PluginsService     ] [kgh-2.local] no plugins loaded</span><br><span class="line">[2021-02-19T12:06:00,920][INFO ][o.e.e.NodeEnvironment    ] [kgh-2.local] using [1] data paths, mounts [[/System/Volumes/Data (/dev/disk1s1)]], net usable_space [39.2gb], net total_space [233.5gb], types [apfs]</span><br><span class="line">[2021-02-19T12:06:00,921][INFO ][o.e.e.NodeEnvironment    ] [kgh-2.local] heap size [1gb], compressed ordinary object pointers [<span class="literal">true</span>]</span><br><span class="line">[2021-02-19T12:06:01,012][INFO ][o.e.n.Node               ] [kgh-2.local] node name [kgh-2.local], node ID [_FYb0BAnQFyCJd4z4-M3Jw], cluster name [elasticsearch_brew], roles [master, remote_cluster_client, data, ingest]</span><br><span class="line">[2021-02-19T12:06:05,212][INFO ][o.e.t.NettyAllocator     ] [kgh-2.local] creating NettyAllocator with the following configs: [name=unpooled, suggested_max_allocation_size=256kb, factors=&#123;es.unsafe.use_unpooled_allocator=null, g1gc_enabled=<span class="literal">true</span>, g1gc_region_size=1mb, heap_size=1gb&#125;]</span><br><span class="line">[2021-02-19T12:06:05,377][INFO ][o.e.d.DiscoveryModule    ] [kgh-2.local] using discovery <span class="built_in">type</span> [zen] and seed hosts providers [settings]</span><br><span class="line">[2021-02-19T12:06:05,870][WARN ][o.e.g.DanglingIndicesState] [kgh-2.local] gateway.auto_import_dangling_indices is disabled, dangling indices will not be automatically detected or imported and must be managed manually</span><br><span class="line">[2021-02-19T12:06:06,195][INFO ][o.e.n.Node               ] [kgh-2.local] initialized</span><br><span class="line">[2021-02-19T12:06:06,196][INFO ][o.e.n.Node               ] [kgh-2.local] starting ...</span><br><span class="line">[2021-02-19T12:06:06,446][INFO ][o.e.t.TransportService   ] [kgh-2.local] publish_address &#123;127.0.0.1:9300&#125;, bound_addresses &#123;[::1]:9300&#125;, &#123;127.0.0.1:9300&#125;</span><br><span class="line">[2021-02-19T12:06:06,883][WARN ][o.e.b.BootstrapChecks    ] [kgh-2.local] the default discovery settings are unsuitable <span class="keyword">for</span> production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br><span class="line">[2021-02-19T12:06:06,944][INFO ][o.e.c.c.ClusterBootstrapService] [kgh-2.local] no discovery configuration found, will perform best-effort cluster bootstrapping after [3s] unless existing master is discovered</span><br><span class="line">[2021-02-19T12:06:09,949][INFO ][o.e.c.c.Coordinator      ] [kgh-2.local] setting initial configuration to VotingConfiguration&#123;_FYb0BAnQFyCJd4z4-M3Jw&#125;</span><br><span class="line">[2021-02-19T12:06:10,258][INFO ][o.e.c.s.MasterService    ] [kgh-2.local] elected-as-master ([1] nodes joined)[&#123;kgh-2.local&#125;&#123;_FYb0BAnQFyCJd4z4-M3Jw&#125;&#123;XfIeFRDrTIqm91ZOBkXD1Q&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dimr&#125; elect leader, _BECOME_MASTER_TASK_, _FINISH_ELECTION_], term: 1, version: 1, delta: master node changed &#123;previous [], current [&#123;kgh-2.local&#125;&#123;_FYb0BAnQFyCJd4z4-M3Jw&#125;&#123;XfIeFRDrTIqm91ZOBkXD1Q&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dimr&#125;]&#125;</span><br><span class="line">[2021-02-19T12:06:10,362][INFO ][o.e.c.c.CoordinationState] [kgh-2.local] cluster UUID <span class="built_in">set</span> to [opZ_8jGaS-yI2qclxNlqhg]</span><br><span class="line">[2021-02-19T12:06:10,433][INFO ][o.e.c.s.ClusterApplierService] [kgh-2.local] master node changed &#123;previous [], current [&#123;kgh-2.local&#125;&#123;_FYb0BAnQFyCJd4z4-M3Jw&#125;&#123;XfIeFRDrTIqm91ZOBkXD1Q&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dimr&#125;]&#125;, term: 1, version: 1, reason: Publication&#123;term=1, version=1&#125;</span><br><span class="line">[2021-02-19T12:06:10,487][INFO ][o.e.h.AbstractHttpServerTransport] [kgh-2.local] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;[::1]:9200&#125;, &#123;127.0.0.1:9200&#125;</span><br><span class="line">[2021-02-19T12:06:10,488][INFO ][o.e.n.Node               ] [kgh-2.local] started</span><br><span class="line">[2021-02-19T12:06:10,547][INFO ][o.e.g.GatewayService     ] [kgh-2.local] recovered [0] indices into cluster_state</span><br></pre></td></tr></table></figure>
<p>다음과 같이 <code>elasticsearch</code> 명령어로 Elasticsearch가 실행된것을 알 수 있습니다. 이제 publish_address인 127.0.0.1:9200 경로로 웹브라우저 상에서 접근을 하게 되면 다음과 같은 메시지를 얻을 수 있습니다.  아니면 아래와 같은 방식으로 curl -XGET 방식으로 직접터미널에서 확인해보는 방식이 있습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -XGET localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"kgh-2.local"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch_brew"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"opZ_8jGaS-yI2qclxNlqhg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.10.2-SNAPSHOT"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"oss"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"tar"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"unknown"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2021-01-16T01:34:41.142971Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.7.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name" : "kgh-2.local",</span><br><span class="line">  "cluster_name" : "elasticsearch_brew",</span><br><span class="line">  "cluster_uuid" : </span><br><span class="line">  "version" : &#123;</span><br><span class="line">    "number" : "7.10.2-SNAPSHOT",</span><br><span class="line">    "build_flavor" : "oss",</span><br><span class="line">    "build_type" : "tar",</span><br><span class="line">    "build_hash" : "unknown",</span><br><span class="line">    "build_date" : "2021-01-16T01:34:41.142971Z",</span><br><span class="line">    "build_snapshot" : true,</span><br><span class="line">    "lucene_version" : "8.7.0",</span><br><span class="line">    "minimum_wire_compatibility_version" : "6.8.0",</span><br><span class="line">    "minimum_index_compatibility_version" : "6.0.0-beta1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "tagline" : "You Know, for Search"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="kibana-silhaenghagi"><a href="#kibana-silhaenghagi" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#kibana-실행하기"></a> Kibana 실행하기</h1>
<p>Terminal상에서 다음과 같은 명령어로 Kibana를 실행하여줍니다. 실행시 오류가 발생하여 보니 elasticsearch와의 버전문제가 발생하였습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$kibana</span></span><br><span class="line">  <span class="built_in">log</span>   [12:12:04.315] [info][plugins-service] Plugin <span class="string">"visTypeXy"</span> is disabled.</span><br><span class="line">  <span class="built_in">log</span>   [12:12:04.439] [warning][config][deprecation] Environment variable <span class="string">"DATA_PATH"</span> will be removed.  It has been replaced with kibana.yml setting <span class="string">"path.data"</span></span><br><span class="line">  <span class="built_in">log</span>   [12:12:04.440] [warning][config][deprecation] Config key [monitoring.cluster_alerts.email_notifications.email_address] will be required <span class="keyword">for</span> email notifications to work <span class="keyword">in</span> 8.0.<span class="string">"</span></span><br><span class="line"><span class="string">  log   [12:12:04.754] [info][plugins-system] Setting up [101] plugins: [taskManager,licensing,globalSearch,globalSearchProviders,code,usageCollection,xpackLegacy,telemetryCollectionManager,telemetry,telemetryCollectionXpack,kibanaUsageCollection,securityOss,newsfeed,mapsLegacy,kibanaLegacy,translations,bfetch,share,legacyExport,embeddable,uiActionsEnhanced,expressions,data,home,observability,console,consoleExtensions,apmOss,searchprofiler,painlessLab,grokdebugger,management,indexPatternManagement,advancedSettings,fileUpload,savedObjects,visualizations,visTypeTable,visTypeMarkdown,visTypeVega,visTypeTimelion,features,licenseManagement,dataEnhanced,tileMap,mapsOss,regionMap,lensOss,inputControlVis,graph,timelion,dashboard,dashboardEnhanced,visualize,charts,visTypeVislib,visTypeTimeseries,visTypeTimeseriesEnhanced,visTypeMetric,visTypeTagcloud,watcher,canvas,discover,discoverEnhanced,savedObjectsManagement,spaces,security,reporting,dashboardMode,savedObjectsTagging,lens,maps,lists,encryptedSavedObjects,cloud,upgradeAssistant,snapshotRestore,fleet,indexManagement,remoteClusters,crossClusterReplication,rollup,indexLifecycleManagement,enterpriseSearch,ml,beatsManagement,transform,ingestPipelines,eventLog,actions,alerts,triggersActionsUi,stackAlerts,securitySolution,case,infra,monitoring,logstash,apm,uptime,esUiShared]</span></span><br><span class="line"><span class="string">  log   [12:12:04.758] [info][plugins][taskManager] TaskManager is identified by the Kibana UUID: 75bba0a2-d69a-4376-b540-34d359878b57</span></span><br><span class="line"><span class="string">  log   [12:12:05.076] [warning][config][plugins][security] Generating a random key for xpack.security.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.security.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:12:05.077] [warning][config][plugins][security] Session cookies will be transmitted over insecure connections. This is not recommended.</span></span><br><span class="line"><span class="string">  log   [12:12:05.120] [warning][config][plugins][reporting] Generating a random key for xpack.reporting.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.reporting.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:12:05.121] [info][config][plugins][reporting] Chromium sandbox provides an additional layer of protection, and is supported for Darwin OS. Automatically enabling Chromium sandbox.</span></span><br><span class="line"><span class="string">  log   [12:12:05.154] [warning][config][encryptedSavedObjects][plugins] Generating a random key for xpack.encryptedSavedObjects.encryptionKey. To decrypt encrypted saved objects attributes after restart, please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:12:05.184] [warning][fleet][plugins] Fleet APIs are disabled because the Encrypted Saved Objects plugin uses an ephemeral encryption key. Please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:12:05.287] [warning][actions][actions][plugins] APIs are disabled because the Encrypted Saved Objects plugin uses an ephemeral encryption key. Please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:12:05.303] [warning][alerting][alerts][plugins][plugins] APIs are disabled because the Encrypted Saved Objects plugin uses an ephemeral encryption key. Please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:12:05.446] [info][monitoring][monitoring][plugins] config sourced from: production cluster</span></span><br><span class="line"><span class="string">  log   [12:12:05.705] [info][savedobjects-service] Waiting until all Elasticsearch nodes are compatible with Kibana before starting saved objects migrations...</span></span><br><span class="line"><span class="string">  log   [12:12:05.790] [warning][licensing][plugins] License information could not be obtained from Elasticsearch due to [illegal_argument_exception] request [/_xpack] contains unrecognized parameter: [accept_enterprise] :: &#123;"</span>path<span class="string">":"</span>/_xpack?accept_enterprise=<span class="literal">true</span><span class="string">","</span>statusCode<span class="string">":400,"</span>response<span class="string">":"</span>&#123;\"error\":&#123;\"root_cause\":[&#123;\"<span class="built_in">type</span>\":\"illegal_argument_exception\",\"reason\":\"request [/_xpack] contains unrecognized parameter: [accept_enterprise]\"&#125;],\"<span class="built_in">type</span>\":\"illegal_argument_exception\",\"reason\":\"request [/_xpack] contains unrecognized parameter: [accept_enterprise]\"&#125;,\"status\":400&#125;<span class="string">"&#125; error</span></span><br><span class="line"><span class="string">  log   [12:12:05.794] [warning][monitoring][monitoring][plugins] X-Pack Monitoring Cluster Alerts will not be available: X-Pack plugin is not installed on the Elasticsearch cluster.</span></span><br><span class="line"><span class="string">  log   [12:12:05.900] [error][savedobjects-service] This version of Kibana (v7.11.1) is incompatible with the following Elasticsearch nodes in your cluster: v7.10.2 @ 127.0.0.1:9200 (127.0.0.1)</span></span><br><span class="line"><span class="string">  log   [12:12:35.729] [warning][licensing][plugins] License information could not be obtained from Elasticsearch due to [illegal_argument_exception] request [/_xpack] contains unrecognized parameter: [accept_enterprise] :: &#123;"</span>path<span class="string">":"</span>/_xpack?accept_enterprise=<span class="literal">true</span><span class="string">","</span>statusCode<span class="string">":400,"</span>response<span class="string">":"</span>&#123;\"error\":&#123;\"root_cause\":[&#123;\"<span class="built_in">type</span>\":\"illegal_argument_exception\",\"reason\":\"request [/_xpack] contains unrecognized parameter: [accept_enterprise]\"&#125;],\"<span class="built_in">type</span>\":\"illegal_argument_exception\",\"reason\":\"request [/_xpack] contains unrecognized parameter: [accept_enterprise]\"&#125;,\"status\":400&#125;<span class="string">"&#125; error</span></span><br><span class="line"><span class="string">^C  log   [12:12:42.392] [info][plugins-system] Stopping all plugins.</span></span><br><span class="line"><span class="string">  log   [12:12:42.395] [info][kibana-monitoring][monitoring][monitoring][plugins] Monitoring stats collection is stopped</span></span><br><span class="line"><span class="string">^C  log   [12:12:42.624] [info][plugins-system] Stopping all plugins.</span></span><br><span class="line"><span class="string">  log   [12:12:42.628] [info][savedobjects-service] Starting saved objects migrations</span></span><br><span class="line"><span class="string">  log   [12:12:42.631] [warning][savedobjects-service] Unable to connect to Elasticsearch. Error: Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.</span></span><br><span class="line"><span class="string">  log   [12:12:42.632] [warning][savedobjects-service] Unable to connect to Elasticsearch. Error: Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.</span></span><br><span class="line"><span class="string">^C%</span></span><br><span class="line"><span class="string"> kgh  ~</span></span><br><span class="line"><span class="string"><span class="variable">$kibana</span> --version</span></span><br><span class="line"><span class="string">7.11.1</span></span><br></pre></td></tr></table></figure>
<p>이렇게 해당오류가 발생한 이유를 보니 버전을 full 버전(즉, 최신버전으로)다운받지 않아서 이러한 호환성문제가 생기게 되었습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install elasticsearch(최신 버전 호환 X)</span><br><span class="line">brew install elasticsearch-full(최신 버전 호환 O)</span><br></pre></td></tr></table></figure>
<p>따라서 다음과 같은방법으로 elasticsearch버전을 unlink해주고 새롭게 다시 설치를 진행하였습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$brew</span> uninstall elasticsearch</span><br><span class="line"><span class="variable">$rm</span> -rf /usr/<span class="built_in">local</span>/etc/elasticsearch</span><br><span class="line"><span class="variable">$rm</span> -rf /usr/<span class="built_in">local</span>/var/lib/elasticsearch</span><br><span class="line"><span class="variable">$brew</span> unlink elasticsearch</span><br><span class="line">Unlinking /usr/<span class="built_in">local</span>/Cellar/elasticsearch/7.10.2... 4 symlinks removed.</span><br><span class="line"></span><br><span class="line">brew install elasticsearch-full</span><br><span class="line">==&gt; Installing elasticsearch-full from elastic/tap</span><br><span class="line">==&gt; Downloading https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.11.1-darwin-x86_64.tar.gz?tap=elastic/homebrew-tap</span><br><span class="line">Already downloaded: /Users/kgh/Library/Caches/Homebrew/downloads/4c04176d64640de7c66954a6e6c536ac2ff45a342828e8af1d13fc8bf0ed47c8--elasticsearch-7.11.1-darwin-x86_64.tar.gz</span><br><span class="line">Warning: Tried to install empty array to /usr/<span class="built_in">local</span>/etc/elasticsearch/jvm.options.d</span><br><span class="line">==&gt; codesign -f -s - /usr/<span class="built_in">local</span>/Cellar/elasticsearch-full/7.11.1/libexec/modules/x-pack-ml/platform/darwin-x86_64/controller.app --deep</span><br><span class="line">==&gt; find /usr/<span class="built_in">local</span>/Cellar/elasticsearch-full/7.11.1/libexec/jdk.app/Contents/Home/bin -<span class="built_in">type</span> f -<span class="built_in">exec</span> codesign -f -s - &#123;&#125; ;</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Data:    /usr/<span class="built_in">local</span>/var/lib/elasticsearch/elasticsearch_kgh/</span><br><span class="line">Logs:    /usr/<span class="built_in">local</span>/var/<span class="built_in">log</span>/elasticsearch/elasticsearch_kgh.log</span><br><span class="line">Plugins: /usr/<span class="built_in">local</span>/var/elasticsearch/plugins/</span><br><span class="line">Config:  /usr/<span class="built_in">local</span>/etc/elasticsearch/</span><br><span class="line"></span><br><span class="line">To have launchd start elastic/tap/elasticsearch-full now and restart at login:</span><br><span class="line"> brew services start elastic/tap/elasticsearch-full</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string"> elasticsearch</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/elasticsearch-full/7.11.1: 933 files, 488.2MB, built in 19 seconds</span></span><br></pre></td></tr></table></figure>
<p>다음과 같이 버전을 새로 설치하여 호환성을 맞추어주었습니다.</p>
<p><strong>반드시 $elasticsearch가 구동되어있다면 재시작을 진행해야 정상적으로 수행이됩니다</strong></p>
<blockquote>
<p>kibana 다시 재가동하기</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kibana</span><br><span class="line">  log   [<span class="number">12</span>:<span class="number">50</span>:<span class="number">29.122</span>] [info][plugins-service] Plugin <span class="string">"visTypeXy"</span> is disabled.</span><br><span class="line">  log   [<span class="number">12</span>:<span class="number">50</span>:<span class="number">29.357</span>] [warning][config][deprecation] Environment variable <span class="string">"DATA_PATH"</span> will be removed.  It has been replaced with kibana.yml setting <span class="string">"path.data"</span></span><br><span class="line">  log   [<span class="number">12</span>:<span class="number">50</span>:<span class="number">29.359</span>] [warning][config][deprecation] Config key [monitoring.cluster_alerts.email_notifications.email_address] will be required <span class="keyword">for</span> email notifications to work in <span class="number">8.0</span>.<span class="string">"</span></span><br><span class="line"><span class="string">  log   [12:50:29.635] [info][plugins-system] Setting up [101] plugins: [taskManager,licensing,globalSearch,globalSearchProviders,code,usageCollection,xpackLegacy,telemetryCollectionManager,telemetry,telemetryCollectionXpack,kibanaUsageCollection,securityOss,newsfeed,mapsLegacy,kibanaLegacy,translations,share,legacyExport,embeddable,uiActionsEnhanced,expressions,charts,esUiShared,bfetch,data,home,observability,console,consoleExtensions,apmOss,searchprofiler,painlessLab,grokdebugger,management,indexPatternManagement,advancedSettings,fileUpload,savedObjects,visualizations,visTypeVislib,visTypeTimeseries,visTypeTimeseriesEnhanced,visTypeVega,visTypeTable,visTypeTimelion,features,licenseManagement,dataEnhanced,watcher,canvas,visTypeTagcloud,visTypeMetric,visTypeMarkdown,tileMap,regionMap,lensOss,mapsOss,inputControlVis,graph,timelion,dashboard,dashboardEnhanced,visualize,discover,discoverEnhanced,savedObjectsManagement,spaces,security,savedObjectsTagging,maps,lens,reporting,lists,encryptedSavedObjects,dashboardMode,cloud,upgradeAssistant,snapshotRestore,fleet,indexManagement,remoteClusters,crossClusterReplication,rollup,indexLifecycleManagement,enterpriseSearch,ml,beatsManagement,transform,ingestPipelines,eventLog,actions,alerts,triggersActionsUi,stackAlerts,securitySolution,case,infra,monitoring,logstash,apm,uptime]</span></span><br><span class="line"><span class="string">  log   [12:50:29.639] [info][plugins][taskManager] TaskManager is identified by the Kibana UUID: 75bba0a2-d69a-4376-b540-34d359878b57</span></span><br><span class="line"><span class="string">  log   [12:50:30.070] [warning][config][plugins][security] Generating a random key for xpack.security.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.security.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:50:30.070] [warning][config][plugins][security] Session cookies will be transmitted over insecure connections. This is not recommended.</span></span><br><span class="line"><span class="string">  log   [12:50:30.180] [warning][config][plugins][reporting] Generating a random key for xpack.reporting.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.reporting.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:50:30.183] [info][config][plugins][reporting] Chromium sandbox provides an additional layer of protection, and is supported for Darwin OS. Automatically enabling Chromium sandbox.</span></span><br><span class="line"><span class="string">  log   [12:50:30.192] [warning][config][encryptedSavedObjects][plugins] Generating a random key for xpack.encryptedSavedObjects.encryptionKey. To decrypt encrypted saved objects attributes after restart, please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:50:30.265] [warning][fleet][plugins] Fleet APIs are disabled because the Encrypted Saved Objects plugin uses an ephemeral encryption key. Please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:50:30.393] [warning][actions][actions][plugins] APIs are disabled because the Encrypted Saved Objects plugin uses an ephemeral encryption key. Please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:50:30.414] [warning][alerting][alerts][plugins][plugins] APIs are disabled because the Encrypted Saved Objects plugin uses an ephemeral encryption key. Please set xpack.encryptedSavedObjects.encryptionKey in the kibana.yml or use the bin/kibana-encryption-keys command.</span></span><br><span class="line"><span class="string">  log   [12:50:30.540] [info][monitoring][monitoring][plugins] config sourced from: production cluster</span></span><br><span class="line"><span class="string">  log   [12:50:30.816] [info][savedobjects-service] Waiting until all Elasticsearch nodes are compatible with Kibana before starting saved objects migrations...</span></span><br><span class="line"><span class="string">  log   [12:50:31.036] [info][savedobjects-service] Starting saved objects migrations</span></span><br><span class="line"><span class="string">  log   [12:50:31.095] [info][savedobjects-service] Creating index .kibana_task_manager_1.</span></span><br><span class="line"><span class="string">  log   [12:50:31.100] [info][savedobjects-service] Creating index .kibana_1.</span></span><br><span class="line"><span class="string">  log   [12:50:31.929] [info][savedobjects-service] Pointing alias .kibana_task_manager to .kibana_task_manager_1.</span></span><br><span class="line"><span class="string">  log   [12:50:32.013] [info][savedobjects-service] Pointing alias .kibana to .kibana_1.</span></span><br><span class="line"><span class="string">  log   [12:50:32.134] [info][savedobjects-service] Finished in 1039ms.</span></span><br><span class="line"><span class="string">  log   [12:50:32.188] [info][savedobjects-service] Finished in 1101ms.</span></span><br><span class="line"><span class="string">  log   [12:50:32.225] [info][plugins-system] Starting [101] plugins: [taskManager,licensing,globalSearch,globalSearchProviders,code,usageCollection,xpackLegacy,telemetryCollectionManager,telemetry,telemetryCollectionXpack,kibanaUsageCollection,securityOss,newsfeed,mapsLegacy,kibanaLegacy,translations,share,legacyExport,embeddable,uiActionsEnhanced,expressions,charts,esUiShared,bfetch,data,home,observability,console,consoleExtensions,apmOss,searchprofiler,painlessLab,grokdebugger,management,indexPatternManagement,advancedSettings,fileUpload,savedObjects,visualizations,visTypeVislib,visTypeTimeseries,visTypeTimeseriesEnhanced,visTypeVega,visTypeTable,visTypeTimelion,features,licenseManagement,dataEnhanced,watcher,canvas,visTypeTagcloud,visTypeMetric,visTypeMarkdown,tileMap,regionMap,lensOss,mapsOss,inputControlVis,graph,timelion,dashboard,dashboardEnhanced,visualize,discover,discoverEnhanced,savedObjectsManagement,spaces,security,savedObjectsTagging,maps,lens,reporting,lists,encryptedSavedObjects,dashboardMode,cloud,upgradeAssistant,snapshotRestore,fleet,indexManagement,remoteClusters,crossClusterReplication,rollup,indexLifecycleManagement,enterpriseSearch,ml,beatsManagement,transform,ingestPipelines,eventLog,actions,alerts,triggersActionsUi,stackAlerts,securitySolution,case,infra,monitoring,logstash,apm,uptime]</span></span><br><span class="line"><span class="string">  log   [12:50:35.778] [info][listening] Server running at http://localhost:5601</span></span><br><span class="line"><span class="string">  log   [12:50:36.837] [info][server][Kibana][http] http server running at http://localhost:5601</span></span><br><span class="line"><span class="string">  log   [12:50:36.851] [info][plugins][watcher] Your basic license does not support watcher. Please upgrade your license.</span></span><br><span class="line"><span class="string">  log   [12:50:36.865] [info][crossClusterReplication][plugins] Your basic license does not support crossClusterReplication. Please upgrade your license.</span></span><br><span class="line"><span class="string">  log   [12:50:36.876] [info][kibana-monitoring][monitoring][monitoring][plugins] Starting monitoring stats collection</span></span><br><span class="line"><span class="string">  log   [12:50:39.515] [info][plugins][reporting] Downloading https://storage.googleapis.com/headless_shell/chromium-ef768c9-darwin_x64.zip to /usr/local/Cellar/kibana-full/7.11.1/libexec/.chromium/chromium-ef768c9-darwin_x64.zip</span></span><br><span class="line"><span class="string">  log   [12:50:39.517] [info][plugins][reporting] Downloading https://storage.googleapis.com/headless_shell/chromium-ef768c9-linux_x64.zip to /usr/local/Cellar/kibana-full/7.11.1/libexec/.chromium/chromium-ef768c9-linux_x64.zip</span></span><br><span class="line"><span class="string">  log   [12:50:39.518] [info][plugins][reporting] Downloading https://storage.googleapis.com/headless_shell/chromium-ef768c9-linux_arm64.zip to /usr/local/Cellar/kibana-full/7.11.1/libexec/.chromium/chromium-ef768c9-linux_arm64.zip</span></span><br><span class="line"><span class="string">  log   [12:50:39.519] [info][plugins][reporting] Downloading https://storage.googleapis.com/headless_shell/chromium-ef768c9-windows_x64.zip to /usr/local/Cellar/kibana-full/7.11.1/libexec/.chromium/chromium-ef768c9-windows_x64.zip</span></span><br><span class="line"><span class="string">  log   [12:51:03.269] [info][plugins][reporting] Downloaded https://storage.googleapis.com/headless_shell/chromium-ef768c9-linux_x64.zip</span></span><br><span class="line"><span class="string">  log   [12:51:05.427] [info][plugins][reporting] Downloaded https://storage.googleapis.com/headless_shell/chromium-ef768c9-darwin_x64.zip</span></span><br><span class="line"><span class="string">  log   [12:51:06.716] [info][plugins][reporting] Downloaded https://storage.googleapis.com/headless_shell/chromium-ef768c9-windows_x64.zip</span></span><br><span class="line"><span class="string">  log   [12:51:07.962] [info][plugins][reporting] Downloaded https://storage.googleapis.com/headless_shell/chromium-ef768c9-linux_arm64.zip</span></span><br><span class="line"><span class="string">  log   [12:51:07.969] [info][plugins][reporting] Extracting [/usr/local/Cellar/kibana-full/7.11.1/libexec/.chromium/chromium-ef768c9-darwin_x64.zip] to [/usr/local/Cellar/kibana-full/7.11.1/libexec/x-pack/plugins/reporting/chromium/headless_shell-darwin_x64/headless_shell]</span></span><br><span class="line"><span class="string">  log   [12:51:07.995] [warning][environment] Detected an unhandled Promise rejection.</span></span><br><span class="line"><span class="string">Error: Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>버전별 설치하기</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -O https:<span class="comment">//artifacts.elastic.co/downloads/kibana/kibana-7.10.2-darwin-x86_64.tar.gz</span></span><br><span class="line">tar -xzf kibana-<span class="number">7.10</span><span class="number">.2</span>-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p><a href="https://smartstuartkim.wordpress.com/2019/09/23/install-elastic-stack-on-mac-session-1-openjdk-elastic-search-kibana-logstash-beat/" target="_blank" rel="noopener">https://smartstuartkim.wordpress.com/2019/09/23/install-elastic-stack-on-mac-session-1-openjdk-elastic-search-kibana-logstash-beat/</a></p>
<h1 id="kibana-gadong"><a href="#kibana-gadong" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#kibana-가동"></a> kibana 가동</h1>
<p>이제 다음과 같이 구동이되면 정상적으로 실행이 된것을 알 수 있습니다.</p>
<p><img src="https://www.google.com/imgres?imgurl=https%3A%2F%2Fpostfiles.pstatic.net%2FMjAxOTAzMjVfMjY2%2FMDAxNTUzNDQyNTg1OTM3.l64ILf-mwez4KBUG6Ot0imzxgb-W2Yp809zxaMOhdS4g.UNmLbyYSOgSh6oBMyn6G1SaRmwbEE-pS1NUnceix3V4g.PNG.hihello0426%2F%25EC%258A%25A4%25ED%2581%25AC%25EB%25A6%25B0%25EC%2583%25B7_2019-03-25_%25EC%2598%25A4%25EC%25A0%2584_12.49.36.png%3Ftype%3Dw773&amp;imgrefurl=https%3A%2F%2Fblog.naver.com%2FPostView.nhn%3FblogId%3Dhihello0426%26logNo%3D221496517750%26parentCategoryNo%3D50%26categoryNo%3D52%26viewDate%3D%26isShowPopularPosts%3Dfalse%26from%3DpostView&amp;tbnid=MOPqztZr9yT6YM&amp;vet=12ahUKEwig9JDBhvXuAhVIbJQKHUS8BBcQMygCegUIARCYAQ..i&amp;docid=jWTS9_Epc_LcSM&amp;w=773&amp;h=454&amp;q=Kibana%20welcome&amp;ved=2ahUKEwig9JDBhvXuAhVIbJQKHUS8BBcQMygCegUIARCYAQ" alt="Kibana"></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Java MultiThread(멀티스레드) 고려사항</title>
    <url>/Java-20210218-multi-thread-java/</url>
    <content><![CDATA[<h1 id="multi-thread-goryeosahang"><a href="#multi-thread-goryeosahang" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#multi-thread-고려사항"></a> Multi Thread 고려사항</h1>
<p>MultiThread를 구현하는 대표적인방법은 두가지가 있습니다.</p>
<ul>
<li>java.lang.Thread 클래스를 상속받아서 구현하는 방법</li>
<li>java.lang.Runnable 인터페이스를 구현해서 개발하는 방법</li>
</ul>
<blockquote>
<p>Field Member</p>
</blockquote>
<p>필드의 의미는 클래스에 변수를 정의하는 공간을 의미합니다. 하지만, 객체가 여러 스레드가 접근하는 싱글톤 객체라면 filed 상태값을 갖고 있지않고, 모든 변수를 parameter -&gt; return 형식으로 구성해야합니다.</p>
<blockquote>
<p>Synchronized</p>
</blockquote>
<p>동기화 처리시에 synchronized 키워드를 사용하여 스레드 간섭을 피하고 이 키워드 기반으로 구현된 Collection도 존재합니다.<br>
List 대신 Vector, Map 대신 HashTable을 사용할 수 있지만, API 및 성능상 문제를 가지고 있습니다.</p>
<p>성능문제를 어떻게 해결 할 수 있을까요?</p>
<p>Collections 라는 utll 클래스에서 제공되는 static 메소드를 통해 해결이 가능합니다.</p>
<p>다음과 같이 변경하여 해결이 가능합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.synchronizedList()</span><br><span class="line">Collections.synchronizedSet()</span><br><span class="line">Collections.synchronizedMap()</span><br></pre></td></tr></table></figure>
<p>더 나아가서, JDK 1.7부터는 ConcurrentHashMap 구현체를 제공하여 Collections utill을 사용하는것보다 보다 좋은 성능을 내는 자료구조를 제공합니다.</p>
<ul>
<li>ConcurrentHashMap 예시</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    private final ConcurrentHashMap&lt;String, Movie.MovieDto&gt; movieMapCache = new ConcurrentHashMap&lt;&gt;(16);</span></span><br><span class="line"><span class="comment">    private volatile Long cacheLoadTime = 0L;</span></span><br><span class="line"><span class="comment">    private volatile Long cacheTimeLimit = 600 * 1000L;</span></span><br><span class="line"><span class="comment">     * 영화 캐시 조회</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Movie.MovieDto&gt; findCacheByQuery(<span class="keyword">final</span> String query) &#123;</span><br><span class="line">        <span class="keyword">long</span> nowTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(movieMapCache) || nowTime - cacheLoadTime &gt; cacheTimeLimit)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (movieMapCache)&#123;</span><br><span class="line">                ResponseEntity&lt;Movie.MovieDto&gt; exchange = getExchange(query);</span><br><span class="line">                List&lt;Movie.Item&gt; ResponseMovieList = Movie.Item.of(exchange);</span><br><span class="line">                MovieGroup items = <span class="keyword">new</span> MovieGroup(ResponseMovieList);</span><br><span class="line">                List&lt;Movie.Item&gt; listOrderRating = items.getListOrderRating();</span><br><span class="line">                Movie.MovieDto resultList = Movie.MovieDto.of(exchange, listOrderRating);</span><br><span class="line">                cacheInitialized();</span><br><span class="line">                cacheLoadTime = nowTime;</span><br><span class="line">                movieMapCache.put(query, resultList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> movieMapCache;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ThreadLocal</p>
</blockquote>
<p>일반 변수의 수명은 특정 코드 블록(예, 메서드 범위, for 블록 범위 등) 범위 내에서만 유효합니다. 하지만 <code>ThreadLocal</code>을 사용하면 반면에 ThreadLocal을 이용하면 쓰레드 영역에 변수를 설정할 수 있기 때문에, 특정 쓰레드가 실행하는 모든 코드에서 그 쓰레드에 설정된 변수 값을 사용할 수 있습니다. Thread사이에 간섭을 없애야하는 데이터에 사용이 되야하는데 멀티 스레드 환경에서는 클래스의필드에 멤버를 추가할 수 없고 매개변수로 넘겨받아야합니다. 결론적으로 스레드 내부의 싱글톤을 사용하기위해 사용합니다.</p>
<ul>
<li>ThreadLocal 주의 사항</li>
</ul>
<ol>
<li>ThreadLocal 객체를 생성한다.</li>
<li>ThreadLocal.set() 메서드를 이용해서 현재 쓰레드의 로컬 변수에 값을 저장한다.</li>
<li>ThreadLocal.get() 메서드를 이용해서 현재 쓰레드의 로컬 변수 값을 읽어온다.</li>
<li>ThreadLocal.remove() 메서드를 이용해서 현재 쓰레드의 로컬 변수 값을 삭제한다.</li>
</ol>
<p>쓰레드 풀 환경에서 ThreadLocal을 사용하는 경우 ThreadLocal 변수에 보관된 데이터의 사용이 끝나면 반드시 해당 데이터를 삭제해야하며 그렇지 않을 경우 재사용되는 쓰레드가 올바르지 않은 데이터를 참조할 수 있는 가능성이 있습니다.</p>
<ul>
<li>ThreadLocal 사용</li>
</ul>
<ol>
<li>사용자 인증정보 전파 - Spring Security에서는 ThreadLocal을 이용해서 사용자 인증 정보를 전달합니다.</li>
<li>트랜잭션 컨텍스트 - 트랜잭션 매니저는 트랜잭션 컨텍스트를 전파하는 데 ThreadLocal을 사용합니다.</li>
<li>세션 정보</li>
<li>Thread Safe한 데이터 저장</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Wrapper Class, Auto Boxing</title>
    <url>/Java-20210218-wrapper-class-auto-boxing-java/</url>
    <content><![CDATA[<h1 id="wrapper-class"><a href="#wrapper-class" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#wrapper-class"></a> Wrapper Class</h1>
<p>Wrapper Class란?</p>
<p>자바의 자료형은 크게 <code>기본 타입(primitive type)과 참조 타입(reference type)</code>으로 나누어집니다.<br>
대표적으로 기본 타입은 char, int, float, double, boolean 등이 있고 참조 타입은 class, interface 등이 있는데 프로그래밍을 하다 보면 기본 타입의 데이터를 객체로 표현해야 하는 경우가 종종 있습니다. 이럴 때에 기본 자료타입(primitive type)을 객체로 다루기 위해서 사용하는 클래스들을 래퍼 클래스(wrapper class)라고 합니다. Wrapper Class는 java.lang 패키지에 포함되어 있습니다.</p>
<p>컬렉션에서 제네릭을 사용하기 위해서는 Wrapper class를 사용해줘야하는데 null 값을 반환해야만 하는 경우에는 return type 을 Wrapper class 로 지정하여 null을 반환하도록 할 수 있습니다. 아니면 옵셔널을 붙여서 반환하는 방식도 있습니다.</p>
<p>Primitive data type 인 경우에는 “==” 비교가 가능하지만  Wrapper class 인 경우에는 .intValue() 메소드를 통해 해당 Wrapper class 의 값을 직접 가져와서 비교해야합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer phoneNumber = <span class="keyword">new</span> Integer(<span class="string">"123456789"</span>);</span><br><span class="line">        <span class="keyword">int</span> num = phoneNumber.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>위와 같은 예제는 기본 타입의 값을 포장 객체로 만드는 과정을 <code>박싱</code>이라고 하고 반대로 포장객체에서 기본타입의 값을 얻어내는 과정을 <code>언박싱</code>이라고 합니다.</p>
<h1 id="autoboxing"><a href="#autoboxing" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#autoboxing"></a> AutoBoxing</h1>
<p>기본타입 값을 직접 박싱, 언박싱하지 않아도 자동적으로 박싱과 언박싱이 일어나는 경우가 있습니다. 자동 박싱의 포장 클래스 타입에 기본값이 대입될 경우에 발생합니다. AutoBoxing은 JDK 1.5 부터는 AutoBoxing과 AutoUnBoxing을 제공합니다. 이 기능은 각 Wrapper class 에 상응하는 Primitive data type 일 경우에만 가능합니다.</p>
<blockquote>
<p>예제 1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 자동 박싱</span></span><br><span class="line">        Integer phoneNumber = <span class="number">123456789</span>;</span><br><span class="line">        <span class="comment">// 자동 언박싱</span></span><br><span class="line">        <span class="keyword">int</span> num = phoneNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 Integer Wrapper Class에서 Primitive data type으로 AutoBoxing이 일어나게 됩니다.</p>
<blockquote>
<p>예제 2</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrList.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>다음과 같은 예제는 Integer라는 Wrapper class 로 설정한 collection 에 데이터를 add 할 때 Integer 객체로 감싸서 넣지 않습니다.<br>
즉, 자바 내부에서 AutoBoxing 해주기 때문입니다.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>WrapperClass</tag>
        <tag>AutoBoxing</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 클린코드 매직넘버 이슈 및 final 키워드</title>
    <url>/Java-20210218-magic-number-final-java/</url>
    <content><![CDATA[<h1 id="maejigneombeoreul-jigjeob-jagseonghaneungeoseul-jiyanghara"><a href="#maejigneombeoreul-jigjeob-jagseonghaneungeoseul-jiyanghara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#매직넘버를-직접-작성하는것을-지양하라"></a> 매직넘버를 직접 작성하는것을 지양하라</h1>
<p>소스코드를 보다보면 특정한 숫자 매직넘버(Magic Number)를 직접 작성하는 나쁜 스타일의 코드를 볼 수 있습니다.</p>
<p>만약에 캐싱으로 캐싱값들을 강제로 업데이트하는 로직이 있다고 가정해보겠습니다. 여기에서 캐시에 대한 시간값을 지정했다고 가정하면 다음과 같이 코드를 작성하는것이 올바른 코드 일까요? 아닙니다. 저렇게 내부적으로 상수값들을 선언을 해주게 되면 유지보수측면이나 코드의 가독성측면에서 좋지 않은 결과를 가져다 줄 것입니다.</p>
<blockquote>
<p>매직넘버의 단점</p>
</blockquote>
<ul>
<li>매직넘버의 의미를 알기어렵고 0,1의 의미를 직접알기에 매우 쉽지않습니다.</li>
<li>매직넘버는 수정이 매우어렵고 유지보수를 힘들게합니다. 시간효율성측면에서 좋지않습니다.</li>
</ul>
<blockquote>
<p>캐싱 강제 업데이트(매직넘버 미적용)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 캐시 강제 업데이트</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> query</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Movie.MovieDto&gt; saveCacheByQuery(<span class="keyword">final</span> String query) &#123;</span><br><span class="line">    <span class="keyword">long</span> nowTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(movieMapCache) || nowTime - cacheLoadTime &lt; <span class="number">600</span> * <span class="number">1000L</span>;)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (movieMapCache)&#123;</span><br><span class="line">            cacheInitialized();</span><br><span class="line">            ResponseEntity&lt;Movie.MovieDto&gt; exchange = getExchange(query);</span><br><span class="line">            List&lt;Movie.Item&gt; ResponseMovieList = Movie.Item.of(exchange);</span><br><span class="line">            MovieGroup items = <span class="keyword">new</span> MovieGroup(ResponseMovieList);</span><br><span class="line">            List&lt;Movie.Item&gt; listOrderRating = items.getListOrderRating();</span><br><span class="line">            Movie.MovieDto resultList = Movie.MovieDto.of(exchange, listOrderRating);</span><br><span class="line">            cacheLoadTime = nowTime;</span><br><span class="line">            movieMapCache.put(query, resultList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> movieMapCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>캐싱 강제 업데이트(매직넘버 적용)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 선언부 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Long cacheLoadTime = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Long cacheTimeLimit = <span class="number">600</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 캐시 강제 업데이트</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> query</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Movie.MovieDto&gt; saveCacheByQuery(<span class="keyword">final</span> String query) &#123;</span><br><span class="line">    <span class="keyword">long</span> nowTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(movieMapCache) || nowTime - cacheLoadTime &lt; cacheTimeLimit)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (movieMapCache)&#123;</span><br><span class="line">            cacheInitialized();</span><br><span class="line">            ResponseEntity&lt;Movie.MovieDto&gt; exchange = getExchange(query);</span><br><span class="line">            List&lt;Movie.Item&gt; ResponseMovieList = Movie.Item.of(exchange);</span><br><span class="line">            MovieGroup items = <span class="keyword">new</span> MovieGroup(ResponseMovieList);</span><br><span class="line">            List&lt;Movie.Item&gt; listOrderRating = items.getListOrderRating();</span><br><span class="line">            Movie.MovieDto resultList = Movie.MovieDto.of(exchange, listOrderRating);</span><br><span class="line">            cacheLoadTime = nowTime;</span><br><span class="line">            movieMapCache.put(query, resultList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> movieMapCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>다음과 같이 매직넘버를 기호 상수로 선언하여 클린코드의 습관을 들여야합니다. 혹은 enum이나 public static final 클래스 필드를 사용하여 명확한 값들을 지정해주어야합니다. 실수를 줄일 수 있고, enum을 사용하여 상수값으로 매직넘버를 직접 사용해도 문제없이 컴파일시점에 처리가 가능합니다.</p>
<h1 id="final-keyword"><a href="#final-keyword" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#final-keyword"></a> final keyword</h1>
<blockquote>
<p>final class<br>
다른 클래스에서 상속하지 못하게됩니다.</p>
</blockquote>
<blockquote>
<p>final method<br>
다른 메소드에서 오버라이딩하지 못합니다.</p>
</blockquote>
<blockquote>
<p>final variable<br>
변하지 않는 상수값이 되어 새로 할당할 수 없는 변수가 됩니다.</p>
</blockquote>
<blockquote>
<p>finally<br>
try-catch or try-catch-resource 구문을 사용할 때, 마무리처리 작업 로직을 넣어야할때 사용합니다.</p>
</blockquote>
<blockquote>
<p>finalize()<br>
keyword 도 아니고 code block 도 아닌 메소드입니다. 해당 메소드는 GC에 의해 호출되는 함수로 절대 호출해서는 안되며 Object 클래스에 정의되어 있으며 GC 가 발생하는 시점이 불분명하기 때문에 해당 메소드가 실행된다는 보장이 없습니다. 한 finalize() 메소드가 오버라이딩 되어 있으면 GC 가 이루어질 때 바로 Garbage Collecting 되지 않기때문에 GC 가 지연되면서 OOME(Out of Memory Exception)이 발생할 수 있는 이슈가 존재합니다.</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>final</tag>
        <tag>magicnumber</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 경주로건설</title>
    <url>/Programmers-20210216-programmers-%EA%B2%BD%EC%A3%BC%EB%A1%9C%EA%B1%B4%EC%84%A4/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-gyeongjurogeonseol"><a href="#peurogeuraemeoseu-gyeongjurogeonseol" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-경주로건설"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/67259" target="_blank" rel="noopener">프로그래머스 경주로건설 </a></h1>
<h1 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h1>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/384b9e2a-4eb5-460d-bce2-d12359b03b14/kakao_road1.png" alt="문제설명"></p>
<p>건설회사의 설계사인 죠르디는 고객사로부터 자동차 경주로 건설에 필요한 견적을 의뢰받았습니다.<br>
제공된 경주로 설계 도면에 따르면 경주로 부지는 N x N 크기의 정사각형 격자 형태이며 각 격자는 1 x 1 크기입니다.<br>
설계 도면에는 각 격자의 칸은 0 또는 1 로 채워져 있으며, 0은 칸이 비어 있음을 1은 해당 칸이 벽으로 채워져 있음을 나타냅니다.<br>
경주로의 출발점은 (0, 0) 칸(좌측 상단)이며, 도착점은 (N-1, N-1) 칸(우측 하단)입니다. 죠르디는 출발점인 (0, 0) 칸에서 출발한 자동차가 도착점인 (N-1, N-1) 칸까지 무사히 도달할 수 있게 중간에 끊기지 않도록 경주로를 건설해야 합니다.<br>
경주로는 상, 하, 좌, 우로 인접한 두 빈 칸을 연결하여 건설할 수 있으며, 벽이 있는 칸에는 경주로를 건설할 수 없습니다.<br>
이때, 인접한 두 빈 칸을 상하 또는 좌우로 연결한 경주로를 직선 도로 라고 합니다.<br>
또한 두 직선 도로가 서로 직각으로 만나는 지점을 코너 라고 부릅니다.<br>
건설 비용을 계산해 보니 직선 도로 하나를 만들 때는 100원이 소요되며, 코너를 하나 만들 때는 500원이 추가로 듭니다.<br>
죠르디는 견적서 작성을 위해 경주로를 건설하는 데 필요한 최소 비용을 계산해야 합니다.</p>
<p>예를 들어, 아래 그림은 직선 도로 6개와 코너 4개로 구성된 임의의 경주로 예시이며, 건설 비용은 6 x 100 + 4 x 500 = 2600원 입니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/3f5d9c5e-d7d9-4248-b111-140a0847e741/kakao_road2.png" alt></p>
<p>또 다른 예로, 아래 그림은 직선 도로 4개와 코너 1개로 구성된 경주로이며, 건설 비용은 4 x 100 + 1 x 500 = 900원 입니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ccc72e9c-2e22-4a09-a94b-ff057b081a70/kakao_road3.png" alt></p>
<p>도면의 상태(0은 비어 있음, 1은 벽)을 나타내는 2차원 배열 board가 매개변수로 주어질 때, 경주로를 건설하는데 필요한 최소 비용을 return 하도록 solution 함수를 완성해주세요.</p>
<p>[제한사항]<br>
board는 2차원 정사각 배열로 배열의 크기는 3 이상 25 이하입니다.<br>
board 배열의 각 원소의 값은 0 또는 1 입니다.<br>
도면의 가장 왼쪽 상단 좌표는 (0, 0)이며, 가장 우측 하단 좌표는 (N-1, N-1) 입니다.<br>
원소의 값 0은 칸이 비어 있어 도로 연결이 가능함을 1은 칸이 벽으로 채워져 있어 도로 연결이 불가능함을 나타냅니다.<br>
board는 항상 출발점에서 도착점까지 경주로를 건설할 수 있는 형태로 주어집니다.<br>
출발점과 도착점 칸의 원소의 값은 항상 0으로 주어집니다.<br>
입출력 예<br>
board    result<br>
[[0,0,0],[0,0,0],[0,0,0]]    900<br>
[[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,1],[0,0,1,0,0,0,1,0],[0,1,0,0,0,1,0,0],[1,0,0,0,0,0,0,0]]    3800<br>
[[0,0,1,0],[0,0,0,0],[0,1,0,1],[1,0,0,0]]    2100<br>
[[0,0,0,0,0,0],[0,1,1,1,1,0],[0,0,1,0,0,0],[1,0,0,1,0,1],[0,1,0,0,0,1],[0,0,0,0,0,0]]    3200<br>
입출력 예에 대한 설명<br>
입출력 예 #1</p>
<p>본문의 예시와 같습니다.</p>
<p>입출력 예 #2</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ccc72e9c-2e22-4a09-a94b-ff057b081a70/kakao_road4.png" alt></p>
<p>위와 같이 경주로를 건설하면 직선 도로 18개, 코너 4개로 총 3800원이 듭니다.</p>
<p>입출력 예 #3</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/4fe42f47-2592-4cb8-91fb-31d6a6da8639/kakao_road5.png" alt></p>
<p>위와 같이 경주로를 건설하면 직선 도로 6개, 코너 3개로 총 2100원이 듭니다.</p>
<p>입출력 예 #4</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ccc72e9c-2e22-4a09-a94b-ff057b081a70/kakao_road6.png" alt></p>
<p>붉은색 경로와 같이 경주로를 건설하면 직선 도로 12개, 코너 4개로 총 3200원이 듭니다.<br>
만약, 파란색 경로와 같이 경주로를 건설한다면 직선 도로 10개, 코너 5개로 총 3500원이 들며, 더 많은 비용이 듭니다.</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>해당 문제는 BFS로 모든경로에서의 최소비용을 찾는 문제였습니다. 처음에 일반 bfs처럼 처리하려다가 모든 경로를 확인해야하는 경우가 있고 n-1,n-1지점에 도달하는 경우가 다수가 생길 수 있기때문에 그 부분을 다시 체크하여 푼 문제였습니다.</p>
<ul>
<li>(1) 0,0지점에서 (n-1,n-1)지점까지 도달하는 모든 경우를 구해주었습니다.</li>
<li>일반 bfs와는 다르게 check변수를 선언하지 않았는데 그 이유는 n-1,n-1지점으로 도달하는 경우가 여러개일수 있기 때문입니다.</li>
<li>(2) 4가지 방향을 이용하여 모든 보드를 탐색하였고, 최초로 진입시에는 0,0지점에서 시작점을 잡고 가중치는 0, 방향을 -1로 잡아를 수행하였습니다.</li>
<li>(3) 직선의 경우 비용이 100, 곡선이 포함된 경우 (곡선+직선)의 비용을 더해주어야지 해당되는 비용을 모두 구할 수 있습니다.</li>
<li>(4) 만약에 현재 보드에값보다 직선,곡선을 돌고 더 작은값이 있다면 값을 갱신하면서 bfs를 수행하는 형식으로 모든지점을 탐색할 수 있도록하였습니다.</li>
</ul>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<p>인접리스트 BFS -&gt; O(V+E)</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">programmers_</span>경주로건설<span class="title">_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        n = board.length;</span><br><span class="line">        answer = Integer.MAX_VALUE;</span><br><span class="line">        bfs(<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">0</span>,board);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> d, <span class="keyword">int</span> w,<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Graph&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(<span class="keyword">new</span> Graph(x,y,d,w));</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            Graph g = q.remove();</span><br><span class="line">            <span class="keyword">int</span> dx = g.x;</span><br><span class="line">            <span class="keyword">int</span> dy = g.y;</span><br><span class="line">            <span class="keyword">int</span> dDirection = g.direction;</span><br><span class="line">            <span class="keyword">int</span> dWeight = g.weight;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(dx == n-<span class="number">1</span> &amp;&amp; dy == n-<span class="number">1</span>)&#123;</span><br><span class="line">                answer = Math.min(answer, dWeight);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> mWeight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; n)&#123;</span><br><span class="line">                    <span class="comment">// 같은 방향이거나 처음값이 들어온 경우 (직선=100원)</span></span><br><span class="line">                    <span class="keyword">if</span>(i == dDirection || dDirection == -<span class="number">1</span>)&#123;</span><br><span class="line">                        mWeight = dWeight + <span class="number">100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 다른방향으로 꺾은 경우 (직선=100+곡선=500)</span></span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        mWeight = dWeight + <span class="number">600</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 갈수있으며 해당 가중치값보다 더 작으면 갱신</span></span><br><span class="line">                    <span class="keyword">if</span>(board[mx][my] == <span class="number">0</span> || board[mx][my] &gt;= mWeight)&#123;</span><br><span class="line">                        board[mx][my] = mWeight;</span><br><span class="line">                        q.add(<span class="keyword">new</span> Graph(mx,my,i,mWeight));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">int</span> direction;</span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> direction, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.direction = direction;</span><br><span class="line">            <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 셔틀버스</title>
    <url>/Programmers-20210216-programmers-%EC%85%94%ED%8B%80%EB%B2%84%EC%8A%A4/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-syeoteulbeoseu"><a href="#peurogeuraemeoseu-syeoteulbeoseu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-셔틀버스"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/17678" target="_blank" rel="noopener">프로그래머스 셔틀버스 </a></h1>
<h2 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>셔틀버스<br>
카카오에서는 무료 셔틀버스를 운행하기 때문에 판교역에서 편하게 사무실로 올 수 있다. 카카오의 직원은 서로를 '크루’라고 부르는데, 아침마다 많은 크루들이 이 셔틀을 이용하여 출근한다.</p>
<p>이 문제에서는 편의를 위해 셔틀은 다음과 같은 규칙으로 운행한다고 가정하자.</p>
<p>셔틀은 09:00부터 총 n회 t분 간격으로 역에 도착하며, 하나의 셔틀에는 최대 m명의 승객이 탈 수 있다.<br>
셔틀은 도착했을 때 도착한 순간에 대기열에 선 크루까지 포함해서 대기 순서대로 태우고 바로 출발한다. 예를 들어 09:00에 도착한 셔틀은 자리가 있다면 09:00에 줄을 선 크루도 탈 수 있다.<br>
일찍 나와서 셔틀을 기다리는 것이 귀찮았던 콘은, 일주일간의 집요한 관찰 끝에 어떤 크루가 몇 시에 셔틀 대기열에 도착하는지 알아냈다. 콘이 셔틀을 타고 사무실로 갈 수 있는 도착 시각 중 제일 늦은 시각을 구하여라.</p>
<p>단, 콘은 게으르기 때문에 같은 시각에 도착한 크루 중 대기열에서 제일 뒤에 선다. 또한, 모든 크루는 잠을 자야 하므로 23:59에 집에 돌아간다. 따라서 어떤 크루도 다음날 셔틀을 타는 일은 없다.</p>
<p>입력 형식<br>
셔틀 운행 횟수 n, 셔틀 운행 간격 t, 한 셔틀에 탈 수 있는 최대 크루 수 m, 크루가 대기열에 도착하는 시각을 모은 배열 timetable이 입력으로 주어진다.</p>
<p>0 ＜ n ≦ 10<br>
0 ＜ t ≦ 60<br>
0 ＜ m ≦ 45<br>
timetable은 최소 길이 1이고 최대 길이 2000인 배열로, 하루 동안 크루가 대기열에 도착하는 시각이 HH:MM 형식으로 이루어져 있다.<br>
크루의 도착 시각 HH:MM은 00:01에서 23:59 사이이다.<br>
출력 형식<br>
콘이 무사히 셔틀을 타고 사무실로 갈 수 있는 제일 늦은 도착 시각을 출력한다. 도착 시각은 HH:MM 형식이며, 00:00에서 23:59 사이의 값이 될 수 있다.</p>
<p>입출력 예제<br>
n    t    m    timetable    answer<br>
1    1    5    [08:00, 08:01, 08:02, 08:03]    09:00<br>
2    10    2    [09:10, 09:09, 08:00]    09:09<br>
2    1    2    [09:00, 09:00, 09:00, 09:00]    08:59<br>
1    1    5    [00:01, 00:01, 00:01, 00:01, 00:01]    00:00<br>
1    1    1    [23:59]    09:00<br>
10    60    45    [23:59,23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59, 23:59]</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>해당 문제는 시간으로 주어진 값을 파싱하여 푸는 단순 구현문제였습니다. 시간관련한 문제에서 처음에 접근할때 어려움이 조금이 있었는데, 차근차근 하나씩 풀어나간 문제였습니다.</p>
<blockquote>
<p>제가 문제를 풀때 고려하였던 점은 다음과 같습니다.</p>
</blockquote>
<ul>
<li>(1) 타임테이블로 주어진 값들을 모두 &quot;분&quot;단위로 변경</li>
<li>(2) 순서대로 온다는 보장이 없으므로 sort</li>
<li>(3) 셔틀버스 시작시간은 09:00 이므로 9 * 60</li>
<li>(4) 셔틀버스 운행전에 도착한 크루가 있는경우(크루의 탑승객의수 증가 + 크루의 진행된 인덱스의 개수)</li>
<li>(5) 버스에 정원이 다 차지 않은 경우, 버스도착시간에 콘 도착</li>
<li>(5) 버스 정원이 모두 가득찼을 경우, 운행을 종료시키고 마지막지점까지 도달하여 콘은 마지막 프렌즈 도착시간 이전타임 보다 1분 일찍 오면 콘이 오는시간</li>
<li>(6) 아직 더 탈인원이 있다면 다음 운행버스 호출</li>
<li>(7) 정답은 hh:mm 형식이므로 convertToString 함수 호출하여 정답 반환</li>
</ul>
<p>해당 문제에서 가장 중요했던점은 시간을 &quot;분단위&quot;로 변환하는것이고 해당 로직에서 셔틀이 시작하는 시점은 09:00부터 시작된다는점입니다. 처음에 문제를 이해하는데 많은 시간이 소요된 것 같습니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">programmers_</span>셔틀버스<span class="title">_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"08:00"</span>,<span class="string">"08:01"</span>,<span class="string">"08:02"</span>,<span class="string">"08:03"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> t, <span class="keyword">int</span> m, String[] timetable)</span> </span>&#123;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//1. 모든 타임테이블 시간을 분단위로 변경</span></span><br><span class="line">        <span class="keyword">int</span>[] times = convertToTime(timetable);</span><br><span class="line">        <span class="comment">//2. 도착순서대로 정렬을 진행</span></span><br><span class="line">        Arrays.sort(times);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> busTime = <span class="number">9</span> * <span class="number">60</span>;</span><br><span class="line">        <span class="comment">// 몇번째 크루까지 탑승했는지</span></span><br><span class="line">        <span class="keyword">int</span> busIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cornTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 운행횟수만큼 진행</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="comment">// 버스탑승인원</span></span><br><span class="line">            <span class="keyword">int</span> busCrewCnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=busIdx; j&lt;times.length; j++)&#123;</span><br><span class="line">                <span class="comment">// 버스 출발전에 도착한크루가 있는 경우</span></span><br><span class="line">                <span class="keyword">if</span>(times[j] &lt;= busTime)&#123;</span><br><span class="line">                    busCrewCnt++;</span><br><span class="line">                    busIdx++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 버스 정원 꽉찬 경우</span></span><br><span class="line">                <span class="keyword">if</span>(busCrewCnt == m)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == n-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 버스에 정원이 다 차지 않은 경우, 버스도착시간에 콘 도착</span></span><br><span class="line">                <span class="keyword">if</span>(busCrewCnt &lt; m)&#123;</span><br><span class="line">                    cornTime = busTime;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 버스의 정원이 다 찬경우, 콘은 마지막에 탄 프렌즈보다 1분먼저오면 탈수 있음</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    cornTime = times[busIdx-<span class="number">1</span>]-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 다음 셔틀 호출하기</span></span><br><span class="line">            busTime += t;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = convertToString(cornTime / <span class="number">60</span>, cornTime % <span class="number">60</span>);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 분단위 hh:mm형식 변환</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">convertToString</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        String hour = Integer.toString(h);</span><br><span class="line">        String minute = Integer.toString(m);</span><br><span class="line">        <span class="keyword">if</span>(hour.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            hour = <span class="string">"0"</span> + hour;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minute.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            minute = <span class="string">"0"</span> + minute;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hour + <span class="string">":"</span> + minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hh:mm형식 분단위 변환</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timetable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertToTime(String[] timetable) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] times = <span class="keyword">new</span> <span class="keyword">int</span>[timetable.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;timetable.length; i++)&#123;</span><br><span class="line">            String[] time = timetable[i].split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">int</span> h = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> m = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> total = h * <span class="number">60</span> + m;</span><br><span class="line">            times[i] = total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> times;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>완전탐색</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>02 마이크로서비스 아키텍처</title>
    <url>/MSA-20210212-02-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</url>
    <content><![CDATA[<h1 id="maikeuroseobiseu-akitegceo"><a href="#maikeuroseobiseu-akitegceo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#마이크로서비스-아키텍처"></a> 마이크로서비스 아키텍처</h1>
<h2 id="maikeuroseobiseu-akitegceoyi-gaenyeom"><a href="#maikeuroseobiseu-akitegceoyi-gaenyeom" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#마이크로서비스-아키텍처의-개념"></a> 마이크로서비스 아키텍처의 개념</h2>
<p>마이크로서비스 아키텍처(microservice architecture)는 마이크로서비스가 실행 될 수 있는 아키텍처를 뜻합니다. 마이크로서비스, 즉 아주 작은 단위로 동작하는 서비스가 구동되도록 시스템 및 소프트웨어의 구성과 구성 요소간의 관계를 정의한 아키텍처입니다.</p>
<p>마이크로서비스 아키텍처의 구성 요소는 서비스와 이를 실행할 수 있게하는 여러 기술적 환경입니다. 마이크로서비스 아키텍처를 다시 한번 정리해보면, 아주 작은 단위의 서비스들을 실행할 수 있도록 구성하기 위한 서비스 중심의 아키텍처입니다.</p>
<h2 id="monolriseu-akitegceowayi-caijeom"><a href="#monolriseu-akitegceowayi-caijeom" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#모놀리스-아키텍처와의-차이점"></a> 모놀리스 아키텍처와의 차이점</h2>
<p>모놀리스 아키텍처 구조에서는 하나의 애플리케이션에 데이터가 연결된 구성이 일반적으로 되어있고, 애플리케이션의 크기가 클 경우 변경과 배포가 쉽지 않은 구조를 띄고 있습니다.</p>
<p>이에반해, 마이크로서비스 아키텍처는 서비스와 데이터가 분할되어 작은 서비스들이 여러 독립된 형태로 서비스를 제공하여 필요에 따라 서로 참고하여 사용됩니다.</p>
<p>즉, 모놀리스 아키텍처와의 차이점은 하나의 애플리케이션 형태가 아닌 분할된 다수의 서비스라는점입니다. 애플리케이션 기능뿐만 아니라 데이터까지 분리하여 격리된 독립된 환경으로 구성되는것이 가장 큰 차이점이 됩니다.</p>
<p>단일 애플리케이션 형태인 모놀리스 아키텍처로 구성된 시스템에서는 클라이언트 요청에 대한 처리 반응 속도가 아주 중요한 요소인데, 데이터 조회에 대한 부하나 이를 처리하는 애플리케이션이 문제가 생긴다면 시스템이 동작하지 않는 결과를 초래합니다.</p>
<p>이것들을 대응하기 위해서는 <code>로드밸런서, 2중화,3중화, 백업 및 복구방안</code>이 아주 중요한 아키텍처 결정 사항이고 환경 구성을 위하여 많은 시스템 리소스(resource)를 투자합니다.</p>
<blockquote>
<p>온프로미스 아키텍처</p>
</blockquote>
<p>시스템이 받을 부하를 사전에 분석예측하는 하드웨어 스케일업 과정과 애플리케이션의 빠른 대응과 데이터 조회의 성닝 개선을 위한 튜닝(tuning) 활동등이 아키텍트의 주요한 관심사였습니다.</p>
<blockquote>
<p>마이크로서비스 아키텍처</p>
</blockquote>
<p>서비스의 수평적 확장에 유연성과 탄력성을 높여 성능적 이슈에 대해서 유연하게 대처할 수 있는 구조를 가집니다. 당연히 단일 애플리케이션 구조에서 보다 많은 서비스를 관리하는 문제로 서비스들을 관리하고 제어하기 위한 에코시스템(eco-system)들의 역할이 아주 중요하고, 자동화 시각화가 잘 고려되지않으면 오히려 운영 측면의 위험성은 증가하게 됩니다.</p>
<h2 id="seobiseu-jihyang-akitegceo"><a href="#seobiseu-jihyang-akitegceo" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#서비스-지향-아키텍처"></a> 서비스 지향 아키텍처</h2>
<p>대규모 시스템 환경에서 업무처리 단위를 각가의 서비스로 반영하여 데이터 중심이 아닌 전체 시스템을 서비스 중심으로 설계하는 아키텍처 스타일입니다.</p>
<p>마이크로 서비스가 주목받기 이전부터 기업환경에서 중복되는 프로세스나 업무들을 하나의 서비스단위로 개발하여 각 서비스는 호출 가능한 상태로 개발하자는 노력이 계속되어 왔습니다.</p>
<blockquote>
<p>서비스 지향 아키텍처의 특징</p>
</blockquote>
<ol>
<li>서비스 계약</li>
</ol>
<p>서비스와 서비스소비자와의 계약을 뜻합니다.<br>
서비스는 약속한 기능을 수행해야하고 서비스 소비자는 서비스를 사용하기 위한 계약 규칙을 준수해야합니다. 서비스계약은 때에 따라서는 서비스 자체에 문제가 발생할 수도 있고, 서비스가 개선될 수도 있습니다. 버전1 -&gt; 버전2로 기능업그레이드가 가능할 수 있습니다.</p>
<ol start="2">
<li>서비스의 가용성</li>
</ol>
<p>서비스지향 아키텍처에서 서비스들의 가용성을 보장하기 위한 소프트웨어 방법으로 타임아웃 기능 구현을 제안합니다.</p>
<p>일정 시간동안 서비스 요청에 대한 반응이 없으면 기존 요청경로를 차단하고, 다른 경로로 요청 경로를 변경하는 기능을 가동하여 서비스가 정상적으로 수행되도록 합니다.<br>
정상적으로 동작하던 서비스가 문제가 발생하여 서비스 요청에 대한 응답 지연이 발생하면 정상적인 다른 서비스로 요청 경로를 변경하는 기능이 작동합니다.<br>
즉, 서비스 가용성을 유지하기 위한 방법을 서비스 라우팅이라고 하며 라우팅 기능을 L4/L7은 하드 웨어 장비를 이용하여 구현할 수도 있고, 서킷 브레이커(circuit breaker) 같은 소프트웨어 기능으로 구현할 수 있습니다.</p>
<ol start="3">
<li>보안</li>
</ol>
<p>하나의 서비스가 다른 서비스를 호출할 경우 별도의 인증 및 권한 확인 없이 바로 호출할 수 있는 구조가 되면 자칫 보안상 문제가 될 수 있습니다. 권한에 관한 제어권을 서비스 자체에 넘기게 되면 이러한 문제는 다소해결 될 수 있습니다.</p>
<ol start="4">
<li>트랜잭션(transaction)</li>
</ol>
<p>서비스가 분할되고 서비스에서 발생하는 트랜잭션들에 대한 일관성 유지입니다. 일반적으로 서비스 지향 아키텍처에서는 성능상의 문제로 데이터베이스 읽기 전용 데이터 저장소와 데이터베이스 쓰기, 데이터 저장소를 분리 구성하도록 권고합니다. 하지만, 쓰인 데이터를 읽기 위해서는 데이터의 이동이 필요하고 이 부분에서 데이터의 일관성과 실시간 동기화 이슈가 발생학세 됩니다.</p>
<blockquote>
<p>BASE(Basically Available Soft State Eventual Consistency)트랜잭션</p>
</blockquote>
<p>basically available의 대표적인 기술 메커니즘은 Optional Locking, Queue이고 soft state는 외부전달 데이터로 인해 상태가 갱신되는것 입니다.</p>
<p>즉, 두 개의 노드가 있으면 한쪽에서 전달된 데이터로 인해 다른 한쪽 노드가 갱신된다는 사앙이며 eventual consistency는 두 노드의 데이터가 일시적으로 불일치한 시점이 있고, 일관성이 없는 상태이지만 결국에는 두 노드의 데이터가 같아진다는 개념이 됩니다.</p>
<ol start="5">
<li>서비스 관리</li>
</ol>
<p>서비스들의 수가 많아지면 이들간의 관계를 관리해야합니다. 상황에 따라서 서비스가 동적으로 증가하여 과부하나 오류 상황에서도 지속적으로 가능한 서비스가 가능하도록 관리됩니다.</p>
<p>특정 서비스의 오류가 발생하면 자연스럽게 다른 정상적인 서비스로 요청 흐름의 변경도 가능하고 실시간으로 관리되고 시각화하여 모니터링이 진행되어야합니다.</p>
<h2 id="soawa-maikeuroseobiseu-akitegceoneun-mueosi-dareulggayo"><a href="#soawa-maikeuroseobiseu-akitegceoneun-mueosi-dareulggayo" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#soa와-마이크로서비스-아키텍처는-무엇이-다를까요"></a> SOA와 마이크로서비스 아키텍처는 무엇이 다를까요?</h2>
<p>비즈니스 변화 대응을 위한 서비스 중심의 아키텍처라는 점에서는 공통점이 있지만 서비스 상대적 크기와 관심사, 오너십(ownership) 기술구조에서 차이가 있습니다.</p>
<p>비즈니스 -&gt; SOA, 마이크로서비스 아키텍처</p>
<p>SOA와 마이크로 서비스 아키텍처의 공통점은 소프트웨어를 설계할 때 서비스 중심의 설계를 지향하는것이며 기능 중심의 모듈 재사용보다는 상위 수준의 서비스 수준에 재사용성에 초점을 맞추게됩니다. 다만 SOA는 비즈니스측면에서의 서비스 재사용성을 강조하는 반면에 마이크로서비스는 한가지 작은 서비스에 집중하기를 강조합니다.</p>
<p>SOA는 되도록 많은 서비스의 공유를 위해 ESB(Enterprise Service Bus)라는 서비스 채널을 이용하여 서비스를 공유하고 재사용하는데 초점을 맞춘다면, 마이크로서비스는 되도록 서비스를 공유하지않고 독립되어 실행하는것을 지향합니다. 즉, 시스템의 탄력성을 높입니다.</p>
<blockquote>
<p>SOA 마이크로서비스 차이점</p>
</blockquote>
<ol>
<li>서비스 상대적 크기와 관심사의 차이점<br>
마이크로서비스아키텍처는 서비스는 작고 한가지 일에 집중하는 반면, SOA서비스는 비즈니스에 집중합니다.</li>
</ol>
<p>CRM(Customer Relationship Management) 통합 구축 프젝트에서는 고객정보 관리라는 큰 서비스가 있으면 마이크로서비스 관점에서는 고객빌링관리 등의 업무를 더 세분화 시킵니다.</p>
<p>예를 들면, 청구 조회,등록,수정,삭제 서비스, 신용 정보 조회, 등록, 수정, 삭제 등 더 작게 세분화 시킬 수 있습니다.</p>
<ol start="2">
<li>서비스 오너십 측면에서 마이크로서비스는 하나의 작은 팀에서 관리합니다.</li>
</ol>
<p>서비스의 개발에서 운영까지 오너십과 권한을 가지는 독립된 단위의 서비스이며 조직 구성과도 관련이 있는 부분입니다. 마이크로서비스는 하나의 독립된 팀에서 개발하고 관리하고 반면의 SOA의 서비스는 비즈니스 프로세스의 흐름과 관련된 서비스를 공유하기 위해서 중앙의 인프라 미들웨어에 탑재하고 필요에 따라 연결 및 조합하여 새로운 서비스를 만들어내게 됩니다.</p>
<p>이 과정에서 업무팀, 공통 기능 개발팀, 개발팀의 상호협업이 반드시 필요하게 됩니다.</p>
<ol start="3">
<li>서비스 공유 정도의 차이</li>
</ol>
<p>마이크로서비스는 서비스 공유의 최소화를 지향하는 반면에 SOA는 되도록 많은 서비스의 공유를 지향합니다.</p>
<p>마이크로 서비스 아키텍처는 서비스 간의 결합도를 낮추어 변화에 능동적으로 대응하기 위한 민첩성에 초점을 두지만, SOA는 재사용을 높여 비용을 절감하고 품질을 높이는데 초점을 두게 됩니다.</p>
<ol start="4">
<li>기술 방식의 차이</li>
</ol>
<p>SOA가 공통 서비스를 ESB라는 공통된 채널에 모아 사업 측면에서 공통 서비스 형식으로 서비스를 제공하였다면 마이크로 서비스는 각각의 독립된 서비스가 필요에 따라 노출된 REST API(Application Programming Interface)를 사용합니다.</p>
<p>SOA는 흩어져 있던 같은 역할을 하는 서비스들을 통합하여 ESB에 담아서 필요할때마다 사용할 수 있는 기술 구조이고 마이크로 서비스 아키텍처는 흩어져있는 서비스들의 통합없이 각각의 서비스가 노출한 RESTful API정보를 보고 필요할때 호출하여 사용하는것 입니다. 결국 SOA는 통합과 공유 마이크로 서비스 아키텍처는 분산과 독립이라는 개념으로 구분할 수 있습니다.</p>
<blockquote>
<p>서비스 메커니즘</p>
</blockquote>
<p>SOA는 통합된 서비스들을 UDDI(Universal Description Discovery and Integration)라는 서비스 저장소에 등록하고 WSDL(Web Service Description Langauge)라는 서비스 저장소에 등록하고 WSDL에는 UDDI에 공유한 서비스의 명세가 담겨있고, 이 명세를 참고하여 서비스를 사용하는 클라이언트는 'stub’이라는 클래스를 생성하여 서버와 SOAP(Simple Object Access Protocol)을 이용하여 통신하게 됩니다. 만약 WSDL의 명세가 바뀌면 이를 참조하는 모든 클라이언트 프로그램들을 바꿔야하고 변경이나 장애에 대한 결합도가 아주 높아지게 됩니다.</p>
<p>이해 반해, 마이크로 서비스 아키텍처는 클라이언트에서 서비스 제공자가 노출해놓은 RESTful API를 보고 호출하여 받는 결과값만 활용하므로 구현이 쉽고, 서비스 제공자가 제공하는 서비스의 인터페이스에 대한 변경 영향은 발생하지 않습니다. 서비스 제공자가 제공하는 결과값이 다소 바뀔 수 있어도 그로 인한 영향도는 SOA만큼이나 결합도가 높지 않습니다. 마이크로 서비스 아키텍처와 SOA는 아키텍처의 기술 구조와 다른 아키텍처 스타일이지만, 비즈니스에 민첩한 대응을 위한 아키텍처구조와 아키텍처의 모습이 서비스를 지향해야하고 이를 민첩하게 반응하기 위하여 기술 메커니즘에서는 같은 사상을 가지게 됩니다.</p>
<blockquote>
<p>마이크로서비스 아키텍처와 SOA 특징 비교</p>
</blockquote>
<table>
<thead>
<tr>
<th>구분</th>
<th>마이크로서비스 아키텍처</th>
<th>SOA</th>
</tr>
</thead>
<tbody>
<tr>
<td>사상</td>
<td>서비스지향</td>
<td>서비스 지향</td>
</tr>
<tr>
<td>서비스 오너십</td>
<td>조직(팀)단위 자율성 부여</td>
<td>조직간 협업</td>
</tr>
<tr>
<td>서비스 크기</td>
<td>SOA 대비 작음</td>
<td>마이크로서비스아키텍처 대비 큼</td>
</tr>
<tr>
<td>서비스 공유 정보</td>
<td>서비스간 독립</td>
<td>서비스 공유</td>
</tr>
<tr>
<td>서비스 공유 방식</td>
<td>API</td>
<td>서비스공유를 위한 미들웨어</td>
</tr>
<tr>
<td>서비스 통신 방식</td>
<td>RESTful API</td>
<td>SOAP, WSDL, UDDI, ESB</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>MSA</category>
      </categories>
      <tags>
        <tag>MSA</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 합승택시요금</title>
    <url>/Programmers-20210208-programmers-%ED%95%A9%EC%8A%B9%ED%83%9D%EC%8B%9C%EC%9A%94%EA%B8%88/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-habseungtaegsiyogeum"><a href="#peurogeuraemeoseu-habseungtaegsiyogeum" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-합승택시요금"></a> <a href="https://developmentspace.tistory.com/98?category=737181" target="_blank" rel="noopener">프로그래머스 합승택시요금 </a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<blockquote>
<p>플로이드워셜알고리즘을 이용한 최단경로 문제</p>
</blockquote>
<ul>
<li>(1) 모든 맵에 지점의 개수 * 택시비용의 최댓값인 (100 * 200000)으로 값을 초기화해줍니다.</li>
<li>(2) 자기자신을 바라보는것들은 0으로 초기화합니다</li>
<li>(3) 배열값을 복사하여 배열들의 값을 재 세팅을 해줍니다.</li>
<li>(4) 플로이드워셜알고리즘의 점화식을 도출해냅니다. graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j])</li>
<li>(5) 점화식으로 도출해낸 모든 비용의 배열에서 출발지점 -&gt; (모든지점을 탐색의 비용 + 모든지점의 탐색 -&gt; A의 도착의 비용 + 모든지점의 탐색 -&gt; B의 도착의 비용)의 최솟값을 구해줍니다.</li>
<li>(6) 결국, 시작점에서 출발하여 거쳐간 지점중에 + A도착점 + B도착점의 최솟값을 탐색을 하게 되면 모든 최단 경로의 비용을 구할 수 있게 됩니다.</li>
<li>(7) 시간복잡도 O(N^3)</li>
</ul>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">programmers_</span>합승택시요금<span class="title">_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] graph;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">200</span> * <span class="number">100000</span>;      <span class="comment">// 지점의 개수 * 택시비용 최댓</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="number">6</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">24</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">41</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">24</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">50</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">66</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">6</span>, <span class="number">25</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 노드의 개수</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 출발지점</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a A 도착지점</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b B 도착 지점</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fares</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>[][] fares)</span></span>&#123;</span><br><span class="line">        graph = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line">        <span class="keyword">int</span> answer = INF;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 무한으로 초기화</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">201</span>; i++)&#123;</span><br><span class="line">            Arrays.fill(graph[i], INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 자기 자신 0 초기화</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                    graph[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.배열값 복사</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;fares.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = fares[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = fares[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> w = fares[i][<span class="number">2</span>];</span><br><span class="line">            graph[x][y] = w;</span><br><span class="line">            graph[y][x] = w;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 플로이드 워셜: 모든 경우에서 거쳐가는경로의 최소비용을 구합니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                    graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 거쳐가는 경로를 모두 합한값의 최솟값을 구해줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            answer = Math.min(answer,graph[s][i] + graph[i][a] + graph[i][b]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>플로이드워셜알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA 엔티티(Entity)</title>
    <url>/JPA-20210219-jpa-03-%EC%97%94%ED%8B%B0%ED%8B%B0/</url>
    <content><![CDATA[<h1 id="entity-maeping-eonoteisyeon"><a href="#entity-maeping-eonoteisyeon" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#entity-매핑-어노테이션"></a> Entity 매핑 어노테이션</h1>
<ul>
<li>
<p>객체, 테이블 매핑<br>
@Entity, @table</p>
</li>
<li>
<p>필드와 컬럼 매핑<br>
@Column</p>
</li>
<li>
<p>기본 키 매핑<br>
@Id</p>
</li>
<li>
<p>연관관계 매핑<br>
@ManyToOne, @JoinColumn</p>
</li>
</ul>
<blockquote>
<p>Entity 의미</p>
</blockquote>
<p>@Entity가 붙은 클래스는 JPA가 관리하고 하는 엔티티라고 하며 JPA에서 사용하는 테이블과 매핑할 클래스는 @Entity는 필수로 사용되어지고 있습니다.<br>
여기서 가장 중요한것은 기본 생성자는 필수로 있어야하며, final, enum, interface, inner 클래스는 사용할 수없습니다. 즉, 해당것들을 매핑이 불가능하게 됩니다. 그리고 저장할 필드에서는 final을 사용하면 안됩니다.</p>
<blockquote>
<p>Entity 속성</p>
</blockquote>
<p>name속성 같은경우는 사용할 엔티티 이름을 지정합니다. 기본값은 현재 클래스의 이름을 그대로 사용하고 같은 클래스 이름이 없으면 가급적으로 기본값을 사용하는것이 가장 좋습니다.</p>
<h1 id="teibeul-maeping-eonoteisyeon"><a href="#teibeul-maeping-eonoteisyeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#테이블-매핑-어노테이션"></a> 테이블 매핑 어노테이션</h1>
<p>@Table 어노테이션은 엔티티와 매핑할 테이블일 지정합니다. 테이블 매핑 어노테이션은 여러가지 속성들을 가지고 있는데 대표적인것들이 4가지로 나눌 수 있습니다.</p>
<ol>
<li>name: 매핑할 테이블 이름</li>
<li>catalog: 데이터베이스 catalog 매핑</li>
<li>schema: 데이터베이스 schema 매핑</li>
<li>uniqueConstraints DDL 생성 시에 유니크 제약 조건 생성</li>
</ol>
<h1 id="deiteo-beiseu-ddl-seukima"><a href="#deiteo-beiseu-ddl-seukima" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#데이터-베이스-ddl-스키마"></a> 데이터 베이스 DDL 스키마</h1>
<p>데이터베이스에서 스키마가 자동생성은 DDL을 애플리케이션 생성 시점에 자동 생성이 됩니다. 이것은 테이블 중심에서 객체중심으로 옮겨간 패러다임이라고 할 수 있으며 데이터베이스마다 방언(dialect) Mysql, Oracle 등 데이터베이스에 맞는 적절한 DDL을 생성시킬 수 있습니다. 이것은 데이터베이스에서 사용되는것이 아니라 현재 개발중인 DDL에서만 적용되게 됩니다.</p>
<h2 id="deiteobeiseu-seukima-jadong-saengseong-sogseong"><a href="#deiteobeiseu-seukima-jadong-saengseong-sogseong" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#데이터베이스-스키마-자동-생성속성"></a> 데이터베이스 스키마 자동 생성(속성)</h2>
<ol>
<li>craete: 기존테이블 삭제 후 다시 생성합니다.(drop + create)</li>
<li>create-drop: create와 같지만 종료시점에 테이블을 다시 drop시켜버립니다.</li>
<li>update: 변경된 부분만 반영하고 운영쪽에서는 사용하면 위험합니다.</li>
<li>validate: 엔티티와 테이블이 정상 매핑되었는지만 확인합니다.</li>
<li>none: 사용하지 않는 속성</li>
</ol>
<h3 id="kodeu-yeje"><a href="#kodeu-yeje" class="header-anchor">3.1.1. </a><a class="markdownIt-Anchor" href="#코드-예제"></a> 코드 예제</h3>
<p>DB Dialect 를 설정 할 수 있으며 javax로 시작하는것은 여러가지를 가지고 있는데 하이버네이트 라이브러리나 또 다른 구현체 라이브러리를 써도 사용할 수 있다. 즉, 하이버네이트 전용 옵션이라고 할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">"hibernate.dialect"</span> value=<span class="string">"org.hibernate.dialect.H2Dialect"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"hibernate.dialect"</span> value=<span class="string">"org.hibernate.dialect.MySQL5Dialect"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"hibernate.dialect"</span> value=<span class="string">"org.hibernate.dialect.Oracle10gDialect"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>차이점이라고 하면 예를 들어 오라클같은경우는 varchar2, Mysql은 varchar과 같은 예를 들 수 있습니다. 여기서 가장 중요한점은 운영하는 서버에서는 craete, create-drop, update를 사용하면 절대 안됩니다.</p>
<p>개발 초기단계에는 create 또는 update를 사용하고 테스트 서버에서는 update 또는 validate를 처리할 수 있습니다. 스테이징과 운영서버는 validate 또는 none으로 처리하여 진행하면 됩니다.</p>
<h2 id="ddl-saengseong-gineung"><a href="#ddl-saengseong-gineung" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#ddl-생성-기능"></a> DDL 생성 기능</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column</span>(nullable == <span class="keyword">false</span>, length = <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>다음과 같은 컬럼 어노테이션 속성이 있다고 가정하면 해당 컬럼은 null값이 올 수 없으며 10자를 초과할 수 없다라는 의미가 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(uniqueConstraints = &#123;UniqueConstraint(name = <span class="string">"NAME"</span>, columnNames=&#123;<span class="string">"NAME"</span>. <span class="string">"AGE"</span>&#125;)&#125;)</span><br></pre></td></tr></table></figure>
<p>다음과 같은 유니크 테이블 제약조건을 처리할 수도 있습니다.</p>
<p>즉, DDL 생성 기능은 DDL을 자동 생성할때만 사용되고 JPA실행 로직에는 영향을 주지 않는다는점을 알고 있어야합니다.</p>
<h1 id="pildeu-mic-keolreom-maeping"><a href="#pildeu-mic-keolreom-maeping" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#필드-및-컬럼-매핑"></a> 필드 및 컬럼 매핑</h1>
<blockquote>
<p>매핑 어노테이션 hibernate.hbm2ddl.auto</p>
</blockquote>
<ul>
<li>@Column: 컬럼 매핑</li>
<li>@Temporal: 날짜 타입 매핑</li>
<li>@Enumerated: enum 타입 매핑</li>
<li>@Lob: BLOB, CLOB 매핑(varchar 범위 넘어설때)</li>
<li>@Transient: 특정 필드를 매핑하지 않음.(무시)</li>
</ul>
<blockquote>
<p>@Column 속성</p>
</blockquote>
<ul>
<li>name: 필드와 매핑할 테이블의 칼럼 이름</li>
<li>insertable, updatable: 등록,변경 가능여부</li>
<li>nullable(DDL): null값의 허용 여부를 설정하고 false로 설정하면 DDL 생성시에 not null 제약조건을 붙입니다.</li>
<li>unique(DDL): @Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸때 사용됩니다.</li>
<li>columnDefinition(DDL): 데이터베이스 컬럼 정보를 직접 줄 수 있습니다. (varchar(100) default ‘EMPTY’)</li>
<li>length(DDL): 문자 길이 제약조건, String 타입에만 사용한다.</li>
<li>precision, scale(DDL): BigDecimal 타입에서 사용하고 precision은 소수점을 포함한 전체 자릿수며 scale은 소수의 자릿수입니다. (double, float 타입에는 적용 X)</li>
</ul>
<blockquote>
<p>@Enumerated</p>
</blockquote>
<p>Java Enum타입을 매핑할때 사용하며 ORDINAL 속성은 사용하지 않는게 좋다. 왜냐하면 DB에서 값이 변경되면 누락된 값이 들어갈 수 있기 때문이다.<br>
즉, String을 사용하여야한다.</p>
<ul>
<li>value 속성: EnumType.ORDINAL enum순서를 DB 저장, EnumType.STRING enum 이름을 DB 저장 (기본값은 ORDINAL)</li>
</ul>
<blockquote>
<p>@Temporal</p>
</blockquote>
<p>날짜 타입을 매핑할때 사용합니다. LocalDate, LocalDateTime을 사용할시에는 생략이 가능합니다.(java8문법)</p>
<ul>
<li>value 속성:</li>
</ul>
<ol>
<li>TemporalType.DATE: 날짜 타입과 매핑 (2021-01-01 yyyy-mm-dd)</li>
<li>TemporalType.TIME: 시간, 데이터베이스 time 타입과 매핑 (24:00:00 hh-mm-ss)</li>
<li>TemporalType.TIMESTAMP: 날짜와 시간, timestamp와 매핑(2021-01-01 24:00:00 yyyy-mm-dd hh-mm-ss)</li>
</ol>
<blockquote>
<p>@Lob</p>
</blockquote>
<p>데이터베이스 BLOB, CLOB 타입과 매핑</p>
<ul>
<li>@Lob에는 지정할 수 있는 속성이 없습니다.</li>
<li>매핑하는 필드타입이 문자면 CLOB 매핑, 나머지는 BLOB 매핑</li>
</ul>
<p>CLOB: String, char[], java.sql.CLOB<br>
BLOB: byte[], java.sql.BLOB</p>
<blockquote>
<p>@Transient</p>
</blockquote>
<ul>
<li>필드 매핑을 하지 않습니다.</li>
<li>데이터베이스에 저장 및 조회를 진행하지 않습니다.</li>
<li>주로 메모리상에서만 임시로 어떤값을 보관하고 싶을때 사용합니다.</li>
</ul>
<h1 id="gibonki-maeping"><a href="#gibonki-maeping" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#기본키-매핑"></a> 기본키 매핑</h1>
<h2 id="gibon-ki-maeping-eonoteisyeon"><a href="#gibon-ki-maeping-eonoteisyeon" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#기본-키-매핑-어노테이션"></a> 기본 키 매핑 어노테이션</h2>
<p>@Id, @GeneratedValue의 두가지 어노테이션을 가지고 있습니다.</p>
<blockquote>
<p>기본키 매핑 방법</p>
</blockquote>
<p>직접 할당은 @Id를 사용하여 할당하고 자동생성을 진행하기 위해서는 @GeneratedValue을 사용합니다.</p>
<ul>
<li>IDENTITY: 데이터베이스에 위임, MYSQL</li>
<li>SEQUENCE: 데이터베이스 시퀀스 오브젝트 사용 Oracle, @SequenceGenerator</li>
<li>Table: 키 생성용 테이블 사용하고 모든 데이터베이스에서 사용될 수 있습니다. @TableGenerator</li>
<li>AUTO: 방언에 따라 자동 지정하고 기본값으로 세팅됩니다.</li>
</ul>
<blockquote>
<p>IDENTITY 전략</p>
</blockquote>
<p>기본키 생성을 데이터베이스에 위임하고 주로 Mysql, PostgreSQL, SQL Server, DB2에서 사용됩니다. (AUTO_INCREMENT)<br>
그리고 JPA는 주로 트랜잭션 커밋 시점에 INSERT SQL을 실행합니다. AUTO_INCREMENT는 데이터베이스에 INSERT SQL을 실행한 이후에 ID값을 알 수 있고 IDENTITY 전략은 em.persist() 시점에 즉시 INSERT SQL을 실행하고 DB에서 식별자를 조회해옵니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SEQUENCE 전략</p>
</blockquote>
<p>데이터 베이스 시퀀스는 유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트입니다. 예를 들면 오라클 시퀀스와 같습니다. 그리고 오라클, PostgreSQL, DB2, H2 데이터베이스에서 사용됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@SequenceGenerator</span>(</span><br><span class="line">    name = <span class="string">"MEMBER_SEQ_GENERATOR"</span>,</span><br><span class="line">    sequenceName = <span class="string">"MEMBER_SEQ"</span></span><br><span class="line">    initValue = <span class="number">1</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE,</span><br><span class="line">    generator = <span class="string">"MEMBER_SEQ_GENERATOR"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>name: 식별자 이름</li>
<li>sequenceName: 데이터베이스에 등록되어있는 시퀀스 이름</li>
<li>initialValue: DDL 생성시에만 사용되고 시퀀스 DDL을 생성할때 처음 1 시작하는 수를 지정합니다.</li>
<li>allocationSize: 시퀀스 한 번 호출에 증가하는 수이며 성능최적화에 주로 사용됩니다. 데이터베이스 시퀀스 값이 하나씩 증가하도록 설정되어 있으면 이 값을 반드시 1로 설정하여야합니다.</li>
<li>catalog, schema: 데이터베이스 catalog, schema 이름</li>
</ul>
<h1 id="teibeul-jeonryag"><a href="#teibeul-jeonryag" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#테이블-전략"></a> 테이블 전략</h1>
<p>키 생성 전용 테이블을 하나 만들어서 데이터베이스 시퀀스를 흉내내는 전략인데 모든 데이터베이스에 적용이 가능하지만 성능적으로 뛰어나지는 않다는 단점을 가지고 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableGenerator</span>(</span><br><span class="line">    name = <span class="string">"MEMBER_SEQ_GENERATOR"</span>,</span><br><span class="line">    table = <span class="string">"MY_SEQUENCES"</span>,</span><br><span class="line">    pkColumnValue = <span class="string">"MEMBER_SEQ"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.TABLE,            <span class="comment">// 테이블 전략외</span></span><br><span class="line">    generator = <span class="string">"MEMBER_SEQ_GENERATOR"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>@TableGenerator 속성</p>
</blockquote>
<ul>
<li>name: 식별자 이름(필수값)</li>
<li>table: 키생성 테이블명</li>
<li>pcColumnName: 시퀀스 컬럼명</li>
<li>valueColumnNa: 시퀀스 값 컬럼명</li>
<li>pkColumnValue: 키로 사용할 이름</li>
<li>initialValue: 초기 값, 마지막으로 생성된 값이 기준</li>
<li>allocationSize: 시퀀스 한 번 호출에 증가하는 수이며 최적화에 사용된다.</li>
<li>catalog, schema: 데이터베이스 catalog, schema 이름</li>
<li>uniqueConstraint: 유니크 제약조건 지정</li>
</ul>
<h1 id="gweonjanghaneun-sigbyeolja-jeonryag"><a href="#gweonjanghaneun-sigbyeolja-jeonryag" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#권장하는-식별자-전략"></a> 권장하는 식별자 전략</h1>
<p>기본 키 제약조건을 사용하고 null이 아니여야하고 변경성이 없어야합니다. 그리고 대체키를 활용하여 사용하도록 합니다. 즉, UUID와 같은 Long형+대체키+키생성전략을 사용하여 대체키를 생성할 수 있어야합니다. 예) 주민번호 PK</p>
]]></content>
      <categories>
        <category>JPA</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>Entity</tag>
      </tags>
  </entry>
  <entry>
    <title>Network HTTP 상태코드</title>
    <url>/Network-20210205-network-09-http-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C/</url>
    <content><![CDATA[<h1 id="http-sangtaekodeu"><a href="#http-sangtaekodeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#http-상태코드"></a> HTTP 상태코드</h1>
<h2 id="sangtae-kodeu"><a href="#sangtae-kodeu" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#상태-코드"></a> 상태 코드</h2>
<p>상태코드라고 하는것은 클라이언트가 보낸 요청의 처리상태를 응답에서 알려주는 기능이라고 할 수 있습니다.</p>
<p>예를 들어보겠습니다. 크롬에서 개발자모드를 키면 network탭에 보시면 어떤식으로 응답이 오고가는지를 확인할 수 있습니다.</p>
<blockquote>
<p>상태코드 예시</p>
</blockquote>
<ul>
<li>1xx(Informational): 요청 수신 및 처리진행중일때 나오는 상태코드</li>
<li>2xx(Successful): 요청 정상 처리 상태코드</li>
<li>3xx(Redirection): 요청을 완료하려면 추가 행동필요함을 알리는 상태코드</li>
<li>4xx(Client Error): 클라이언트 오류, 잘못된 문법 서버 요청 수행할 수 없을때 상태코드</li>
<li>5xx(Server Error): 서버 오류, 서버가 정상 요청을 처리하지 못할때 나오는 상태코드</li>
</ul>
<p>인식할 수 없는 상태코드를 서버가 반환하게 되는 경우 상위 상태코드를 해석해서 처리를 진행합니다. 즉, 2xx면 성공상태 코드라고 생각하고, 4xx 클라이언트에러, 5xx 서버에러라고 생각하면 상태코드를 변경하지 않아도되게됩니다.</p>
<h2 id="sangtaekodeubyeol-ceori"><a href="#sangtaekodeubyeol-ceori" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#상태코드별-처리"></a> 상태코드별 처리</h2>
<ol>
<li>
<p>1xx(Informational)<br>
현재 요청이 수신이 되어 처리를 진행중인 상태</p>
</li>
<li>
<p>2xx(Successful)<br>
클라이언트의 요청을 성공적인 처리한 상태<br>
200: OK, 201: Created(리소스 생성),  202: Accepted(요청접수 처리되었으나 처리 완료 X) - 배치 처리, 204: No Content: 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없을때 처리합니다.</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">HTTP/1.1 202 Accepted </span><br><span class="line">HTTP/1.1 200 No Content</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>3xx(Redirection)<br>
요청을 완료하기 위해서는 유저의 에이전트에서 추가 조치가 필요한 상태코드</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 300 Multiple Choices</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">HTTP/1.1 303 See Other</span><br><span class="line">HTTP/1.1 304 Not Modified</span><br><span class="line">HTTP/1.1 307 Temporary Redirect</span><br><span class="line">HTTP/1.1 308 Permanent Redirect</span><br></pre></td></tr></table></figure>
<p>웹 브라우저는 3xx 응답의 결과에 Location가 있는 경우 해당 위치로 리다이렉션을 진행합니다.</p>
<ul>
<li>
<p>영구 리다이렉션: 특정 리소스의 UR가 영구적으로 리다이렉션<br>
301: 리다이렉트시 요청 메서드가 GET 변경되어 본문 제거<br>
308: 리다이렉트시 요청 메서드와 본문 유지</p>
</li>
<li>
<p>일시적 리다이렉션: 특정 로직 주문같은 경우 주문이 모두 완료시 GET화면으로 리다이렉션<br>
302: 리다이렉트시 요청 메서드가 GET 변경 본문 제거<br>
307: 302와 기능은 같으나 요청메서드와 본문 유지<br>
308: 리다이렉트시 요청 메서드가 GET으로 변경</p>
</li>
<li>
<p>특수 리다이렉션: 결과를 캐시로 리다이렉션<br>
300: 잘 사용되지 않음<br>
304: 캐시를 목적으로 사용되며 로컬 PC저장된 캐시를 재사용합니다.</p>
</li>
</ul>
<ol start="4">
<li>4xx(Client Error)</li>
</ol>
<p>클라이언트의 요청에 잘못된 문법등으로 서버가 요청을 수행할 수 없습니다. 즉, 오류의 원인은 클라이언트</p>
<ul>
<li>400(Bad Request): 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없습니다.<br>
요청 구문, 메시지 등의 오류와 클라이언트는 요청 내용을 다시검토하고 데이터를 전송해야합니다. Request Parameter 혹은 API 스펙이 맞지 않을 경우</li>
</ul>
<p>400은 500번과 다르게 복구가 불가능하고 500번은 같은 요청시 성공 가능성이 있습니다.</p>
<ul>
<li>401(Unauthorizaed)<br>
클라이언트가 해당 리소스에 대한 인증이 필요합니다.</li>
</ul>
<p>인증이 되지 않거나 401 오류 발생시 응답에 WWW-Authenticate헤더와 함께 인증 방법을 설명해야합니다.<br>
인증: 로그인, 인가: 권한부여(ADMIN)</p>
<ul>
<li>
<p>403(Forbidden)<br>
서버가 요청을 이해했지만 승인을 거부한 경우<br>
주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우 발생할 수 있습니다. (인가관련된 허가 여부-ADMIN)</p>
</li>
<li>
<p>404(Not Found)<br>
요청 리소스를 찾을 수 없을때 발생하거나 권한이 부족한 리소스에 접근할때 발생합니다. 혹은 리소스를 Hide처리하고 싶을때 발생합니다.</p>
</li>
</ul>
<ol start="5">
<li>5xx(Server Error)</li>
</ol>
<p>서버 문제로 오류가 발생할때 반환하는 상태코드입니다. 만약 서버가 문제가 있으니 클라이언트에서 재시도를 진행하면 성공할 수도 있다는것이 장점입니다.</p>
<ul>
<li>
<p>500(Internal Server Error)<br>
서버 문제로 오류 발생, 애매하면 500을 반환합니다.</p>
</li>
<li>
<p>503(Service Unavailable)<br>
서비스 이용 불가, 일시적인 과부하또는 예정된 작업으로 잠시 요청을 처리할 수 없는 경우 반환합니다. Retry-After헤더필드를 사용하면 얼마뒤에 복구되는지 반환시킬 수 있습니다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>http</tag>
        <tag>상태코드</tag>
      </tags>
  </entry>
  <entry>
    <title>01 마이크로서비스 아키텍처의 이해</title>
    <url>/MSA-20210212-01-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EC%9D%98%EC%9D%B4%ED%95%B4/</url>
    <content><![CDATA[<h1 id="sopeuteuweeo-akitegceoyi-ihae"><a href="#sopeuteuweeo-akitegceoyi-ihae" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#소프트웨어-아키텍처의-이해"></a> 소프트웨어 아키텍처의 이해</h1>
<h1 id="sopeuteuweeo-akitegceoran-mueosilgga"><a href="#sopeuteuweeo-akitegceoran-mueosilgga" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#소프트웨어-아키텍처란-무엇일까"></a> 소프트웨어 아키텍처란 무엇일까?</h1>
<h2 id="sopeuteuweeo-akitegceoyi-jeongyi"><a href="#sopeuteuweeo-akitegceoyi-jeongyi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#소프트웨어-아키텍처의-정의"></a> 소프트웨어 아키텍처의 정의</h2>
<p>소프트웨어 아키텍처(software architecture)는 소프트웨어를 구성하는 요소와 요소간의 관계를 정의한것 입니다.<br>
이는 소프트웨어의 전체적인 구성 관계인 구성 요소와 구성 요소간의 포함 관계, 호출 관계 등을 표현하여 소프트웨어 구성 전체를 조망하고 이해하는 데 매우 유용합니다.</p>
<h2 id="akitegceoyi-pyohyeon"><a href="#akitegceoyi-pyohyeon" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#아키텍처의-표현"></a> 아키텍처의 표현</h2>
<p>아키텍처는 시스템을 조망하고 소통의 도구이므로 이해할 수 있는 언어와 수준으로 작성되고 공유되야 합니다.<br>
아키텍처를 표현하는 언어는 <code>UML(Unified Modeling Language)</code>와 같은 표준화 모델링 언어를 이용하여 작성해야합니다.</p>
<blockquote>
<p>표준된 언어를 사용하는 이유</p>
</blockquote>
<p>아키텍처를 표현하는 방법이 이를 표현하는 아키텍트(architect) 수준과 설계도 모습도 제각각으로 도식, 표기법으로 작성될 가능성이 높아 다르게 해석가능성이 있습니다.</p>
<p>하나의 아키텍처에는 <code>운영자, 아키텍트, 백엔드 개발자, 프론트엔드 개발자, 품질 담당자 등등</code> 각기 다른 아키텍처를 이해할 수 있는 상황이 발생하게 됩니다. 즉, 다양한 이해관계 각자의 관점에서 시스템을 바라봅니다.<br>
아키텍처의 다양한 관점으로 접근하고 표현되는것을 <code>뷰(view)</code>라 일컫습니다.</p>
<blockquote>
<p>4+1 View(뷰)</p>
</blockquote>
<ol>
<li>
<p>논리 뷰(logic view)<br>
소프트웨어를 구성하는 요소들의 관계 구조</p>
</li>
<li>
<p>프로세스 뷰(process view)<br>
동적 흐름과 스레드(thread), 프로세스(process)등의 동시성 처리</p>
</li>
<li>
<p>구현 뷰(implementaion view)<br>
논리적인 설계의 실제 구현된측면에서 소프트웨어의 구성과 구조</p>
</li>
<li>
<p>배치 뷰(deployment view)<br>
소프트웨어 배치</p>
</li>
</ol>
<p>즉, 4가지의 모든 뷰를 포함하는 중심에는 <code>유스케이스 뷰(usecase view)</code></p>
<blockquote>
<p>View(뷰)란?</p>
</blockquote>
<p>시스템과 관련된 다양한 이해관계자들이 소프트웨어의 구조를 쉽게 이해할 수 있게 다양한 관점을 제시하고 표현한 명세</p>
<h2 id="akitegceoyi-yeoghal"><a href="#akitegceoyi-yeoghal" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#아키텍처의-역할"></a> 아키텍처의 역할</h2>
<p>소프트웨어 아키텍처는 폭넓은 시각과 사례를 기반으로 설계되어야합니다. 프로그램들을 연결하고 안정적으로 운영하기 위한 전체적인 뼈대를 설계하는 것이 무엇보다 중요합니다.<br>
즉, 아키텍처는 구성 요소 간의 역할관계가 명확하고 효율적으로 구성될때 탄력적인 아키텍처가 되고, 시스템 품질속성으로 충족할 수 있게 설계되어야 합니다.</p>
<h1 id="sopeuteuweeo-akitegceo-seutail"><a href="#sopeuteuweeo-akitegceo-seutail" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소프트웨어-아키텍처-스타일"></a> 소프트웨어 아키텍처 스타일</h1>
<h2 id="seutail"><a href="#seutail" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#스타일"></a> 스타일</h2>
<p>아키텍처의 스타일은 특정 제약 조건에서 아키텍처의 방향과 접근 방법을 말합니다. 즉, 어떠한 상황에 잘 어울릴 수 있는 방식이나 형태입니다.</p>
<h2 id="sopeuteuweeo-akitegceo-seutail"><a href="#sopeuteuweeo-akitegceo-seutail" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#소프트웨어-아키텍처-스타일-2"></a> 소프트웨어 아키텍처 스타일</h2>
<p>소프트웨어 아키텍처 스타일(software architecture style) 시스템 요건을 충족시키기 위한 제약 조건을 가진 아키텍처 측면의 접근방법입니다. 아키텍처 스타일과 아키텍처 패턴을 흔히 혼용해서 사용하지만 둘 사이에는 차이점이 존재합니다.</p>
<p>스타일은 상호아을 해결할 수 있는 접근 방법을 제시하지만, 정답을 제시해주지는 않습니다. 다만, 스타일에서 제시하는 접근 방법을 선택하면 그만큼 실패할 확률을 줄일 수 있습니다.<br>
즉, 스타일은 접근방식을 제시하고 패턴은 구체적은 해결 전술을 제시한다고 생각하면 됩니다.</p>
<blockquote>
<p>아키텍처 스타일 예시</p>
</blockquote>
<p>아키텍처 -&gt; 아키텍처 스타일 -&gt; 시스템의 구조가 있으면 아키텍처 접근 방향을 제시하고 아키텍처를 어떻게 설계할지를 고민합니다.</p>
<blockquote>
<p>아키텍처 패턴</p>
</blockquote>
<p>메시지 전달이나 이벤트처리, Peer to Peer Patten, 이벤트-버스 패턴(Event Bus Pattern), Listener</p>
<h1 id="akitegceowa-akitegteu-yeoghalyi-byeonhwa"><a href="#akitegceowa-akitegteu-yeoghalyi-byeonhwa" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#아키텍처와-아키텍트-역할의-변화"></a> 아키텍처와 아키텍트 역할의 변화</h1>
<h2 id="monolriseueseo-maikeuroseobiseuro-byeonhwa"><a href="#monolriseueseo-maikeuroseobiseuro-byeonhwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#모놀리스에서-마이크로서비스로-변화"></a> 모놀리스에서 마이크로서비스로 변화</h2>
<blockquote>
<p>모놀리스한 아키텍처란?</p>
</blockquote>
<p>모든 업무로직이 하나의 애플리케이션 형태로 패키지(package)되어 서비스 되고, 애플리케이션에서 사용하는 데이터 또한 한곳에 모인 데이터를 참조하여 서비스하는 것이 일반적인 형태입니다.</p>
<p>제조회사에서는 약 1000개이상의 프로그램들이 단일 애플리케이션 패키지로 배포하고 돌아가기때문에 일부 프로그램을 수정하려고 하면 단일 애플리케이션이 다시 배포되어야 하는 번거로움과 시간적인 비용이 들어가게 됩니다.<br>
즉, 관리구조의 편리함을 가지고 있지만 변화에 대한 대응이 힘들 수 있습니다.</p>
<p>Cloud, PaaS(Platform as a service)같은 플랫폼 서비스가 지금 수준으로 서비스 되지 않던 시절의 기준에서는 최적의 아키텍처 설계안으로 간주되었습니다.</p>
<p>하지만, 현재에는 서비스를 유연하고 안정적으로 운영할 수 있는 인프라 지원기술들(AWS, Azure)가 등장하면서 서비스 설계의 접근방법과 구축 운영 형태의 패러다임 전환이 일어나고 있습니다. 이때 나타나게 된 것이 마이크로 서비스입니다.</p>
<blockquote>
<p>마이크로 서비스</p>
</blockquote>
<p>기존 모놀리스와 달리 하나의 큰 애플리케이션을 아주 작은 애플리케이션으로 나누어 서비스하는 사싱입니다. 단일 애플리케이션이 가지는 단점을 해결하고 민첩성과 유연한 시스템을 구축할 수  있습니다.</p>
<h2 id="hoesaegjidaewa-akitegteu"><a href="#hoesaegjidaewa-akitegteu" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#회색지대와-아키텍트"></a> 회색지대와 아키텍트</h2>
<p>대내외 크고 작은 시스템 통합 프로젝트를 수행하다 보면 업무 영억이나 기술적인 측면에서 담당자가 애매하거나 복잡한 이해관계자들의 의견대립으로 결론나지 않은 상태 혹은 무관심한 상태로 방치되는 영역이 생기게 됩니다.<br>
기술적인 측면에서 팀간의 틈을 메워 주는 역할자는 아키텍트 집단입니다 즉, 조직간에 발생할 수 있는 기술적 이슈와 연결에 대한 해결과 중재, 결과물의 통합과 프로젝트 경계 밖의 요소와 연결하는 역할을 잘 수행하여 프로젝트를 이끄는것들이 아키텍처 집단의 역할이 됩니다.</p>
<h2 id="akitegteu-yeoghalyi-sebunhwawa-byeonhwa"><a href="#akitegteu-yeoghalyi-sebunhwawa-byeonhwa" class="header-anchor">4.3. </a><a class="markdownIt-Anchor" href="#아키텍트-역할의-세분화와-변화"></a> 아키텍트 역할의 세분화와 변화</h2>
<p>아키텍트들은 프로젝트 모든 기술 요소에 이해수준이 높아야하며 소프트웨어와 하드웨어의 기술 구조를 이해하고 활용을 위한 가이드 배포를 작업하는 수행을 합니다. 모놀리스 형태의 아키텍처든 마이크로서비스 아키텍처구조에 대한 아키텍트 역할에 대한 구분이 필요한 이유중에 하나가 됩니다.</p>
<blockquote>
<p>역할의 세분화</p>
</blockquote>
<p>소프트웨어 아키텍트, 프론트엔드 아키텍트, 프레임워크 아키텍트, 데이터 아키텍트, 테크니컬 아키텍트, 인프라 아키텍트</p>
<h2 id="solrusyeon-akitegteu"><a href="#solrusyeon-akitegteu" class="header-anchor">4.4. </a><a class="markdownIt-Anchor" href="#솔루션-아키텍트"></a> 솔루션 아키텍트</h2>
<p>과거에는 아키텍트들이 했던 대부분의 작업 Saas(Software as a service), PaaS(Platform as a service), IaaS(Infrastructure as a service) 등 자동화된 기능으로 지원하게 되었습니다.</p>
<blockquote>
<p>예시</p>
</blockquote>
<ol>
<li>시스템 자원 구성, 할당, 관리, 모니터링, 소프트웨어 빌드, 통합, 배포 등의 일련의 프로세스들을 최근에는 자동화 시각화</li>
<li>인증 권한, 로깅, 모니터링 서비스기능 단위까지도 SaaS형태로 제공</li>
</ol>
<h1 id="gyeolron"><a href="#gyeolron" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1>
<p>아키텍트들도 기존 온프레미스(on-premise) 형태의 구축성 사업에서 요구하는 역할보다는 하루가 다르게 새롭게 만들어지는 기술 집약적 솔루션의 특징을 이해하고 조합할 줄 아는 능력이 요구되어지고 있습니다.</p>
]]></content>
      <categories>
        <category>MSA</category>
      </categories>
      <tags>
        <tag>MSA</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 설치 및 명령어 정리</title>
    <url>/Database-20210131-redis-install-command/</url>
    <content><![CDATA[<h1 id="1-mac-os-redis"><a href="#1-mac-os-redis" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#1mac-os-redis"></a> 1.Mac OS Redis</h1>
<blockquote>
<p>Redis 설치하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$brew</span> install redis</span><br><span class="line"></span><br><span class="line">Warning: Treating redis as a formula. For the cask, use homebrew/cask/redis</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/redis-6.0.9.catalina.bottle.tar.gz</span><br><span class="line">==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/673b1485f012e3c9a509c913d175e18451ddab50eca0</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring redis-6.0.9.catalina.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To have launchd start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  redis-server /usr/local/etc/redis.conf</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/redis/6.0.9: 13 files, 3.9MB</span></span><br></pre></td></tr></table></figure>
<p>다음과 같이 명령어를 진행하면 Redis설치가 진행됩니다. 아직 Homebrew가 없으신분들은 반드시 설치를 하셔야합니다.</p>
<blockquote>
<p>Redis가 설치된 경로</p>
</blockquote>
<p>Redis의 실행파일은 다음과 같은 경로에 저장됩니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/redis-server</span><br></pre></td></tr></table></figure>
<p>Redis 설정파일은 다음과 같은 경로에 저장됩니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/etc/redis.conf</span><br></pre></td></tr></table></figure>
<h1 id="2-redis-silhaenghagi"><a href="#2-redis-silhaenghagi" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#2-redis-실행하기"></a> 2. Redis 실행하기</h1>
<p>이제 brew를 통하여 Redis를 성공적으로 설치를 하였으니 Redis서버를 실행하여봅시다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$redis</span>-server</span><br></pre></td></tr></table></figure>
<p>다음과 같은 명령어를 사용하면</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10529:C 31 Jan 2021 01:08:11.335 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">10529:C 31 Jan 2021 01:08:11.335 <span class="comment"># Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=10529, just started</span></span><br><span class="line">10529:C 31 Jan 2021 01:08:11.335 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">10529:M 31 Jan 2021 01:08:11.337 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 256).</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ <span class="string">''</span>-._</span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 6.0.9 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._</span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: ----</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: ----</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span></span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span></span><br><span class="line">          `-._        _.-<span class="string">'</span></span><br><span class="line"><span class="string">              `-.__.-'</span></span><br><span class="line"></span><br><span class="line">10529:M 31 Jan 2021 01:08:11.338 <span class="comment"># Server initialized</span></span><br><span class="line">10529:M 31 Jan 2021 01:08:11.338 * Loading RDB produced by version 6.0.9</span><br><span class="line">10529:M 31 Jan 2021 01:08:11.338 * RDB age 64 seconds</span><br><span class="line">10529:M 31 Jan 2021 01:08:11.338 * RDB memory usage when created 0.96 Mb</span><br><span class="line">10529:M 31 Jan 2021 01:08:11.338 * DB loaded from disk: 0.000 seconds</span><br><span class="line">10529:M 31 Jan 2021 01:08:11.338 * Ready to accept connections</span><br><span class="line">redis-cli</span><br><span class="line">^C10529:signal-handler (1612022976) Received SIGINT scheduling shutdown...</span><br><span class="line">10529:M 31 Jan 2021 01:09:36.132 <span class="comment"># User requested shutdown...</span></span><br><span class="line">10529:M 31 Jan 2021 01:09:36.132 * Saving the final RDB snapshot before exiting.</span><br><span class="line">10529:M 31 Jan 2021 01:09:36.135 * DB saved on disk</span><br><span class="line">10529:M 31 Jan 2021 01:09:36.135 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure>
<p>다음과같은 하드디스크같은 그림이 뜨면서 Redis가 정상적으로 동작한것을 확인할 수 있습니다.</p>
<h1 id="3-redis-cli"><a href="#3-redis-cli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#3-redis-cli"></a> 3. Redis-Cli</h1>
<p>이제 다음과 같이 서버가 동작하게 되었으므로, 해당 터미널은 띄워둔채 다른 터미널을 하나 키신후 다음과 같은 명령어를 진행합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure>
<p>하나의 콘솔 cli창이 보여지게 되면서 이제 Redis관련 동작을 command로 제어할 수 있게됩니다.</p>
<h1 id="4-redis-command"><a href="#4-redis-command" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#4-redis-command"></a> 4. Redis Command</h1>
<blockquote>
<p>redis 키 생성 및 조회</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> gwan www.github.com</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; get gwan</span><br><span class="line"><span class="string">"www.github.com"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>모든 키값 조회하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"gwan"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>저장된 키값 조회</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$127</span>.0.0.1:6379&gt; keys *gw*</span><br><span class="line">1) <span class="string">"gwan"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 존재여부 확인</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; exists gwan</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 삭제하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; del gwan</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[15]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 만료시간 지정하기(Second)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; expire gwan 100</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 만료시간 지정하기(Unix Time)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; expireat gwan 100</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[15]&gt; ttl gwan</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 만료시간 삭제</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; persist gwan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 만료시간 확인하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; expire gwan 1000</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[15]&gt; ttl gwan</span><br><span class="line">(<span class="built_in">integer</span>) 997</span><br></pre></td></tr></table></figure>
<blockquote>
<p>키 타입 조회</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; <span class="built_in">type</span> gwan</span><br><span class="line">string</span><br></pre></td></tr></table></figure>
<blockquote></blockquote>
<blockquote>
<p>Redis 정보 조회</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[15]&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:6.0.9</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:26c3229b35eb3beb</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Darwin 19.5.0 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:kqueue</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.2.1</span><br><span class="line">process_id:10758</span><br><span class="line">run_id:91ff9f67b95c54f394234f6004cffbe07960d2b2</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:1719</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:1412238</span><br><span class="line">executable:/Users/kgh/redis-server</span><br><span class="line">config_file:</span><br><span class="line">io_threads_active:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">client_recent_max_input_buffer:16</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:1066368</span><br><span class="line">used_memory_human:1.02M</span><br><span class="line">used_memory_rss:901120</span><br><span class="line">used_memory_rss_human:880.00K</span><br><span class="line">used_memory_peak:1123120</span><br><span class="line">used_memory_peak_human:1.07M</span><br><span class="line">used_memory_peak_perc:94.95%</span><br><span class="line">used_memory_overhead:1019192</span><br><span class="line">used_memory_startup:1001536</span><br><span class="line">used_memory_dataset:47176</span><br><span class="line">used_memory_dataset_perc:72.77%</span><br><span class="line">allocator_allocated:1019776</span><br><span class="line">allocator_active:863232</span><br><span class="line">allocator_resident:863232</span><br><span class="line">total_system_memory:8589934592</span><br><span class="line">total_system_memory_human:8.00G</span><br><span class="line">used_memory_lua:37888</span><br><span class="line">used_memory_lua_human:37.00K</span><br><span class="line">used_memory_scripts:0</span><br><span class="line">used_memory_scripts_human:0B</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:0.85</span><br><span class="line">allocator_frag_bytes:18446744073709395072</span><br><span class="line">allocator_rss_ratio:1.00</span><br><span class="line">allocator_rss_bytes:0</span><br><span class="line">rss_overhead_ratio:1.04</span><br><span class="line">rss_overhead_bytes:37888</span><br><span class="line">mem_fragmentation_ratio:0.88</span><br><span class="line">mem_fragmentation_bytes:-118656</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:17456</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:libc</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">rdb_changes_since_last_save:3</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1612023255</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:-1</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:0</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:0</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stats</span></span><br><span class="line">total_connections_received:1</span><br><span class="line">total_commands_processed:14</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:369</span><br><span class="line">total_net_output_bytes:18757</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:0</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">expire_cycle_cpu_milliseconds:49</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:1</span><br><span class="line">keyspace_misses:0</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:0</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">tracking_total_keys:0</span><br><span class="line">tracking_total_items:0</span><br><span class="line">tracking_total_prefixes:0</span><br><span class="line">unexpected_error_replies:0</span><br><span class="line">total_reads_processed:15</span><br><span class="line">total_writes_processed:14</span><br><span class="line">io_threaded_reads_processed:0</span><br><span class="line">io_threaded_writes_processed:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:4c355e7154a8a46cccffd4acfbe1e1ed5e5183d9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU</span></span><br><span class="line">used_cpu_sys:0.767543</span><br><span class="line">used_cpu_user:0.575956</span><br><span class="line">used_cpu_sys_children:0.000000</span><br><span class="line">used_cpu_user_children:0.000000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster</span></span><br><span class="line">cluster_enabled:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Keyspace</span></span><br><span class="line">db0:keys=1,expires=0,avg_ttl=0</span><br><span class="line">db15:keys=1,expires=1,avg_ttl=68029</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Redis Database 변경</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$select</span> 1</span><br><span class="line"></span><br><span class="line">select 1~15</span><br><span class="line">해당 번호는 1~15 데이터베이스를 선택하겠다 라는 뜻입니다.</span><br></pre></td></tr></table></figure>
<p><em>주의할점:</em> select를 사용할때 1~15까지 진행하는 이유는 Redis는 하나의 인스턴스에 최대 16개의 데이터베이스를 가질 수 있습니다.</p>
<blockquote>
<p>auth 접속하기</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$redis</span>-cli</span><br><span class="line">127.0.0.1:6379&gt; auth 비밀번호입력</span><br></pre></td></tr></table></figure>
<h1 id="redis-myeongryeongeo-jeongri"><a href="#redis-myeongryeongeo-jeongri" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#redis-명령어-정리"></a> Redis 명령어 정리</h1>
<table>
<thead>
<tr>
<th>명령어</th>
<th>사용예시</th>
<th>기능설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>del</td>
<td>del ${key}</td>
<td>키 삭제</td>
</tr>
<tr>
<td>exists</td>
<td>exists ${key}</td>
<td>키 존재여부</td>
</tr>
<tr>
<td>expire</td>
<td>expire ${key} ${second}</td>
<td>만료시간 지정 (초단위)</td>
</tr>
<tr>
<td>expireat</td>
<td>expireat $(key} ${unixtime}</td>
<td>만료시간 지정 (유닉스 시간)</td>
</tr>
<tr>
<td>get</td>
<td>get ${key}</td>
<td>해당 키의 값 출력</td>
</tr>
<tr>
<td>info</td>
<td>info</td>
<td>redis 정보 조회</td>
</tr>
<tr>
<td>keys</td>
<td>keys ${key_pattern}</td>
<td>패턴에 부합하는 키목록 출력</td>
</tr>
<tr>
<td>persist</td>
<td>persist ${key}</td>
<td>만료시간을 삭제</td>
</tr>
<tr>
<td>set</td>
<td>set ${key} ${value}</td>
<td>키와 데이터를 추가</td>
</tr>
<tr>
<td>ttl</td>
<td>ttl ${key}</td>
<td>만료시간 확인</td>
</tr>
<tr>
<td>type</td>
<td>type ${key}</td>
<td>해당 키의 타입 확인</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Database</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java 3/E Item 55 옵셔널반환은 신중히 하라</title>
    <url>/EffectiveJava-20210126-%EC%95%84%EC%9D%B4%ED%85%9C55-%EC%98%B5%EC%85%94%EB%84%90%EB%B0%98%ED%99%98%EC%9D%80-%EC%8B%A0%EC%A4%91%ED%9E%88%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="obsyeoneolbanhwaneun-sinjunghi-hara"><a href="#obsyeoneolbanhwaneun-sinjunghi-hara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#옵셔널반환은-신중히-하라"></a> 옵셔널반환은 신중히 하라</h1>
<p>자바 8전에는 메서드가 특정조건에서 값을 반환할 수 없을때 취할 수 있는 선택지가 두가지가 있었다. 예외를 던지거나 null을 반환하는것입니다.</p>
<blockquote>
<p>예외</p>
</blockquote>
<p>예외의 경우는 스택 추적 전체를 캡처하므로 비용이 만만치 않습니다.</p>
<blockquote>
<p>null 반환</p>
</blockquote>
<p>null은 반환하면 이런 문제가 생기지 않지만 null을 반환할 수 있는 메서드를 호출할 때는 null이 반환될 일이 절대 없다고 확신하지 않는한) 별도의 null처리 코드를 추가해야합니다. null처리를 무시하고 반환된 null 값을 어딘가에 저장해두면 언젠가 NullPointerException이 발생할 수 있습니다.<br>
즉, null을 반환하게 한 실제 원인과는 전혀 상관없는 코드일 경우입니다.</p>
<h1 id="jaba-8yi-deungjang"><a href="#jaba-8yi-deungjang" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#자바-8의-등장"></a> 자바 8의 등장</h1>
<p>Optional<t>는 null이 아닌 T타입 참조를 하나 담거나, 혹은 아무것도 담지 않을 수 있습니다. 아무것도 담지않은 옵셔널은 '비었다’라고 말하며 반대로 어떤값을 담은 옵셔녈은 비지않았다고 합니다. 옵셔널은 원소를 최대 1개 가질 수 있는 '불변’컬렉션입니다. Optional<t>가 Collection<t>를 구현하지는 않았지만, 원칙적으로는 그렇게 처리합니다.</t></t></t></p>
<p>보통은 T를 반환해야 하지만 특정 조건에서는 아무것도 반환하지 않아야할 때 T대신에 Optional<t>를 반환하도록 선언하면 됩니다. 그러면 유효한 반환값이 없을때는 빈 결과를 반환하는 메서드가 만들어집니다. 옵셔널을 반환하는 메서드는 예외를 던지는 메서드보다 유연하고 사용하기 쉬우며, null을 반환하는 메서드보다 오류 가능성이 적습니다.</t></p>
<h2 id="keolregsyeoneseo-coedaesgabseul-guhabnida-keolregsyeoni-bieosseumyeon-yeoereul-deonjibnida"><a href="#keolregsyeoneseo-coedaesgabseul-guhabnida-keolregsyeoni-bieosseumyeon-yeoereul-deonjibnida" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컬렉션에서-최댓값을-구합니다컬렉션이-비었으면-예외를-던집니다"></a> 컬렉션에서 최댓값을 구합니다(컬렉션이 비었으면 예외를 던집니다)</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Run Configuration -&gt; program arguement설정</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; words = Arrays.asList(args);</span><br><span class="line">    System.out.println(max(words));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 컬렉션에서 최댓값을 구한다 컬렉션이 비었으면 예외를 던진다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(Collection&lt;E&gt; c)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(c.isEmpty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"empty Collection"</span>);</span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="keyword">null</span> || e.compareTo(result) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida"><a href="#keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#컬렉션에서-최댓값을-구해-optionale로-반환합니다"></a> 컬렉션에서 최댓값을 구해 Optional<e>로 반환합니다.</e></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 컬렉션에서 최댓값을 구해 Optional&lt;E&gt;로 반환합니다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max1</span><span class="params">(Collection&lt;E&gt; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    E result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="keyword">null</span> || e.compareTo(result)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result = Objects.requireNonNull(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>옵셔널 반환하도록 구현하기는 어렵지는 않지만 적절한 정적 팩터리를 사용해 옵셔널을 생성해주기만 하면됩니다. 이 코드에서는 두 가지 팩터리를 사용했습니다.</p>
<p>빈 옵셔널은 Optional.empty()로 만들고, 값이 든 옵셔널은 Optional.of(value)로 생성하였습니다. Optional.of(value)에 null을 넣으면 NullPointerException을 던집니다.</p>
<p>null값도 허용하는 옵셔널을 만드려면 Optional.ofNullable(value)를 사용하면 됩니다. <code>옵셔널을 반환하는 메서드에서는 절대 null을 반환하면 안됩니다.</code> (취지에 어긋납니다)</p>
<p>스트림의 종단 연산중 상당수가 옵셔널을 반환합니다. 앞의 max메서드를 스트림 버전으로 다시 작성하면 Stream의 max연산이 우리에게 필요한 옵셔널을 생성해줄 것입니다.</p>
<h2 id="keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida-stream"><a href="#keolregsyeoneseo-coedaesgabseul-guhae-optionalro-banhwanhabnida-stream" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#컬렉션에서-최댓값을-구해-optionale로-반환합니다-stream"></a> 컬렉션에서 최댓값을 구해 Optional<e>로 반환합니다. (Stream)</e></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 컬렉션에서 최댓값을 구해 Optional&lt;E&gt;로 반환합니다. (Stream)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">Optional&lt;E&gt; <span class="title">max2</span><span class="params">(Collection&lt;E&gt; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.stream().max(Comparator.naturalOrder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이렇게 스트림 형식으로 간단하게 처리할 수 잇으며 Null을 반환하거나 예외를 던지는 대신 옵셔널 반환을 선택하는 기준은 무엇일까요?</p>
<p><code>옵셔널은 검사 예외와 취지가 비슷합니다.</code> 즉, 반환값이 없을 수도 있음을 API 사용자에게 명확하게 알려주며 비검사 예외를 던지거나 null을 반환한다면 API 사용자가 그 사실을 인지하지 못해 끔찍한 결과로 이어질 수 있습니다. 하지만 검사 예외를 던지면 클라이언트에서는 반드시 이에 대처하는 코드를 작성해넣어야합니다.</p>
<p>비슷하게, 메서드가 옵셔널을 반환한다면 클라이언트는 값을 받지 못했을때 취할 행동을 선택해야합니다.</p>
<h2 id="obsyeoneol-hwalyong-1-gibongabseul-jeonghaedul-su-issda"><a href="#obsyeoneol-hwalyong-1-gibongabseul-jeonghaedul-su-issda" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#옵셔널-활용-1-기본값을-정해둘-수-있다"></a> 옵셔널 활용 1- 기본값을 정해둘 수 있다.</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 코드 55-4 옵셔널 활용 1 - 기본값을 정해둘 수 있습니다.</span></span><br><span class="line">String lastWordInLexicon = max2(words).orElse(<span class="string">"단어 없음..."</span>);</span><br></pre></td></tr></table></figure>
<p>상황에 맞는 예외를 던질 수 있으며 다음 코드에서 실제 예외가 아니라 예외 팩터리를 건넨것에 주목해야합니다. 이렇게 하면 예외가 실제로 발생하지 않는한 예외 생성 비용은 들지 않게 됩니다.</p>
<h2 id="obsyeoneol-hwalyong-2-weonhaneun-yeoe-gabseul-deonjil-su-issseubnida"><a href="#obsyeoneol-hwalyong-2-weonhaneun-yeoe-gabseul-deonjil-su-issseubnida" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#옵셔널-활용-2-원하는-예외-값을-던질-수-있습니다"></a> 옵셔널 활용 2 - 원하는 예외 값을 던질 수 있습니다.</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 원하는 </span></span><br><span class="line">Toy myToy = max2(toys).orElseThrow(words).orElseThrow(TemperTantrumException::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>
<p>옵셔널이 항상 값이 채워져있다고 확신한다면 그냥 바로 꺼내 사용하는 선택지도 있습니다. 다만 잘못 판단한 것이라면 NoSuchElementException이 발생하게 됩니다.</p>
<h2 id="obsyeoneol-hwalyong-hangsang-gabsi-caeweojyeo-issdago-gajeonghabnida"><a href="#obsyeoneol-hwalyong-hangsang-gabsi-caeweojyeo-issdago-gajeonghabnida" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#옵셔널-활용-항상-값이-채워져-있다고-가정합니다"></a> 옵셔널 활용 - 항상 값이 채워져 있다고 가정합니다.</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Element lastNobleGas = max2(Elements.NOBLE_GASES).get();</span><br></pre></td></tr></table></figure>
<p>기본값을 설정하는 비용이 아주 커서 부담이 될 수 있습니다. 그럴때는 Supplier<t>를 인수로 받는 orElseGet을 사용하면 값이 처음 필요할때 Supplier<t>를 사용해 생성하므로 초기 설정 비용을 낮출 수 있습니다.</t></t></p>
<p>filter, map, flatMap, ifPresent메서드는 기본 메서드로 처리하기 어려워보인다면 API문서를 참조해 이 고급 메서드들이 문제를 해결해줄 수 있을지 검토해보면 됩니다.</p>
<p>isPresent메서드는 안전 밸브역할의 메서드로, 옵셔널이; 채워져있으면 true, 비어져있으면 false를 반환합니다. 이 메서드로는 원하는 모든 작업을 수행할 수 있지만 신중히 사용해야합니다.</p>
<p>실제로 isPresent를 쓴 코드 중 상당수는 앞서 언급한 메서드들로 대체할 수 있으며, 그렇게 하면 더 짧고 명확하고 용법에 맞는 코드가 됩니다.</p>
<h2 id="ispresent-meseodeu"><a href="#ispresent-meseodeu" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#ispresent-메서드"></a> isPresent 메서드</h2>
<blockquote>
<p>java 9</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ProcessHandle ph = <span class="keyword">new</span> ProcessHandle() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">pid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;ProcessHandle&gt; <span class="title">parent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;ProcessHandle&gt; <span class="title">children</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;ProcessHandle&gt; <span class="title">descendants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Info <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;ProcessHandle&gt; <span class="title">onExit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsNormalTermination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">destroyForcibly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ProcessHandle other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Optional&lt;ProcessHandle&gt; parentProcess = ph.parent();</span><br><span class="line">System.out.println(<span class="string">"부모 PID"</span> + (parentProcess.isPresent() ? String.valueOf(parentProcess.get().pid()) : <span class="string">"N/A"</span>));</span><br><span class="line">System.out.println(<span class="string">"부모 PID"</span> + (ph.parent().map(h -&gt; String.valueOf(h.pid())).orElse(<span class="string">"N/A"</span>)));</span><br></pre></td></tr></table></figure>
<p>위 코드는 Optional의 map을 사용하여 다음처럼 다듬을 수 있습니다.</p>
<p>스트림을 사용한다면 옵셔널들을 Stream(Optional<t>&gt; 로 받아서 그중 채워진 옵셔널들에서 값을 뽑아 Stream<t>에 건네 담아 처리하는 경우가 드물지 않습니다.</t></t></p>
<blockquote>
<p>java8</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 자바8 구현 </span></span><br><span class="line">streamOfOptionals</span><br><span class="line">        .filter(Optional::isPresent)</span><br><span class="line">        .map(Optional::get)</span><br></pre></td></tr></table></figure>
<p>옵셔널에 값이 있다면 (Optional::isPresent) 그 값을 꺼내 (Optional::get) 스트림에 매핑합니다.<br>
자바9에서는 Optional에 stream()메서드가 추가되었습니다. 이 메서드는 Optional을 stream으로 변환해주는 어댑터 이며 옵셔널에 값이 있으면 그 값을 원소로 담은 스트림으로, 값이 없다면 빈 스트림으로 변환합니다. 이를 stream의 flatMap메서드와 조합하면 명료하게 바꿀 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">streamOfOptionals</span><br><span class="line">    .flatMap(Optional::stream)</span><br></pre></td></tr></table></figure>
<p>반환 값으로 옵셔널을 사용한다고 무조건 득이되는것이 아닙니다. 컬렉션, 스트림, 배열, 옵셔널과 같은 컨테이너 타입은 옵셔널로 감싸면 안됩니다. 빈 Optional&lt;List<t>&gt;를 반환하기 보다는 빈 List<t>를 반환하는게 더 좋습니다. 빈 컨테이너를 반환하게 되면 클라이언트에서 옵셔널 처리 코드를 넣지 않아도 됩니다.</t></t></p>
<ul>
<li>참고<br>
<a href="http://ProcessHandle.Info" target="_blank" rel="noopener">ProcessHandle.Info</a> 인터페이스의 arguements 메서드는 Optional&lt;String[]&gt;를 반환하는데, 이는 예외적인 경우이니 따라하지 않도록해야합니다.</li>
</ul>
<h2 id="eoddeohan-gyeongue-banhwantaibeul-tdaesin-optionalro-seoneonhaeyahalggayo"><a href="#eoddeohan-gyeongue-banhwantaibeul-tdaesin-optionalro-seoneonhaeyahalggayo" class="header-anchor">2.8. </a><a class="markdownIt-Anchor" href="#어떠한-경우에-반환타입을-t대신-optionalt로-선언해야할까요"></a> 어떠한 경우에 반환타입을 T대신 Optional<t>로 선언해야할까요?</t></h2>
<p>결과가 없을 수 있으며, 클라이언트가 이 상황을 특별하게 처리해야 한다면 Optional<t>를 반환하도록 합니다.</t></p>
<p>박싱된 기본 타입을 담는 옵셔널은 기본 타입 자체보다 무거울 수밖에 없으며 자바 API설계자는 int, long, double 전용 옵셔널 클래스들을 준비해놨습니다. 바로 OptionalInt, OptionalLong, OptionalDouble입니다. 이 옵셔널들도 Optional<t>가 제공하는 메서드를 거의 다 제공하게 됩니다.</t></p>
<p>결과적으로 박싱도니 기본 타입을 담은 옵셔널을 반환하는일은 없도록 해야합니다.</p>
<h2 id="obsyeoneoleul-maebyi-gabseuro-sayonghaji-malja"><a href="#obsyeoneoleul-maebyi-gabseuro-sayonghaji-malja" class="header-anchor">2.9. </a><a class="markdownIt-Anchor" href="#옵셔널을-맵의-값으로-사용하지-말자"></a> 옵셔널을 맵의 값으로 사용하지 말자</h2>
<p>옵셔널을 맵의 값으로 사용하면 절대안됩니다. 키 자체가 없는 경우나 다른키는 있지만 그 키가 속이 빈 옵셔널인 경우가 있을 수 있기때문에 혼란만 가중시킬 수 있습니다.</p>
<p>즉, 옵셔널을 컬렉션의 키, 값, 원소나 배열의 원소로 사용하는 게 적절한 상황은 거의 없습니다.</p>
<h2 id="obsyeoneoleul-inseuteonseu-pildeue-jeojanghaeduneunge-pilyohan-gyeongu"><a href="#obsyeoneoleul-inseuteonseu-pildeue-jeojanghaeduneunge-pilyohan-gyeongu" class="header-anchor">2.10. </a><a class="markdownIt-Anchor" href="#옵셔널을-인스턴스-필드에-저장해두는게-필요한-경우"></a> 옵셔널을 인스턴스 필드에 저장해두는게 필요한 경우?</h2>
<p>아이템2의 NutritionFacts 클래스의 예제를 보면 선택적 필드의 게터 메서드들이 옵셔널을 반환해주면 좋습니다. 따라서, 이럴때는 필드 자체를 옵셔널도 선언하는것도 좋은 방법중 하나입니다.</p>
<h1 id="haegsim-jeongri"><a href="#haegsim-jeongri" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#핵심-정리"></a> 핵심 정리</h1>
<p>값을 반환하지 못할 가능성이 있고, 호출할때마다 반환값이 없을 가능성을 염두하는 메서드라면 옵셔널을 반환해야 할 상황일 수도 있습니다. 하지만, 옵셔널 반환에는 성능저하가 뒤따르니, 성능에 민감한 메서드라면 null을 반환하거나 예외를 던지는 편이 나을 수 있습니다. 그리고 옵셔널을 반환값 이외의 용도로 쓰는 경우는 매우 드뭅니다.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>EffectiveJava3/E</tag>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>Network HTTP(HyperTextTransferProtocal) API 설계</title>
    <url>/Network-20210126-network-07-http-api/</url>
    <content><![CDATA[<h1 id="api-uri-uniform-resource-identifier-seolgye"><a href="#api-uri-uniform-resource-identifier-seolgye" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#api-uriuniform-resource-identifier-설계"></a> API URI(Uniform Resource Identifier) 설계</h1>
<h2 id="resource-risoseu-ran"><a href="#resource-risoseu-ran" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#resource리소스란"></a> Resource(리소스)란?</h2>
<p>API URI설계에서 중요한것은 리소스의 식별입니다.<br>
리소스(Resource)라고 하는것은 단순히 조회하고 수정 등록하는것을 일컫는 말이 아니라 만약 멤버의 정보를 조회한다고 했을때 멤버의 정보를 조회하는것이 리소스가 아니라 멤버라는 자체가 리소스(Resource)라고 할 수 있습니다.</p>
<h2 id="risoseu-sigbyeol-bangsig"><a href="#risoseu-sigbyeol-bangsig" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#리소스-식별-방식"></a> 리소스 식별 방식</h2>
<p>멤버의 조회,생성,수정,삭제의 의미가 아니라 멤버자체만을 리소스로 식별하고 회원 리소스를 URI에 매핑하면 됩니다.</p>
<ul>
<li>멤버 목록조회<br>
/members</li>
<li>멤버 개별조회<br>
/members/{id}</li>
<li>멤버 등록<br>
/members/{id}</li>
<li>멤버 수정<br>
/members/{id}</li>
<li>멤버 삭제<br>
/members/{id}</li>
</ul>
<p>해당 5개의 API가 있다고 가정해보겠습니다. 여기서도 가장 중요한것은 리소스를 식별하는 방식입니다.</p>
<p>URI는 리소스만 식별하고 리소스와 리소스를 대상으로 하는 행위를 분리하여 URI를 설계를 진행합니다.</p>
<p>리소스: 멤버(명사)<br>
행위: 목록조회, 개별조회, 등록, 수정, 삭제(동사)</p>
<h1 id="http-meseodeu"><a href="#http-meseodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#http-메서드"></a> HTTP 메서드</h1>
<h2 id="http-method-jongryu"><a href="#http-method-jongryu" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#http-method-종류"></a> HTTP Method 종류</h2>
<ol>
<li>GET: 리소스를 조회합니다.</li>
<li>POST: 요청 데이터 처리, 주로 등록에 사용합니다.</li>
<li>PUT: 리소스를 대체하고 리소스가 없다면 생성시킵니다.</li>
<li>PATCH: 리소스를 부분 변경합니다.</li>
<li>DELETE: 리소스를 삭제합니다.</li>
</ol>
<h2 id="http-gita-meseodeu-jongryu"><a href="#http-gita-meseodeu-jongryu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#http-기타-메서드-종류"></a> HTTP 기타 메서드 종류</h2>
<ol>
<li>HEAD: GET과 유사하지만 메시지부분을 제외 하고, 상태 줄과 헤더만 반환합니다.</li>
<li>OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명합니다. (CORS)</li>
<li>CONNECT: 대상 자원으로 식별되는 서버에 대한 터널을 설정합니다.</li>
<li>TRACE: 대상 리소스에 대한 경로에 따라 메시지 루프백 테스트를 수행합니다.</li>
</ol>
<h1 id="get-meseodeu"><a href="#get-meseodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#get-메서드"></a> GET 메서드</h1>
<ol>
<li>리소스를 조회합니다.</li>
<li>서버에 전달하고 싶은 데이터는 쿼리 파라미터(쿼리스트링)을 통해서 전달됩니다.</li>
<li>메시지 바디를 사용하여 데이터를 전송할 수 있지만 지원하지 않는곳이 많아 권장하지않는 방식입니다. 최근에는 허용이 되었지만 실무에서는 잘 사용되지 않는 방식입니다.</li>
</ol>
<h1 id="post-meseodeu"><a href="#post-meseodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#post-메서드"></a> POST 메서드</h1>
<p>POST메서드는 대상리소스가 리소스의 고유 한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 하는 요청입니다.</p>
<ol>
<li>요청 데이터를 처리합니다.</li>
<li>메시지 바디를 통하여 서버로 요청 데이터를 전달합니다.</li>
<li>서버는 요청 데이터를 처리하고 메시지 바디를 통해서 들어온 데이터를 처리하는 모든 기능을 수행합니다.</li>
<li>주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용됩니다.</li>
</ol>
<blockquote>
<p>POST가 사용되는 기능</p>
</blockquote>
<ul>
<li>
<p>HTML양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공합니다.<br>
(회원가입,주문)</p>
</li>
<li>
<p>게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그릅에 메시지를 게시합니다.<br>
(글쓰기, 댓글달기)</p>
</li>
<li>
<p>서버가 아직 식별하지 않은 새 리소스를 생성합니다.<br>
(신규주문)</p>
</li>
<li>
<p>기존 자원에 데이터 추가<br>
(문서에 내용 추가하기)</p>
</li>
</ul>
<p>즉, 이 리소스 URI에 POST요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야합니다.</p>
<blockquote>
<p>POST 정리</p>
</blockquote>
<ol>
<li>
<p>새 리소스를 생성합니다.(등록)<br>
서버가 아직 식별하지 않은 새 리소스를 생성합니다.</p>
</li>
<li>
<p>요청 데이터 처리할때 사용됩니다.<br>
데이터 생성하거나 변경을 넘어서 프로세스를 변경해야할 경우 POST를 사용합니다.<br>
결제 -&gt; 주문 -&gt; 완료와 같은 프로세스의 상태가 변경되는 경우에 사용합니다.<br>
POST의 결과로 새로운 리소스가 생성되지 않는 경우도 있습니다. 컨트롤 URI라고 하며 동사가 포함된것들로 컨트롤되어집니다.</p>
</li>
<li>
<p>다른 메서드로 처리가 애매한 경우에 사용됩니다.<br>
JSON 데이터 형식으로 데이터를 넘길때 GET 메서드를 사용하기 어려운 경우 POST를 사용합니다.</p>
</li>
</ol>
<h1 id="put-meseodeu"><a href="#put-meseodeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#put-메서드"></a> PUT 메서드</h1>
<ol>
<li>
<p>리소스를 대체합니다. 대체한다는 의미는 리소스가 있으면 대체하고 리소스가 없으면 리소스를 생성합니다. 즉, 리소스를 덮어버리게 됩니다.</p>
</li>
<li>
<p>클라이언트가 리소스를 식별합니다. 클라이언트가 리소스 위치를 알고 URI를 지정합니다.<br>
(POST와 차이점)</p>
</li>
</ol>
<h1 id="patch-meseodeu"><a href="#patch-meseodeu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#patch-메서드"></a> PATCH 메서드</h1>
<ul>
<li>리소스를 부분만 교체합니다.</li>
</ul>
<h1 id="delete-meseodeu"><a href="#delete-meseodeu" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#delete-메서드"></a> DELETE 메서드</h1>
<ul>
<li>리소스를 제거합니다.</li>
</ul>
<h1 id="http-meseodeuyi-sogseong"><a href="#http-meseodeuyi-sogseong" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#http-메서드의-속성"></a> HTTP 메서드의 속성</h1>
<ol>
<li>
<p>안전(Safe Methods)<br>
GET같은 경우는 안전하며 POST,PUT과 같은 변경이 많은 것들은 안전하지 않습니다. 호출해도 리소스를 변경하지 않습니다. 안전은 리소스만 고려합니다.</p>
</li>
<li>
<p>멱등(Idempotent Methods)<br>
여러번 호출해도 결과는 같아야합니다. PUT을 호출하여 서버응답 호출을 통하여 재시도 할지 안할지를 확인할 수 있습니다. 즉, 자동 복구 매커니즘에서 많이 활용됩니다.</p>
</li>
</ol>
<p>만약, 재요청 중간에 다른 곳에서 리소스를 변경하게 된다면 멱등성은 외부 요인으로 중간에 리소스가 변경되는것 까지 고려하지 않습니다.</p>
<ul>
<li>멱등메서드<br>
GET:여러번 조회하든 결과가 같습니다.<br>
PUT: 결과를 대체하여 여러번 요청해도 최종 결과는 같습니다.<br>
DELETE: 결과를 삭제합니다. 같은 요청을 여러번 해도 삭제된 결과는 같습니다.</li>
</ul>
<p>POST: 멱등성을 가진 메서드가 아닙니다. 두번 호출시 주문 중복이나 결제 중복이 발생할 수 있습니다.</p>
<ol start="3">
<li>캐시가능(Cacheable Methods)</li>
</ol>
<ul>
<li>응답 결과 리소스를 캐시해서 사용할 수 있습니다. (GET, HEAD, POST, PATCH)</li>
<li>GET,HEAD정도만 캐시로 사용하고 POST, PATCH같은 경우는 본문 내용까지 캐싱을 진행해야하기 때문에 주로 GET,HEAD를 사용합니다.</li>
</ul>
<h1 id="keulraieonteu-seobeo-deiteo-jeondal-bangsig-2gaji"><a href="#keulraieonteu-seobeo-deiteo-jeondal-bangsig-2gaji" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#클라이언트-서버-데이터-전달-방식-2가지"></a> 클라이언트 서버 데이터 전달 방식 2가지</h1>
<ol>
<li>쿼리 파라미터를 통한 데이터 전송</li>
</ol>
<ul>
<li>GET, 정렬 필터 검색어 처리를 할때 사용됩니다.</li>
</ul>
<ol start="2">
<li>메시지 바디를 통한 데이터 전송</li>
</ol>
<ul>
<li>POST, PUT, PATCH를 사용하며 리소스 등록이나 리소스 변경에 사용됩니다.</li>
</ul>
<blockquote>
<p>데이터 전달시 상황</p>
</blockquote>
<ol>
<li>
<p>정적 데이터 조회<br>
이미지, 정적 텍스트 문서</p>
</li>
<li>
<p>동적 데이터 조회<br>
주로 검색이나 게시판 목록에서 정렬필터에 사용됩니다(검색어)</p>
</li>
<li>
<p>HTML Form을 통한 데이터 전송<br>
회원 가입이나 상품주문, 데이터 변경이 발생하는곳에 사용됩니다.</p>
</li>
<li>
<p>HTTP API를 통한 데이터 전송<br>
회원 가입이나 상품주문 데이터변경시에 사용되고 서버간 통신이나, 클라이언트, 웹클라이언트 통신에 주로 사용됩니다. (Ajax, axios)</p>
</li>
</ol>
<h1 id="jeongjeog-deiteo-johoesi"><a href="#jeongjeog-deiteo-johoesi" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#정적-데이터-조회시"></a> 정적 데이터 조회시</h1>
<ol>
<li>이미지나 정적 텍스트 문서에 사용됩니다.</li>
<li>조회는 주로 GET을 사용합니다.</li>
<li>정적 데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능합니다.</li>
</ol>
<h1 id="dongjeog-deiteo-johoe"><a href="#dongjeog-deiteo-johoe" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#동적-데이터-조회"></a> 동적 데이터 조회</h1>
<p>쿼리 파라미터를 기반으로 정렬필터를 통하여 결과를 동적으로 생성하는 경우가 있습니다.</p>
<ol>
<li>검색, 목록에서 정렬 필터 및 검색어 등에 사용됩니다.</li>
<li>조회 조건을 줄여주는 필터나 조회 결과를 정렬하는 정렬 조건에 주로 사용됩니다.</li>
<li>조회는 주로 GET을 사용하고 쿼리파라미터를 통하여 데이터를 전달합니다. 메시지바디를 통하여 가능하지만 실무에서는 권장하지 않는 방식입니다.</li>
</ol>
<h1 id="html-from-deiteo"><a href="#html-from-deiteo" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#html-from-데이터"></a> HTML From 데이터</h1>
<ol>
<li>HTML Form Submit시에는 보통 POST전송을 진행합니다.</li>
</ol>
<ul>
<li>가입, 주문, 변경</li>
</ul>
<ol start="2">
<li>Content-Type: application/x-www-form-urlencoded</li>
</ol>
<ul>
<li>form의 내용을 메시지 바디를 통하여 전송합니다. (쿼리파라미터)</li>
<li>전송 파라미터를 url encoding 처리합니다.<br>
kgh -&gt; kgh%A%B%C%D%E%F%</li>
</ul>
<ol start="3">
<li>HTML Form GET 전송 가능</li>
<li>Content-Type: multipart/form-data</li>
</ol>
<ul>
<li>파일 업로드 같은 바이너리 데이터 전송시 사용합니다.</li>
<li>다른 종류의 여러 파일의 폼 내용과 함께 전송이 가능합니다(multipart)</li>
</ul>
<ol start="5">
<li>HTML Form전송은 GET,POST만 지원</li>
</ol>
<h1 id="http-api-deiteo-jeonsong"><a href="#http-api-deiteo-jeonsong" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#http-api-데이터-전송"></a> HTTP API 데이터 전송</h1>
<ol>
<li>서버간 통신</li>
</ol>
<ul>
<li>백엔드 시스템 통신(OPEN API)</li>
</ul>
<ol start="2">
<li>앱 클라이언트</li>
</ol>
<ul>
<li>IOS, Android</li>
</ul>
<ol start="3">
<li>웹 클라이언트</li>
</ol>
<ul>
<li>HTML에서 Form전송 대신 자바스크립트 통신(axios, ajax)</li>
</ul>
<ol start="4">
<li>메시지 바디를 통하여 메시지 전송</li>
</ol>
<ul>
<li>POST,PUT,PATCH를 주로 사용합니다.</li>
</ul>
<ol start="5">
<li>GET: 조회, 쿼리파라미터로 데이터전달</li>
</ol>
<ul>
<li>Content-Type: application/json 주로 사용</li>
<li>TEXT, XML, JSON</li>
</ul>
<h1 id="http-api-seolgye"><a href="#http-api-seolgye" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#http-api-설계"></a> HTTP API 설계</h1>
<ol>
<li>HTTP API 컬렉션</li>
</ol>
<ul>
<li>POST 기반 등록 및 회원관리 API</li>
</ul>
<ol start="2">
<li>HTTP API 스토어</li>
</ol>
<ul>
<li>PUT 기반등록으로 진행되고 정적 컨텐츠나 원격 파일 관리에 사용됩니다.</li>
</ul>
<ol start="3">
<li>HTML FORM</li>
</ol>
<ul>
<li>웹 페이지 회원 관리에 사용되며 GET,POST Method만 지원됩니다.</li>
</ul>
<h1 id="membeo-gwanri-siseutem-yesi"><a href="#membeo-gwanri-siseutem-yesi" class="header-anchor">15. </a><a class="markdownIt-Anchor" href="#멤버-관리-시스템-예시"></a> 멤버 관리 시스템 예시</h1>
<p>POST기반 멤버 관리 시스템</p>
<p>목록 /members :GET<br>
등록 /members :POST<br>
조회 /members/{id} :GET<br>
수정 /members/{id} : PATCH, PUT,POST<br>
리소스 덮는게 가능하면 PUT, 부분 교체하면 PATCH, 그외 POST<br>
삭제 /members/{id} : DELETE</p>
<blockquote>
<p>POST 신규 자원 등록의 특징</p>
</blockquote>
<ol>
<li>클라이언트는 등록될 리소스의 URI의 정보를 모릅니다.</li>
</ol>
<ul>
<li>POST /members</li>
</ul>
<ol start="2">
<li>서버가 새로 등록된 리소스 URI를 생성해줍니다.</li>
</ol>
<ul>
<li>HTTP/1.1 201 Created</li>
<li>Location: /membmer/1</li>
</ul>
<ol start="3">
<li>컬렉션(Collection)</li>
</ol>
<ul>
<li>서버가 관리하는 리소스 디렉토리이며 리소스의 URI를 생성하고 관리합니다.</li>
<li>컬렉션 예: /members</li>
</ul>
<h1 id="pail-gwanri-siseutem-yesi"><a href="#pail-gwanri-siseutem-yesi" class="header-anchor">16. </a><a class="markdownIt-Anchor" href="#파일-관리-시스템-예시"></a> 파일 관리 시스템 예시</h1>
<p>PUT 기반 등록 시스템</p>
<p>목록 GET /files<br>
조회 GET /files/{filename}<br>
등록 PUT /files/{filename}<br>
삭제 DELETE /files/{filename}<br>
대량 등록 POST /files</p>
<blockquote>
<p>PUT 신규 자원 등록</p>
</blockquote>
<ol>
<li>클라이언트가 리소스 URI를 알고 있어야합니다.</li>
</ol>
<ul>
<li>등록 PUT /files/{filename}</li>
<li>PUT /files/hello.jpg</li>
</ul>
<ol start="2">
<li>클라이언트가 직접 리소스의 URI를 지정합니다.</li>
<li>스토어(Store)</li>
</ol>
<ul>
<li>클라이언트가 관리하는 리소스 저장소이며 리소스의 URI를 알고 관리합니다.</li>
<li>스토어 예: /files</li>
</ul>
<h1 id="html-form-sayongsi-seolgye"><a href="#html-form-sayongsi-seolgye" class="header-anchor">17. </a><a class="markdownIt-Anchor" href="#html-form-사용시-설계"></a> HTML FORM 사용시 설계</h1>
<p>목록 GET /members<br>
등록 폼 GET /members/new<br>
등록 POST /members/new(보통 등록폼과 맞추어준다), /members<br>
조회 GET /members/{id}<br>
수정 폼 GET /members/{id}/edit<br>
수정 POST /members/{id}/edit, /members/{id}<br>
삭제 /members/{id}/delete</p>
<blockquote>
<p>특징</p>
</blockquote>
<ol>
<li>HTML FORM GET, POST만 지원</li>
<li>컨트롤 URI<br>
GET,POST 제약조건을 가지고 있으며 이러한 제약을 해결하기 위해 동사로 된 리소스 경로를 사용합니다.  POST /new, /edit, /delete가 컨트롤 URI로 사용되며 HTTP메서드로 해결하기 애매한 경우 사용됩니다. (HTTP API를 포함합니다)</li>
</ol>
<blockquote>
<p>HTTP 설계 정리</p>
</blockquote>
<ol>
<li>
<p>HTTP API 컬렉션(서버)<br>
POST기반으로 등록되며 서버가 리소스 URI를 결정합니다.</p>
</li>
<li>
<p>HTTP API 스토어(클라)<br>
PUT기반 등록되며 클라이언트가 리소스 URI를 결정합니다.</p>
</li>
<li>
<p>HTML FORM<br>
순수 HTML + HTML form을 사용하며 GET, POST만 지원합니다.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>http</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Netwrok 웹 API 디자인 REST API</title>
    <url>/Network-20210128-network-08-rest-api/</url>
    <content><![CDATA[<h1 id="web-api-dijain"><a href="#web-api-dijain" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#웹-api-디자인"></a> 웹 API 디자인</h1>
<p>대부분 최신 웹 어플리케이션은 클라이언트가 애플래케이션과 상호작용하는 데 사용할 수 있는 API를 표시합니다.</p>
<blockquote>
<p>웹 API의 특성 2가지</p>
</blockquote>
<ol>
<li>
<p>플랫폼 독립성<br>
모든 클라이언트는 내부에서 API구현하는 방법에 관계없이 API를 호출할 수 있어야합니다. 그러기위해서는 표준 프로토콜을 사용해야하고,클라이언트가 및 웹서비스가 교환할 데이터 형식에 동의할 수 있는 매커니즘을 가지고 있어야합니다.</p>
</li>
<li>
<p>서비스진화<br>
Web API는 클라이언트 애플리케이션과 독립적으로 기능을 진화시키고 추가 할 수 있어야합니다. API가 진화해도 기존클라이언트는 수정없이 작동되야하고 해당 기능을 완전히 이용할 수 있도록 검색 가능해야합니다.</p>
</li>
</ol>
<h1 id="rest-sogae"><a href="#rest-sogae" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#rest-소개"></a> REST 소개</h1>
<p>2000년에 Roy Fielding은 웹 서비스를 디자인하는 아키텍처 접근 방식으로 <code>REST(Representational State Transfer)</code>를 제안했습니다. REST는 하이퍼미디어 기반 분산 시스템을 구축하기 위한 아키텍처 스타일입니다. REST는 어떤 기본 프로토콜과도 독립적이며 HTTP에 연결될 필요가 없습니다. 그러나 대부분의 일반적인 REST 구현에서 애플리케이션 프로토콜로 HTTP를 사용하고, 이 지침에서는 HTTP를 위한 REST API 디자인에 중점을 둡니다.</p>
<blockquote>
<p>REST가 HTTP보다 우수한 장점</p>
</blockquote>
<ol>
<li>개방형 표준<br>
API또는 클라이언트 애플리케이션의 구현이 특정 구현에 바인딩되지 않습니다.</li>
</ol>
<blockquote>
<p>Restful API 디자인 원칙</p>
</blockquote>
<ol>
<li>
<p>리소스를 중심으로 디자인되며 클라이언트에서 액세스 할 수 있는 모든 종류의 개체, 데이터 또는 서비스가 리소스에 포함됩니다.</p>
</li>
<li>
<p>리소스마다 해당 리소스를 고유하게 식별하는 URI식별자 존재</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">고객 주문 URI</span><br><span class="line">https:<span class="comment">//adventure-works.com/orders/1</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>클라이언트가 리소스의 표현을 교환하여 서비스와 상호작용합니다.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"orderId"</span>:<span class="number">1</span>,<span class="string">"orderValue"</span>:<span class="number">99.90</span>,<span class="string">"productId"</span>:<span class="number">1</span>,<span class="string">"quantity"</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>REST API는 균일한 인터페이스를 사용하므로 클라이언트와 서비스 구현을 분리하는데 도움이 됩니다.</li>
</ol>
<p><code>HTTP기반으로 하는 REST API경우 리소스에 표준 HTTP 동사 수행 작업을 사용하는것이 균일한 인터페이스에 포함됩니다.</code><br>
Ex) GET,POST,PUT,PATCH,DELETE</p>
<ol start="5">
<li>REST API는 상태 비저장 요청 모델을 사용합니다.</li>
</ol>
<p>독립적이며 임의순서로 발생할 수 있으므로 요청 사이에 일시적인 상태정보를 유지할 수 없습니다. 그리고 클라이언트 서버 사이에서 연결성을 유지할 필요가 없습니다. <code>즉, Connectionsless, Stateful, Stateless의 특성을 가지고 있습니다.</code></p>
<ol start="6">
<li>REST API는 표현에 포함된 하이퍼미디어 링크에 따라 구동됩니다.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"orderID"</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">"productID"</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">"quantity"</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="string">"orderValue"</span>:<span class="number">16.60</span>,</span><br><span class="line">    <span class="string">"links"</span>: [</span><br><span class="line">        &#123;<span class="string">"rel"</span>:<span class="string">"product"</span>,<span class="string">"href"</span>:<span class="string">"https://adventure-works.com/customers/3"</span>, <span class="string">"action"</span>:<span class="string">"GET"</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"rel"</span>:<span class="string">"product"</span>,<span class="string">"href"</span>:<span class="string">"https://adventure-works.com/customers/3"</span>, <span class="string">"action"</span>:<span class="string">"PUT"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2008년에 Leonard Richardson은 Web API에 대한 다음과 같은 모델 제안</p>
</blockquote>
<ul>
<li>수준 0: 한 URI를 정의하고 모든 작업은 이 URI에 대한 POST 요청을 통해 진행됩니다.</li>
<li>수준 1: 개별 리소스에 대한 별도의 URI를 만듭니다.</li>
<li>수준 2: HTTP 메서드를 사용하여 리소스에 대한 작업을 정의합니다.</li>
<li>수준 3: 하이퍼미디어(HATEOAS) 를 사용합니다.</li>
</ul>
<h1 id="risoseureul-jungsimeuro-api-guseong"><a href="#risoseureul-jungsimeuro-api-guseong" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#리소스를-중심으로-api-구성"></a> 리소스를 중심으로 API 구성</h1>
<p>웹 API가 표시하는 비즈니스 Entity 에 집중해야합니다.</p>
<p>전자상거래 시스템에서는 기본 엔티티가 고객과 주문인데 주문 정보가 포함된 HTTP POST요청을 전송하여 주문만들기를 진행할 수 있습니다. <code>이때 가장 중요한점은 리소스 URI는 동사(리소스에 대한작업)이 아닌 명사(리소스)기반으로 설계되어야합니다.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//adventure-works.com/orders // Good</span></span><br><span class="line">https:<span class="comment">//adventure-works.com/create-order // Avoid</span></span><br></pre></td></tr></table></figure>
<p>리소스는 단일 물리적 항목을 기반으로 구현할 필요가 없습니다. 내부적으로 관계형 DB로 구현할 수 있지만 클라이언트에 대해서는 단일 엔티티로 표시됩니다. 내부구조를 반영하는 API를 설계하면 안됩니다. <code>즉, 클라이언트 내부구현에 노출되면 안됩니다.</code></p>
<p>엔티티는 종종 컬렉션(주문, 고객)으로 그룹화 되는데 <code>컬렉션은 고유한 URI</code>가 있어야합니다.</p>
<blockquote>
<p>주문 URI 주문 컬렉션</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">컬렉션 URI에 HTTP GET 요청을 보내면 컬렉션에 있는 항목 목록을 검색합니다.</span><br><span class="line">https:<span class="comment">//adventure-works.com/orders</span></span><br></pre></td></tr></table></figure>
<p>URI에 일관적인 명명 규칙하는데 컬렉션을 참조하는 URI에 대해 복수 명사를 사용할 수 있습니다. 컬렉션 및 항목에 대한 URI를 계층 구조로 구성해야합니다.</p>
<p>예를 들어 <code>/customers는 고객 컬렉션의 경로</code>이고, <code>/customers/5는 ID가 5인 고객의 경로</code>입니다.</p>
<p>이 접근 방식을 사용하면 웹 API를 직관적으로 유지할 수 있습니다. 또한 많은 Web API 프레임워크는 매개 변수가 있는 URI 경로를 기반으로 라우팅 경로 /customers/{id}에 대한 경로를 정의할 수 있습니다.</p>
<p>서로 다른 리소스 형식과 이러한 연결을 표시하는 방법 사이의 관계도 고려해야 합니다.<br>
예를 들어 <code>/customers/5/orders는 고객 5에 대한 모든 주문</code>을 나타낼 수 있습니다. 반대 방향으로 이동하여 <code>/orders/99/customer 같은 URI를 사용하여 주문에서 고객으로의 연결을 표시</code>할 수도 있습니다.</p>
<p>단, 모델을 광범위하게 확대시 구현이 어려울 수 있습니다.</p>
<blockquote>
<p>구현이 어려운 경우</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/customers/<span class="number">1</span>/orders/<span class="number">99</span>/products</span><br></pre></td></tr></table></figure>
<p><code>클라이언트가 여러 관계 수준을 탐색할 수 있는 URI를 제공</code>하고 싶을 수 있습니다. 그러나 이 수준의 복잡성은 유지하기 어려울 수 있으며 나중에 리소스 사이의 관계가 변하면 유연성이 떨어집니다.<br>
위와같이 설계시 <code>모든 웹 요청이 웹 서버의 부하를 높인다는 점</code>입니다. 요청이 많을수록 부하가 커집니다. 따라서 다수의 작은 리소스를 표시하는 <code>복잡한 Web API를 피해야합니다.</code></p>
<blockquote>
<p>그러면 어떤식으로 설계해야할까요?</p>
</blockquote>
<p>이전 쿼리를 <code>/customers/1/orders</code> URI로 바꿔서 고객 1의 모든 주문을 찾은 후 <code>/orders/99/products</code>로 바꿔서 이 주문의 제품을 찾을 수 있습니다.</p>
<p>그리고 <code>Web API와 기본 데이터 원본 사이에 종속성이 발생하지 않도록 해야 합니다.</code></p>
<p>예를 들어 데이터가 관계형 데이터베이스에 저장되는 경우 Web API는 각 테이블을 리소스 컬렉션으로 표시할 필요가 없습니다.</p>
<p>마지막으로, <code>웹 API에 의해 구현된 일부 작업을 특정 리소스에 매핑하지 못할 수 있습니다.</code> HTTP GET 요청을 통해 기능을 호출하고 결과를 HTTP 응답 메시지로 반환하는 리소스가 아닐 수 있습니다.</p>
<blockquote>
<p>예시1</p>
</blockquote>
<p>더하기 및 빼기 같은 단순한 계산기 작업을 구현하는 Web API 리소스로 표시하고 쿼리 문자열을 사용하여 필요한 매개 변수를 지정하는 URI설계 할 수 있습니다.</p>
<blockquote>
<p>예시2</p>
</blockquote>
<p>URI /add? operand1 = 99&amp;99&amp;operand2 = 1 에 대 한 GET 요청은 100 값을 포함 하는 본문이 포함 된 응답 메시지를 반환 합니다. 그러나 이러한 형식의 URI는 제한적으로만 사용해야 합니다.</p>
<h1 id="http-meseodeureul-gijuneuro-jageob-jeongyi"><a href="#http-meseodeureul-gijuneuro-jageob-jeongyi" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#http-메서드를-기준으로-작업-정의"></a> HTTP 메서드를 기준으로 작업 정의</h1>
<blockquote>
<p>HTTP 메서드 정의</p>
</blockquote>
<ul>
<li><code>GET</code> 은 지정된 URI에서 리소스의 표현을 검색합니다. 응답 메시지의 본문은 요청된 리소스의 세부 정보를 포함하고 있습니다.</li>
<li><code>POST</code> 는 지정된 URI에 새 리소스를 만듭니다. 요청 메시지의 본문은 새 리소스의 세부 정보를 제공합니다. 참고로 POST를 사용하여 실제로 리소스를 만들지 않는 작업을 트리거할 수도 있습니다.</li>
<li><code>PUT</code> 은 지정된 URI에 리소스를 만들거나 대체합니다. 요청 메시지의 본문은 만들 또는 업데이트할 리소스를 지정합니다.</li>
<li><code>PATCH</code> 는 리소스의 부분 업데이트를 수행합니다. 요청 본문은 리소스에 적용할 변경 내용을 지정합니다.</li>
<li><code>DELETE</code> 는 지정된 URI의 리소스를 제거합니다.</li>
</ul>
<table>
<thead>
<tr>
<th>리소스</th>
<th>POST</th>
<th>GET</th>
<th>PUT</th>
<th>DELETE</th>
</tr>
</thead>
<tbody>
<tr>
<td>/customers</td>
<td>새 고객 만들기</td>
<td>모든 고객 검색</td>
<td>고객 대량 업데이트</td>
<td>모든 고객 제거</td>
</tr>
<tr>
<td>/customers/1</td>
<td>오류</td>
<td>고객 1에 대한 세부 정보 검색</td>
<td>고객 1이 있는 경우</td>
<td>고객 1의 세부 정보 업데이트</td>
</tr>
<tr>
<td>/customers/1/orders</td>
<td>고객 1에 대한 새 주문 만들기</td>
<td>고객 1에 대한 모든 주문 검색</td>
<td>고객 1의 주문 대량 업데이트</td>
<td>고객 1의 모든 주문 제거</td>
</tr>
</tbody>
</table>
<blockquote>
<p>POST, PUT 및 PATCH 차이점</p>
</blockquote>
<ul>
<li>
<p><code>POST 요청은 리소스를 만듭니다.</code> 서버는 새 리소스에 대한 URI를 할당하고 클라이언트에 해당 URI를 반환합니다. REST 모델에서는 컬렉션에 POST 요청을 자주 적용합니다. 즉, 프로세스 처리에 사용됩니다.</p>
</li>
<li>
<p><code>PUT 요청은 리소스를 만들거나 또는 기존 리소스를 업데이트합니다.</code> 클라이언트는 리소스의 URI를 지정합니다. 요청 본문에는 리소스의 완전한 표현이 포함됩니다. 이 URI를 사용하는 리소스가 이미 있으면 리소스가 대체됩니다. 아직 없고 서버에서 리소스 만들기를 지원하는 경우 새 리소스가 생성됩니다.</p>
</li>
</ul>
<blockquote>
<p><code>PUT사용시 주의할점: PUT 요청은 idempotent(멱등성)이여야 합니다.</code></p>
</blockquote>
<p>클라이언트가 동일한 PUT 요청을 여러 번 제출하는 경우 그 결과가 항상 같아야 합니다(같은 값을 사용하여 같은 리소스가 수정)</p>
<ul>
<li><code>PATCH 요청은 기존 리소스에 부분 업데이트를 수행합니다.</code> 클라이언트는 리소스의 URI를 지정합니다. 요청 본문은 리소스에 적용할 변경 내용을 지정합니다. 즉, 리소스 부분변경을 업데이트합니다.</li>
</ul>
<blockquote>
<p>멱등성의 개념</p>
</blockquote>
<p><code>멱등(Idempotent Methods) 여러번 호출해도 결과는 같아야합니다.</code> PUT을 호출하여 서버응답 호출을 통하여 재시도 할지 안할지를 확인할 수 있습니다. 즉, <code>자동 복구 매커니즘</code>에서 많이 활용됩니다.</p>
<h1 id="midieo-yuhyeong"><a href="#midieo-yuhyeong" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#미디어-유형"></a> 미디어 유형</h1>
<p><code>HTTP 프로토콜에서 형식은 MIME 유형이라고도 하는 미디어 유형을 사용하여 지정됩니다.</code> 보통 <code>Web API는 JSON(미디어 유형 = 애플리케이션/json) 및 XML(미디어 유형 = 애플리케이션/xml)을 지원</code>합니다. 그리고 요청과 응답의 경우 <code>Content-Type</code> 헤더는 표현 형식을 지정합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSON 형식</span><br><span class="line"></span><br><span class="line">POST https:<span class="comment">//adventure-works.com/orders HTTP/1.1</span></span><br><span class="line">Content-Type: application/json; charset=utf-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">57</span></span><br><span class="line">&#123;<span class="string">"Id"</span>:<span class="number">1</span>,<span class="string">"Name"</span>:<span class="string">"Gizmo"</span>,<span class="string">"Category"</span>:<span class="string">"Widgets"</span>,<span class="string">"Price"</span>:<span class="number">1.99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>만약에, <code>서버에서 미디어 유형을 지원하지 않으면 HTTP 상태 코드 415(지원되지 않는 미디어 유형)를 반환</code>해야 합니다.</p>
<blockquote>
<p>클라이언트 요청</p>
</blockquote>
<p>클라이언트 요청에는 클라이언트가 응답 메시지에서 서버로부터 받는 미디어 유형 목록을 포함하는 <code>Accept 헤더가 포함</code>될 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET https:<span class="comment">//adventure-works.com/orders/2 HTTP/1.1</span></span><br><span class="line">Accept: application/json</span><br></pre></td></tr></table></figure>
<h1 id="get-meseodeu"><a href="#get-meseodeu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#get-메서드"></a> GET 메서드</h1>
<p>성공적인 GET 메서드는 일반적으로 <code>HTTP 상태 코드 200(정상)를 반환</code>합니다. <code>리소스를 찾을 수 없는 경우 404(Not Found)반환</code>합니다.</p>
<h1 id="post-meseodeu"><a href="#post-meseodeu" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#post-메서드"></a> POST 메서드</h1>
<p><code>POST 메서드는 새 리소스를 만드는 경우 HTTP 상태 코드 201(만들어짐)을 반환합니다.</code> 새 리소스의 URI는 응답의 Location 헤더에 포함됩니다. 응답 본문은 리소스의 표현을 포함합니다.</p>
<p>만약에 <code>새 리소스를 만들지 않는 경우 메서드는 HTTP 상태 코드 200을 반환</code>하고 작업의 결과를 응답 본문에 포함할 수 있습니다. 또는 <code>반환할 결과가 없으면 메서드가 응답 본문 없이 HTTP 상태 코드 204(컨텐츠 X) 를 반환</code>할 수 있습니다.</p>
<h1 id="putmeseodeu"><a href="#putmeseodeu" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#put메서드"></a> PUT메서드</h1>
<p><code>PUT 메서드는 POST 메서드와 마찬가지로 새 리소스를 만드는 경우 HTTP 상태 코드 201(만들어짐)을 반환</code>합니다. 이 메서드는 기존 리소스를 업데이트할 경우 <code>200(정상) 또는 204(내용 없음)를 반환</code>합니다. 상황에 따라 기존 리소스를 업데이트할 수 없는 경우도 있습니다.</p>
<h1 id="patch-meseodeu"><a href="#patch-meseodeu" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#patch-메서드"></a> PATCH 메서드</h1>
<p>클라이언트는 <code>PATCH 요청을 사용하여 업데이트를 패치 문서 의 형태로 기존 리소스에 보냅니다.</code> 서버는 패치 문서를 처리하여 업데이트를 수행합니다. 패치 문서는 리소스 전체가 아니라 적용할 변경 내용만 설명합니다.  <code>즉, 부분변경만 진행합니다.</code></p>
<blockquote>
<p>두 가지 주요 JSON 기반 패치 형식으로 JSON 패치 및 JSON 병합 패치</p>
</blockquote>
<p><code>JSON 병합 패치는 비교적 간단합니다.</code> 패치 문서는 원래 JSON 리소스와 동일한 구조를 갖지만 변경 또는 추가할 필드의 하위 집합만 포함하고 있습니다. 또한 패치 문서에서 필드 값에 대해 null을 지정하여 필드를 삭제할 수 있습니다.</p>
<p><em>JSON 기반 패치</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"gizmo"</span>,</span><br><span class="line">    <span class="string">"category"</span>:<span class="string">"widgets"</span>,</span><br><span class="line">    <span class="string">"color"</span>:<span class="string">"blue"</span>,</span><br><span class="line">    <span class="string">"price"</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>JSON 병합패치</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;price&quot;:12,</span><br><span class="line">    &quot;color&quot;:null,</span><br><span class="line">    &quot;size&quot;:&quot;small&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결론적으로 <code>원래 리소스가 명시적 null 값을 포함할 수 있으면 패치 문서에서 null이 갖는 특별한 의미 때문에 병합 패치가 적합하지 않습니다.</code> 또한 패치 문서는 서버에서 업데이트를 적용할 순서를 지정하지 않습니다. <code>JSON 패치의 미디어 유형은 application/json-patch+json</code>입니다.</p>
<blockquote>
<p>HTTP 상태 코드와 함께 PATCH 요청을 처리할 때 발생할 수 있는 몇 가지 일반적인 오류 조건</p>
</blockquote>
<table>
<thead>
<tr>
<th>오류조건</th>
<th>HTTP 상태 코드</th>
</tr>
</thead>
<tbody>
<tr>
<td>지원되지 않는 패치 문서 형식입니다.</td>
<td>415(지원되지 않는 미디어 형식)</td>
</tr>
<tr>
<td>패치 문서의 형식이 잘못되었습니다.</td>
<td>400(잘못된 요청)</td>
</tr>
<tr>
<td>패치 문서가 유효하지만 현재 상태에서는 변경 내용을 리소스에 적용할 수 없습니다.</td>
<td>409(충돌)</td>
</tr>
</tbody>
</table>
<h1 id="delete-meseodeu"><a href="#delete-meseodeu" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#delete-메서드"></a> DELETE 메서드</h1>
<p>삭제 작업이 성공하면 웹 서버는 프로세스가 성공적으로 처리되었지만 응답 본문에 추가 정보가 포함되지 않았음을 나타내는 <code>HTTP 204 상태 코드로 응답</code>해야 합니다. 리소스가 없는 경우 웹 서버는 <code>HTTP 404(찾을 수 없음)를 반환</code>할 수 있습니다.</p>
<h1 id="bidonggi-jageob"><a href="#bidonggi-jageob" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#비동기-작업"></a> 비동기 작업</h1>
<p>경우에 따라 POST, PUT, PATCH 또는 DELETE 작업을 완료 하는 데 시간이 오래 걸리는 처리가 필요할 수 있습니다. 이 경우 요청 처리가 수락되었지만 아직 완료되지 않았음을 나타내는 <code>HTTP 상태 코드 202(수락됨)를 반환</code>합니다.</p>
<p>즉, 클라이언트가 상태 엔드포인트를 폴링하여 상태를 모니터링할 수 있도록 비동기 요청의 상태를 반환하는 <code>엔드포인트를 표시</code>해야합니다. <code>202 응답의 Location 헤더에 상태 엔드포인트의 URI를 포함</code>합니다.</p>
<blockquote>
<p>엔드포인트 표시 예시</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">202</span> Accepted</span><br><span class="line">Location: /api/status/<span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p>클라이언트가 이 엔드포인트에 GET 요청을 보내는 경우 응답에 요청의 현재 상태가 포함되어야 합니다. 필요에 따라 <code>예상 완료 시간 또는 작업 취소 링크를 포함하는 경우는 어떻게 표현</code>할 수 있을까요?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>:<span class="string">"In progress"</span>,</span><br><span class="line">    <span class="string">"link"</span>: &#123; <span class="string">"rel"</span>:<span class="string">"cancel"</span>, <span class="string">"method"</span>:<span class="string">"delete"</span>, <span class="string">"href"</span>:<span class="string">"/api/status/12345"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>비동기 작업에서 새 리소스를 만드는 경우 작업 완료 후 상태 엔드포인트에서 상태 코드 <code>303(다른 항목 보기)을 반환</code>해야 합니다. <code>303 응답에 새 리소스의 URI를 제공하는 Location 헤더를 포함</code>합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">303</span> See Other</span><br><span class="line">Location: /api/orders/<span class="number">12345</span></span><br></pre></td></tr></table></figure>
<h1 id="deiteo-pilteoring-mic-peijineisyeon"><a href="#deiteo-pilteoring-mic-peijineisyeon" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#데이터-필터링-및-페이지네이션"></a> 데이터 필터링 및 페이지네이션</h1>
<p>클라이언트 애플리케이션에서 비용이 특정 값을 초과하는 모든 주문을 찾아야 한다고 가정해 봅시다.</p>
<p>클라이언트 응용 프로그램은 <code>/orders URI에서 모든 주문을 검색한 후 클라이언트 쪽에서 이러한 주문을 필터링</code>할 것입니다. 이 프로세스는 매우 <code>비효율적</code>입니다. Web API를 호스팅하는 <code>서버의 네트워크 대역폭 및 처리 성능이 낭비됩니다.</code></p>
<blockquote>
<p>동적 쿼리 및 페이지네이션</p>
</blockquote>
<p>이 방법 대신, <code>/orders?minCost=n</code> 처럼 API가 <code>URI의 쿼리 문자열에서 필터 전달을 허용</code>할 수 있습니다. 그러면 Web API가 쿼리 문자열의 minCost 매개 변수를 구문 분석 및 처리하고 <code>서버 쪽에서 필터링된 결과를 반환</code>합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/orders?limit=<span class="number">25</span>&amp;offset=<span class="number">50</span></span><br></pre></td></tr></table></figure>
<p>다음과 같이 오프셋을 지정할 수 있습니다.</p>
<blockquote>
<p>서비스 거부 공격을 방지하기 위해 반환되는 항목 수를 제한하는 방안</p>
</blockquote>
<p>필드 이름을 <code>/orders?sort=ProductID</code> 같은 값으로 가져오는 정렬 매개 변수를 제공하여 데이터를 가져올 때 데이터를 정렬하는 비슷한 전략을 처리할 수 있습니다.</p>
<p>But, 쿼리 문자열 매개 변수는 여러 캐시 구현에서 캐시된 데이터의 키로 사용되는 리소스 식별자의 일부를 구성하기 때문에 <code>이 접근 방식은 캐싱에 나쁜 영향</code>을 끼칩니다.</p>
<h1 id="daeyongryang-ijin-risoseue-daehan-bubun-eungdab-jiweon"><a href="#daeyongryang-ijin-risoseue-daehan-bubun-eungdab-jiweon" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#대용량-이진-리소스에-대한-부분-응답-지원"></a> 대용량 이진 리소스에 대한 부분 응답 지원</h1>
<p>대용량 응답 시간을 개선하려면 이러한 <code>리소스를 청크로 검색할 수 있게 하는 방안을 고안</code>해야합니다.</p>
<blockquote>
<p>예시</p>
</blockquote>
<p>Web API가 큰 리소스의 GET 요청에 대해 <code>Accept-Ranges 헤더를 지원</code>해야 합니다. 이 헤더는 GET 작업이 부분 요청을 지원한다는 것을 나타냅니다. 클라이언트 애플리케이션은 바이트 범위로 지정된 리소스 하위 집합을 반환하는 GET을 반환할 수 있습니다.</p>
<blockquote>
<p>HEAD</p>
</blockquote>
<p>HEAD 요청은 리소스에 대해 설명하는 HTTP 헤더만 반환하고 메시지 본문이 비어 있다는 점을 제외하면 GET 요청과 비슷합니다.</p>
<ul>
<li>요청 메시지</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HEAD https:<span class="comment">//adventure-works.com/products/10?fields=productImage HTTP/1.1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>응답메시지</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line">Content-Length: <span class="number">4580</span></span><br></pre></td></tr></table></figure>
<p>Content-Length 헤더는 총 리소스 크기를 제공하고, <code>Accept-Ranges 헤더</code>는 해당 GET 작업이 <code>일부 결과를 지원</code>합니다. 첫 번째 요청은 범위 헤더를 사용하여 <code>처음 2500 바이트를 가져옵니다.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET https:<span class="comment">//adventure-works.com/products/10?fields=productImage HTTP/1.1</span></span><br><span class="line">Range: bytes=<span class="number">0</span>-<span class="number">2499</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>일부범위만 Content-Range에 넣는방법</p>
</blockquote>
<p>메시지 본문에 반환된 실제 바이트 수(리소스의 크기가 아닌)를 지정하며, <code>Content-Range 헤더는 해당 바이트가 리소스의 어느 부분인지(4580 바이트 중 바이트 0-2499)를 나타냅니다.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">206</span> Partial Content</span><br><span class="line"></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line">Content-Length: <span class="number">2500</span></span><br><span class="line">Content-Range: bytes <span class="number">0</span>-<span class="number">2499</span>/<span class="number">4580</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference</p>
</blockquote>
<p><a href="https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design" target="_blank" rel="noopener">https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design</a></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>REST</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA 영속성 컨텍스트(Persistence Context)</title>
    <url>/JPA-20210127-jpa-02-%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</url>
    <content><![CDATA[<h1 id="yeongsogseong-keontegseuteu-persistence-context"><a href="#yeongsogseong-keontegseuteu-persistence-context" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#영속성-컨텍스트persistence-context"></a> 영속성 컨텍스트(Persistence Context)</h1>
<p>영속성 컨텍스트란 논리적인 개념(무형성)으로 엔티티를 영구 저장하는 환경이라고 할 수 있습니다. 특히, JPA를 이해하는데 가장 중요한 용어입니다. 그리고 EntityManager를 통하여 영속성 컨텍스트에 접근할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EntityManager.persist(entity);</span><br></pre></td></tr></table></figure>
<p>다음과 같이 EntityManagerFactory가 생성시킨 EntityManager를 사용하여 Connection pool에 접근하여 Database에 접근할 수 있습니다.</p>
<h1 id="j2se-standard-edition-vs-j2ee-enterprise-edition"><a href="#j2se-standard-edition-vs-j2ee-enterprise-edition" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#j2se-standard-edition-vs-j2ee-enterprise-edition"></a> J2SE (Standard Edition) VS J2EE ( Enterprise Edition)</h1>
<blockquote>
<p>J2SE</p>
</blockquote>
<p>일반 자바 프로그램 개발을 위한 용도로 이용되는 개발도구이며 각종 자료구조, 기본 유틸리티, 스윙이나 AWT와 같은 GUI도구등의 기본기능을 포함하고 있다.</p>
<blockquote>
<p>J2EE</p>
</blockquote>
<p>엔터프라이즈 환경을 위한 도구로 EJB, JSP, Servlet, JNDI같은 기능을 지원하며 웹 애플리케이션 서버를 이용하는 프로그램 개발시 많이 사용한다.</p>
<p>두 가지 환경에서는 어떠한 차이가 있을까요?</p>
<p>J2SE는 엔티티매니저와 영속성컨텍스트가 1:1로 관계를 가지고 있으며 J2EE 스프링 프레임워크 같은 컨테이너 환경은 엔티티 매니저와 영속성 컨텍스트가 N:1의 관계를 가지고 있습니다.</p>
<h1 id="entity-saengmyeongjugi"><a href="#entity-saengmyeongjugi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#entity-생명주기"></a> Entity 생명주기</h1>
<blockquote>
<p>생명주기</p>
</blockquote>
<p><img src="https://www.objectdb.com/files/images/manual/jpa-states.png" alt="엔티티 생명주기"></p>
<h2 id="biyeongsog-new-transient"><a href="#biyeongsog-new-transient" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#비영속newtransient"></a> 비영속(new/transient)</h2>
<p>영속성 컨텍스트와 전혀관계가 없는 새로운 상태</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 객체 생성 (비영속)</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="yeongsog-managed"><a href="#yeongsog-managed" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#영속managed"></a> 영속(managed)</h2>
<p>영속성 컨텍스트에 관리되는 상태</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 객체 생성(비영속)</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 엔티티 매니저 팩토리로 엔티티 매니저를 생성합니다.</span></span><br><span class="line">EntityManager em = emf.createEntityManager();</span><br><span class="line"><span class="comment">// 트랙잭션위에서 동작합니다.</span></span><br><span class="line">em.getTransaction().begin();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 저장한 상태(영속) - 영속상태가 되는것 DB에 저장되는 상태가 아니며 트랜잭션 커밋시점에 해당 DB에 들어가게 됩니다.</span></span><br><span class="line"><span class="comment">// 만약 1차캐시가 있다면 1차캐시를 사용합니다.</span></span><br><span class="line">em.persist(member);</span><br></pre></td></tr></table></figure>
<h2 id="junyeongsog-detached"><a href="#junyeongsog-detached" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#준영속detached"></a> 준영속(detached)</h2>
<p>영속성 컨텍스트에 저장되었다가 분리된 상태</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 엔티티를 영속성 컨텍스트에서 분리시키고 준영속상태로 만듭니다.</span></span><br><span class="line">em.detach(member);</span><br></pre></td></tr></table></figure>
<h2 id="sagje-removed"><a href="#sagje-removed" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#삭제removed"></a> 삭제(removed)</h2>
<p>삭제된 상태</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 객체를 삭제한 상태</span></span><br><span class="line">em.remove(member);</span><br></pre></td></tr></table></figure>
<h1 id="yeongsogseong-keontegseuteu-teugjing"><a href="#yeongsogseong-keontegseuteu-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#영속성-컨텍스트-특징"></a> 영속성 컨텍스트 특징</h1>
<ol>
<li>1차캐시를 활용합니다.</li>
<li>동일성(Identity)를 보장합니다.</li>
<li>트랜잭션을 지원하는 쓰기 지연을 일으킵니다(Transcational write-behind)</li>
<li>변경 감지(Dirty Checking)이 가능합니다.</li>
<li>지연 로딩(Lazy Loading)을 지원합니다</li>
</ol>
<p>즉, 영속성 컨텍스트는 버퍼링과 캐싱의 기능을 가질 수 있습니다.</p>
<h1 id="entiti-johoe-mic-1ca-kaesi"><a href="#entiti-johoe-mic-1ca-kaesi" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#엔티티-조회-및-1차-캐시"></a> 엔티티 조회 및 1차 캐시</h1>
<p>1차 캐시는 Map형태로 구성되어있습니다. 예를 들면 key-@Id : value-@Entity &lt;Key,Value&gt;형식으로 구성되어있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//엔티티를 생성한 상태 비영속상태입니다.</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//엔티티를 영속하는 단계</span></span><br><span class="line">em.persist(member);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>이제 이것들은 1차캐시에서 어떻게 사용될까요?</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//엔티티를 생성한 상태 비영속상태입니다.</span></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"memberId1"</span>);</span><br><span class="line">member.setUsername(<span class="string">"gwanhyeonkim"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에 저장</span></span><br><span class="line">em.persist(member);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에서 조회</span></span><br><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br></pre></td></tr></table></figure>
<p>em.persist(member)를 하게 되면 1차 캐시에 값이 저장되고 그 이후에 만약 값을 조회하는 경우 현재 1차캐시에 올라간 값으로 조회해옵니다.<br>
즉, 영속성 컨텍스트에서 1차캐시를 확인하고 없으면 1차캐시에 저장을 하게됩니다. 그리고 값을 조회하면 1차캐시에 저장된 저장값들을 불러와서 조회가 가능하게 됩니다.</p>
<blockquote>
<p>데이터베이스 조회</p>
</blockquote>
<p>EntityManager은 트랜잭션단위로 처리를 진행합니다. 즉, 1차 캐시도 날아가며 1차캐시는 전체적인 확인을 통해 진행됩니다.</p>
<ol>
<li>find(“gwanhyeonkim”) 1차 캐시를 확인하여 없으면 DB를 조회합니다.</li>
<li>DB조회후 1차캐시에 저장을 시키고 해당 member값을 반환시켜주게 됩니다.</li>
</ol>
<h1 id="yeongsogseong-entiti-dongilseong-identifier"><a href="#yeongsogseong-entiti-dongilseong-identifier" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#영속성-엔티티-동일성identifier"></a> 영속성 엔티티 동일성(Identifier)</h1>
<p>만약에 똑같은 값을 조회한다고 가정하면 영속성 엔티티의 동일성을 보장시켜줍니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line">Member member2 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line"></span><br><span class="line">(a == b) <span class="comment">// 동일성이 같습니다. true</span></span><br></pre></td></tr></table></figure>
<p>1차 캐시로 반복 가능한 읽기(REPEATABLE READ) 등급의 트랜잭션 격리 수준을 데이터베이스가 아닌 애플리케이션 차원에서 제공됩니다. 즉, 같은 트랜잭션내에 동일성이 보장되면 true를 리턴한다고 할 수 있습니다.</p>
<blockquote>
<p>데이터베이스에 언제 Insert를 진행할까요?</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transaction.commit(); <span class="comment">// 해당 시점에 트랜잭션 커밋을 진행하면서 insert값들을 실제 SQL쿼리를 날리게 됩니다. 즉, 쓰기지연이 일어나는 시점이며 flush SQL이 같이 동작됩니다.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>em.persist()</p>
</blockquote>
<p>persist가 동작하면 INSERT SQL과 1차캐시에 저장을 동시에 진행합니다. INSERT SQL생성시 쓰기 지연 SQL저장소에 저장시키고 1차 캐시에서 해당 캐시가 있는지 없는지를 확인하고 있으면 해당 값을 캐시에서 가져오고<br>
그게 아니라면 영속성컨텍스트가 DB에 접근하여 SQL 쓰기지연저장소에 저장된 쿼리를 날리게 됩니다. transaction.commit()으로 쓰기지연이 동작하고 flush sql이 함께 동작됩니다. 이때 해당 실제 DB에 값을 넣게 됩니다.</p>
<p>이것을 쓰는 이유는 무엇일까요? 버퍼링, 즉, 캐싱개념이 생기게 됩니다.</p>
<h1 id="entiti-sujeong"><a href="#entiti-sujeong" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#엔티티-수정"></a> 엔티티 수정</h1>
<p>영속성 엔티티를 조회후에 데이터를 수정한다면 어떻게 처리가 될까요?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//영속 엔티티 조회</span></span><br><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line"></span><br><span class="line"><span class="comment">//영속 엔티티 데이터 수정</span></span><br><span class="line">member1.setUsername(<span class="string">"kgh"</span>);</span><br><span class="line">member1.setAge(<span class="string">"20"</span>);</span><br><span class="line"></span><br><span class="line">transcation.commit(); <span class="comment">// 트랜잭션을 커밋하는 시점입니다.</span></span><br></pre></td></tr></table></figure>
<p>데이터수정시 em.persist를 넣을 필요는 없게 됩니다. 이미 영속성컨텍스트에 관리되어지고 있기 때문입니다.</p>
<h1 id="byeongyeong-gamji-dirty-checking"><a href="#byeongyeong-gamji-dirty-checking" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#변경-감지dirty-checking"></a> 변경 감지(Dirty Checking)</h1>
<p>변경 감지 순서에 대해서 알아보겠습니다.</p>
<p>영속성 컨텍스트(entity manager)안에서 transcation.commit()이 작동되게 되면 어떻게 처리될까요?</p>
<ol>
<li>flush()함수가 동작됩니다.</li>
<li>엔티티 스냅샷(최초 시점에만)과 비교되어 집니다.</li>
<li>쓰기지연 저장소에 UPDATE SQL이 생성됩니다.</li>
<li>다시 flush()를 수행하면서 SQL UPDATE구문이 DB에 날리게 되면서 이때, commit이 진행됩니다.</li>
</ol>
<h1 id="entiti-sagje"><a href="#entiti-sagje" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#엔티티-삭제"></a> 엔티티 삭제</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Member member1 = em.find(Member.class, "gwanhyeonkim");</span><br><span class="line">em.remove(member1);</span><br></pre></td></tr></table></figure>
<p>삭제 대상 엔티티를 조회하고 엔티티를 삭제하는 구문입니다.</p>
<h1 id="peulreosi-flush"><a href="#peulreosi-flush" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#플러시flush"></a> 플러시(Flush)</h1>
<p>영속성 컨텍스트의 변경 내용을 데이터베이스에 반영하는것을 뜻합니다. 즉, 지연 sql 스냅샷과 쓰기지연 SQL 저장소에 저장해놓은 쿼리를 데이터베이스에 반영하는 과정이라고 생각하시면 됩니다.</p>
<ol>
<li>변경 감지(dirty checking)를 진행합니다.</li>
<li>수정된 엔티티 쓰기 지연 SQL 저장소에 등록됩니다.</li>
<li>쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송합니다. (등록, 수정, 삭제)</li>
</ol>
<h1 id="yeongsogseong-keontegseuteureul-peulreosireul-eoddeohge-halggayo"><a href="#yeongsogseong-keontegseuteureul-peulreosireul-eoddeohge-halggayo" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#영속성-컨텍스트를-플러시를-어떻게-할까요"></a> 영속성 컨텍스트를 플러시를 어떻게 할까요?</h1>
<ol>
<li>em.flush()를 직접호출하여 진행합니다. 테스트를 진행할때 이러한 방식으로 새로가동하는것처럼 진행할 수 있습니다.</li>
<li>트랜잭션 커밋을 진행합니다. 이때 플러시가 자동으로 같이 호출되게 됩니다.</li>
<li>JPQL쿼리를 실행합니다. 이때 플러시가 자동으로 같이 호출되게 됩니다. JPQL쿼리실행시 1차 캐시가 사라지는것이 아니고 쓰기지연SQL, 변경감지 업데이트 쿼리들이 DB에 반영됩니다.</li>
</ol>
<h1 id="jpql-kweori-silhaengsi-peulreosiga-jadongeuro-hoculdoeneun-iyu"><a href="#jpql-kweori-silhaengsi-peulreosiga-jadongeuro-hoculdoeneun-iyu" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#jpql-쿼리-실행시-플러시가-자동으로-호출되는-이유"></a> JPQL 쿼리 실행시 플러시가 자동으로 호출되는 이유</h1>
<p>em.persist에 persist를 실행한다고 하였을때 persist 자체만으로 DB에 접근은 하지 못합니다. 그 이유는 JPQL을 날리게 되면 자동으로 flush()를 호출하여 DB를 가져오기때문에 현재 값들을 select해올 값이 없게 됩니다.</p>
<h1 id="peulreosi-modeu-obsyeon"><a href="#peulreosi-modeu-obsyeon" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#플러시-모드-옵션"></a> 플러시 모드 옵션</h1>
<ol>
<li>FlushModeType.AUTO - 커밋이나 쿼리를 실행할 때 Flush(Default)</li>
<li>FlushModeType.COMMIT - 커밋할때만 Flush</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">em.setFlushMode(FlushModeType.COMMIT)</span><br></pre></td></tr></table></figure>
<h1 id="peulreosi-teugjing"><a href="#peulreosi-teugjing" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#플러시-특징"></a> 플러시 특징</h1>
<ol>
<li>영속성 컨텍스트를 비우지 않습니다.</li>
<li>영속성 컨텍스트의 변경내용을 데이터베이스에 동기화합니다.</li>
<li>트랜잭션이라는 작업단위가 중요하며 커밋직전에만 동기화를 진행하면 됩니다.</li>
</ol>
<h1 id="junyeongsog-sangtae"><a href="#junyeongsog-sangtae" class="header-anchor">15. </a><a class="markdownIt-Anchor" href="#준영속-상태"></a> 준영속 상태</h1>
<ol>
<li>영속상태(1차캐시에 저장된 상태)에서 준영속상태를 만드는 상태</li>
<li>영속상태의 엔티티가 영속성 컨텍스트에서 분리합니다.(detached) - Dirty Checking을 사용하지 못합니다.</li>
<li>영속성 컨텍스트가 제공하는 기능을 사용하지 못합니다.</li>
</ol>
<blockquote>
<p>준영속 상태로 어떻게 만들 수 있을까?</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">em.detach(entity) 특정 엔티티만 준영속상태로 전환</span><br><span class="line">em.clear(entity) 영속성 컨텍스트를 완전히 초기화</span><br><span class="line">em.close() 영속성 컨텍스트를 종료</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JPA</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>Entity</tag>
        <tag>Persistence</tag>
        <tag>Flush</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA(Java Persistence API)</title>
    <url>/JPA-20210127-jpa-01-jpa%EB%9E%80/</url>
    <content><![CDATA[<h1 id="jpa-database-dialect"><a href="#jpa-database-dialect" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#jpa-database-dialect"></a> JPA Database Dialect</h1>
<p>JPA는 특정 데이터베이스에 종속되지 않으며 각각 데이터베이스가 제공하는 SQL 문법과 함수는 차이가 있습니다.</p>
<p>가변문자에서 Mysql은 VARCHAR으로 선언되고 Oracle은 VARCHAR2 으로 사용되면서 문법적 차이가 존재합니다. 그리고 문자열을 자르는 함수같은 경우는 SQL 표준은 SUBSTRING(), Oracle은 SUBSTR()로 사용됩니다. 페이징 처리 같은 경우는 MySQL LIMIT을 사용하고 Oracle은 ROWNUM을 사용합니다.<br>
JPA Database Dialect는 SQL 표준을 지키지 않는 특정 데이터베이스만의 고유한 기능이라고 할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">H2: org.hibernate.dialect.H2Dialect</span><br><span class="line">Oracle <span class="number">10</span>g: org.hibernate.dialect.Oracle10gDialect</span><br><span class="line">MySQL: org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure>
<p>다음과 같이 hibernate.dialect속성을 지정하여 사용할 수 있습니다. Hibernate는 약 40개 이상의 Dialect를 지원합니다.</p>
<h1 id="jpa-gudongbangsig"><a href="#jpa-gudongbangsig" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#jpa-구동방식"></a> JPA 구동방식</h1>
<p>Persistance(영속성)가 Maven(META-INF/persistance.xml), Gradle(application.properties,application.yml) 설정 정보를 조회한후 해당 설정정보로 EntityManagerFactory를 생성하여 EntityManagerFactory가 EntityManager를 생성하게 됩니다.</p>
<blockquote>
<p>주의 사항</p>
</blockquote>
<ol>
<li>
<p>EntitiyManagerFactory:<br>
하나만 생성하여 어플리케이션 전체에 공유되는 방식을 사용합니다.</p>
</li>
<li>
<p>EntityManager:<br>
쓰레드간에 공유를 하지 못합니다. 따라서, EntitiyManager를 선언하고 추후에 따로 해지시켜주는 방식으로 구동되어야합니다.</p>
</li>
<li>
<p>JPA는 모든 데이터 변경은 트랜잭션안에서 실행됩니다. 따라서, 모든 데이터변경시에  트랜잭션이 실행되어 commit과 rollback과정을 처리합니다.</p>
</li>
</ol>
<h1 id="entity-id"><a href="#entity-id" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#entity-id"></a> @Entity, @Id</h1>
<p>@Entity: Entity어노테이션은 JPA가 관리하는 객체로 선언해줍니다.<br>
@Id: Id어노테이션은 데이터베이스 PK와 매핑됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String memberName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="jpql-java-persistence-query-language"><a href="#jpql-java-persistence-query-language" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#jpqljava-persistence-query-language"></a> JPQL(Java Persistence Query Language)</h1>
<p>JPA를 사용하면 엔티티 객체를 중심으로 개발이 진행되고 만약에 검색쿼리를 진행한다고 할대, 테이블이 아닌 엔티티객체를 대상으로 검색을 진행하게 됩니다. 하지만, 모든DB데이터를 객체로 변환해서 검색하는것은 불가능합니다. 따라서, 필요한 데이터만 가져오기위해 검색조건이 포함된 SQL이 필요로 되어지는데 이때 JPQL을 사용하게 됩니다.</p>
<p>JPQL은 SQL을 추상화하여 JPQL이라는 객체지향 쿼리언어를 제공하는것을 말합니다. SQL문법과도 매우 유사하며 SELECT,FROM,WHERE,GROUP BY, HAVING, JOIN과 같은 문법도 지원을 해줍니다.</p>
<blockquote>
<p>SQL VS JPQL</p>
</blockquote>
<p>JPQL은 엔티티 객체를 대상으로 쿼리문을 날리고, SQL은 데이터베이스 테이블 대상으로 쿼리를 날립니다.</p>
<blockquote>
<p>정리</p>
</blockquote>
<p>테이블이 아닌 객체를 대상으로 검색하는 객체지향쿼리를 일컫는말이고 SQL을 추상화하였기때문에 특정 SQL에 의존하지 않는다는 장점을 가지고 있습니다. JPQL은 객체지향 SQL이라고 말할 수 있습니다.</p>
]]></content>
      <categories>
        <category>JPA</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>JPQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java 3/E Item 54 null이 아닌,빈 컬렉션이나 배열을 반환하라</title>
    <url>/EffectiveJava-20210125-%EC%95%84%EC%9D%B4%ED%85%9C54-null%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%B9%88-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%B4%EB%82%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="nulli-anin-bin-keolregsyeonina-baeyeoleul-banhwanhara"><a href="#nulli-anin-bin-keolregsyeonina-baeyeoleul-banhwanhara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#null이-아닌-빈-컬렉션이나-배열을-반환하라"></a> null이 아닌, 빈 컬렉션이나 배열을 반환하라</h1>
<h2 id="keolregsyeoni-bieosseumyeon-nulleul-banhwanhanda-ddarahajimalaya-haneun-bangbeob"><a href="#keolregsyeoni-bieosseumyeon-nulleul-banhwanhanda-ddarahajimalaya-haneun-bangbeob" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컬렉션이-비었으면-null을-반환한다-따라하지말아야-하는-방법"></a> 컬렉션이 비었으면 null을 반환한다. - 따라하지말아야 하는 방법</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 매장 안의 모든 치즈 목록을 반환한다.</span></span><br><span class="line"><span class="comment"> * 단, 재고가 하나도 없다면 null을 반환한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 절대 이렇게 처리하지말것! 서버와 클라이언트에서 모두 방어코드를 작성해야하는 불편함이 있다.</span></span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.isEmpty() ? <span class="keyword">null</span> : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>위와 같이 코드를 작성하면 클라이언트는 이 null 상황을 처리하는 코드를 추가로 작성해야합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cheese shop = <span class="keyword">new</span> Cheese();</span><br><span class="line">List&lt;Cheese&gt; cheeses = shop.getCheess1();</span><br><span class="line"><span class="keyword">if</span>(cheeses != <span class="keyword">null</span> &amp;&amp; cheeses.contains(Cheese.STILTON));&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello guys~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>컬렉션이나 배열 같은 컨테이너(container)가 비었을 때 null을 반환하는 메서드를 사용할 때면 항시 이와 같은 방어코드를 작성해야합니다. 클라이언트에서 방어 코드를 빼먹으면 오류가 발생할 수 있다. 실제로 객체가 0개일 가능성이 거의 없는 상황에서는 수년 뒤에야 오류가 발생하기도 한다. 한편, null을 반환하려면 반환하는 쪽에서도 이 상황을 특별히 취급해줘야 해서 코드가 더 복잡해진다.</p>
<p>때로는 빈 컨테이너를 할당하는 데도 비용이 드니 null을 반환하는 쪽이 낫다는 주장이 있지만. 하지만 이는 두 가지면에서 틀린 주장이다.</p>
<ol>
<li>이 할당이 성능 저하의 주범이라고 확인되지 않는 한 , 이정도의 성능 차이는 신경 쓸 수준이 못 된다.</li>
<li>두 번째, 빈 컬렉션과 배열은 굳이 새로 할당하지 않고도 반환할 수 있다.</li>
</ol>
<h2 id="bin-keolregsyeoneul-banhwanhaneun-olbareun-ye"><a href="#bin-keolregsyeoneul-banhwanhaneun-olbareun-ye" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#빈-컬렉션을-반환하는-올바른-예"></a> 빈 컬렉션을 반환하는 올바른 예</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 빈 컬렉션을 반환하는 올바른 예</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>가능성은 작지만, 사용 패턴에 따라서 빈 컬렉션 할당이 성능을 눈에 띄게 떨어뜨릴 수도 있지만, 이것에 대한 해결 방법은 매번 똑같은 빈 불변 컬렉션을 반환하면 됩니다. 불변 객체는 자유롭게 공유해도 안전합니다.</p>
<p>다음 코드에서 사용하는 Collections.emptyList 메서드나 집합이 필요한 경우 Collections.emptySet(), 맵이 필요하면 Collections.emptyMap()을 사용하면 됩니다. 이 역시 매우 최적화에 해당하니 되도록 꼭 필요할때만 사용하는것이 좋습니다. 반드시 성능 측정이 필요합니다.</p>
<h2 id="coejeoghwa-bin-keolregsyeoneul-maebeon-saero-haldanghaji-anhdorog-haessda"><a href="#coejeoghwa-bin-keolregsyeoneul-maebeon-saero-haldanghaji-anhdorog-haessda" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#최적화-빈-컬렉션을-매번-새로-할당하지-않도록-했다"></a> 최적화 - 빈 컬렉션을 매번 새로 할당하지 않도록 했다.</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 최적화 - 빈 컬렉션을 매번 새로 할당하지 않도록 하였다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.isEmpty() ? Collections.emptyList() : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>배열을 쓸 때도 마찬가지인데, 절대로 null을 반환하지 말고 길이가 0인 배열을 반환합니다. 보통은 단순히 정확한 길이의 배열을 반환하기만 하면 됩니다.</p>
<p>그 길이가 0일수도 있을뿐이고 다음코드에서 toArray메서드에 건넨 길이 0짜리 배열을 우리가 원하는 반환 타입(Cheese[])을 알려주는 역할을 합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 길이가 0일수도 있는 배열을 반환하는 올바른 방법</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheess4()&#123;</span><br><span class="line">   <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>해당방식이 성능을 떨어뜨릴 것 같다면 0짜리 배열을 미리 선언해두고 매번 그 배열을 반환하면 됩니다. 길이가 0인 배열은 모두 불변하기 때문입니다.</p>
<h2 id="coejeoghwa-bin-baeyeoleul-maebeon-saero-haldanghaji-anhdoroghayeossseubnida"><a href="#coejeoghwa-bin-baeyeoleul-maebeon-saero-haldanghaji-anhdoroghayeossseubnida" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#최적화-빈-배열을-매번-새로-할당하지-않도록하였습니다"></a> 최적화 - 빈 배열을 매번 새로 할당하지 않도록하였습니다.</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 최적화 - 빈배열을 매번 새로 할당하지 않도록 처리</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheess5()&#123;</span><br><span class="line">   <span class="keyword">return</span> cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이 최적화 버전의 getCheeses는 항상 EMPTY_CHEESE_ARRAY를 인수로 넘겨 toArray를 호출하게 됩니다. 따라서 cheesesInStock이 비었을 때면 언제나 EMPTY_CHEESE_ARRAY를 반환하게 됩니다.</p>
<p>단순히 성능을 개선할 목적이라면 toArray에 넘기는 배열을 미리 할당하는 건 추천하지 않습니다. 오히려 성능을 떨어진다는 연구 결과가 있습니다.</p>
<h2 id="nabbeun-ye-baeyeoleul-miri-haldanghamyeon-seongneungi-nabbajinda"><a href="#nabbeun-ye-baeyeoleul-miri-haldanghamyeon-seongneungi-nabbajinda" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#나쁜-예-배열을-미리-할당하면-성능이-나빠진다"></a> 나쁜 예 - 배열을 미리 할당하면 성능이 나빠진다</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 나쁜예- 배열을 미리 할당하면 성능이 나빠진다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheess6()&#123;</span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[cheesesInStock.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jeonce-kodeu"><a href="#jeonce-kodeu" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#전체-코드"></a> 전체 코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Item54;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item54_null</span>이아닌빈컬렉션이나배열을반환하라 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cheese shop = <span class="keyword">new</span> Cheese();</span><br><span class="line">        List&lt;Cheese&gt; cheeses = shop.getCheess1();</span><br><span class="line">        <span class="keyword">if</span>(cheeses != <span class="keyword">null</span> &amp;&amp; cheeses.contains(Cheese.STILTON));&#123;</span><br><span class="line">            System.out.println(<span class="string">"hello guys~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cheese</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STILTON = <span class="string">"STILTON"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Cheese&gt; cheesesInStock = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 매장 안의 모든 치즈 목록을 반환한다.</span></span><br><span class="line"><span class="comment">         * 단, 재고가 하나도 없다면 null을 반환한다.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 절대 이렇게 처리하지말것! 서버와 클라이언트에서 모두 방어코드를 작성해야하는 불편함이 있다.</span></span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.isEmpty() ? <span class="keyword">null</span> : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 빈 컬렉션을 반환하는 올바른 예</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess2</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 최적화 - 빈 컬렉션을 매번 새로 할당하지 않도록 하였다.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheess3</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.isEmpty() ? Collections.emptyList() : <span class="keyword">new</span> ArrayList&lt;&gt;(cheesesInStock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 길이가 0일수도 있는 배열을 반환하는 올바른 방법</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Cheese[] getCheess4()&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 최적화 - 빈배열을 매번 새로 할당하지 않도록 처리</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">public</span> Cheese[] getCheess5()&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 나쁜예- 배열을 미리 할당하면 성능이 나빠진다.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Cheese[] getCheess6()&#123;</span><br><span class="line">            <span class="keyword">return</span> cheesesInStock.toArray(<span class="keyword">new</span> Cheese[cheesesInStock.size()]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>핵심 정리</p>
</blockquote>
<p>null이 아닌, 빈 배열이나 컬렉션을 반환하라. null을 반환하는 API는 사용하기 어렵고 오류 처리 코드도 늘어난다. 그렇다고 성능이 좋은것도 아니다.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>EffectiveJava3/E</tag>
      </tags>
  </entry>
  <entry>
    <title>Network HTTP(HyperText Transfer Protocal) 구조 및 HTTP 메시지 구조</title>
    <url>/Network-20210121-network-06-http/</url>
    <content><![CDATA[<p>웹에서 가장 중요한 요소라고 할 수 있는 HTTP(Hyper Text Transfer Protocal)에 대해서 살펴보도록 하겠습니다.<br>
들어가기 앞서 HTTP가 왜 중요할까요?</p>
<p><code>클라이언트-서버 구조</code>에서 데이터를 전송하기위해 필수 불가결한 요소입니다. <code>HTTP 메시지</code>에 <code>모든것들을 전송</code>할 수 있기때문입니다.<br>
HTTP는 <code>HTML, TEXT, Image, 음성, 영상, 파일, JSON, XML(API)</code> 거의 모든 형태의 데이터로 전송이 가능하기 때문에 상당히 네트워크에서 중요한 부분을 차지하고 있습니다.</p>
<h1 id="http-hyper-text-transfer-protocal-heureum"><a href="#http-hyper-text-transfer-protocal-heureum" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#httphyper-text-transfer-protocal-흐름"></a> HTTP(Hyper Text Transfer Protocal) 흐름</h1>
<ul>
<li>HTTP/0.9 1991년에 GET메서드만 지원하는 형태로 나오게 되었으며 HTTP 헤더는 가지고 있지 않았습니다.</li>
<li>HTTP/1.0 1996년 메서드와 헤더가 추가 되었습니다.</li>
<li><strong>HTTP/1.1 1997년 가장 많이 사용되었으며 현재 우리에게 가장 중요한 버전이라고 할 수 있습니다.(RFC2068 -&gt; RFC2616 -&gt; RFC7230~7235(2014)) 의 스펙으로 진화되어 왔습니다.</strong></li>
<li>HTTP/2 2015년에 성능개선을 이루게 되었습니다.</li>
<li>HTTP/3 현재 개발이 진행되고 있으며 TCP대신에 UDP사용, 성능개선을 이루어 내고 있습니다.</li>
</ul>
<blockquote>
<p>여기서 가장 중요한 부분은 어디일까요?<br>
HTTP표준스펙처럼 자리잡은 HTTP/1.1 버전을 웹에서는 주로 사용하고 있습니다.</p>
</blockquote>
<h1 id="http-hyper-text-transfer-protocal-giban-peurotokol"><a href="#http-hyper-text-transfer-protocal-giban-peurotokol" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#httphyper-text-transfer-protocal-기반-프로토콜"></a> HTTP(Hyper Text Transfer Protocal) 기반 프로토콜</h1>
<ol>
<li>
<p>TCP<br>
HTTP/1.1, HTTP/2</p>
</li>
<li>
<p>UDP<br>
HTTP/3, HTTP/1.1을 주로사용하고 하고 점차적으로  HTTP/2, HTTP/3의 사용 점유율도 상승되고 있습니다.</p>
</li>
</ol>
<p>이러한것들을 실제로 웹상에서 확인해보고 싶으면, 개발자모드-네트워크도구탭에서 어떠한 HTTP프로토콜이 이용되어져 있고 기반 프로토콜은 무엇을 주로 사용하는지 확인할 수 있습니다.</p>
<h1 id="http-hyper-text-transfer-protocal-teugjing"><a href="#http-hyper-text-transfer-protocal-teugjing" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#httphyper-text-transfer-protocal-특징"></a> HTTP(Hyper Text Transfer Protocal) 특징</h1>
<ol>
<li>클라이언트-서버 구조를 가지고 있습니다.</li>
<li>무상태성 프로토콜(Stateless), 비연결성</li>
<li>HTTP 메시지</li>
<li>단순함, 확장기능을 가지고 있습니다.</li>
</ol>
<h1 id="keulraieonteu-client-seobeo-server-gujo"><a href="#keulraieonteu-client-seobeo-server-gujo" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#클라이언트client-서버server-구조"></a> 클라이언트(Client)- 서버(Server) 구조</h1>
<ul>
<li>요청(request), 응답(Response) 구조를 가지고 있습니다.</li>
<li>클라이언트는 서버에 요청을 보내고 응답을 대기합니다.</li>
<li>서버가 요청에 대한 결과를 만들어서 응답하게 됩니다.</li>
</ul>
<h1 id="musangtae-peurotokol-stateless"><a href="#musangtae-peurotokol-stateless" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#무상태-프로토콜stateless"></a> 무상태 프로토콜(Stateless)</h1>
<ul>
<li>서버가 클라이언트의 상태를 보존하지 않습니다.</li>
<li>서버의 확장성이 매우 높은 장점을 가지고 있습니다.(Scale-out)</li>
<li>클라이언트가 추가 데이터를 전송해야한다는 단점을 가지고 있습니다.</li>
</ul>
<h1 id="stateful-sangtaeyuji-vs-stateless-musangtaeseong"><a href="#stateful-sangtaeyuji-vs-stateless-musangtaeseong" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#stateful상태유지-vs-stateless무상태성"></a> Stateful(상태유지) VS Stateless(무상태성)</h1>
<p>이커머스 환경에서 제품 구매하는 예제를 들 수 있습니다. 고객이 점원에게 물품을 구매할때 도중에 상태가 변경되거나 Context가 변화하게 되어도 상태를 유지하기가 쉽습니다.(무상태성) 그에 반해 Stateful은 어떤 상태인지 계속 알고 있기때문에 중간에 상태가 변경되거나 Context가 변화가 없도록 하여야 합니다.</p>
<blockquote>
<p>차이 정리</p>
</blockquote>
<blockquote>
<p>Stateful:</p>
</blockquote>
<ul>
<li>중간에 다른상태로 변경되면 X</li>
<li>항상 같은 서버가 유지되어야 합니다.</li>
<li>서버가 터지게 되면 상태보존하는데 보존이 불가능합니다.</li>
</ul>
<blockquote>
<p>Stateless:</p>
</blockquote>
<ul>
<li>중간에 다른상태로 변경 OK</li>
<li>트래픽이 증가해도 다양한 스케일아웃 많은 서버들을 Scale-out이 가능합니다.</li>
<li>Stateless는 응답 서버를 쉽게 변경이 가능하기 때문에 무한한 서버를 증설을 할 수 있습니다.</li>
<li>트래픽이 몰리는경우가 많을 경우 정적페이지를 띄워놓고 요청 트래픽을 분산시킬 수 있는 방식으로 설계해야합니다.</li>
<li>모든것을 무상태로 설계할 수 있는 경우도 있고 없는 경우도 있습니다.</li>
<li>로그인시 브라우저쿠키나 서버세션을 이용하여 상태를 유지합니다.</li>
<li>상태유지는 최소한만 사용해야합니다.</li>
</ul>
<h1 id="biyeongyeolseong-connectionsless"><a href="#biyeongyeolseong-connectionsless" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#비연결성connectionsless"></a> 비연결성(connectionsless)</h1>
<blockquote>
<p>연결 유지 모델</p>
</blockquote>
<ul>
<li>클라이언트-서버 구조에서는 클라이언트가 요청후 TCP/IP에 연결한후 HTTP 서버요청을 진행합니다.</li>
<li>서버는 연결을 계속 유지함에 따라 서버 자원 소모가 증가될 수 있습니다.</li>
<li></li>
</ul>
<blockquote>
<p>연결 비유지 모델</p>
</blockquote>
<ul>
<li>클라이언트가 요청후 서버에게 응답을 받을때 TCP/IP 연결을 종료시켜버립니다.</li>
<li>서버는 연결을 유지하지 않고, 최소한의 자원을 유지합니다.</li>
</ul>
<h1 id="biyeongyeolseong-connectionsless-teugjing"><a href="#biyeongyeolseong-connectionsless-teugjing" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#비연결성connectionsless-특징"></a> 비연결성(connectionsless) 특징</h1>
<ul>
<li>HTTP는 기본이 연결을 유지하지 않는 모델입니다.(Default)</li>
<li>초 단위의 이하의 빠른 속도로 응답을 합니다.</li>
<li>실제 서비스에서 서비스를 사용해도 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작습니다.</li>
<li>서버 자원을 매우 효율적으로 사용할 수 있습니다.</li>
</ul>
<h1 id="biyeongyeolseong-connectionsless-hangye"><a href="#biyeongyeolseong-connectionsless-hangye" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#비연결성connectionsless-한계"></a> 비연결성(connectionsless) 한계</h1>
<ul>
<li>자원을 받을때 마다 TCP/IP 연결을 새로 맺어야합니다.(3-way-handshake 시간 증대)</li>
<li>웹 브라우저로 사이트를 요청하면 HTML뿐만 아니라 html,css,js,image files 등 많은 Resource를 다운로드 받습니다.</li>
<li>HTTP/2, HTTP/3에서 더 많은 최적화를 지원합니다.</li>
</ul>
<p>HTTP초기에는 연결,종료를 낭비가 많았는데 그 이유는 매번 요청마다 분리를 해야했기 때문입니다. 그래서 나온것이 HTTP 지속 연결(Persistent Connections)입니다.</p>
<p>지속 연결의 과정은 요청-&gt; 응답 -&gt; 유지 (내부 매커니즘으로 지속연결을 계속 진행합니다.)</p>
<blockquote>
<p>정리</p>
</blockquote>
<p>Stateless같은 경우는 동시간에 진행되는 실시간 대용량 트래픽에 매우 용이 합니다.<br>
예를 들면, 수만명의 트래픽이 들어왔다고 가정하면 Stateles 환경에 서버 요청이 많아집니다. 이에 따른 대응방식으로 정적페이지나 HTML을 먼저 렌더링 시켜준후 해당 본 요청 이벤트를 처리하는 로직으로 진행합니다.</p>
<h1 id="http-mesijigujo"><a href="#http-mesijigujo" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#http-메시지구조"></a> HTTP 메시지구조</h1>
<h2 id="http-yoceongmesiji-gujo"><a href="#http-yoceongmesiji-gujo" class="header-anchor">10.1. </a><a class="markdownIt-Anchor" href="#http-요청메시지-구조"></a> HTTP 요청메시지 구조</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. start-line 시작라인(HTTP메서드, 요청대상, HTTP Version)</span><br><span class="line">2. header 헤더(표준헤더 많음, 헤더추가도 가능함)</span><br><span class="line">3. empty line 공백라인(CRLF) - RFC7230 표준</span><br><span class="line">4. message body</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HTTP 요청메시지 예시</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. GET /search?q=hello&amp;hl=ko HTTP/1.1 (start-line)</span><br><span class="line">2. Host: www.google.com (header)</span><br><span class="line">3. (empty line)</span><br></pre></td></tr></table></figure>
<p>요청메시지도 body본문을 가질수 있습니다.</p>
<h2 id="http-eungdab-mesiji-gujo"><a href="#http-eungdab-mesiji-gujo" class="header-anchor">10.2. </a><a class="markdownIt-Anchor" href="#http-응답-메시지-구조"></a> HTTP 응답 메시지 구조</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. start-line 시작라인(HTTP버전, HTTP상태코드, 요청 및 성공)</span><br><span class="line">2. header 헤더(표준헤더 많음, 헤더추가도 가능함)</span><br><span class="line">3. empty line 공백라인(CRLF) - RFC7230 표준</span><br><span class="line">4. message body(실제 전송데이터 HTML,이미지,영상,JSON, XML 등 byte표현가능한 모든 데이터)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HTTP 응답메시지 예시</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. HTTP/1.1 200 OK (start-line)</span><br><span class="line">2. Content-Type:text/html;charset=UTF-8    (header)</span><br><span class="line">3. Content-Length: 3423    (empty line)</span><br><span class="line"></span><br><span class="line">4.(message body)</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>                  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>..<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>정리</p>
</blockquote>
<ul>
<li>HTTP1.1 기준</li>
<li>클라이언트,서버 구조</li>
<li>무상태 프로토콜(Stateless)</li>
<li>HTTP 메시지 구조</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>오버로딩(overloading)과 오버라이딩(overriding), 접근제어자(Access Modifier)</title>
    <url>/Java-20210218-overloading-overriding-java/</url>
    <content><![CDATA[<h1 id="obeoraiding-overriding"><a href="#obeoraiding-overriding" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#오버라이딩overriding"></a> 오버라이딩(Overriding)</h1>
<p>자바의 경우는 오버라이딩 시 동적바인딩되며 상위 클래스 혹은 인터페이스에 존재하는 메소드를 하위 클래스에서 필요에 맞게 재정의하는 것을 말합니다.</p>
<h1 id="obeoroding-overloading"><a href="#obeoroding-overloading" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#오버로딩overloading"></a> 오버로딩(Overloading)</h1>
<p>메소드의 이름과 return 타입은 동일하지만, 매개변수만 다른 메소드를 만드는 것을 말합니다. 오버로딩은 다른 시그니쳐를 만들며 정적바인딩시 처리되며 정적바인딩 됩니다. 즉, 상속관계에서 부모가 가진값들을 오버로딩하거나 인터페이스에서 직접 구현체를 구현해야할 경우 @Override 어노테이션으로 직접적으로 명시가 가능합니다.</p>
<h1 id="obeoraiding-overriding-vs-obeoroding-overloading"><a href="#obeoraiding-overriding-vs-obeoroding-overloading" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#오버라이딩overriding-vs-오버로딩overloading"></a> 오버라이딩(Overriding) VS 오버로딩(Overloading)</h1>
<p>오버라이딩과 오버로딩을 하나의 코드로 표현하면 다음과 같이 처리할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">overlodingoverriding</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line">        System.out.println(c.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 오버 로딩 예제</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 오버라이딩 예제</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">overriding_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">overriding_1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">overriding_1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="jeobgeunjeeoja-access-modifier"><a href="#jeobgeunjeeoja-access-modifier" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#접근제어자access-modifier"></a> 접근제어자(Access Modifier)</h1>
<blockquote>
<p>public<br>
어떤 클래스에서라도 접근이 가능합니다.</p>
</blockquote>
<blockquote>
<p>protected<br>
클래스가 정의되어 있는 해당 패키지 내 그리고 해당 클래스를 상속받은 외부 패키지의 클래스에서 접근이 가능합니다.</p>
</blockquote>
<blockquote>
<p>(default)<br>
클래스가 정의되어 있는 해당 패키지 내에서만 접근이 가능하도록 접근 범위를 제한합니다.</p>
</blockquote>
<blockquote>
<p>private<br>
정의된 해당 클래스에서만 접근이 가능하도록 접근 범위를 제한합니다.</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>overloading</tag>
        <tag>overriding</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Trapping Rain Water</title>
    <url>/Leetcode-20210118-leetcode-trapping-rain-water/</url>
    <content><![CDATA[<h1 id="leetcode-trapping-rain-water"><a href="#leetcode-trapping-rain-water" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#leetcode-trapping-rain-water"></a> <a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">leetcode Trapping Rain Water</a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>해당 문제는 릿코드 Hard 난이도 문제이며 비가 내린후 빗물의 컨테이너에 채워지는 빗물의 양을 구하는 문제입니다.</p>
<ul>
<li>(1) 왼쪽에 가장 작은 인덱스와 오른쪽 가장 큰 인덱스와 모든 빗물중에 가장 큰 인덱스도 구해줍니다. 그 이유는 왼쪽인덱스~빗물양이 가장 큰 인덱스, 오른쪽인덱스~빗물양이 가장 큰 인덱스 2가지 경우로 나누어서 계산하기 위함입니다.</li>
<li>(2) 기존에 입력으로 주어진 빗물의 크기(왼쪽 + 오른쪽)와 진행하면서 가장 큰 높이의 빗물기준으로 빗물의 크기를 구해줍니다.</li>
<li>(3) 기존의 컨테이너로 가둘 수 있는 빗물을 가둘 수 있는 최대의 크(컨테이너+빗물) - 입력으로 주어진 컨테이너의 높이를 계산해주면 최종적으로 담겨진 빗물의 크기를 알 수 있습니다.</li>
</ul>
<p>시간복잡도: O(N) 선형시간</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_trapping_rain_water_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMax = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMin = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 가장 작은 인덱스 값 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                isMin = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 연속적으로 0이 나오는 경우</span></span><br><span class="line">                <span class="keyword">if</span>(isMin)&#123;</span><br><span class="line">                    minIdx = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 0이 나오기전에 가장 작은 인덱스를 찾은 경우</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    minIdx = Math.min(minIdx, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 가장 큰 인덱스값 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=height.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                maxIdx = i;</span><br><span class="line">                isMax = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 연속적으로 0이 나온경우</span></span><br><span class="line">                <span class="keyword">if</span>(isMax)&#123;</span><br><span class="line">                    maxIdx = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 0이 나오기전에 가장 큰 인덱스를 찾은 경우</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxIdx = Math.max(maxIdx, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(minIdx + <span class="string">" "</span> + maxIdx);</span><br><span class="line">        <span class="keyword">int</span> maxHightIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 빗물중에서 가장 큰 인덱스 값 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] &gt; height[maxHightIdx])&#123;</span><br><span class="line">                maxHightIdx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 왼쪽 가장 작은 인덱스 ~ 가장 큰 인덱스까지 가장 큰 높이 기준으로 빗물 크기를 구합니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=minIdx; i&lt;maxHightIdx; i++)&#123;</span><br><span class="line">            <span class="comment">// 기존 빗물 크기의 합</span></span><br><span class="line">            leftSum += height[i];</span><br><span class="line">            <span class="comment">// 진행되면서 가장 큰 높이 빗물 기준으로 총 빗물양 구하기</span></span><br><span class="line">            h = Math.max(height[i], h);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 높이 초기화</span></span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightSum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 오른쪽 가장 큰 인덱스 ~ 가장 큰 인덱스까지 가장 큰 높이 기준으로 빗물 크기를 구합니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=maxIdx; i&gt;maxHightIdx; i--)&#123;</span><br><span class="line">            rightSum += height[i];</span><br><span class="line">            h = Math.max(height[i], h);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum + <span class="string">" "</span> + leftSum + <span class="string">" "</span>+ rightSum);</span><br><span class="line">        <span class="keyword">return</span> sum-(leftSum + rightSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>완전탐색</tag>
        <tag>릿코드</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Generic(제네릭)</title>
    <url>/Java-20210218-generic-java/</url>
    <content><![CDATA[<h1 id="generic-jenerig-iran"><a href="#generic-jenerig-iran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#generic제네릭이란"></a> Generic(제네릭)이란?</h1>
<p>제네릭은 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입체크를 해주는 기능이다. 객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어듭니다.</p>
<p>타입 안정성을 높인다는 것은 의도 하지 않은 타입의 객체가 저장되는 것을 막고 저장된 객체를 꺼내올 때 원래의 타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여줄 수 있습니다.</p>
<p>즉,  타입 안정성을 제공하며 타입체크와 형변환을 생략할 수 있습니다. 성능상으로도 타입을  체크할 필요가 없기때문에 이점을 가지고 있습니다.</p>
<blockquote>
<p>제네릭을 사용하지않으면 불편한점</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaGrammar.Generic;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic_blog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List arrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arrList.add(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> num = (<span class="keyword">int</span>) arrList.get(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>제네릭을 사용하면 좋은점</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericType</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이런식으로 제네릭을 선언해놓으면 타입명시하지 않아도 필요할때마다 형을 반환시킬 수 있게됩니다. 타입의 최소화를 기대할 수 있습니다.</p>
<blockquote>
<p>타입 인자</p>
</blockquote>
<table>
<thead>
<tr>
<th>타입</th>
<th style="text-align:center">내용</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;T&gt;</code></td>
<td style="text-align:center">Type</td>
</tr>
<tr>
<td><code>&lt;E&gt;</code></td>
<td style="text-align:center">Element</td>
</tr>
<tr>
<td><code>&lt;K&gt;</code></td>
<td style="text-align:center">Key</td>
</tr>
<tr>
<td><code>&lt;N&gt;</code></td>
<td style="text-align:center">Number</td>
</tr>
<tr>
<td><code>&lt;V&gt;</code></td>
<td style="text-align:center">Value</td>
</tr>
<tr>
<td><code>&lt;R&gt;</code></td>
<td style="text-align:center">Result</td>
</tr>
</tbody>
</table>
<h1 id="generic-interface"><a href="#generic-interface" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#generic-interface"></a> Generic Interface</h1>
<p>인터페이스를 선언하여 구현체를 해당클래스에서 타입을 지정할 수도 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function">T <span class="title">getTypeNumber</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenericType</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        T t;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.t = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceClass</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getTypeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.num; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="generic-extends"><a href="#generic-extends" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#generic-extends"></a> Generic Extends</h1>
<p>상속관게에서 제네릭을 활용하여 &lt;T extends Class명&gt; 형식으로 해당 타입에 맞게 객체를 핸들링을 진행할 수도 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fruit&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple1</span> <span class="keyword">extends</span> <span class="title">Fruit1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Apple&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grape1</span> <span class="keyword">extends</span> <span class="title">Fruit1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grape&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toy1</span> <span class="keyword">extends</span> <span class="title">Fruit1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Toy&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitBox1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Box1&lt;Fruit1&gt; fruitBox1 = <span class="keyword">new</span> Box1&lt;Fruit1&gt;();</span><br><span class="line">        Box1&lt;Apple1&gt; fruitBox2 = <span class="keyword">new</span> Box1&lt;Apple1&gt;();</span><br><span class="line">        Box1&lt;Grape1&gt; fruitBox3 = <span class="keyword">new</span> Box1&lt;Grape1&gt;();</span><br><span class="line">        Box1&lt;Toy1&gt; fruitBox4 = <span class="keyword">new</span> Box1&lt;Toy1&gt;();</span><br><span class="line">        <span class="comment">//Box&lt;Grape&gt; fruitBox5 = new Box&lt;Apple&gt;();        // 에러타입 불일치</span></span><br><span class="line"></span><br><span class="line">        fruitBox1.add(<span class="keyword">new</span> Fruit1());</span><br><span class="line">        fruitBox1.add(<span class="keyword">new</span> Apple1());     <span class="comment">// 타입 실패</span></span><br><span class="line">        System.out.println(<span class="string">"fruitBox1 = "</span> + fruitBox1);</span><br><span class="line">        fruitBox2.add(<span class="keyword">new</span> Apple1());</span><br><span class="line">        fruitBox2.add(<span class="keyword">new</span> Apple1());</span><br><span class="line">        <span class="comment">// fruitBox2.add(new Toy());      apple만 담을 수 있음.</span></span><br><span class="line">        System.out.println(<span class="string">"fruitBox2 = "</span> + fruitBox2);</span><br><span class="line"></span><br><span class="line">        fruitBox4.add(<span class="keyword">new</span> Toy1());</span><br><span class="line">        <span class="comment">// fruitBox4.add(new Apple());      toy만 담을 수 있음</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"fruitBox4 = "</span> + fruitBox4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box1</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Fruit1</span>&gt;</span>&#123;</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(T item)</span></span>&#123;</span><br><span class="line">        list.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Box&#123;"</span> +</span><br><span class="line">                <span class="string">"list="</span> + list +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="generic-waildeukadeu"><a href="#generic-waildeukadeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#generic-와일드카드"></a> Generic 와일드카드</h1>
<ul>
<li>? extends T 와일드 카드의 상한 제한 - T와 그 자손들만 가능합니다.</li>
<li>? super T 와일드카드 하한 제한 - T와 그 조상들만 가능합니다.</li>
<li>
<?>모든 타입가능 ? extends Object와 같은 의미를 가지고 있습니다.
</li>
</ul>
<p>T로 전달되는 이름은 Eatable Interface를 직접적으로, 혹은 간접적으로 구현한 이름만 올 수 있습니다. 즉, 제네릭 클래스의 타입 인자를 인터페이스로 제한을 할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaGrammar.Generic;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ? extends T 와일드 카드의 상한 제한 - T와 그 자손들만 가능</span></span><br><span class="line"><span class="comment"> * ? super T 와일드카드 하한 제한 - T와 그 조상들만 가능</span></span><br><span class="line"><span class="comment"> * &lt;?&gt;모든 타입가능 ? extends Object와 같은 의미</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit2</span> <span class="keyword">implements</span> <span class="title">Eatable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fruit&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple2</span> <span class="keyword">extends</span> <span class="title">Fruit2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Apple&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grape2</span> <span class="keyword">extends</span> <span class="title">Fruit2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grape&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toy2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Toy&#123;&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 여기에 &amp;기호로 T타입이랑 연결한다. Eatable을 구현한 클래스만 타입 매개변수 T에 대입될 수 있다.</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Eatable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitBox2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Box2&lt;Fruit2&gt; fruitBox1 = <span class="keyword">new</span> Box2&lt;Fruit2&gt;();</span><br><span class="line">        Box2&lt;Apple2&gt; fruitBox2 = <span class="keyword">new</span> Box2&lt;Apple2&gt;();</span><br><span class="line">        Box2&lt;Grape2&gt; fruitBox3 = <span class="keyword">new</span> Box2&lt;Grape2&gt;();</span><br><span class="line"><span class="comment">//        Box2&lt;Toy2&gt; fruitBox4 = new Box2&lt;Toy2&gt;();</span></span><br><span class="line">        <span class="comment">//Box&lt;Grape&gt; fruitBox5 = new Box&lt;Apple&gt;();        // 에러타입 불일치</span></span><br><span class="line"></span><br><span class="line">        fruitBox1.add(<span class="keyword">new</span> Fruit2());</span><br><span class="line">        fruitBox1.add(<span class="keyword">new</span> Apple2());     <span class="comment">// 타입 실패</span></span><br><span class="line">        System.out.println(<span class="string">"fruitBox1 = "</span> + fruitBox1);</span><br><span class="line">        fruitBox2.add(<span class="keyword">new</span> Apple2());</span><br><span class="line">        fruitBox2.add(<span class="keyword">new</span> Apple2());</span><br><span class="line">        <span class="comment">// fruitBox2.add(new Toy());      apple만 담을 수 있음.</span></span><br><span class="line">        System.out.println(<span class="string">"fruitBox2 = "</span> + fruitBox2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//fruitBox4.add(new Toy2());</span></span><br><span class="line">        <span class="comment">// fruitBox4.add(new Apple());      toy만 담을 수 있음</span></span><br><span class="line">        <span class="comment">//System.out.println("fruitBox4 = " + fruitBox4);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Frit의 자손이면서 Eatable을 구현한 클래스만 타입 매개변수 T에 대입될 수 있다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box2</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Fruit2</span> &amp; <span class="title">Eatable</span>&gt;</span>&#123;</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(T item)</span></span>&#123;</span><br><span class="line">        list.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Box&#123;"</span> +</span><br><span class="line">                <span class="string">"list="</span> + list +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="generic-jehan"><a href="#generic-jehan" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#generic-제한"></a> Generic 제한</h1>
<ul>
<li>타입변수는 인스턴스 변수로 간주되기 떄문에 모든 객체에 대해 동일하게 동작해야하는 static멤버에 타입 변수를 사용할 수 없습니다.</li>
<li>제네릭 배열 타입의 참조변수는 선언할 수 있으나 제네릭 배열을 생성하는 것은 불가능합니다.</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>제네릭</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Annotation(어노테이션)</title>
    <url>/Java-20210218-annotation-java/</url>
    <content><![CDATA[<h1 id="java-annotation"><a href="#java-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#java-annotation"></a> Java Annotation</h1>
<p>Java 어노테이션은 JEE5부터 추가된 문법이며 기본적으로 인터페이스입니다. 사전적정의로는 주석이라는의미를 가지고 있고 특수한의미를 부여하거나 기능을 주입하면서 컴파일타임 시점이나 런타임시점에 해석됩니다. 기존의 xml의 불편함을 개선하기위해서 나오게된 <code>Annotation(어노테이션)</code> 이라고생각하면 됩니다.</p>
<h1 id="built-in-annotation"><a href="#built-in-annotation" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#built-in-annotation"></a> Built-in Annotation</h1>
<p>Java내에 내장되어 있는 어노테이션을 Built-in Annotation이라 불리어오며 주로  컴파일러에게 정보를 제공하게 됩니다.</p>
<blockquote>
<p>@Override</p>
</blockquote>
<p>메서드앞에 붙일수 있으며 현재 메서드가 슈퍼클래스의 메소드를 오버라이드한 메소드임을 명시합니다.</p>
<blockquote>
<p>@Deprecated</p>
</blockquote>
<p>annotation으로 타입, 필드, 메소드 등에 사용되며 @Deprecated 표시 되어 있는 메소드나 필드를 사용하면 빌드할 때 Warning 메시지를 보여주게됩니다. 즉, 컴파일러에게 이 메소드는 없어질 예정임을 명시합니다.</p>
<blockquote>
<p>@SupressWarning</p>
</blockquote>
<p>컴파일러에게 전달하여 경고를 제거합니다.</p>
<blockquote>
<p>FunctionalInterface</p>
</blockquote>
<p>컴파일러에게 다음의 인터페이스는 함수형 인터페이스라는것을 명시합니다.</p>
<h1 id="meta-annotation"><a href="#meta-annotation" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#meta-annotation"></a> Meta-Annotation</h1>
<p>어노테이션의 동작 대상을 결정하는 어노테이션이며 어노테이션을 정의할때 주로 사용합니다.</p>
<blockquote>
<p>@Target</p>
</blockquote>
<p>어노테이션이 적용가능한 대상을 지정하는데 사용되며 여러값을 {} 괄호로 사용할 수 있다.</p>
<blockquote>
<p>@Retention</p>
</blockquote>
<p>SOURCE::, CLASS::, RUNTIME:: 세가지 유지정책으로 사용할 수 있는데 어노테이션이 유지되는 기간을 지정하는데 사용합니다.</p>
<blockquote>
<p>@Documented</p>
</blockquote>
<p>vavadoc으로 작성한 문서에 포함되도록 할 때 사용하는 어노테이션입니다.</p>
<blockquote>
<p>@Inherited</p>
</blockquote>
<p>어노테이션이 자손 클래스에도 상속되도록 하는 어노테이션입니다</p>
<blockquote>
<p>@Native</p>
</blockquote>
<p>네이티브 메서드에 의해 참조되는 상수필드에 붙이는 어노테이션입니다.</p>
<blockquote>
<p>네이티브 메서드란?</p>
</blockquote>
<p>JVM이 설치된 OS의 메서드를 말한다. 네이티브 메서드는 보통 C언어로 작성되어 있고 자바에서는 메서드의 선언부만 정의하고 구현은 하지 않는다.</p>
<h1 id="custom-annotation"><a href="#custom-annotation" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#custom-annotation"></a> Custom Annotation</h1>
<blockquote>
<p>Maker Annotation</p>
</blockquote>
<p>요소가 한개도 없으며 단순히 표식으로 사용되는 어노테이션(의미전달)</p>
<blockquote>
<p>Single-value Annotation</p>
</blockquote>
<p>요소로 단일 변수만을 갖는 어노테이션입니다.</p>
<blockquote>
<p>Full Annotaion</p>
</blockquote>
<p>요소로 둘 이상의 변수를 갖는 어노테이션으로, 데이터를 배열 안에 key-value의 형태로 전달합니다.</p>
<h1 id="eonoteisyeon-gwanryeon-jeongri"><a href="#eonoteisyeon-gwanryeon-jeongri" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#어노테이션-관련-정리"></a> 어노테이션 관련 정리</h1>
<p><a href="https://gwanhyeon.github.io/Spring-20210114-spring-annotation/">Spring @Annotation(어노테이션)</a><br>
<a href="https://gwanhyeon.github.io/Spring-20210114-spring-lombok-annotation/">Spring Lombok @Annotation(어노테이션)</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>어노테이션</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collection(컬렉션)</title>
    <url>/Java-20210217-collection-java/</url>
    <content><![CDATA[<h1 id="java-collection-keolregsyeon"><a href="#java-collection-keolregsyeon" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#java-collection컬렉션"></a> Java Collection(컬렉션)</h1>
<p>Java Collection(컬렉션)은 크게  <code>List, Map, Set</code> 인터페이스를 기준으로 구현체가 존재하며 <code>Stack, Queue</code> 인터페이스도 존재하게 됩니다.</p>
<blockquote>
<p>컬렉션이 배열과 다른점?</p>
</blockquote>
<p>컬렉션과 배열은 둘 다 개체에 대한 참조를 보유하고 그룹으로 관리 할 수 ​​있다는 점에서 유사합니다. 그러나 Array와 달리 컬렉션은 인스턴스화 할 때 특정 용량을 할당 할 필요가 없습니다. 컬렉션은 개체를 추가하거나 제거 할 때 자동으로 크기를 늘리거나 줄일 수 있습니다. 컬렉션은 int, long 또는 double과 같은 기본 데이터 유형 요소 (기본 유형)를 보유 할 수 없습니다. 대신 Integer, Long 또는 Double과 같은 래퍼 클래스를 보유합니다.</p>
<blockquote>
<p>컬렉션의 특징</p>
</blockquote>
<p>Java의 거의 모든 컬렉션은 java.util.Collection 인터페이스에서 구현되며 컬렉션은 모든 컬렉션의 기본 부분을 정의합니다.</p>
<p>인터페이스는 컬렉션에 추가 및 제거하기위한 add() 및 remove() 메서드를 각각 지정합니다. 컬렉션을 컬렉션에있는 모든 요소의 간단한 배열로 변환하는 toArray() 메서드도 필요합니다.</p>
<p>마지막으로 contains () 메서드는 지정된 요소가 컬렉션에 있는지 확인합니다. Collection 인터페이스는 java.lang.Iterable의 하위 인터페이스이므로 모든 Collection이 for-each 문의 대상이 될 수 있습니다.<br>
즉, Iterable 인터페이스는 for-each 문에서 사용하는 iterator () 메서드를 제공합니다.</p>
<p>모든 컬렉션에는 컬렉션의 모든 요소를 ​​통과하는 반복문으또한 컬렉션은 제네릭입니다. 모든 컬렉션을 작성하여 모든 클래스를 저장할 수 있습니다. &lt;&gt;는 컬렉션이 보유하는 유형을 지정하는 유형 인수를 보유 할 수 있습니다.</p>
<h1 id="list-interface"><a href="#list-interface" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#list-interface"></a> List Interface</h1>
<p>순서가 있는 데이터의 집합으로 데이터의 중복을 허용합니다</p>
<p>List 인터페이스는 ArrayList의 구현체를 포함하며 직접 커스터마이징을 통하여 사용자가 정의하여 사용이 가능합니다. 그 외에는 LinkedList 구현체가 존재합니다.</p>
<h1 id="map-interface"><a href="#map-interface" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#map-interface"></a> Map Interface</h1>
<p>키(Key), 값(Value)의 쌍으로 이루어진 데이터의 집합으로,순서는 유지되지 않으며 키(Key)의 중복을 허용하지 않으나 값(Value)의 중복은 허용합니다.</p>
<p>Map의 대표적인 구현체로는 HashMap이 존재하며 Map은 &lt;Key, Value&gt;의 구조로 이루어져있고 구체적인 내부 구현은 HashTable과 일치합니다.<br>
Map같은 경우에는 Key에 중복값을 저장하지 않으며 순서를 보장하지 않지만, LinkedHashMap을 사용하면 Key의 순서를 보장시킬 수 있습니다.</p>
<h1 id="set-interface"><a href="#set-interface" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#set-interface"></a> Set Interface</h1>
<p>Set은 순서를 유지하지 않는 데이터의 집합으로 데이터의 중복을 허용하지 않는 인터페이스 입니다.<br>
Set의 대표적인 구현체로는 HashSet이 존재하며 Value의 중복값을 저장하지 않습니다. 특히, 단일된 값의 중복값을 저장하지 않을때 많이 사용되며 순서를 보장하지 않습니다. 유사하게 TreeSet이라는 구현체는 이진탐색트리를 이용하여 구현되어있습니다.</p>
<p>Map과 유사하게 LinkedHashSet을 사용하여 순서를 보장해줄 수 있습니다.</p>
<h1 id="stack-amp-queue-interface"><a href="#stack-amp-queue-interface" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#stackqueue-interface"></a> Stack&amp;Queue Interface</h1>
<p>Stack 객체는 직접 new 키워드로 사용할 수 있으며, Queue 인터페이스는 JDK 1.5 부터 LinkedList에 new 키워드를 적용하여 사용할 수 있습니다.</p>
<blockquote>
<p>Stack Interface</p>
</blockquote>
<p>스택은 java.util.Stack을 사용하여 생성됩니다. 스택은 스택에 새 객체를 넣어주고 push () 스택에서 객체를 가져 오는 pop () 메서드를 제공합니다. 스택은 LIFO (last-in-first-out)에 따라 객체를 반환합니다. 예를 들어 스택에서 가장 최근에 배치 된 객체가 먼저 반환됩니다.</p>
<p>그리고, java.util.Stack은 Java에서 제공하는 스택의 표준 구현입니다. Stack 클래스는 LIFO (last-in-first-out) 객체 스택을 나타냅니다. 벡터를 스택으로 처리 할 수있는 다섯 가지 연산으로 java.util.Vector 클래스를 확장합니다.</p>
<blockquote>
<p>queue Interface</p>
</blockquote>
<p>java.util.Queue 인터페이스는 요소가 삽입 된 순서대로 저장되는 큐 데이터 구조를 정의합니다. 새로운 추가 사항은 줄 끝으로 이동하고 요소는 앞쪽에서 제거됩니다. 선입 선출 시스템으로 구성됩니다.</p>
<p>인터페이스는 java.util.LinkedList, java.util.ArrayDeque 및 java.util.PriorityQueue에 의해 구현됩니다. 또한, LinkedList는 List 인터페이스도 구현하고 하나로 사용할 수도 있습니다.</p>
<blockquote>
<p>deque Interface</p>
</blockquote>
<p>java.util.Queue 인터페이스는 java.util.Deque 하위 인터페이스에 의해 확장됩니다. Deque는 양방향 대기열을 만듭니다. 일반 대기열에서는 뒤쪽에 삽입하고 앞쪽에 제거 만 허용하는 반면, 데크를 사용하면 앞뒤 모두에서 삽입 또는 제거가 가능합니다. deque는 앞뒤로 또는 한 번에 둘 다 사용할 수있는 대기열과 같습니다. 또한 순방향 및 역방향 반복자를 모두 생성 할 수 있습니다. Deque 인터페이스는 java.util.ArrayDeque 및 java.util.LinkedList에 의해 구현됩니다.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JVM(Java Virtual Machine) & GC(Garbage Collection)</title>
    <url>/Java-20210217-jvm-garbage-collection/</url>
    <content><![CDATA[<h1 id="jvm-java-virtual-machine"><a href="#jvm-java-virtual-machine" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#jvmjava-virtual-machine"></a> JVM(Java Virtual Machine)</h1>
<p>JVM을 살펴보기전에 Java에서 사용되는 용어들을 정리하고 진행하겠습니다.</p>
<ul>
<li>
<p>JDK: Java SE Development Kit<br>
자바 개발 키트, JRE+컴파일러, 디버거 등의 개발도구</p>
</li>
<li>
<p>JRE: Java SE Runtime Environment<br>
자바 구동 환경, JVM+시스템 라이브러리</p>
</li>
<li>
<p>JVM: Java Virtual Machine<br>
자바 가상 머신, 운영체제 독립적으로 동작하기 위해 필요</p>
</li>
<li>
<p>IDE: Integrated Development Environment<br>
통합 개발 환경</p>
</li>
<li>
<p>API: Application Programming Interface<br>
JAVA에서 기본으로 제공하는 클래스들의 모음</p>
</li>
</ul>
<blockquote>
<p>JVM(Java Virtual Machine)이란</p>
</blockquote>
<p>Java Virtual Machine이며 Java의 바이트코드를 실행할 수 있는 주체이며 운영체제위에서 동작하는 프로세스로 Java코드를 컴파일해서 얻은 Byte코드를 운영체제가 이해할 수 있는 기계어로 바꾸어주는 역할을 진행합니다.</p>
<blockquote>
<p>JVM 동작과정</p>
</blockquote>
<p><img src="https://www.guru99.com/images/1/2.png" alt="JVM"></p>
<p>JVM은 총 4가지로 구성되어지는데 Class Loader, Execution Engine, Garbage Collector, Runtime Data Area로 구성되어집니다.</p>
<p>(1) Java에서 소스코드를 작성하면 <code>.java파일이 생성</code>되는데 이 자바파일을 Java Complier가 Compile을 진행하면 <code>.class 파일을 생성</code>시킵니다. 여기서 .class파일은 바이트 코드입니다.</p>
<p>(2) 클래스 파일들을  바탕으로 <code>Class Loader</code>는 JVM이 운영체제로 부터 할당된 메모리영역인 <code>Runtime Data Area</code>로 적재하는 역할을 진행하게됩니다.</p>
<p>(3) 이제 <code>Execution Engine</code>에 의해 Class Loader에 의해 메모리에 적재된 클래스 바이트코드를 기계어로 변경해 명령어 단위로 실행하는 역할을 진행합니다.<br>
명령어 실행 방식: 인터프리터(Interpreter) - 한줄한줄 읽어들이는 방식, JIT(Just-in-Time) 컴파일러 이용 - 전체바이트 코드를 네이티브 코드로 변경하여 실행 성능을 높이는 방식</p>
<p>(4) <code>Garbage Collector</code>는 Heap 메모리 영역에 생성된 객체중에 참조되지 않은 객체들을 탐색후 제거하는 역할을 진행합니다.<br>
또 다른 특징은 GC가 수행되는 동안 GC를 수행하는 쓰레드가 아닌 모든 쓰레드가 일시정지되며 Full GC가 일어나서 모든쓰레드가 정지된다면 장애로 이어질 수 있는 치명적인 단점이 발생합니다.</p>
<p>(5) <code>Runtime Data Area</code>는 JVM의 메모리 영역으로 자바 애플리케이션을 실행할때 사용하는 데이터들을 적재하는 영역이 됩니다.</p>
<blockquote>
<p>Runtime Data Area 구조</p>
</blockquote>
<ul>
<li>(1) Method Area</li>
</ul>
<p>클래스 멤버 변수이름, 데이터타입, 접근제어자 정도, 메소드이름, 리턴타입, 파라미터, 접근제어자 정보, static 변수</p>
<ul>
<li>(2) Heap Area</li>
</ul>
<p>객체의 배열이 생성되는 영역(new Keyword)이며 메소드영역에 로드된 클래스만 생성이 가능하고 Garbage Collector가 참조되지 않는 메모리를 확인하고 제거하는 영역(객체생성시 new부분은 Stack Area에 참조값을 가진다.)</p>
<ul>
<li>(3) Stack area</li>
</ul>
<p>지역 변수, 파라미터, 리턴 값, 연산에 사용되는 임시 값등이 생성되는 영역(객체생성시 선언부분)</p>
<ul>
<li>(4) PC(Program Counter) Register</li>
</ul>
<p>Thread 생성시 마다 생성되는 영역으로 주소와 명령어 저장하는 영역</p>
<p>(5)Native method stack<br>
자바 이외의 언어 네이티브 코드를 위한 메모리영역이며 C/C++등을 예로 들 수 있다.</p>
<p>스택영역은 공유되지 않으며 힙같은경우는 스레드로 공유가 가능합니다</p>
<blockquote>
<p>참조링크</p>
</blockquote>
<p><a href="https://gwanhyeon.github.io/OS-20201116-OS-Process-Thread/">Thread &amp; Process</a></p>
<h1 id="gc-garbage-collector"><a href="#gc-garbage-collector" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#gcgarbage-collector"></a> GC(Garbage Collector)</h1>
<p><img src="https://dexvis.files.wordpress.com/2012/05/jvmlayout1.png" alt="GC"></p>
<p>Heap Area는 GC의 주요 대상이며 힙 영역은 eden, survivor1, survivor2, old, permanent로 구성이 되어집니다. 이렇게 힙 영역이 나누어진 이유는 효율성 때문입니다.</p>
<blockquote>
<p>GC의 종류</p>
</blockquote>
<p>Minor GC, Major GC</p>
<blockquote>
<p>GC의 특징</p>
</blockquote>
<ul>
<li>Minor GC</li>
</ul>
<p>최초의 객체가 생성되면 Eden영역에 생성이 되며 Eden영역에 객체가 가득차게되면 첫번째 GC가 일어나게됩니다. 그리고 survivor1 영역에 Eden 영역의 메모리가 그대로 복사되며 survivor1 영역을 제외한 다른 영역의 객체를 제거하게 됩니다.</p>
<p>Eden영역과 survivor1영역이 메모리에 가득차게 되면 Eden영역에 생성된 객체와 survivor1에 생성된 객체중에 참조되고 있는 객체가 있는지 검사하게 됩니다.</p>
<p>참조되고 있지 않은 객체는 내버려두고 참조되는 객체만 survivor2에 복사하여 진행합니다. 그리고 survivor2 영역을 제외한 다른 영역의 객체들을 제거합니다.</p>
<ul>
<li>Major GC(Full GC)<br>
Old영역에서 일어나는 GC이며 old영역에 있는 모든 객체들을 검사하여 참조되고 있는지를 확인합니다. 그리고 참조되지 않는 객체들을 모아 한꺼번에 제거를 진행합니다.(Minor GC에 비해 비용이 많이 들고 GC를 제외한 쓰레드 중지)</li>
</ul>
<blockquote>
<p>참조<br>
Major GC는 참조가 없는 객체들을 표시하고 그 해당 객체들을 모두제거하게됩니다. 그리고 Heap 메모리 영역에 비어진 메모리들의 값을 재 구성을위하여 쓰레드를 중지시키는 원리입니다.</p>
</blockquote>
<blockquote>
<p>reference</p>
</blockquote>
<p><a href="https://d2.naver.com/helloworld/1230" target="_blank" rel="noopener">https://d2.naver.com/helloworld/1230</a><br>
<a href="https://jeong-pro.tistory.com/148" target="_blank" rel="noopener">https://jeong-pro.tistory.com/148</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 빈(Bean)과 의존관계, DI(Dependency Injection)</title>
    <url>/Spring-20210117-spring-dependency-injection/</url>
    <content><![CDATA[<h1 id="seupeuring-keonteineo-ioc-jeeo-banjeon-inversion-of-control-keonteineo"><a href="#seupeuring-keonteineo-ioc-jeeo-banjeon-inversion-of-control-keonteineo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#스프링-컨테이너-ioc제어-반전-inversion-of-control-컨테이너"></a> 스프링 컨테이너, IoC(제어 반전 Inversion of control) 컨테이너</h1>
<p><code>스프링 Bean과 DI(Dependency Injection)의 개념</code>에 대해서 살펴보기전에 <code>스프링 컨테이너(IoC)의 특징</code>을 살펴보겠습니다.</p>
<ul>
<li>
<p>스프링 애플리케이션에서는 오브젝트의 생성과 관계설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 독립된 컨테이너가 담당하게 됩니다. 컨테이너가 코드 대신 오브젝트에 대한 제어권 을 갖기때문에 IoC라고 부릅니다. <code>즉, 스프링컨테이너라는 것은 IoC컨테이너와 같은 말로 쓰여집니다.</code></p>
</li>
<li>
<p><code>스프링 컨테이너는 DI(Dependency Injection)보다 많은 일들을 담당</code>하게 됩니다. 예를 들면,<br>
DI를 위한 빈 팩토리에 엔터프라이즈 애플리케이션을 개발하는 데 필요한 여러 가지 컨테이너 기능을 추가한 것을 애플리케이션 컨텍스트를 관리하게 됩니다.</p>
</li>
<li>
<p>스프링의 빈 팩토리와 애플리케이션 컨텍스트는 각각 기능을 <code>대표하는 BeanFactory와 ApplicationContext라는 두 개의 인터페이스</code>로 정의 되어있습니다.</p>
</li>
<li>
<p>ApplicationContext 인터페이스는 BeanFactory 인터페이스를 상속한 서브 인터페이스 입니다.</p>
</li>
</ul>
<h1 id="di-dependency-injection"><a href="#di-dependency-injection" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#didependency-injection"></a> DI(Dependency Injection)</h1>
<p>스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 객체 의존관계를 외부에서 넣어주는 것을 <code>DI (Dependency Injection), 의존성 주입</code>이라 합니다.</p>
<h1 id="seupeuringbingwa-yijongwangye"><a href="#seupeuringbingwa-yijongwangye" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#스프링빈과-의존관계"></a> 스프링빈과 의존관계</h1>
<p>컨트롤러와 서비스에 대한 레포지토리를 만들때 <code>@Autowired가 있으면 스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 넣어줍니다.</code> 그렇게 객체 의존관계를 외부에서 넣어주는것을 <code>DI(Dependency Injetion)</code>이라 하며 이전 테스트 에서는 개발자가 직접 주입을 시켰지만 이제는 <code>@autowired에 의해 스프링이 주입</code>해줍니다.</p>
<blockquote>
<p>스프링 빈이 등록되어 있지 않다면?</p>
</blockquote>
<p>만약 컨트롤러와 서비스간의 스프링 빈이 등록되어 있지 않다면 <code>@Controller가 스프링빈</code>으로 자동등록해주거나 직접 자바코드로 직접 스프링빈을 등록할 수 있습니다. 그 이유는 <code>@Controller에 포함되어있는 @Component 어노테이션이 빈으로 등록</code>을 해주기 때문입니다. 그 외는 <code>SpringConfig라는 설정파일을 만들어서 직접 자바코드로 스프링빈</code>을 등록하게 할 수 있다.</p>
<h1 id="keomponeonteu-seukaenyi-weonri"><a href="#keomponeonteu-seukaenyi-weonri" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#컴포넌트-스캔의-원리"></a> 컴포넌트 스캔의 원리</h1>
<blockquote>
<p>컴포넌트 스캔은 어떤 원리를 가지고 있을까요?</p>
</blockquote>
<p>@Component 애노테이션이 있으면 스프링빈으로 자동등록 됩니다.바로 @Controller가 스프링빈으로 등록된 이유도 컴포넌트 스캔때문이라고 할 수 있습니다.</p>
<p>@Component을 포함하는 애노테이션은 다음과 같습니다. <code>@Controller, @Service @Repository가 있습니다.</code> 즉, <code>스프링 빈으로 자동등록</code>된다는 말입니다.</p>
<p>결론, 생성자에 @Autowired를 사용하면 객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입해줍니다. 생성자가 1개만 있으면 @Autowired는 생략이 가능합니다.</p>
<p>스프링은 스프링 컨테이너에서 스프링 빈을 등록할 때, 기본적으로 <code>싱글톤으로 등록합니다(유일하게 하나만 등록해서 공유하고) 같은 스프링 빈이면 모두 같은 인스턴스</code>이다. 싱글톤이 아니게 설정할 수 있지만, 특별한 경우 제외하면 대부분 싱글톤을 사용합니다.</p>
<h1 id="di-dependency-injection-juib"><a href="#di-dependency-injection-juib" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#didependency-injection-주입"></a> DI(Dependency Injection) 주입</h1>
<p><code>DI주입</code>은 <code>필드주입, setter주입, 생성자 주입 총 3가지 방법</code>이 있습니다.</p>
<p>의존관계가 실행중 동적으로 변하는 경우는 거의 없기때문에 생성자 주입을 통한 DI주입을 권장합니다. DI주입시 주의사항은 @Autowired를 통한 DI는 Controller, Service등과 같이 스프링이 관리하는 객체에서만 동작하게 됩니다. <code>스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작되지 않습니다.</code></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>DI</tag>
        <tag>컴포넌트 스캔</tag>
      </tags>
  </entry>
  <entry>
    <title>Network 웹 브라우저의 요청 흐름</title>
    <url>/Network-20210115-network-05-web-browser-request-flow/</url>
    <content><![CDATA[<h1 id="web-beuraujeo-yoceong-heureum"><a href="#web-beuraujeo-yoceong-heureum" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#웹-브라우저-요청-흐름"></a> 웹 브라우저 요청 흐름</h1>
<p>웹 브라우저에 대한 요청흐름에 대해서 살펴보겠습니다. 예시로 된 IP이기때문에 실제와 같지 않습니다.<br>
웹브라우저: 127.0.0.1<br>
구글서버: 127.0.0.2<br>
요청 URL: <code>https://www.google.com:443/search?q=google&amp;oq=google</code></p>
<blockquote>
<p>다음과 같이 웹브라우저와 구글서버 IP, 요청 URL이 주어졌다고 가정하면 어떤일이 발생하게 될까요?</p>
</blockquote>
<ol>
<li>웹브라우저가 요청 URL에 접근을 요청합니다.</li>
<li>DNS(Domain Name System)에서 해당되는 DNS의 IP를 조회해옵니다.</li>
<li>조회해 온 127.0.0.2 IP를 바탕으로 HTTP 요청 메시지를 생성합니다.</li>
</ol>
<ul>
<li>HTTP 요청 메시지</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">GET /search?q=google&amp;oq=google HTTP/1.1</span><br><span class="line">Host:www.google.com</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>HTTP 요청 메시지를 바탕으로 HTTP 메시지를 웹 브라우저상에 전송합니다.</li>
</ol>
<h1 id="http-mesiji-jeonsonggwajeong"><a href="#http-mesiji-jeonsonggwajeong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#http-메시지-전송과정"></a> HTTP 메시지 전송과정</h1>
<ol>
<li>웹 브라우저가 HTTP 메시지를 생성합니다.</li>
<li>SOCKET 라이브러리를 통해 해당 HTTP 메시지를 전달합니다.<br>
TCP/IP를 연결(IP,PORT)에 대해서 데이터 전달을 진행합니다.</li>
<li>TCP/IP 패킷을 생성하여, HTTP 메시지를 포함시킵니다.</li>
<li>네트워크인터페이스인 LAN 장비를 통하여 인터넷으로 해당 메시지와 데이터를 전송합니다.</li>
<li>최종적으로 <a href="http://google.com" target="_blank" rel="noopener">google.com</a>(127.0.0.2) 서버에 도달하게 됩니다.</li>
</ol>
<h1 id="paekis-saengseong"><a href="#paekis-saengseong" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#패킷-생성"></a> 패킷 생성</h1>
<blockquote>
<p>TCP/IP패킷은 어떤 구조로 구성되어있을까요?</p>
</blockquote>
<p>출발지 IP, 출발지 PORT, 목적지 IP, 목적지 PORT, 전송 데이터, 그 외 기타의 설정들이 담겨져 있습니다.<br>
즉, 출발지 IP, 출발지 PORT, 목적지 IP, 목적지 PORT는 TCP/IP 패킷으로 구성되어 있으며 HTTP메시지는 TCP/IP 패킷안에 HTTP 메시지가 포함되어 있는 형태로 볼 수 있습니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># TCP/IP 패킷(상위 개념)</span><br><span class="line">----------------------------</span><br><span class="line">출발지 IP,PORT</span><br><span class="line">목적지 IP,PORT</span><br><span class="line">----------------------------</span><br><span class="line"># HTTP 메시지(하위 개념)</span><br><span class="line">GET /search?q=google&amp;oq=google HTTP/1.1</span><br><span class="line">Host:www.google.com</span><br><span class="line">----------------------------</span><br></pre></td></tr></table></figure>
<h1 id="http-eungdab-mesiji"><a href="#http-eungdab-mesiji" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#http-응답-메시지"></a> HTTP 응답 메시지</h1>
<blockquote>
<p>이제 이렇게 웹 브라우저에 요청에 대한 서버는 응답값은 어떤 형식으로 오게 될까요?</p>
</blockquote>
<p>정상적으로 요청에 대한 값을 받고 응답에 대한 패킷을 전달할때 응답패킷 형태로(TCP/IP, HTTP 메시지)를 함께 전송하게 됩니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> ~ <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="web-beuraujeo-rendeoring"><a href="#web-beuraujeo-rendeoring" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#웹-브라우저-렌더링"></a> 웹 브라우저 렌더링</h1>
<p>웹 브라우저의 요청을 통해서 서버에 대한 응답 요청 패킷을 전달받은 웹브라우저는 응답 패킷으로 넘어온 TCP/IP, HTTP 메시지에 포함된 데이터를 바탕으로 HTML 렌더링을 진행합니다.</p>
<h1 id="httpyi-teugjing"><a href="#httpyi-teugjing" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#http의-특징"></a> HTTP의 특징</h1>
<ul>
<li>The World Wide Web (WWW)은 모든것이 대부분 HTTP형태로 통신</li>
<li>Client-Server 구조</li>
<li>Stateful : server side에 client와 server의 동작, 상태정보를 저장하는 형태, 세션 상태에 기반하여 server의 응답이 달라짐</li>
<li>Stateless : server side에 client와 server의 동작, 상태정보를 저장하지 않는 형태, server의 응답이 client와의 세션 상태와 독립적</li>
<li>비 연결성(Connetionless)</li>
<li>HTTP 메시지</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>웹브라우저</tag>
        <tag>TCP/IP</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Search Insert Position</title>
    <url>/Leetcode-20210114-leetcode-search-insert-position/</url>
    <content><![CDATA[<h1 id="riskodeu-search-insert-position"><a href="#riskodeu-search-insert-position" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-search-insert-position"></a> <a href="https://leetcode.com/problems/search-insert-position/" target="_blank" rel="noopener">릿코드 search insert position</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: nums = [1,3,5,6], target = 5<br>
Output: 2</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: nums = [1,3,5,6], target = 2<br>
Output: 1</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: nums = [1,3,5,6], target = 7<br>
Output: 4</p>
<h3 id="example-4"><a href="#example-4" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3>
<p>Input: nums = [1,3,5,6], target = 0<br>
Output: 0</p>
<h3 id="example-5"><a href="#example-5" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#example-5"></a> Example 5:</h3>
<p>Input: nums = [1], target = 0<br>
Output: 0</p>
<h3 id="constraints"><a href="#constraints" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3>
<p>1 &lt;= nums.length &lt;= 104<br>
-104 &lt;= nums[i] &lt;= 104<br>
nums contains distinct values sorted in ascending order.<br>
-104 &lt;= target &lt;= 104</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>binarySearch 함수를 구현하여 해당되는 타겟값이 있으면 해당 인덱스를 반환하고 그렇지 않으면 -1을 반환합니다.</li>
<li>insertBinarySearch 함수를 구현하여 현재 해당되는 Target의 끝지점 인덱스를 찾아 반환합니다. end는 target값의 이전인덱스이기 때문에 end+1을 반환시켜줍니다.</li>
</ul>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<p>이진탐색 O(logN)</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_search_insert_position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(searchInsert(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = binarySearch(nums, target);</span><br><span class="line">        <span class="keyword">if</span>(answer == -<span class="number">1</span>)&#123;</span><br><span class="line">            answer = insertBinarySearch(nums,target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 해당되는 타겟값이 있으면 해당 인덱스 반환, 그렇지 않으면 -1 반환</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 타겟의 끝지점을 찾는다. End점에는 결국에는 해당되는 값의 마지막지점 인덱스가 저장되어있다.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>릿코드</tag>
        <tag>binarysearch</tag>
        <tag>이진탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Lombok @Annotation(어노테이션)</title>
    <url>/Spring-20210114-spring-lombok-annotation/</url>
    <content><![CDATA[<h1 id="lombok-library-annotation"><a href="#lombok-library-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#lombok-library-annotation"></a> Lombok library @Annotation</h1>
<h2 id="lombok"><a href="#lombok" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#lombok"></a> Lombok</h2>
<p>Lombok(롬복)은 MIT 라이선스로 배포되는 오픈소스 라이브러리로서 annotation 주석으로 VO(Value Object), DTO(Data Transfort Object), Entity Class 등을 만들때 Getter/Setter 및 toString()을 자동화 시켜줍니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</span><br></pre></td></tr></table></figure>
<p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok 공식 사이트</a></p>
<blockquote>
<p>Lombok 사용방법</p>
</blockquote>
<p>Lombok을 사용하기 위해서는 해당 라이브러리를 다운을 받아야합니다. IntellJ같은 경우는 플러그인을 설치하여 Lombok을 다운받으면 되고 Gradle or Maven Dependency를 추가해주어야합니다.<br>
모든 설치가 완료되면</p>
<blockquote>
<p>IntellJ Configuration</p>
</blockquote>
<p><code>IntelliJ의 File &gt; Settings &gt; Build, Execution, Deployment &gt; Compiler &gt; Annotation Processors를 선택 한 후 &quot;Enable annotation processing&quot;을 체크</code><br>
해당 설정을 해주는 이유는 Lombok을 작업중에도 동작시키기 위해서는 해당과 같은 설정을 해주셔야 Lombok이 정상적으로 동작하게 됩니다.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># gradle</span><br><span class="line">configurations &#123;</span><br><span class="line">    compileOnly &#123;</span><br><span class="line">      extendsFrom annotationProcessor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># maven</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">   &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="getter-setter"><a href="#getter-setter" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#getter-setter"></a> @Getter, @Setter</h2>
<p>Lombok에서 가장 많이 사용되는 어노테이션인 @Getter와 @Setter에 대해서 설명드리겠습니다.<br>
기존에 스프링에서는 필드를 선언하면 명시적으로 선언을 매번해주어야하였지만, Lombok을 사용하면 필드를 선언하면 Getter(),Setter()  메소드를 자동으로 생성해줍니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> item;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lombok 사용시 필요없는 코드</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(<span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.item = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(<span class="keyword">int</span> user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>필드 레벨이 아닌 클래스 레벨에 @Getter 또는 @Setter를 선언해줄 경우, 모든 필드에 접근자와 설정자가 자동으로 생성됩니다.</p>
<h2 id="noargsconstructor"><a href="#noargsconstructor" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#noargsconstructor"></a> NoArgsConstructor</h2>
<p>@NoArgsConstructor 어노테이션은 파라미터가 없는 기본 생성자를 생성해줍니다.</p>
<h2 id="allargsconstructor"><a href="#allargsconstructor" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#allargsconstructor"></a> @AllArgsConstructor</h2>
<p>@AllArgsConstructor 어노테이션은 모든 필드 값을 파라미터로 받는 생성자를 만들어줍니다.</p>
<h2 id="requiredargsconstructor"><a href="#requiredargsconstructor" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#requiredargsconstructor"></a> @RequiredArgsConstructor</h2>
<p>@RequiredArgsConstructor 어노테이션은 final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 만들어줍니다.</p>
<h2 id="data"><a href="#data" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#data"></a> @Data</h2>
<p>Class Level에서 @Data 어노테이션을 붙여주면, 모든 필드를 대상으로 접근자와 설정자가 자동으로 생성됩니다. 그리고, final 또는 @NonNull 필드 값을 파라미터로 받는 생성자가 만들어지며, toStirng, equals, hashCode 메소드가 자동으로 생성되게 됩니다. 개인적으로는 @Data를 무분별하게 사용하면 나중에 유지보수측면에서 시간이 많이 소요되고 불필요한 소스양이 늘어날 것으로 생각하며 결론적으로 @Data는 지양하고 무분별한 Setter 남용을 하지 않도록 해야할 것입니다.</p>
<h2 id="builder"><a href="#builder" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#builder"></a> @Builder</h2>
<p>@Builder Annotation은 모델 객체를 생성할 때 Builder를 자동으로 추가해 주는 Annotation입니다. 해당 Annotation을 사용하면 Builder Pattern을 적용할 수 있습니다.</p>
<blockquote>
<p>Builder Annotation 미적용</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="keyword">this</span>.name);</span><br><span class="line">    user.setAge(<span class="keyword">this</span>.age);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Builder Annotation 적용</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Builder pattern 사용</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = User.builder()</span><br><span class="line">                  .name(<span class="string">"KGH"</span>)</span><br><span class="line">                  .age(<span class="number">100</span>)</span><br><span class="line">                  .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>References</p>
</blockquote>
<p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Annotation</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring @Annotation(어노테이션)</title>
    <url>/Spring-20210114-spring-annotation/</url>
    <content><![CDATA[<h1 id="spring-annotation"><a href="#spring-annotation" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#spring-annotation"></a> Spring @Annotation</h1>
<h2 id="restcontroller"><a href="#restcontroller" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#restcontroller"></a> @RestController</h2>
<p>@RestController 동작에 앞서, 먼저 알아보아야할것이 @Controller와의 차이점입니다.</p>
<blockquote>
<p>@Controller 내부</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Controller Annotation의 내부를 살펴보면 다음과 같은 구조를 볼 수 있습니다. 자세히 살펴보시면 <code>@Component</code> 어노테이션을 살펴보실 수 있습니다. 과연 이것의 어노테이션의 역할은 무엇일까요?<br>
즉, 기존의 Spring에서는 <code>@Bean</code>을 붙여 빈을 등록하던 것처럼 빈 클래스에 <code>@Component</code> 애노테이션을 붙여 빈을 등록할 수 있습니다. 따라서 <code>@Controller</code> 어노테이션 내부에는 해당 컨트롤러를 <code>@Bean</code> 으로 등록하는 역할도 하고 있다는 뜻입니다.<br>
@Component를 붙여 빈을 등록하면 클래스 이름의 첫 문자를 소문자로 바꾼 것이 빈의 이름(id)이 됩니다. 그리고 빈 객체가 생성되는 시점은 ApplicationContext 객체가 생성되는 시점이며 기본적으로 singleton scope 입니다.</p>
<p>해당 경로로 요청을 진행한다고 할때  <code>localhost:8080/mvc</code>의 요청경로에 맞는 컨트롤러를 @Bean 컴포넌트 스캔을 통하여 해당 경로를 가지고 있는 컨트롤러를 찾아주게 됩니다.  만약 <code>@ResponseBody</code> 가 붙여져 있지 않다면 해당 모델에 값을 넘겨줄 수도 있고, String을 반환하게 되면 데이터를 넘겨주는것이 아니라 해당 View의 Path값에 맞게  모델값과 함께 반환시켜주게 됩니다. 요약하면 API와 view를 동시에 사용하는 경우에 사용한다고 생각하시면 됩니다.</p>
<p>이제 @Controller 다음으로 @RestController 의미에 대해 알아보겠습니다. 간단히 <code>@RestController는 @Controller가 포함되어있고 @ReponseBody형식을 함께 사용할때 사용합니다.</code></p>
<blockquote>
<p>@RestController 내부</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A convenience annotation that is itself annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125; and &#123;<span class="doctag">@link</span> ResponseBody <span class="doctag">@ResponseBody</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Types that carry this annotation are treated as controllers where</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> RequestMapping <span class="doctag">@RequestMapping</span>&#125; methods assume</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ResponseBody <span class="doctag">@ResponseBody</span>&#125; semantics by default.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; &#123;<span class="doctag">@code</span> <span class="doctag">@RestController</span>&#125; is processed if an appropriate</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> HandlerMapping&#125;-&#123;<span class="doctag">@code</span> HandlerAdapter&#125; pair is configured such as the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125;-&#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * pair which are the default in the MVC Java config and the MVC namespace.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Controller<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>내부 스펙을 확인해보면 @ResponseBody Annotation, @Controller Annotation이 함께 선언되어 있습니다.</p>
<blockquote>
<p>@ResponseBody를 붙여주면 무슨일이 발생할까요?</p>
</blockquote>
<p><code>@ResponseBody</code>의 역할은 <code>HTTP BODY</code>문자내용을 반환하는 <code>api</code>라고 할 수 있습니다. 즉, 기존에 <code>@ResponseBody</code>가 없는 경우에 <code>viewResolver</code> 대신에 <code>httpMessageConverter</code>가 동작하여 문자일 경우에는 <code>StringHttpMessageConverter</code> 객체일 경우에는 <code>MappingJackson2HttpMessageConverter</code>로 이루어져있습니다. 클라이언트의 HTTP Accept헤더와 서버 컨트롤러의 반환 타입 정보 둘을 조합해서 HttpMessageConverter가 동작되게 됩니다. 기본으로 동작되는 데이터반환형식은 Default JSON형식으로 동작되게 됩니다.</p>
<h2 id="requestmapping"><a href="#requestmapping" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#requestmapping"></a> @RequestMapping</h2>
<p>@RequestMapping Annotation은 Spring에서 제공하는 HandlerMapping Class가 가지고 있습니다.<br>
두 가지의 경우로 나눌 수 있는데, 이것은 스프링 HTTP 내부 Note:를 참고하면 아래와 같은 사항을 확인할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation for mapping web requests onto methods in request-handling classes</span></span><br><span class="line"><span class="comment"> * with flexible method signatures.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Both Spring MVC and Spring WebFlux support this annotation through a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125; and &#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * in their respective modules and package structure. For the exact list of</span></span><br><span class="line"><span class="comment"> * supported handler method arguments and return types in each, please use the</span></span><br><span class="line"><span class="comment"> * reference documentation links below:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring MVC</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring WebFlux</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This annotation can be used both at the class and</span></span><br><span class="line"><span class="comment"> * at the method level. In most cases, at the method level applications will</span></span><br><span class="line"><span class="comment"> * prefer to use one of the HTTP method specific variants</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> GetMapping <span class="doctag">@GetMapping</span>&#125;, &#123;<span class="doctag">@link</span> PostMapping <span class="doctag">@PostMapping</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PutMapping <span class="doctag">@PutMapping</span>&#125;, &#123;<span class="doctag">@link</span> DeleteMapping <span class="doctag">@DeleteMapping</span>&#125;, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PatchMapping <span class="doctag">@PatchMapping</span>&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; When using controller interfaces (e.g. for AOP proxying),</span></span><br><span class="line"><span class="comment"> * make sure to consistently put &lt;i&gt;all&lt;/i&gt; your mapping annotations - such as</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125; - on</span></span><br><span class="line"><span class="comment"> * the controller &lt;i&gt;interface&lt;/i&gt; rather than on the implementation class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> GetMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PostMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PutMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DeleteMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PatchMapping</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>위의 내용을 요약 하면</p>
<p><strong>@RequestMapping Annotation은 클래스 및 메서드 수준에서 모두 사용할 수 있습니다. 대부분의 경우 방법 수준에서 응용 프로그램은 HTTP 메서드별 변형된 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 또는 @PatchMapping 중 하나를 사용하는 것을 권장합니다.<br>
참고: 컨트롤러 인터페이스(예: AOP 프록시)를 사용할 때 구현 클래스가 아닌 컨트롤러 인터페이스에 @RequestMapping 및 @SessionAttributes와 같은 모든 매핑 Annotation을 일관되게 배치해야 합니다.</strong></p>
<p>즉, 클래스 및 메서드 수준을 모두 사용할 수 있으며, 최근에는 HTTP 메서드별 변형된 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 또는 @PatchMapping 중 하나를 사용하는 것을 권장한다고 합니다.</p>
<ol>
<li>Class Level Mapping<br>
Class Level Mapping은 모든 메서드에 적용하는 경우 사용합니다.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HTTP Request 요청경로가 “/” 일 경우 해당 클래스에서 처리를 진행합니다.</p>
<ol start="2">
<li>Handler Level Mapping</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemB</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemC</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.PATCH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemD</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemE</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>요청 URL에 대하여 해당 메서드를 처리해야하는 경우 사용합니다. 특정 메서드에서 HTTP요청을 처리한다고 생각하면 됩니다.</p>
<blockquote>
<p>RequestMapping 옵션</p>
</blockquote>
<ul>
<li>value는 해당 URL 경로를 지정합니다.</li>
<li>HTTP Request Method를 지정하여 HTTP 형식에 맞추어 수행됩니다.</li>
</ul>
<h2 id="getmapping-postmapping-putmapping-deletemapping-patchmapping"><a href="#getmapping-postmapping-putmapping-deletemapping-patchmapping" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#getmapping-postmapping-putmapping-deletemapping-patchmapping"></a> @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping</h2>
<p>@RequestMapping에서 조금더 세분화된 Method path를 지정하여 명시적이고 효율적인 사용을 위하여 Annotation이 Spring 4.3.xx 버전 이후로 추가되었습니다.<br>
현재 @RequestMapping보다는 4.3버전이후로 나온 Annotation을 권장하고 있습니다.</p>
<blockquote>
<p>종류<br>
<code>@GetMapping, @PostMapping, DeleteMapping, @PutMapping, @PatchMapping</code></p>
</blockquote>
<blockquote>
<p>Annotation 사용법</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PatchMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.PATCH)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user", method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemA</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>기존에 RequestMapping을 통하여 가독성이 떨어지는 코드를 작성하였는데 스프링4.3버전이후로 부터 세부적인 HTTP Method를 지정할 수 있게 되어 명시적이고 효율성이 올라갔다고 생각합니다.</p>
<h2 id="compoment"><a href="#compoment" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#compoment"></a> @Compoment</h2>
<p>스프링빈을 등록하는 방법은 2가지가 존재합니다.</p>
<ul>
<li>컴포넌트 스캔과 자동의존관계 설정</li>
<li>코드로 직접 스프링빈을 등록하는 방식</li>
</ul>
<p>따라서, 컴포넌트스캔원리를 이용 할때 @Component Annotation을 사용하게 됩니다. @Component의 의미는 해당 Annotation이 있으면 Spring bean으로 자동으로 등록이 됩니다.<br>
즉, component-scan을 통하여 특정 패키지 안의 클래스들을 스캔하고 @Component Annotation이 있는 클래스에 대하여 bean인스턴스를 생성시킵니다. bean인스턴스로 생성되면 스프링 컨테이너에서 관리를 진행하게 되고 DI를 주입받을 수 있습니다.</p>
<p><code>DI주입은 필드주입, setter주입, 생성자 주입 총 3가지 방법</code>이 있습니다. 의존관계가 실행중 동적으로 변하는 경우는 거의 없기때문에 생성자 주입을 통한 DI주입을 권장합니다.</p>
<p><code>DI주입시 주의사항은</code> @Autowired를 통한 DI는 Controller, Service등과 같이 스프링이 관리하는 객체에서만 동작하게 됩니다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작되지 않습니다. 생성자에 @Autowired를 사용하면 객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입해줍니다. 생성자가 1개만 있으면 @Autowired는 생략이 가능합니다.</p>
<h2 id="controller-service-repository"><a href="#controller-service-repository" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#controller-service-repository"></a> @Controller, @Service, @Repository</h2>
<h3 id="controller"><a href="#controller" class="header-anchor">1.5.1. </a><a class="markdownIt-Anchor" href="#controller"></a> @Controller</h3>
<p>@Controller가 스프링빈으로 자동등록되는 이유는 @Controller내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 때문입니다.</p>
<blockquote>
<p>@Controller 내부</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="service"><a href="#service" class="header-anchor">1.5.2. </a><a class="markdownIt-Anchor" href="#service"></a> @Service</h3>
<p>@Service Annotation또한 스프링빈으로 자동등록되는 이유는 @Service내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 떄문입니다.<br>
요약하면 @Component 어노테이션에 의해서 @Controller, @Service, @Repository와 같은 어노테이션을 구체화하여 스프링 컨테이너에 @Service bean으로 등록을 하게 됩니다.</p>
<blockquote>
<p>@Service 내부</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Service", originally defined by Domain-Driven</span></span><br><span class="line"><span class="comment"> * Design (Evans, 2003) as "an operation offered as an interface that stands alone in the</span></span><br><span class="line"><span class="comment"> * model, with no encapsulated state."</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;May also indicate that a class is a "Business Service Facade" (in the Core J2EE</span></span><br><span class="line"><span class="comment"> * patterns sense), or something similar. This annotation is a general-purpose stereotype</span></span><br><span class="line"><span class="comment"> * and individual teams may narrow their semantics and use as appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Repository</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="repository"><a href="#repository" class="header-anchor">1.5.3. </a><a class="markdownIt-Anchor" href="#repository"></a> @Repository</h3>
<p>@Repository Annotation또한 스프링빈으로 자동등록되는 이유는 @Repository내부에 보면 @Component Annotation에 의해서 컴포넌트스캔이 진행되기 떄문입니다. 즉, @Component 어노테이션에 의해서 @Controller, @Service, @Repository와 같은 어노테이션을 구체화하여 스프링 컨테이너에 @Service bean으로 등록을 하게 됩니다.</p>
<blockquote>
<p>@Repository 내부</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Repository", originally defined by</span></span><br><span class="line"><span class="comment"> * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,</span></span><br><span class="line"><span class="comment"> * retrieval, and search behavior which emulates a collection of objects".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Teams implementing traditional Java EE patterns such as "Data Access Object"</span></span><br><span class="line"><span class="comment"> * may also apply this stereotype to DAO classes, though care should be taken to</span></span><br><span class="line"><span class="comment"> * understand the distinction between Data Access Object and DDD-style repositories</span></span><br><span class="line"><span class="comment"> * before doing so. This annotation is a general-purpose stereotype and individual teams</span></span><br><span class="line"><span class="comment"> * may narrow their semantics and use as appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A class thus annotated is eligible for Spring</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.dao.DataAccessException DataAccessException&#125; translation</span></span><br><span class="line"><span class="comment"> * when used in conjunction with a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span></span><br><span class="line"><span class="comment"> * PersistenceExceptionTranslationPostProcessor&#125;. The annotated class is also clarified as</span></span><br><span class="line"><span class="comment"> * to its role in the overall application architecture for the purpose of tooling,</span></span><br><span class="line"><span class="comment"> * aspects, etc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 2.5, this annotation also serves as a specialization of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, allowing for implementation classes to be autodetected</span></span><br><span class="line"><span class="comment"> * through classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.dao.DataAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="componentscan"><a href="#componentscan" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#componentscan"></a> @ComponentScan</h2>
<p>@ComponentScan이란 컴포넌트 검색기능을 가진 어노테이션입니다.<br>
스프링은 기본적으로 객체를 자동으로 생성하여 관리하기 때문에 @Component 어노테이션이 있는 클래스들을 스프링 컨테이너가 생성해줍니다.<br>
따라서, @ComponentScan는 특별히 basePackage를 지정하지 않아도 main class가 위치한 패키지를 Root package로 하여 그 이하의 모든 컴포넌트 클래스들을 검색하여 빈으로 등록할 수 있습니다.</p>
<h2 id="configuration"><a href="#configuration" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#configuration"></a> @Configuration</h2>
<ul>
<li>클래스에 이 어노테이션이 붙어 있으면 스프링은 해당 클래스를 Java config로 간주합니다.</li>
<li>1개 이상의 @Bean을 제공하는 클래스의 경우 반드시 @Configuration을 명시해 주어야 합니다.</li>
</ul>
<h2 id="bean"><a href="#bean" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#bean"></a> @Bean</h2>
<ul>
<li>개발자가 직접 제어가 불가능한 외부 라이브러리 또는 설정을 위한 클래스를 Bean으로 등록할 때 @Bean 어노테이션을 활용합니다.</li>
</ul>
<h2 id="springbootapplication"><a href="#springbootapplication" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#springbootapplication"></a> @SpringBootApplication</h2>
<p>@SpringBootApplication 어노테이션은 스프링 부트의 가장 기본적인 설정을 선언이 되어있습니다. 내부로직을 살펴보도록 하겠습니다.</p>
<blockquote>
<p>@SpringBootApplication</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates a &#123;<span class="doctag">@link</span> Configuration configuration&#125; class that declares one or more</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Bean <span class="doctag">@Bean</span>&#125; methods and also triggers &#123;<span class="doctag">@link</span> EnableAutoConfiguration</span></span><br><span class="line"><span class="comment"> * auto-configuration&#125; and &#123;<span class="doctag">@link</span> ComponentScan component scanning&#125;. This is a convenience</span></span><br><span class="line"><span class="comment"> * annotation that is equivalent to declaring &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    public Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    public String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span>)</span><br><span class="line">    <span class="keyword">public</span> String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span>)</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"nameGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Configuration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">boolean</span> <span class="title">proxyBeanMethods</span>() <span class="title">default</span> <span class="title">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>여기 스펙부분을 자세히보시면 중요하게 생각해야할 부분이 두가지 있습니다.</p>
<ul>
<li>@ComponentScan</li>
<li>@EnableAutoConfiguration</li>
</ul>
<p>이 두가지가 왜 중요할까요?</p>
<blockquote>
<p>@ComponentScan</p>
</blockquote>
<p><code>@ComponentScan은</code> @component 어노테이션 및 @Service, @Repository, @Controller 등의 어노테이션을 스캔하여 Bean으로 등록해주는 어노테이션입니다.<br>
<code>즉, 어플리케이션 실행시에 @Service, @Repository, @Repositroy, @Controller에 컴포넌트스캔을 통하여 스프링 컨테이너에 Bean으로 등록합니다.</code></p>
<blockquote>
<p>@EnableAutoConfiguration</p>
</blockquote>
<p><code>@EnableAutoConfiguration은</code> 사전에 정의한 라이브러리들을  Bean으로 등록해 주는 어노테이션입니다. 사전에 정의한 라이브러리들 모두가 등록되는 것은 아니고 특정조건이 만족될 경우에 Bean으로 등록됩니다.</p>
<blockquote>
<p>저장위치</p>
</blockquote>
<p>사전 정의 파일 위치: <code>Dependencies &gt; spring-boot-autoconfigure &gt; META-INF &gt; spring.factories</code></p>
<blockquote>
<p>References</p>
</blockquote>
<p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a><br>
<a href="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s11.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s11.html</a><br>
<a href="https://velog.io/@gillog/Spring-Annotation-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener">https://velog.io/@gillog/Spring-Annotation-정리</a><br>
<a href="https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html" target="_blank" rel="noopener">https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html</a><br>
<a href="https://bamdule.tistory.com/31" target="_blank" rel="noopener">https://bamdule.tistory.com/31</a><br>
<a href="https://imucoding.tistory.com/217" target="_blank" rel="noopener">https://imucoding.tistory.com/217</a><br>
<a href="https://toma0912.tistory.com/86" target="_blank" rel="noopener">https://toma0912.tistory.com/86</a><br>
<a href="https://tomining.tistory.com/180" target="_blank" rel="noopener">https://tomining.tistory.com/180</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Annotation</tag>
        <tag>DI</tag>
        <tag>Bean</tag>
      </tags>
  </entry>
  <entry>
    <title>Network URI(Uniform Resource Identifier) 정의 및 하위요소의 특징</title>
    <url>/Network-20210114-network-04-uri-url-urn/</url>
    <content><![CDATA[<h1 id="uri-uniform-resource-identifier"><a href="#uri-uniform-resource-identifier" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier"></a> URI(Uniform Resource Identifier)</h1>
<p>URI에 대한 개념을 살펴보기에 앞서서 국제 인터넷 표준화 기구(IETF)에 표준스펙으로 기재되어있는 URI,URL,URN의 개념에 대해서 알아보겠습니다.</p>
<p><a href="https://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="noopener">국제 인터넷 표준화 기구 IETF 1.1.3 URI 표준 스펙</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.1.3.  URI, URL, and URN</span><br><span class="line"></span><br><span class="line">`A URI can be further classified as a locator, a name, or both.`  The</span><br><span class="line">`term "Uniform Resource Locator" (URL) refers to the subset of URIs</span><br><span class="line">that, in addition to identifying a resource, provide a means of</span><br><span class="line">locating the resource by describing its primary access mechanism</span><br><span class="line">(e.g., its network "location").`  The term "Uniform Resource Name"</span><br><span class="line">(URN) has been used historically to refer to both URIs under the</span><br><span class="line">"urn" scheme [RFC2141], which are required to remain globally unique</span><br><span class="line">and persistent even when the resource ceases to exist or becomes</span><br><span class="line">unavailable, and to any other URI with the properties of a name.</span><br><span class="line"></span><br><span class="line">An individual scheme does not have to be classified as being just one</span><br><span class="line">of "name" or "locator".  Instances of URIs from any given scheme may</span><br><span class="line">have the characteristics of names or locators or both, often</span><br><span class="line">depending on the persistence and care in the assignment of</span><br><span class="line">identifiers by the naming authority, rather than on any quality of</span><br><span class="line">the scheme.  Future specifications and related documentation should</span><br><span class="line">use the general term "URI" rather than the more restrictive terms</span><br><span class="line">"URL" and "URN" [RFC3305].</span><br></pre></td></tr></table></figure>
<blockquote>
<p>국제 인터넷 표준화 기구 IETF 1.1.3 URI 표준 스펙 요약</p>
</blockquote>
<ol>
<li>
<p>국제 인터넷 표준화 기구(IETF)에 표준스펙으로 기재된 내용을 간략히 살펴보면 uri는 로케이터(locator), 이름(name)또는 둘다 추가로 분류 될 수 있습니다.</p>
</li>
<li>
<p>URL 이라는 용어는 리소스를 식별하는 것 이외에도 기본 Access 매커니즘을 설명하여 리소스를 찾는 수단을 제공하는 URI의 하위집합을 나타낸다고 표기되어있습니다.</p>
</li>
</ol>
<h1 id="uri-uniform-resource-identifier-yi-guseong"><a href="#uri-uniform-resource-identifier-yi-guseong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier의-구성"></a> URI(Uniform Resource Identifier)의 구성</h1>
<p>URI는 큰 상위 집합으로 내부에 URL(Resource Locator)와 URN(Resource Name)을 포함하고 있습니다.</p>
<blockquote>
<p>URL(Resource Locator)</p>
</blockquote>
<p><code>kgh://google.com:8080/member?userName=kgh#hello</code> 라는 URL이 있다고 가정하겠습니다.</p>
<table>
<thead>
<tr>
<th>URL 하위요소</th>
<th>의미</th>
</tr>
</thead>
<tbody>
<tr>
<td>kgh</td>
<td>scheme</td>
</tr>
<tr>
<td><a href="http://google.com:8080" target="_blank" rel="noopener">google.com:8080</a></td>
<td>authority</td>
</tr>
<tr>
<td>member</td>
<td>path</td>
</tr>
<tr>
<td>userName=kgh</td>
<td>query</td>
</tr>
<tr>
<td>hello</td>
<td>fragment</td>
</tr>
</tbody>
</table>
<blockquote>
<p>URN(Unifrom Resource Name)</p>
</blockquote>
<table>
<thead>
<tr>
<th>URN 하위요소</th>
<th>의미</th>
</tr>
</thead>
<tbody>
<tr>
<td>urn:google.com:user:kgh:hello</td>
<td>scheme</td>
</tr>
</tbody>
</table>
<h1 id="uri-uniform-resource-identifier-yimi"><a href="#uri-uniform-resource-identifier-yimi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#uriuniform-resource-identifier-의미"></a> URI(Uniform Resource Identifier) 의미</h1>
<blockquote>
<ol>
<li>Uniform</li>
</ol>
</blockquote>
<p>리소스를 식별하는 통일된 방식</p>
<blockquote>
<ol start="2">
<li>Resource</li>
</ol>
</blockquote>
<p>자원, URI로 식별할 수 있는 모든것</p>
<blockquote>
<ol start="3">
<li>Identifier</li>
</ol>
</blockquote>
<p>다른 항목과 구분하는데 필요한 정보</p>
<h1 id="url-uniform-resource-locator-gwa-urn-uniform-resource-name-yimi"><a href="#url-uniform-resource-locator-gwa-urn-uniform-resource-name-yimi" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#urluniform-resource-locator과-urnuniform-resource-name-의미"></a> URL(Uniform Resource Locator)과 URN(Uniform Resource Name) 의미</h1>
<p>URL은 Locator를 뜻하며 리소스가 있는 위치를 지정하고 URN은 Name을 뜻하여 리소스에 이름을 부여합니다.<br>
즉, 위치는 변할 수 있지만, 이름은 변할 수 없습니다. 마치 우리가 도서관에서 하나의 책을 찾기 위해 isbn URN을 부여 받아 실제 리소스를 찾는다고 가정하면 urn:isbn:URN의 형식으로 나타낼 수 있습니다. 이때는 URN이름만으로는 실제 리소스를 찾는방법이 보편화 된것이 아닙니다.</p>
<h1 id="url-bunseog"><a href="#url-bunseog" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#url-분석"></a> URL 분석</h1>
<blockquote>
<p>Request URL:</p>
</blockquote>
<p><strong><a href="https://www.google.com/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5" target="_blank" rel="noopener">https://www.google.com/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5</a></strong></p>
<p>다음과 같은 구글에서 hello라고 친 결과에 따른 검색 URL이 있다고 가정하고 설명을 진행하겠습니다.</p>
<h3 id="url-munbeob"><a href="#url-munbeob" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#url-문법"></a> URL 문법</h3>
<p><strong>scheme://[userinfo@]host[:port][/path][?query][#fragment]</strong><br>
<a href="https://www.google.com:443/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5" target="_blank" rel="noopener">https://www.google.com:443/search?newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5</a></p>
<p>URL의 기본형식은 위와 같이 구성되어있고, 이것을 URL을 표현하면 다음과 같습니다.</p>
<ul>
<li>프로토콜(https)</li>
<li>호스트명(<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>)</li>
<li>포트 번호(443) -  https는 443포트를 갖습니다.</li>
<li>패스(/search)</li>
<li>쿼리 파라미터(newwindow=1&amp;hl=ko&amp;sxsrf=ALeKk02qBVrTCmX_lr_o1zJg1bIToVFKAw%3A1610600469098&amp;source=hp&amp;ei=FdD_X7K7A4T6wAOW9aiYDA&amp;q=hello&amp;oq=hello&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIICAAQsQMQgwEyBAgAEEMyAggAMgIIADICCAAyBAgAEEMyAggAMgQIABBDOgcIIxDqAhAnOgUIABCxAzoHCAAQsQMQQ1D49TNY-f0zYNj_M2gBcAB4AIABfIgB2QSSAQMwLjWYAQCgAQGqAQdnd3Mtd2l6sAEK&amp;sclient=psy-ab&amp;ved=0ahUKEwjymdWm0pruAhUEPXAKHZY6CsMQ4dUDCAc&amp;uact=5)</li>
</ul>
<h3 id="url-scheme"><a href="#url-scheme" class="header-anchor">5.2. </a><a class="markdownIt-Anchor" href="#url-scheme"></a> URL Scheme</h3>
<p><code>scheme:</code>//[userinfo@]host[:port][/path][?query][#fragment]</p>
<blockquote>
<p>URL scheme</p>
</blockquote>
<ul>
<li>주로 프로토콜로 사용되며 프로토콜은 어떤 방식으로 자원에 접근할 것인가를 약속하는 규칙입니다. 예를 들면 80: http 포트, 443:https,  20,21: ftp포트를 사용합니다.</li>
<li>포트같은 경우는 주로 생략이 가능하며 google URL을 자세히 보시면 실제적으로는 포트 보이지 않는것을 확인 할 수 있습니다.</li>
<li>https같은 경우는 http에 보안이 추가된 프로토콜을 의미합니다.</li>
<li>https의 정의는 HTTPS(HyperText Transfer Protocol over Secure Socket Layer, HTTP over TLS, HTTP over SSL, HTTP Secure)는 월드 와이드 웹 통신 프로토콜인 HTTP의 보안이 강화된 버전으로 규정되어있습니다.</li>
</ul>
<h3 id="url-userinfo"><a href="#url-userinfo" class="header-anchor">5.3. </a><a class="markdownIt-Anchor" href="#url-userinfo"></a> URL userinfo</h3>
<p>scheme://<code>[userinfo@]</code>host[:port][/path][?query][#fragment]</p>
<ul>
<li>URL에 보통 사용자 정보를 포함해서 인증을 진행합니다. 하지만, 거의 잘 사용하지 않는것으로 알려져있습니다.</li>
</ul>
<h3 id="url-host"><a href="#url-host" class="header-anchor">5.4. </a><a class="markdownIt-Anchor" href="#url-host"></a> URL host</h3>
<p>scheme://[userinfo@]<code>host</code>[:port][/path][?query][#fragment]</p>
<ul>
<li>URL호스트는 호스트명을 의미하며 도메인명이나 IP주소를 직접 핸들링을 할 수 있습니다.</li>
</ul>
<h3 id="url-port"><a href="#url-port" class="header-anchor">5.5. </a><a class="markdownIt-Anchor" href="#url-port"></a> URL port</h3>
<p>scheme://[userinfo@]host<code>[:port]</code>[/path][?query][#fragment]</p>
<ul>
<li>포트번호를 담고있으며 특히 웹브라우저 상에서 접속시 포트정보를 담고있습니다. 일반적으로 URL에는 생략이 되어있으므로 대표적인 포트로는 http:80, https는 443포트를 가지고 있습니다.</li>
</ul>
<h3 id="url-path"><a href="#url-path" class="header-anchor">5.6. </a><a class="markdownIt-Anchor" href="#url-path"></a> URL path</h3>
<p>scheme://[userinfo@]host[:port]<code>[/path]</code>[?query][#fragment]</p>
<ul>
<li>리소스 경로(path)와 계층적인 구조를 가지고 있습니다.<br>
하나의 예를 들어보면 <code>/user/image.jpg, /users, /user/1, user/item/12</code> 와 같은 경로를 가지는것을 확인할 수 있습니다.</li>
</ul>
<h3 id="url-query"><a href="#url-query" class="header-anchor">5.7. </a><a class="markdownIt-Anchor" href="#url-query"></a> URL query</h3>
<p>scheme://[userinfo@]host[:port][/path]<code>[?query]</code>[#fragment]</p>
<ul>
<li>
<p>URL query의 구조는 Map형식의 &lt;Key, Value&gt;로 구성되어있으며 ?로 시작되고 &amp;로 추가가 가능합니다.<br>
예시: <code>www.127.0.0.1:8080/path/name=kgh&amp;id=1</code><br>
name과 id는 Key가 되고 나머지 kgh와 1은 Value로 나타낼 수 있습니다.</p>
</li>
<li>
<p>보통 query parameter, query string으로 지칭하고 웹서버에 제공하는 파라미터나 문자형태로 제공됩니다.</p>
</li>
</ul>
<h3 id="url-fragment"><a href="#url-fragment" class="header-anchor">5.8. </a><a class="markdownIt-Anchor" href="#url-fragment"></a> URL fragment</h3>
<p>scheme://[userinfo@]host[:port][/path][?query]<code>[#fragment]</code></p>
<ul>
<li>fragment라고 불리어 오는 URL의 하위요소이며 html 내부 북마크 등에 사용됩니다. 하지만 이정보들은 서버에 전송되지는 않습니다.</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>uri</tag>
        <tag>url</tag>
        <tag>urn</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Maximal Square</title>
    <url>/Leetcode-20210112-leetcode-maximal-square/</url>
    <content><![CDATA[<h1 id="leetcode-maximal-square"><a href="#leetcode-maximal-square" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#leetcode-maximal-square"></a> <a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener">leetcode maximal square</a></h1>
<h2 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Given an m x n binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg" alt="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg"></p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: matrix = [[“1”,“0”,“1”,“0”,“0”],[“1”,“0”,“1”,“1”,“1”],[“1”,“1”,“1”,“1”,“1”],[“1”,“0”,“0”,“1”,“0”]]<br>
Output: 4</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: matrix = [[“0”,“1”],[“1”,“0”]]<br>
Output: 1</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: matrix = [[“0”]]<br>
Output: 0</p>
<h3 id="constraints"><a href="#constraints" class="header-anchor">1.1.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3>
<p>m == matrix.length<br>
n == matrix[i].length<br>
1 &lt;= m, n &lt;= 300<br>
matrix[i][j] is ‘0’ or ‘1’.</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>(1) dynamic programming : bottom up 방식으로 왼쪽 상단 모서리 값을 기준으로 정사각형을 만들수있는 값을 체크해나가는 규칙을 찾아내면서 최대 사각형의 넓이를 구할 수 있습니다.</li>
<li>(2) 왼쪽 상단 모서리의 값이 ‘1’ 즉, 포함가능한 값일 경우에 값을 캐시하여 구해줍니다.</li>
<li>가장 먼저 Math.min()함수를 이용하여 왼쪽하단, 우측상단의 대각선을 비교하고 왼쪽 상단의 모서리의 값중 최솟값구해줍니다.</li>
<li>그리고 최솟값+1을 해주는 이유는 최대 정사각형의 길이를 구해주기 위해서 입니다. 그리고 현재 값과 비교하여 길이의 최댓값을 갱신시켜줍니다.</li>
</ul>
<h3 id="dp-yesi"><a href="#dp-yesi" class="header-anchor">1.2.1. </a><a class="markdownIt-Anchor" href="#dp-예시"></a> DP 예시</h3>
<blockquote>
<p>Input value for matrix:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>다음과 같은 입력값이 들어왔을때, 어디서부터 기준을 잡고 들어가야할지를 고민해야합니다.<br>
정사각형이라는 조건을 만족하기위해서는 <code>1 x 1, 2 x 2, 3 x 3 .... n x n의 범위</code>의 만족해야합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>(<span class="number">1</span>), <span class="number">0</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">2</span>), <span class="number">0</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>(<span class="number">1</span>), <span class="number">1</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>(<span class="number">2</span>), <span class="number">0</span>(<span class="number">2</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>), <span class="number">1</span>(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>
<p>다음과 같이 전체의 경우중에 예시로 두가지 경우를 생각해보면 왼쪽상단의 모서리값을 기준으로 정사각형이 형성되는 규칙을 발견하실 수 있습니다. <code>하지만, 0이 하나라도 포함되어있으면 정사각형을 형성할 수 없습니다.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[ <span class="number">1</span> <span class="number">1</span> ]</span><br><span class="line">[ <span class="number">1</span> <span class="number">1</span> ]</span><br></pre></td></tr></table></figure>
<p>의 경우를 살펴보면 해당 경우는 <code>최대 길이 2까지의 정사각형의 넓이 2*2</code>를 구할 수 있게됩니다. 이것의 규칙을 살펴보면 값의 최솟값 + 1의 값이 해당 정사각형의 길이를 나타내는 것을 알 수 있습니다.<br>
<code>즉,왼쪽하단의 값, 우측상단의값의 최솟값을 구하여 왼쪽 상단모서리의 값중에서 가장 최소인값의 + 1을 해주게 되면 오른쪽상단 모서리에 해당 범위에서 구할 수 있는 정사각형의 길이를 저장해나가면 계속해서 왼쪽상단의 모서리를 기준으로 비교하는 규칙을 발견</code>할 수 있습니다.</p>
<blockquote>
<p>answer :</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="3">
<li>시간복잡도</li>
</ol>
</blockquote>
<p>O(N*M)</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_maximal_square_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        maximalSquare(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        maximalSquare(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'0'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="comment">//왼쪽 상단 모서리값을 기준으로 '1'을 포함하고 있을 경우</span></span><br><span class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 왼쪽하단, 우측상단의 대각선을 비교하고 왼쪽 상단의 모서리의 값중 최솟값구해줍니다. +1을 해주는 이유는 최대 정사각형의 길이를 구해주기 위해서 입니다.</span></span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i][j-<span class="number">1</span>] , dp[i-<span class="number">1</span>][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">                    answer = Math.max(dp[i][j], answer); <span class="comment">// update result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer*answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>릿코드</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Single Number</title>
    <url>/Leetcode-20210112-leetcode-single-number/</url>
    <content><![CDATA[<h1 id="riskodeu-leetcode-single-number"><a href="#riskodeu-leetcode-single-number" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-single-number"></a> <a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">릿코드 leetcode  Single Number</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.</p>
<p>Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: nums = [2,2,1]<br>
Output: 1</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: nums = [4,1,2,1,2]<br>
Output: 4</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: nums = [1]<br>
Output: 1</p>
<h3 id="constraints"><a href="#constraints" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3>
<p>1 &lt;= nums.length &lt;= 3 * 104<br>
-3 * 104 &lt;= nums[i] &lt;= 3 * 104<br>
Each element in the array appears twice except for one element which appears only once.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>Map을 사용하여 개수를 체크한 후 value값이 1인 경우 return 결과값을 도출하면 되는 간단한 문제였습니다.</li>
</ul>
<h1 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_single_number</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        singleNumber(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        singleNumber(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            m.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Integer key : m.keySet())&#123;</span><br><span class="line">            Integer value = m.get(key);</span><br><span class="line">            <span class="keyword">if</span>(value == <span class="number">1</span>)&#123;</span><br><span class="line">                answer = key;</span><br><span class="line">                System.out.println(key);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>릿코드</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Decode String</title>
    <url>/Leetcode-20210111-leetcode-decode-string/</url>
    <content><![CDATA[<h1 id="riskodeu-decode-string"><a href="#riskodeu-decode-string" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-decode-string"></a> <a href="https://leetcode.com/problems/decode-string/" target="_blank" rel="noopener">릿코드 Decode String</a></h1>
<p>Given an encoded string, return its decoded string.</p>
<p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>
<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>
<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: s = “3[a]2[bc]”<br>
Output: “aaabcbc”</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: s = “3[a2[c]]”<br>
Output: “accaccacc”</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: s = “2[abc]3[cd]ef”<br>
Output: “abcabccdcdcdef”</p>
<h3 id="example-4"><a href="#example-4" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3>
<p>Input: s = “abc3[cd]xyz”<br>
Output: “abccdcdcdxyz”</p>
<h3 id="constraints"><a href="#constraints" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3>
<p>1 &lt;= s.length &lt;= 30<br>
s consists of lowercase English letters, digits, and square brackets ‘[]’.<br>
s is guaranteed to be a valid input.<br>
All the integers in s are in the range [1, 300].</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>(1) 모든 디코드 문자열값을 s의 길이 범위에 만족할때 while문을 진행합니다.</li>
<li>(2) 현재 문자가 숫자일 경우 value값을 업데이트 시켜줍니다. 단 자리수는 k가 양의 정수이기 때문에 2자리이상도 가능하나는 것입니다. 2자리이상의 값도 구해주기위해서 (value * 10 + c-‘0’)식을 통해 문자의 값들을 하나씩 정수로 구해주게 됩니다.</li>
<li>(3) 문자가 '['일 경우</li>
</ul>
<ul>
<li>재귀 함수를 호출하여 ']'를 만날때 까지 진행해줍니다. 즉, ‘[’    ‘]’ 의 값사이에 존재하는 값을 찾아서 반환시켜준다음 괄호앞에 존재하는 숫자의 개수 곱의수만큼을 추가하면서 진행을 합니다.</li>
</ul>
<blockquote>
<p>테스트케이스 예시</p>
</blockquote>
<p>3[a]2[bc] -&gt; return ‘aaa’ -&gt; aaa2[bc] -&gt; ‘bcbc’ return -&gt; aaabcbc 의 형태로 값을 반환시킬 수 있게 됩니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_DecodeString_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        decodeString(<span class="string">"3[a]2[bc]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">char</span> c= s.charAt(idx);</span><br><span class="line">            idx++;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">                String subStr = decodeString(s);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value; i++)&#123;</span><br><span class="line">                    sb.append(subStr);</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>릿코드</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Longest Common Prefix</title>
    <url>/Leetcode-20210111-leetcode-longest-common-prefix/</url>
    <content><![CDATA[<h1 id="riskodeu-leetcode-longest-common-prefix"><a href="#riskodeu-leetcode-longest-common-prefix" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-longest-common-prefix"></a> <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">릿코드 leetcode  Longest Common Prefix</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string “”.</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: strs = [“flower”,“flow”,“flight”]<br>
Output: “fl”</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: strs = [“dog”,“racecar”,“car”]<br>
Output: “”<br>
Explanation: There is no common prefix among the input strings.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>(1)기준이 되는 문자열을 기준값으로 설정합니다. 예) str[0]</li>
<li>(2)indexOf 함수를 사용하여 값이 일치하면 0, 그게 아니라면 -1을 반환합니다.</li>
<li>(3)값이 일치할때까지 기준의 되는 문자열인 prefix을 뒤에서부터 하나씩 줄여나가면서 진행합니다.</li>
</ul>
<blockquote>
<p>Horizontal scanning 방식</p>
</blockquote>
<p>flower flow 의 값이 있다고 가정하면 flower 가 prefix로 설정되며 flower -&gt; flowe -&gt; flow 로 문자열을 자르게 되면서 같아지는 경우일때 루프를 빠져나옵니다.</p>
<p>이제 prefix값이 flow로 된 상태이므로 flow와 flight를 비교진행을 합니다. flow -&gt; flo -&gt; fl 로 진행하면서 flight의 [fl]과 값이 같으므로 해당 루프를 빠져나오면서 최종적으로 prefix 공통이 되는 문자열을 반환할 수 있습니다.</p>
<h1 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_Longest_Common_prefix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        longestCommonPrefix(<span class="keyword">new</span> String[]&#123;<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 기준이되는 prefix값과 일치할때까지 루프를 진행합니다.</span></span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 값을 뒤에서부터 하나씩 자르면서 비교해나갑니다.</span></span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 빈 상태에서 substring을 자르게되면 Error가 발생합니다.</span></span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>릿코드</tag>
        <tag>문자열</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 문자열압축(카카오 2020 신입 공채)</title>
    <url>/Programmers-20210109-programmers-string-compression/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020"><a href="#peurogeuraemeoseu-munjayeolabcug-kakaosinib-gongcae2020" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-문자열압축-카카오신입-공채2020"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/60057" target="_blank" rel="noopener">프로그래머스 문자열압축 카카오신입 공채2020</a></h1>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.<br>
간단한 예로 aabbaccc의 경우 2a2ba3c(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, abcabcdede와 같은 문자열은 전혀 압축되지 않습니다. 어피치는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.</p>
<p>예를 들어, ababcdcdababcdcd의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 2ab2cd2ab2cd로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 2ababcdcd로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.</p>
<p>다른 예로, abcabcdede와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 abcabc2de가 되지만, 3개 단위로 자른다면 2abcdede가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.</p>
<p>압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<p>s의 길이는 1 이상 1,000 이하입니다.<br>
s는 알파벳 소문자로만 이루어져 있습니다.</p>
<h3 id="ibculryeog-ye"><a href="#ibculryeog-ye" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#입출력-예"></a> 입출력 예</h3>
<p>s    result<br>
“aabbaccc”    7<br>
“ababcdcdababcdcd”    9<br>
“abcabcdede”    8<br>
“abcabcabcabcdededededede”    14<br>
“xababcdcdababcdcd”    17<br>
입출력 예에 대한 설명</p>
<h3 id="ibculryeog-ye-1"><a href="#ibculryeog-ye-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#입출력-예-1"></a> 입출력 예 #1</h3>
<p>문자열을 1개 단위로 잘라 압축했을 때 가장 짧습니다.</p>
<h4 id="ibculryeog-ye-2"><a href="#ibculryeog-ye-2" class="header-anchor">1.4.1. </a><a class="markdownIt-Anchor" href="#입출력-예-2"></a> 입출력 예 #2</h4>
<p>문자열을 8개 단위로 잘라 압축했을 때 가장 짧습니다.</p>
<h3 id="ibculryeog-ye-3"><a href="#ibculryeog-ye-3" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#입출력-예-3"></a> 입출력 예 #3</h3>
<p>문자열을 3개 단위로 잘라 압축했을 때 가장 짧습니다.</p>
<h3 id="ibculryeog-ye-4"><a href="#ibculryeog-ye-4" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#입출력-예-4"></a> 입출력 예 #4</h3>
<p>문자열을 2개 단위로 자르면 abcabcabcabc6de 가 됩니다.<br>
문자열을 3개 단위로 자르면 4abcdededededede 가 됩니다.<br>
문자열을 4개 단위로 자르면 abcabcabcabc3dede 가 됩니다.<br>
문자열을 6개 단위로 자를 경우 2abcabc2dedede가 되며, 이때의 길이가 14로 가장 짧습니다.</p>
<h3 id="ibculryeog-ye-5"><a href="#ibculryeog-ye-5" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#입출력-예-5"></a> 입출력 예 #5</h3>
<p>문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다.<br>
따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다.<br>
이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>(1) 몇개 단위로 값을 자를것인지를 체크해야합니다. 문자열이 s일경우 압축이 되기위해서는 <code>(s의 길이 / 2)</code>까지만 <code>최대 압축</code>을 진행할 수 있습니다.</li>
<li>(2) <code>단위만큼 값을 증가</code>시키면서 이전 <code>문자열과 비교</code>하기 위한 문자열을 저장시킵니다.</li>
<li>(3) <code>저장된 문자열과 이전문자열이 같다면</code> 압축을 진행한것이므로 압축값을 증가시킵니다(+1)</li>
<li>(4) <code>저장된 문자열과 이전문자열이 같지 않다면</code> 더이상 압축할것이 없으므로 압축값들을 문자열로 저장시킵니다. (단, 압축된 개수가 1보다 클 경우만 개수를 추가하고 그게 아니라면 해당 문자열 자체만을 저장시킵니다.)</li>
<li>(5) 한번의 단위검색이 모두 끝났을 경우 현재 <code>compression에 담겨진 문자열의 길이와 answer(s의 길이와 비교)</code>를 통해 더 작은값으로 갱신을 진행합니다.</li>
</ul>
<blockquote>
<p>압축 예시</p>
</blockquote>
<p>a != b 경우이므로 aabbaccc의 문자열에서 로직이 진행되었다고 할때 b에서 부터 다시 단위만큼 진행해야하므로 compressionCnt값을 1로 초기화시키고 현재 b의 값을 compresssionFirst값에 갱신시켜줍니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<blockquote>
<p>문자열 압축 완전 탐색</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열압축 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="string">"aabbaccc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = s.length();</span><br><span class="line">        <span class="comment">// 자를 부분 문자의 개수</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=s.length()/<span class="number">2</span>; i++)&#123;</span><br><span class="line">            String compressionStr = <span class="string">""</span>;</span><br><span class="line">            String compFirst = s.substring(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">int</span> compressionCnt = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 단위만큼 크기를 증가시키며 이전 문자열과 비교</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;s.length(); j += i) &#123;</span><br><span class="line">                String compSecond = <span class="string">""</span>;</span><br><span class="line">                <span class="comment">// 단위만큼 값을 가져온다.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + i; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k &lt; s.length()) compSecond += s.charAt(k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 첫번째 기준값과 현재 나온 문자열의 값이 같다면 압축횟수 증가</span></span><br><span class="line">                <span class="keyword">if</span>(compFirst.equals(compSecond)) compressionCnt++;</span><br><span class="line">                <span class="comment">// 다른 문자열이 나왔던 경우라면(더 이상 압축하지 못하는 경우라면)</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 압축하는 부분 (숫자 + 문자열)</span></span><br><span class="line">                    <span class="keyword">if</span> (compressionCnt &gt; <span class="number">1</span>) compressionStr += (compressionCnt + compFirst);</span><br><span class="line">                    <span class="keyword">else</span> compressionStr += compFirst;</span><br><span class="line">                    compSecond = <span class="string">""</span>;</span><br><span class="line">                    <span class="comment">// 다음으로 진행하기전 현재 다른 문자열이 나온값을 비교값으로 설정</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; j + i; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k &lt; s.length()) compSecond += s.charAt(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 다음 로직 이동전 값 초기화 부분</span></span><br><span class="line">                    compFirst = compSecond;</span><br><span class="line">                    compressionCnt = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 맨 마지막에 압축된 결과값이 들어가지 않으므로 이부분을 통해 최종 결과값을 붙여줍니다.</span></span><br><span class="line">            <span class="keyword">if</span> (compressionCnt &gt; <span class="number">1</span>) compressionStr += (compressionCnt + compFirst);</span><br><span class="line">            <span class="keyword">else</span> compressionStr += compFirst;</span><br><span class="line">            <span class="comment">// 최솟값 갱신시켜줍니다.</span></span><br><span class="line">            answer = Math.min(answer, compressionStr.length());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>문자열</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>Network PORT와 DNS(Domain Name System)</title>
    <url>/Network-20210109-network-03-port-dns/</url>
    <content><![CDATA[<h1 id="port"><a href="#port" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#port"></a> PORT</h1>
<p>네트워크 관련시간에 자주 들어보셨을 PORT에 대한 특징을 살펴보겠습니다.</p>
<p><code>클라이언트가 서버에게</code> <code>게임 서버, 메인 서버, 동영상 서버</code>에 접근한다고 가정해보겠습니다.<br>
`클라이언트는 고유의 <em>IP:127.0.0.1</em> 를 가지고 있을때 서버 <em>IP:127.0.0.2</em> 에 <em>게임 서버, 메인 서버, 동영상 서버</em>에 요청으로 동시에 데이터를 가지고 오고 싶을때가 있을 것 입니다.</p>
<blockquote>
<p>그렇다면 클라이언트의 IP와 서버 IP만으로 어떤 서버에 어떤요청을 가져오는지가 가능할까요?</p>
</blockquote>
<p>즉, 한번에 두개이상의 서버를 호출해야한다면 IP로만 해결하기에는 어디서 온지 확인하기가 어렵게 됩니다. 그러면 어떻게 이것들을 구별하여 전송할 수 있을지 살펴보겠습니다.</p>
<h1 id="tcp-ip-paekis-jeongbo"><a href="#tcp-ip-paekis-jeongbo" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#tcpip-패킷-정보"></a> TCP/IP 패킷 정보</h1>
<blockquote>
<p>IP 패킷</p>
</blockquote>
<p><em>출발지 IP ,목적지 IP, 기타 정보</em></p>
<blockquote>
<p>TCP 세그먼트</p>
</blockquote>
<p><em>출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증정보</em></p>
<p><code>IP패킷에는 가지고 있지않는 TCP 세그먼트</code>를 이용하여 <code>출발지 PORT와 목적지 PORT</code>를 가지게 되면서 같은 <code>IP에 고유의 포트를 지정하면서 전송</code>을 보낼 수 있게됩니다.</p>
<h1 id="paekis-jeongbo"><a href="#paekis-jeongbo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#패킷-정보"></a> 패킷 정보</h1>
<blockquote>
<p>TCP/IP<br>
이제 데이터 전송시에 <code>출발지 IP,목적지 IP(IP 프로토콜)</code>과 <code>출발지 PORT, 목적지 PORT(TCP 세그먼트)</code>를 함께 보내게 되면서 <code>같은 IP내에서 프로세스를 구분</code>할 수 있게되었습니다.</p>
</blockquote>
<blockquote>
<p>TCP/IP 통신 예제</p>
</blockquote>
<ul>
<li>출발지 IP 127.0.0.1 , 목적지 IP 127.0.0.2</li>
<li><code>게임 서버 출발지 포트 9000 , 목적지 포트 12000</code></li>
<li><code>메인 서버 출발지 포트 8080 , 목적지 포트 8090</code></li>
<li><code>동영상 서버 출발지 포트 21000, 목적지 포트 22000</code></li>
</ul>
<p><code>게임서버</code>로 <code>127.0.0.1의 IP 출발지 포트 9000번</code>에서 <code>127.0.0.2 목적지 포트 12000번</code>으로 데이터 전송이 가능합니다.</p>
<p><code>메인서버</code>는 <code>127.0.0.1 IP 출발지 포트 8080번</code>에서 <code>127.0.0.2 목적지 포트 8090</code>으로 통신을 주고받을 수 있게 됩니다.</p>
<p><code>동영상 서버</code>의 경우 <code>127.0.0.1 21000번 포트</code>에서 목적지 포트 <code>127.0.0.2 22000번 포트</code>로 통신을 가능하게 할 수 있습니다.</p>
<p>결론적으로, 포트를 사용하게되면 이렇게 다양한 같은 아이피와의 구별점이 생겨 통신하는데에 있어서 <code>프로세스를 구분</code>할 수 있게 됩니다. 쉽게 생각하면 IP는 하나의 아파트 동을 나타내고 PORT는 동호수를 나타낸다고 생각하면 매우 쉽습니다.</p>
<h1 id="portyi-teugjing"><a href="#portyi-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#port의-특징"></a> PORT의 특징</h1>
<ul>
<li><code>0~65535</code>: 포트 할당이 가능합니다.</li>
<li><code>0~1023</code>: 잘 알려진 포트로 대부분 포트가 <code>사용중일 가능성</code>이 있기때문에 사용하지 않는것을 권장드립니다.</li>
</ul>
<blockquote>
<p>대표적인 PORT 번호</p>
</blockquote>
<ul>
<li>FTP 20,21</li>
<li>TELNET 23</li>
<li>HTTP 80</li>
<li>HTTPS 443<br>
대표적인 포트로는 위의 포트 번호처럼 이미 할당이 되어있습니다.</li>
</ul>
<h1 id="dns-domain-name-system"><a href="#dns-domain-name-system" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#dnsdomain-name-system"></a> DNS(Domain Name System)</h1>
<p>자, 이제 여기까지 살펴보면 IP,PORT를 통해 데이터 통신의 프로세스를 구분할 수 있다는것을 알 수 있었습니다.</p>
<blockquote>
<p>하지만 매번 클라이언트와 서버쪽에서 IP를 기억하고 있다가 매번 전송을 해야할까요?</p>
</blockquote>
<p>기억하고 있기에는 매우많은 IP를 가지고 있습니다. 또한, 과거와 현재 쓰이는 IP는  쉽게 변경이 가능합니다. 이것의 문제점을 해결하기 위해 나온것이 바로 <code>DNS(Domain Name System) 도메인 네임시스템</code>이라고 이라고합니다. 즉 하나의 전화번호부처럼 사용할 수 있고, 도메인명을 IP 주소로 변환하여 사용이 가능합니다.</p>
<h1 id="dns-domain-name-system-eun-eoddeohge-dongjaghage-doelggayo"><a href="#dns-domain-name-system-eun-eoddeohge-dongjaghage-doelggayo" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#dnsdomain-name-system은-어떻게-동작하게-될까요"></a> DNS(Domain Name System)은 어떻게 동작하게 될까요?</h1>
<p>만약 저희가 <code>www.google.com</code>의 <code>도메인명</code>을 가지고 <code>서버에 요청</code>을 한다고 가정해보겠습니다.</p>
<ol>
<li><code>도메인명</code>을 바탕으로 <code>DNS서버에서 해당 도메인을 가지고 있는 IP를 전달</code>받습니다.</li>
<li><code>클라이언트</code>는 <code>DNS서버로 부터 응답받은 목적지 IP를 바탕으로 해당 서버에 접속</code>하게 됩니다.</li>
</ol>
<h1 id="jeongri"><a href="#jeongri" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#정리"></a> 정리</h1>
<p>지금까지 포스팅한 내용들을 살펴보면 <code>인터넷 통신이 어떻게 구조</code>를 이루고 있는지와 <code>IP(Internet protocal)이 어떻게 통신되고 장단점</code>이 무엇인지를 살펴보았습니다.<br>
그리고 <code>IP의 문제점들을 해결</code>하기 위해 나온 <code>TCP/IP(TCP,UDP)의 동작원리</code>를 배울 수 있었습니다.마지막으로 이번장에 정리한 <code>PORT가 필요한 이유와 DNS 서버 동작</code>에 대해서 정리해보았습니다.</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>NETWORK</tag>
        <tag>PORT</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Network TCP와 UDP</title>
    <url>/Network-20210108-network-02-tcp-udp/</url>
    <content><![CDATA[<h1 id="inteones-peurotokolyi-4gyeceung"><a href="#inteones-peurotokolyi-4gyeceung" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#인터넷-프로토콜의-4계층"></a> 인터넷 프로토콜의 4계층</h1>
<p><code>인터넷 프로토콜의 4계층</code>에 대해서 살펴보겠습니다.</p>
<table>
<thead>
<tr>
<th>계층</th>
<th>프로토콜</th>
</tr>
</thead>
<tbody>
<tr>
<td>애플리케이션 계층</td>
<td>HTTP, FTP</td>
</tr>
<tr>
<td>전송 계층</td>
<td>TCP,UDP</td>
</tr>
<tr>
<td>인터넷 계층</td>
<td>IP</td>
</tr>
<tr>
<td>네트워크 인터페이스 계층</td>
<td>Empty</td>
</tr>
</tbody>
</table>
<p><code>인터넷 프로토콜은</code> 해당 <code>총 4개의 계층</code>으로 이루어져있고 <code>애플리케이션 계층, 전송계층, 인터넷계층, 네트워크 인터페이스 계층</code> 으로 구성되어있습니다.</p>
<h1 id="peurotokol-gyeceung"><a href="#peurotokol-gyeceung" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#프로토콜-계층"></a> 프로토콜 계층</h1>
<ul>
<li>
<p>애플리케이션<br>
<code>애플리케이션 계층</code>은 <code>웹 브라우저(크롬), 네트워크 , 게임, 채팅 프로그램</code>으로 구성되어있습니다. 그리고 <code>Socket 라이브러리</code>로 구성되어 있습니다.</p>
</li>
<li>
<p>OS(Operation System)<br>
OS계층은 <code>TCP, UDP, IP(Internet Protocal)</code> 로 구성되어 있습니다.</p>
</li>
<li>
<p>네트워크 인터페이스<br>
LAN 드라이버, LAN 장비, LAN카드</p>
</li>
</ul>
<p><code>네트워크 인터페이스</code>에서 <code>LAN카드</code>를 통해 <code>인터넷에 접근</code>하게 되고 <code>서버에 전송을 진행</code>하게 됩니다.</p>
<blockquote>
<p>전송 과정</p>
</blockquote>
<ol>
<li>애플리케이션 계층에서 클라이언트가 <code>&quot;Request Message&quot;</code> <code>메시지를 생성</code>시킵니다.</li>
<li>애플리케이션 계층에서 해당 메시지들을 <code>Socket라이브러</code>를 통해 전달이 됩니다.</li>
<li>OS계층에서 <code>TCP 정보를 생성</code>하여 <code>TCP세그먼트를 씌워 메시지 데이터를 포함</code>시킵니다.</li>
<li>OS계층에서 <code>IP 패킷이 생성되고 TCP데이터를 포함</code>시킵니다.</li>
<li>네트워크 인터페이스 계층에서 <code>패킷 단위</code>로 <code>LAN 카드 장비</code>를 통해 인터넷(물리적정보에) 접속하게 되어 해당 찾고자하는 <code>서버에 요청</code>을 보내게 됩니다.</li>
</ol>
<h1 id="ip-paekis-jeongbo"><a href="#ip-paekis-jeongbo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#ip-패킷-정보"></a> IP 패킷 정보</h1>
<p><code>패킷정보는</code> <code>출발지 IP랑 목적지 IP, 기타</code> 등등의 값을 가지고 해당 <code>전송데이터를 패킷</code>으로 감싸주는 형태로 진행됩니다.</p>
<h1 id="tcp-ip-paekis-jeongbo"><a href="#tcp-ip-paekis-jeongbo" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#tcpip-패킷-정보"></a> TCP/IP 패킷 정보</h1>
<ul>
<li><code>IP 패킷: 출발지 IP, 목적지 IP, 기타 데이터</code></li>
<li><code>TCP 세그먼트: 출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증 정보</code></li>
</ul>
<p>IP패킷안에 <code>TCP세그먼트를 감싸고</code> 그안에 <code>전송데이터</code>를 담아서 <code>네트워크상에 전송</code>되게 됩니다.<br>
즉, <code>IP만으로는 해결할 수 없었던 출발지,목적지 PORT번호</code>가 있기때문에 <code>전송제어나 순서보장, 검증정보를 통해 문제점들을 해결</code> 할 수 있게 되었습니다.</p>
<h1 id="tcp-transmission-control-protocal"><a href="#tcp-transmission-control-protocal" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#tcptransmission-control-protocal"></a> TCP(Transmission Control Protocal)</h1>
<p><code>TCP(Transmission Control Protocal)</code>는 <code>전송 제어 프로토콜</code>이라고 불리어 오며 특징들에 대해서 살펴보도록 하겠습니다.</p>
<ol>
<li>연결지향 - <code>TCP 3 Way handshake(가상 연결)</code><br>
개념적으로만 연결된 것을 의미합니다.</li>
<li>데이터 전달 보증<br>
<code>패킷 누락시 메시지를 못받는지를 알 수 있습니다.</code> 데이터가 전송되고 데이터가 잘 받았는지를 확인할 수 있습니다.</li>
<li>순서 보장<br>
<code>순서를 보장해줍니다.</code></li>
</ol>
<blockquote>
<p>예시</p>
</blockquote>
<p><code>패킷1,패킷2,패킷3을 순서대로 보낸다고 가정</code>하면 패킷을 보내다가 노드의 의 접근이 바뀌어 <code>순서가 정확하게 오지 않았을 경우</code> 서버에서 해당 순서를 확인하여 잘못되었음을 판단을 하게 됩니다. 이때, 순서가 잘못 들어온 <code>패킷이 3번</code>이라고 가정하면 해당되는 <code>패킷의 순서</code>부터 다시 <code>재전송을 요청</code>하게 됩니다. 즉, 최적화를 내부적으로 진행할 수 있습니다.</p>
<ol start="4">
<li>신뢰할 수  있는 프로토콜<br>
현재는 <code>TCP가 대부분의 전송</code>에 있어서 사용되고 있으며 <code>매우 중요한 개념</code>입니다.</li>
</ol>
<h1 id="tcp-3way-handshake"><a href="#tcp-3way-handshake" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#tcp-3way-handshake"></a> TCP 3way handshake</h1>
<ul>
<li><code>SYN:</code> 접속을 요청합니다.</li>
<li><code>ACK:</code> 요청을 수락합니다.</li>
</ul>
<ol>
<li>클라이언트가 서버에게 <code>SYN(Syncronized)의 connect 연결과정을 요청</code>합니다.</li>
<li>서버는 해당 클라이언트부터 SYN을 전송받고 클라이언트에게 <code>SYN+ACK(연결 상태)</code>를 함께 전송합니다.</li>
<li>클라이언트는 서버로 부터 해당 <code>SYN+ACK(연결상태)를 전송받고 다시 서버에게 잘 받았다는 의미로 ACK</code>을 전송시켜주게 됩니다.</li>
<li>해당 <code>ACK을 전송받은 서버</code>는 이때 잘 연결되었다는 의미로 알고 <code>데이터를 전송</code>시켜줍니다.</li>
</ol>
<p>이러한 <code>3way-handshake과정은</code> 클라이언트와 서버의 신뢰관계(연결 상태를 확인)하는 과정을 진행하는 것이라고 생각하시면 됩니다.</p>
<h1 id="udp-user-datagram-protocal"><a href="#udp-user-datagram-protocal" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#udpuser-datagram-protocal"></a> UDP(User Datagram Protocal)</h1>
<p><code>UDP(User Datagram Protocal)는</code> <code>사용자 데이터그램 프로토콜</code>이라고 불리어옵니다.</p>
<p>TCP와 매우 대조적인 특징을 가지고 있는데 살펴보겠습니다.</p>
<ol>
<li>연결지향 - TCP와는 다르게 TCP 3 way-handshake가 없습니다.</li>
<li>데이터 전달 보증이 되지 않습니다.</li>
<li>순서가 보장되지 않습니다.</li>
<li>데이터 전달 및 순서가 보장되지 않지만 매우 단순하고 빠른 특징을 가지고 있습니다.</li>
</ol>
<p>즉, IP와 유사하지만 <code>UDP에는</code> <code>PORT와 체크섬(Checksum)</code>이 존재하게 됩니다. <code>체크섬(Checksum)은</code> <code>메시지의 검증 데이터</code>를 일컫는 말입니다. 그리고 애플리케이션에서 추가작업이 필요로 될 수 있습니다.</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>NETWORK</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Network 인터넷 IP(Internet Protocal) 및 패킷(Packet)</title>
    <url>/Network-20210108-network-01-internet-communication/</url>
    <content><![CDATA[<h1 id="inteoneseseo-keompyuteo-duleun-eoddeohge-tongsineul-halggayo"><a href="#inteoneseseo-keompyuteo-duleun-eoddeohge-tongsineul-halggayo" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#인터넷에서-컴퓨터-둘은-어떻게-통신을-할까요"></a> 인터넷에서 컴퓨터 둘은 어떻게 통신을 할까요?</h1>
<p>단순히 생각해보면 <code>클라이언트에서 메시지</code>를 보내면 <code>서버에서 해당 메시지</code>를 받고 정상적으로 받았다면 응답메시지를 보내주게 됩니다.</p>
<h1 id="inteones"><a href="#inteones" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#인터넷"></a> 인터넷</h1>
<h3 id="tongsineul-halddae-gwayeon-eodireul-tonghaeseo-keulraieonteuwa-seobeoga-tongsini-ganeunghaejil-su-isseosseulggayo"><a href="#tongsineul-halddae-gwayeon-eodireul-tonghaeseo-keulraieonteuwa-seobeoga-tongsini-ganeunghaejil-su-isseosseulggayo" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#통신을-할때-과연-어디를-통해서-클라이언트와-서버가-통신이-가능해질-수-있었을까요"></a> 통신을 할때 과연 어디를 통해서 클라이언트와 서버가 통신이 가능해질 수 있었을까요?</h3>
<p>바로, <code>인터넷</code>이라는 <code>개념</code>때문인데 <code>인터넷은 상당히 복잡한 망</code>으로 구성되어 있습니다. 각각의 인터넷안에 연결된 노드들 끼리 수도없이 복잡하게 얽혀져 있습니다.</p>
<h1 id="ip-internet-protocal"><a href="#ip-internet-protocal" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#ipinternet-protocal"></a> IP(Internet Protocal)</h1>
<p>이렇게 인터넷을 통해서 데이터를 전송하는 경우에는 <code>IP라는 인터넷프로토콜 주소</code>를 붙여서 전송시키는 경우가 많습니다.</p>
<blockquote>
<p>데이터 전송 예시<br>
만약에 클라이언트 <code>IP:127.0.0.1의 주소</code>에서 <code>IP:127.0.0.2의 주소</code>로 데이터를 <code>전송</code>한다고 가정해보겠습니다.<br>
이때 <code>클라이언트</code>는 찾고자하는 <code>서버의 IP를 검색</code>을 진행하면 <code>127.0.0.1의 IP주소</code>를 가지고 인터넷의 노드를 탐색하면서 <code>IP:127.0.0.2의 주소</code>를 찾아서 서버는 해당 클라이언트의 요청을 받고 해당 <code>데이터</code>들을 넘겨주게 됩니다.</p>
</blockquote>
<h1 id="ip-internet-protocla-yi-yeoghal"><a href="#ip-internet-protocla-yi-yeoghal" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#ipinternet-protocla의-역할"></a> IP(Internet Protocla)의 역할</h1>
<p><code>인터넷 프로토콜의 역할은</code> <code>지정된 IP주소</code>를 해당 <code>IP 주소(Address)</code>에 데이터를 전달시킵니다. 이때, <code>패킷(Packet)</code>이라는 통신 단위로 데이터를 전달하게 됩니다.</p>
<h1 id="ip-paekis-packet"><a href="#ip-paekis-packet" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#ip-패킷packet"></a> IP 패킷(Packet)</h1>
<p><code>IP패킷은</code> <code>출발지 IP</code>와 <code>목적지IP</code>, <code>기타 데이터사항</code>들을 감싸서 데이터를 <code>전송</code>합니다.</p>
<blockquote>
<p>클라이언트의 패킷은 어떻게 전달될까요?</p>
</blockquote>
<p><code>출발지 IP, 목적지 IP, 데이터 등등의 값</code>을 가지고 해당 <code>클라이언트</code>는 <code>IP패킷</code>을 <code>인터넷상에 던져주게 됩니다.</code> 노드끼리 해당 <code>목적지 IP</code>를 <code>탐색</code>하면서 <code>서버 IP</code>를 찾아냅니다. 해당 <code>서버IP</code>를 찾게 되면 <code>해당 서버에게 데이터를 패킷의 형태로 전송</code>하게 됩니다.</p>
<blockquote>
<p>서버의 패킷은 어떻게 전달 될까요?</p>
</blockquote>
<p><code>서버 IP를 출발지 IP로 지정</code>하고, 전달하고자 하는 <code>클라이언트의 아이디 목적지 IP</code>에게 해당 요청에 대한 <code>성공,실패 유무를 반환</code>하여 <code>HTTP의 상태값과 함께 전송</code>시키게 됩니다. 클라이언트와 마찬가지로 인터넷상의 <code>노드들은 목적지 IP를 탐색</code>하여 클라이언트에게 <code>패킷형태</code>로 전송시켜주게 됩니다.</p>
<h1 id="ip-peurotokolyi-hangye"><a href="#ip-peurotokolyi-hangye" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#ip-프로토콜의-한계"></a> IP 프로토콜의 한계</h1>
<ul>
<li>
<p>비연결성<br>
패킷을 받을 대상이 없거나 <code>서비스 불능</code> 상태여도 <code>패킷을 전송</code>하게 됩니다. 예를 들면, 해당 서버 <code>PC가 꺼져있는 경우</code> <code>불능상태</code>이기때문에 이때에도 <code>패킷을 전송</code>해버리는 불상사가 발생하게 됩니다.</p>
</li>
<li>
<p>비신뢰성<br>
<code>중간에 패킷이 사라지는경우</code>가 생길 수 있습니다. 클라이언트가 인터넷안에서 노드가 꺼진 노드일 경우 이 <code>패킷들은 손실되어 더이상 처리가 되지 않을 수 있습니다.</code></p>
</li>
</ul>
<p><code>패킷이 순서대로 처리</code>되지 않을 수 있습니다. 순서대로 처리되지 않을시 같은 <code>IP는 어떻게 구분할 수 있을지에 대한 문제</code>가 생길 수 있습니다.</p>
<blockquote>
<p>패킷 순서 오류 예시</p>
</blockquote>
<p>클라이언트에서 <code>[&quot;HTTP Message1&quot;], [&quot;HTTP Message2&quot;]</code>를 전송한다고 가정하였을때 패킷이 다른노드를 타고 들어갈 수 있는 경우가 발생합니다. 클라이언트에서는<br>
<code>[&quot;HTTP Message1&quot;] -&gt; [&quot;HTTP Message2&quot;]</code> 의 순서로 데이터를 전송하였지만 서버측에서는 <code>[&quot;HTTP Message2&quot;] -&gt; [&quot;HTTP Message1&quot;]</code>의 순서로 데이터를 받을 수 있는 경우가 발생합니다.</p>
<ul>
<li>프로그램 구분<br>
<code>같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상</code>이라면 <code>프로그램을 정확히 구분할 수가 없게</code>됩니다.</li>
</ul>
<blockquote>
<p>TCP/IP의 등장</p>
</blockquote>
<p>결론적으로 이러한 <code>문제들을 해결하기 위해</code> <code>TCP/IP</code>라는 개념이 등장하게 되었으며 다음 포스팅에서 <code>TCP/IP</code>에 대해 자세하게 살펴볼 예정입니다.</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>NETWORK</tag>
        <tag>INTERNET</tag>
        <tag>TCP</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 Mootube 15591</title>
    <url>/BOJ-20210108-boj-mootube/</url>
    <content><![CDATA[<h1 id="baegjun-mootube-15591-munje"><a href="#baegjun-mootube-15591-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-mootube-15591-문제"></a> <a href="https://www.acmicpc.net/problem/15591" target="_blank" rel="noopener">백준 MOOTUBE 15591 문제</a></h1>
<hr>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>농부 존은 남는 시간에 MooTube라 불리는 동영상 공유 서비스를 만들었다. MooTube에서 농부 존의 소들은 재밌는 동영상들을 서로 공유할 수 있다. 소들은 MooTube에 1부터 N까지 번호가 붙여진 N (1 ≤ N ≤ 5,000)개의 동영상을 이미 올려 놓았다. 하지만, 존은 아직 어떻게 하면 소들이 그들이 좋아할 만한 새 동영상을 찾을 수 있을지 괜찮은 방법을 떠올리지 못했다.</p>
<p>농부 존은 모든 MooTube 동영상에 대해 “연관 동영상” 리스트를 만들기로 했다. 이렇게 하면 소들은 지금 보고 있는 동영상과 연관성이 높은 동영상을 추천 받을 수 있을 것이다.</p>
<p>존은 두 동영상이 서로 얼마나 가까운 지를 측정하는 단위인 “USADO”를 만들었다. 존은 N-1개의 동영상 쌍을 골라서 직접 두 쌍의 USADO를 계산했다. 그 다음에 존은 이 동영상들을 네트워크 구조로 바꿔서, 각 동영상을 정점으로 나타내기로 했다. 또 존은 동영상들의 연결 구조를 서로 연결되어 있는 N-1개의 동영상 쌍으로 나타내었다. 좀 더 쉽게 말해서, 존은 N-1개의 동영상 쌍을 골라서 어떤 동영상에서 다른 동영상으로 가는 경로가 반드시 하나 존재하도록 했다. 존은 임의의 두 쌍 사이의 동영상의 USADO를 그 경로의 모든 연결들의 USADO 중 최솟값으로 하기로 했다.</p>
<p>존은 어떤 주어진 MooTube 동영상에 대해, 값 K를 정해서 그 동영상과 USADO가 K 이상인 모든 동영상이 추천되도록 할 것이다. 하지만 존은 너무 많은 동영상이 추천되면 소들이 일하는 것이 방해될까 봐 걱정하고 있다! 그래서 그는 K를 적절한 값으로 결정하려고 한다. 농부 존은 어떤 K 값에 대한 추천 동영상의 개수를 묻는 질문 여러 개에 당신이 대답해주기를 바란다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>입력의 첫 번째 줄에는 N과 Q가 주어진다. (1 ≤ Q ≤ 5,000)</p>
<p>다음 N-1개의 줄에는 농부 존이 직접 잰 두 동영상 쌍의 USADO가 한 줄에 하나씩 주어진다. 각 줄은 세 정수 pi, qi, ri (1 ≤ pi, qi ≤ N, 1 ≤ ri ≤ 1,000,000,000)를 포함하는데, 이는 동영상 pi와 qi가 USADO ri로 서로 연결되어 있음을 뜻한다.</p>
<p>다음 Q개의 줄에는 농부 존의 Q개의 질문이 주어진다. 각 줄은 두 정수 ki와 vi(1 ≤ ki ≤ 1,000,000,000, 1 ≤ vi ≤ N)을 포함하는데, 이는 존의 i번째 질문이 만약 K = ki라면 동영상 vi를 보고 있는 소들에게 몇 개의 동영상이 추천될 지 묻는 것이라는 것을 뜻한다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>Q개의 줄을 출력한다. i번째 줄에는 농부 존의 i번째 질문에 대한 답변이 출력되어야 한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>4 3<br>
1 2 3<br>
2 3 2<br>
2 4 4<br>
1 2<br>
4 1<br>
3 1</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>3<br>
0<br>
2</p>
<h3 id="hinteu"><a href="#hinteu" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#힌트"></a> 힌트</h3>
<p>농부 존은 1번 동영상과 2번 동영상이 USADO 3을 가지고, 2번 동영상과 3번 동영상이 USADO 2를 가지고, 2번 동영상과 4번 동영상이 USADO 4를 가진다고 했다. 이것에 기반해서 1번 동영상과 3번 동영상의 USADO는 min(3,2)=2가 되고, 1번 동영상과 4번 동영상의 USADO는 min(3,4)=3이 되고, 3번 동영상과 4번 동영상의 USADO는 min(2,4)=2가 된다.</p>
<p>농부 존은 K=1일 때 2번 동영상, K=3일 때 1번 동영상, K=4일 때 1번 동영상을 보면 각각 몇 개의 동영상이 추천될까 궁금해하고 있다. K=1일 때 2번 동영상에서 추천되는 동영상은 1, 3, 4번 동영상이다. K=4일 때 1번 동영상으로부터 추천되는 동영상은 없다. 그러나 K=3일때는 1번 동영상에서 2번 동영상과 4번 동영상이 추천된다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>문제를 살펴보면 <code>K값은 유사도</code>를 뜻하고 <code>K값이상으로 연결된 노드만 동영상을 추천</code>시킬 수 있습니다. <code>인접된 노드들과의 관계에서 정답</code>을 구해야하므로 <code>인접리스트</code>로 풀어야겠다는 생각을 하게 되었습니다.</p>
<p>가장 먼저 인접리스트를 생성시켜서 모든 값들을 넣어주고 <code>(유사도, 출발시작 노드)</code>의 값을 바탕으로 BFS를 진행해줍니다. 모든 경우에 대해서 매번 다르게 수행해야하므로 check를 모두 초기화시키면서 진행합니다. 즉, 해당노드에서 <code>시작되는 노드와 연결된 값</code>을 모두 찾아줍니다. 그리고 <code>유사도값 이상</code>인 <code>가중치값</code>을 가진 값들을 찾아주면 됩니다.</p>
<p>노드에 대한 체크는 <code>check변수</code>로 해당 노드를 방문했는지를 체크해주고 해당 인접리스트에 가지고 있는 <code>value의 값이 k이상일때만</code> 다음 노드를 방문할 수 있게 해줍니다. 해당 조건을 만족한다면 answer의 값을 카운팅 시켜주면 동영상 추천이 가능한 노드의 개수를 구할 수 있게 됩니다. <code>결론적으로 인접리스트와 BFS를 활용한 문제</code>였으며 문제가 길고 복잡해보였지만 생각을 조금만 달리한다면 쉽게 풀 수 있던 문제였습니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">baekjoon_Mootube15591_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> q;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Pair&gt;&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        q = Integer.parseInt(st.nextToken());</span><br><span class="line">        initListNode();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> value = Integer.parseInt(st.nextToken());</span><br><span class="line">            arr.get(x).add(<span class="keyword">new</span> Pair(y,value));</span><br><span class="line">            arr.get(y).add(<span class="keyword">new</span> Pair(x,value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> k = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> v = Integer.parseInt(st.nextToken());</span><br><span class="line">            bfs(k, v);          <span class="comment">// k이상의 유사도, 시작노드</span></span><br><span class="line">            System.out.println(answer);</span><br><span class="line">            answer=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initListNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntStream.rangeClosed(<span class="number">0</span>, n).forEach(i -&gt; arr.add(<span class="keyword">new</span> ArrayList&lt;&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">5001</span>];</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        q.add(v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> node = q.remove();</span><br><span class="line">            <span class="comment">// 연결된 노드에 있는것들을 모두 가져와서 체크</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.get(node).size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = arr.get(node).get(i).y;</span><br><span class="line">                <span class="keyword">int</span> value = arr.get(node).get(i).value;</span><br><span class="line">                <span class="comment">// 방문하지 않은 노드이고, 가중치값이 k보다 크거나 같을 경우만 진행한다. 그 외의 경우에는 진행하지 않는다. 조건을 만족 X</span></span><br><span class="line">                <span class="keyword">if</span> (!check[y] &amp;&amp; value &gt;= k) &#123;</span><br><span class="line">                    q.add(y);</span><br><span class="line">                    check[y] = <span class="keyword">true</span>;</span><br><span class="line">                    answer++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>BFS</tag>
        <tag>인접리스트</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Letter Combinations of a Phone Number</title>
    <url>/Leetcode-20210108-leetcode-letter-combinations-of-a-phone-number/</url>
    <content><![CDATA[<h1 id="riskodeu-letter-combinations-of-a-phone-number"><a href="#riskodeu-letter-combinations-of-a-phone-number" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-letter-combinations-of-a-phone-number"></a> <a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">릿코드 Letter Combinations of a Phone Number</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="키패드"></p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: digits = “23”<br>
Output: [“ad”,“ae”,“af”,“bd”,“be”,“bf”,“cd”,“ce”,“cf”]</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: digits = “”<br>
Output: []</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: digits = “2”<br>
Output: [“a”,“b”,“c”]</p>
<h3 id="constraints"><a href="#constraints" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3>
<p>0 &lt;= digits.length &lt;= 4<br>
digits[i] is a digit in the range [‘2’, ‘9’].</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>패드에서 누를 수 있는 <code>모든 번호의 패드리스트</code>를 하나 생성시킵니다.<br>
해당 주어진 <code>패드의 정보를 가지고 DFS</code>를 수행합니다. 예를 들어 이 들어왔다면<br>
2-&gt;3번을 누를시에 갈수 있는 모든 경우를 찾아줍니다.</p>
<blockquote>
<p>Test Case</p>
</blockquote>
<p>예를 들면 23의 패드가 들어와서 해당 패드 영문자가 눌렸다고 가정할때 <em>abc / def</em> 가 있다고 가정할때 아래 처럼 나타낼 수 있습니다.</p>
<ul>
<li>a -&gt; d, a -&gt; e, a -&gt; f</li>
<li>b -&gt; d, b -&gt; e, b -&gt; f</li>
<li>c -&gt; d, c -&gt; e, c -&gt; f</li>
</ul>
<p>해당 형식으로 방문하고 체크합니다.<br>
DFS의 <em>Basement조건</em>은 digits 길이만큼 선택될 수 있기때문에 해당 조건일때 해당 값까지 쌓인 문자열을 answer 리스트에 넣어주고 <em>DFS를 수행하던것을 종료</em>시킵니다. 그러면 현재까지 생성된 <em>모든 조합을 출력</em>시킬 수 있습니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_letter_combinations_of_a_phone_number_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String[] padList = &#123;<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jki"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> List&lt;String&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        letterCombinations(<span class="string">"23"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(answer);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(digits,<span class="number">0</span>, <span class="string">""</span>);</span><br><span class="line">        answer.forEach(v-&gt; System.out.println(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String digits, <span class="keyword">int</span> cnt, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == digits.length())&#123;</span><br><span class="line">            answer.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String padArr = padList[(digits.charAt(cnt)-<span class="string">'0'</span>)-<span class="number">2</span>];</span><br><span class="line">        System.out.println(padArr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : padArr.toCharArray())&#123;</span><br><span class="line">            System.out.println(<span class="string">"dfs("</span>+digits+<span class="string">","</span>+(cnt+<span class="number">1</span>)+<span class="string">","</span>+(str+c)+<span class="string">")"</span>);</span><br><span class="line">            dfs(digits, cnt+<span class="number">1</span>,str+c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>완전탐색</tag>
        <tag>릿코드</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 Valid Parentheses</title>
    <url>/Leetcode-20210108-leetcode-validparentheses/</url>
    <content><![CDATA[<h1 id="riskodeu-leetcode-validparentheses"><a href="#riskodeu-leetcode-validparentheses" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-validparentheses"></a> <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">릿코드 leetcode ValidParentheses</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Given a string s containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is valid.</p>
<h3 id="an-input-string-is-valid-if"><a href="#an-input-string-is-valid-if" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#an-input-string-is-valid-if"></a> An input string is valid if:</h3>
<p>Open brackets must be closed by the same type of brackets.<br>
Open brackets must be closed in the correct order.</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: s = “()”<br>
Output: true</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: s = “()[]{}”<br>
Output: true</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: s = “(]”<br>
Output: false</p>
<h3 id="example-4"><a href="#example-4" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3>
<p>Input: s = “([)]”<br>
Output: false</p>
<h3 id="example-5"><a href="#example-5" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#example-5"></a> Example 5:</h3>
<p>Input: s = “{[]}”<br>
Output: true</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>(1). 스택을 이용하여 스택에 담긴 맨위에 값과 현재 들어오는 값과의 비교를 진행한다.</li>
<li>(2). 만약 괄호쌍의 짝은 맞으니 올바른 괄호가 아닐 경우에는 false를 리턴한다.</li>
<li>(3). 마지막으로 스택이 비어있다는것은 현재 모든값의 짝이 맞는것을 의미하므로 true를 리턴한다.</li>
</ul>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_ValidParentheses_kgh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isValidStack(<span class="string">"([)]"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidStack</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">boolean</span> answer = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray() )&#123;</span><br><span class="line">            <span class="comment">// 값을 집어 넣어준다</span></span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'('</span> || c == <span class="string">'['</span> || c == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == <span class="string">'('</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == <span class="string">'['</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'&#125;'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = stack.empty() ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>완전탐색</tag>
        <tag>릿코드</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java 3/E Item 42 익명클래스 보다는 람다를 사용하라</title>
    <url>/EffectiveJava-20210103-%EC%95%84%EC%9D%B4%ED%85%9C42-%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="igmyeongkeulraeseu-bodaneun-ramdareul-sayonghara"><a href="#igmyeongkeulraeseu-bodaneun-ramdareul-sayonghara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#익명클래스-보다는-람다를-사용하라"></a> 익명클래스 보다는 람다를 사용하라</h1>
<p>자바에서 함수 타입을 표현할 때 추상 메서드를 하나만 담은 인터페이스를 사용했습니다. 이러한 인터페이스의 인스턴스를 함수 객체(function object)라고 하여, 특정 함수나 동작을 나타내는 데 썼습니다.</p>
<p>1997년 JDK1.1 이 등장하면서 함수 객체를 만드는 주요 수단은 익명 클래스가 되었습니다.<br>
<code>문자열을 길이순</code>으로 <code>정렬</code>하는데, 정렬을 위한 비교 함수로 <code>익명 클래스</code>로 사용하였습니다.(과거)</p>
<blockquote>
<p>익명 클래스의 인스턴스를 함수 객체로 사용합니다.(낡은 기법)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comment 익명 클래스의 인스턴스를 함수 객체로 사용 - 낡은 기법!!!!</span></span><br><span class="line">Collections.sort(words, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(s1.length(), s2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>전략 패턴처럼, 함수 객체를 사용하는 <code>과거 객체 지향 디자인 패턴</code>에는 <code>익명 클래스</code>면 충분하였습니다. 위의 코드는 <code>Comparator 인터페이스</code>가 <code>정렬</code>을 담당하는 <code>추상전략</code>을 뜻하며, 문자열을 정렬하는 구체적인 전략을 <code>익명 클래스로 구현</code>했습니다.</p>
<p><code>하지만, 익명클래스 방식은 코드가 너무 길기 때문에 자바는 함수형 프로그래밍에 적합하지 않게 되었습니다.</code></p>
<blockquote>
<p>자바 8에서는 어떻게 변화되었을까요?</p>
</blockquote>
<p>추상 메서드 하나짜리 인터페이스는 특별한 의미를 인정받아 특별한 대우를 받게 되었습니다. 지금은 함수형 인터페이스라 부르는 이 인터페이스들의 인스턴스를 람다식(lambda expression, 람다)을 사용하여 만들수 있게 된 것입니다. 람다는 함수나 익명 클래스와 개념은 비슷하지만 코드는 훨씬 간결하게 처리할 수 있습니다.</p>
<blockquote>
<p>람다식을 함수 객체로 사용(익명 클래스 대체)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comment 람다식을 함수 객체로 사용 - 익명 클래스 대체</span></span><br><span class="line"><span class="comment">// comment 타입을 명시해야 코드가 더 명확할때마 제외하고는 람다의 모든 매개변수 타입은 생략하자</span></span><br><span class="line">Collections.sort(words, (s1,s2) -&gt; Integer.compare(s1.length(), s2.length()));</span><br></pre></td></tr></table></figure>
<p>여기서 람다, 매개변수(s1, s2) 반환값 타입은 각각 <code>Comparator&lt;String&gt;, String, int</code> 이지만 코드에서는 언급이 없습니다. 상황에 따라 컴파일러가 타입을 결정하지 못하는 경우가 있는데 그럴때는 프로그래머가 직접 명시를 해야합니다.</p>
<p><strong>타입을 명시해야 코드가 더 명확할 때만 제외하고는, 람다의 모든 매개변수 타입은 생략하도록 합니다.</strong></p>
<p>컴파일러가 타입을 추론하는데 필요한 정보는 대부분 제네릭에서 얻기 때문에 컴파일러는 람다의 타입을 추론할 수 없게 되어, 결국 우리가 일일이 명시해야합니다.</p>
<blockquote>
<p>비교자 생성 메서드를 사용하여 이 코드를 더 간결하게 만들어봅시다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(words, comparingInt(String::length));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>더 나아가 자바 8때 List 인터페이스에 추가된 sort 메서드를 이용하면 더욱더 짧아집니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">words.sort(comparingInt(String::length));</span><br></pre></td></tr></table></figure>
<p>람다를 언어 차원에서 지원하면서 기존에는 적합하지 않았던 곳에서도 함수 객체를 실용적으로 사용할 수 있게 되었습니다.</p>
<p>아이템 34의 Operation 열거타입을 예로 들어봅시다. apply 메서드의 동작이 상수마다 달라야해서 상수별 클래스 몸체를 사용해 각 상수에서 apply 메서드를 재정의합니다.</p>
<blockquote>
<p>상수별 클래스 몸체와 데이터를 사용한 열거 타입</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comment 상수별 클래스 몸체와 데이터를 사용한 열거 타입</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation&#123;</span><br><span class="line"></span><br><span class="line">    PLUS(<span class="string">"+"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">"-"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">"*"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    Operation(String symbol)&#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>아이템 34</strong>에서는 상수별 클래스 몸체를 구현하는 방식보다는 <code>열거 타입에 인스턴스 필드를 두는 편이 낫습니다.</code> 람다를 이용하면 후자의 방식, 즉 열거타입의 인스턴스 필드를 이용하는 방식으로 상수별로 다르게 동작하는 코드를 쉽게 구현할 수 있습니다.</p>
<p>단순히 각 열거 타입의 동작을 람다로 구현해 생성자에 넘기고, 생성자는 이 람다를 인스턴스 필드로 저장해둡니다. 그런 다음 <code>apply 메서드에서 필드에 저장된 람다를 호출하기만 하면 됩니다.</code></p>
<blockquote>
<p>함수객체(람다)를 인스턴스 필드에 저장해 상수별 동작을 구현한 열거타입</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation_lambda&#123;</span><br><span class="line">    PLUS(<span class="string">"+"</span>, (x,y) -&gt; x+y),</span><br><span class="line">    MINUS(<span class="string">"-"</span>, (x,y) -&gt; x-y),</span><br><span class="line">    TIMES(<span class="string">"*"</span>, (x,y) -&gt; x*y),</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>, (x,y) -&gt; x/y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator op;</span><br><span class="line"></span><br><span class="line">    Operation_lambda(String symbol, DoubleBinaryOperator op)&#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.op = op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> op.applyAsDouble(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>함수 객체 람다를 인스턴스 필드에 저장해 상수별 동작을 구현한 열거타입입니다. 열거 타입 상수의 동작을 표현한 람다를 <code>DoubleBinaryOperator 인터페이스</code>변수에 할당하였습니다. <code>java.util.function 패키지가 제공하는 다양한 함수</code> 인터페이스(아이템 44) 중 하나 인수를 받아서 결과를 반환시켜줍니다(double)</p>
<blockquote>
<p>핵심 정리</p>
</blockquote>
<p>람다 기반 Operation 열거 타입을 보면 상수별 클래스 몸체는 더 이상 사용할 이유가 없다고 느낄지 모르지만, 꼭 그렇지는 않습니다. 메서드나 클래스와 달리 <code>람다는 이름이 없고 문서화도 못한다. 따라서 코드 자체로 동작이 명확히 설명되지 않거나 코드 줄수가 많아지면 람다를 쓰지 말아야합니다</code></p>
<p><code>람다는 한줄일 때 가장 좋고 길어야 세줄</code> 안에 끝내는게 좋습니다. 열거 타입 생성자 안의 람다는 타입의 인스턴스 멤버에 접근을 할 수 없습니다. 따라서, 상수별 동작을 단 몇줄로 구현하기 어렵거나, <code>인스턴스 필드나 메서드를 사용해야만 하는 상황</code>이라면 <code>상수별 클래스 몸체를 사용</code>해야합니다.</p>
<p><code>추상클래스의 인스턴스를 만들 때 람다를 쑬 수 없으니, 익명 클래스</code>를 써야합니다. 비슷하게 추상 메서드가 여러 개인 인터페이스의 인스턴스를 만들 때도 익명 클래스를 쓸 수 있습니다.</p>
<p>마지막으로 람다는 자신을 참조할 수 없습니다. 람다에서의 <code>this 키워드는 바깥 인스턴스</code>를 가리킵니다. 그래서 함수 객체가 자신을 참조해야 한다면 반드시 익명 클래스를 써야합니다. 따라서 람다를 직렬화하는 일은 극히 삼가해야합니다.</p>
<blockquote>
<p>요약</p>
</blockquote>
<p>자바가 8로 판올림 되면서 작은 함수 객체를 구현하는데 적합한 람다가 도입되었습니다. <code>익명 클래스는(함수형 인터페이스가 아닌) 타입의 인스턴스를 만들 때만 사용해야합니다.</code> 람다는 작은 함수 객체를 아주 쉽게 표현할 수 있어서 함수형 프로그래밍의 지평을 열게 되었습니다.</p>
<p><a href="https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item42" target="_blank" rel="noopener">https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item42</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>EffectiveJava3/E</tag>
        <tag>람다</tag>
        <tag>익명클래스</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java 3/E Item 43 람다보다는 메서드 참조를 사용하라</title>
    <url>/EffectiveJava-20210103-%EC%95%84%EC%9D%B4%ED%85%9C43-%EB%9E%8C%EB%8B%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="ramdabodaneun-meseodeu-camjoreul-sayonghara"><a href="#ramdabodaneun-meseodeu-camjoreul-sayonghara" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#람다보다는-메서드-참조를-사용하라"></a> 람다보다는 메서드 참조를 사용하라</h1>
<p><code>람다가 익명 클래스보다 나은 점 중에서 가장 큰 특징은 간결함</code>입니다. 그런데 자바에는 함수객체를 심지어 람다보다도 더 간결하게 만드는 방법이 있습니다. 바로 <code>메서드 참조(Method reference)</code>입니다.</p>
<p>다음 코드는 임의의 키와 Integer 값의 매핑을 관리하는 프로그램의 일부입니다.</p>
<p>키의 인스턴스 개수로 해석된다면, 이 프로그램은 멀티셋(multiset)을 구현한게 됩니다.<br>
<code>이 코드는 키가 맵 안에 없다면 키와 숫자 1을 매핑하고 이미 존재한다면 기존 매핑 값을 증가시킵니다.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//comment 람다보다도 더 간결하게 만드는 방법은 -&gt; 메서드 참조</span></span><br><span class="line">Map&lt;String,Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//comment java 8 추가된 Map merge 메서드를 사용하기 (키가 없다면 &#123;키,쌍&#125; 그대로저장, 있다면 현재값과 주어진값에 적용후 그 결과로 현재값을 덮어쓴다</span></span><br><span class="line">m.merge(<span class="string">"1"</span>,<span class="number">1</span>,(count, increment)-&gt;count+increment);</span><br><span class="line">System.out.println(m.get(<span class="string">"1"</span>)); <span class="comment">// 1</span></span><br><span class="line">m.merge(<span class="string">"1"</span>,<span class="number">1</span>,(count, increment)-&gt;count+increment);</span><br><span class="line">System.out.println(m.get(<span class="string">"1"</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>자바 8때 Map에 추가된 merge메서드를 사용하였습니다. merge 메서드는 키,값,함수를 인자로 받으며, 주어진 키가 이미 있다면(세번째 인수로 받은) 함수를 현재 값과 주어진 값에 적용한 후에, 그 결과로 현재 값을 덮어씌웁니다.<br>
<code>즉, 맵에 {키,함수의 결과} 쌍을 저장합니다</code> 이코드는 merge 메서드의 전형적인 쓰임을 잘 보여주고 있습니다.</p>
<blockquote>
<p>조금 더 최적화는 어떻게 시킬 수 있을까요?</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// comment 위와 같은 merge기능은 count, increment가 공간을 꽤나 차지하기때문에 이것을 더 쉽게 람다로 바꾸어보자.</span><br><span class="line">m.merge(&quot;1&quot;, 1, Integer::sum);</span><br><span class="line">System.out.println(m.get(&quot;1&quot;)); // 3</span><br></pre></td></tr></table></figure>
<p>매개변수는 직접적으로 크게 하는일이 없기때문에 일 없이 공간을 차지하는 경우가 많습니다. 이때, <code>자바 8이 되면서 Integer 클래스(와 모든 기본타입의 박싱 타입)</code>는 이 람다와 기능이 같은 <code>정적 메서드 sum을 제공</code>하기 시작하였습니다.<br>
<code>따라서, 람다 대신 이 메서드의 참조를 전달하면 똑같은 결과를 더 보기 좋게 얻을 수 있습니다.</code></p>
<blockquote>
<p>람다로 할 수 없는 일이라면 메서드 참조로도 할 수 없다.</p>
</blockquote>
<p>메서드 참조를 사용하는편이 보통 더 짧고 간결하므로, <code>람다로 구현했을 때 너무 길거나 복잡하다면 메서드 참조가 더 좋은 대안</code>이 되어줍니다. 즉, <code>람다로 작성할 코드를 새로운 메서드</code>에 담은 다음, <code>람다 대신 그 메서드 참조</code>를 사용하는 식입니다.</p>
<blockquote>
<p>때론 람다가 메서드 참조보다 간결할 때가 있다.</p>
</blockquote>
<p>주로 메서드와 람다가 같은 클래스에 있을때 그렇습니다. goshThisClassNameIsHumongous::action 클래스 안에 있다고 가정하겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Item43;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoshThisClassNameIsHumongous</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Executor service = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 메서드 참조</span></span><br><span class="line">        service.execute( GoshThisClassNameIsHumongous::action);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 람다</span></span><br><span class="line">        service.execute(()-&gt;action());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>메서드 참조 쪽도 더 짧지도, 더 명확하지도 않습니다. 따라서 람다 쪽이 더 낫다고 할 수 있습니다.</code><br>
같은 선상에서 <code>java.util.function</code> 패키지가 제공하는 제네릭 정적 팩터리 메서드인 <code>Function.identity()</code>를 사용하기 보다는 똑같은 기능의 람다를 직접 사용하는 편이 더 낫다고 할 수 있습니다.</p>
<h1 id="meseodeu-camjoyuhyeongyi-daseosgaji"><a href="#meseodeu-camjoyuhyeongyi-daseosgaji" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#메서드-참조유형의-다섯가지"></a> 메서드 참조유형의 다섯가지</h1>
<blockquote>
<ol>
<li>정적 메서드를 가리키는 메서드입니다.</li>
</ol>
</blockquote>
<p><code>인스턴스 메서드를 참조하는 유형</code>은 <code>수신 객체(receiving object: 참조 대상 인스턴스)</code>를 특정하는 <code>한정적(bound)인스턴스 메서드 참조</code>이고, 다른 하나는 <code>수신 객체를 특정하지 않은 비한정적(unbound) 인스턴스 메서드 참조</code>입니다.</p>
<blockquote>
<ol start="2">
<li>한정적 참조<br>
근본적으로 <code>정적 참조</code>와 비슷합니다. <code>즉, 함수 객체가 받는 인수와 참조되는 메서드가 받는 인수가 똑같습니다.</code></li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>비한정적 참조<br>
<code>비한정적 참조</code>에서는 <code>함수 객체를 적용하는 시점에 수신 객체</code>를 알려줍니다. 이를 위해 수신 객체 전달용 매개변수가 매개변수 목록의 첫 번째로 추가되며, 그 뒤로는 참조되는 메서드 선언에 정의된 매개변수들이 뒤따릅니다.<br>
<code>비한정적 참조는 주로 스트림 파이프라인에서 매핑과 필터 함수</code>에 쓰입니다.</li>
</ol>
</blockquote>
<blockquote>
<p>4,5. 클래스 생성자를 가리키는 메서드 참조, 배열 생성자를 가리키는 메서드 참조<br>
마지막으로, 클래스 생성자를 가리키는 메서드 참조와 배열 생성자를 가리키는 메서드 참조가 있습니다. 생성자 참조는 팩터리 객체로 사용됩니다.</p>
</blockquote>
<table>
<thead>
<tr>
<th>인터페이스</th>
<th>함수 시그니처</th>
<th>예</th>
</tr>
</thead>
<tbody>
<tr>
<td>UnaryOperator</td>
<td>T apply(T t)</td>
<td>String::toLowerCase</td>
</tr>
<tr>
<td>BinaryOperator</td>
<td>T apply(T t1, T t2)</td>
<td>BigInteger::add</td>
</tr>
<tr>
<td>Predicate</td>
<td>boolean test(T t)</td>
<td>Collection::isEmpty</td>
</tr>
<tr>
<td>Function&lt;T,R&gt;</td>
<td>R apply(T t)</td>
<td>Arrays::asList</td>
</tr>
<tr>
<td>Supplier</td>
<td>T get()</td>
<td>Instant::now</td>
</tr>
<tr>
<td>Consumer</td>
<td>void accept(T t)</td>
<td>System.out::println</td>
</tr>
</tbody>
</table>
<blockquote>
<p>핵심 정리</p>
</blockquote>
<p><code>메서드 참조</code>는 람다의 간단명료한 대안이 될 수 있습니다. <code>메서드 참조 쪽이 짧고 명확하다면 메서드 참조를 쓰고, 그렇지 않을 때만 람다를 사용하라</code></p>
<p><a href="https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item43" target="_blank" rel="noopener">https://github.com/gwanhyeon/Effective-Java/tree/main/src/Item42</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>EffectiveJava3/E</tag>
        <tag>람다</tag>
        <tag>익명클래스</tag>
        <tag>메서드참조</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC @ResponseBody의 역할</title>
    <url>/Spring-20201231-responsebody%EC%9D%98-%EC%97%AD%ED%95%A0/</url>
    <content><![CDATA[<h1 id="responsebody"><a href="#responsebody" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#responsebody"></a> @ResponseBody</h1>
<p>스프링환경에서 개발을 진행하다보면 컨트롤러에서 <code>@ResponseBody</code>를 사용하는일이 많습니다. <code>@ResponseBody</code>를 사용하는것과 사용하지 않는것은 어떤차이점이 있을까요?</p>
<p>기본적으로 <code>Spring은 MVC</code> 환경에서 동작을 합니다. 이때 MVC의 동작을 간략하게 말씀드리겠습니다.</p>
<p>만약 사용자가 웹브라우저상에서 서버에게 <code>localhost:8080/mvc</code> 라는 경로로 요청을 진행한다고 가정하겠습니다.<br>
이때 Spring 내부의 <code>내장 톰캣 서버</code>가 해당 요청을 받아 들여 스프링 컨테이너는 해당 요청을 가지고 있는 <code>@Controller</code> 어노테이션이 붙여진 컨트롤러를 찾아주게됩니다.</p>
<blockquote>
<p>@Controller</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "Controller" (e.g. a web controller).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation serves as a specialization of &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment"> * allowing for implementation classes to be autodetected through classpath scanning.</span></span><br><span class="line"><span class="comment"> * It is typically used in combination with annotated handler methods based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>@Component</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotated class is a "component".</span></span><br><span class="line"><span class="comment"> * Such classes are considered as candidates for auto-detection</span></span><br><span class="line"><span class="comment"> * when using annotation-based configuration and classpath scanning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Other class-level annotations may be considered as identifying</span></span><br><span class="line"><span class="comment"> * a component as well, typically a special kind of component:</span></span><br><span class="line"><span class="comment"> * e.g. the &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125; annotation or AspectJ's</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.aspectj.lang.annotation.Aspect <span class="doctag">@Aspect</span>&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Fisher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Repository</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">     * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>해당 컨트롤러를 타고 들어가면 다음과 같은 구조를 볼 수 있습니다. 자세히 살펴보시면 <code>@Component</code> 어노테이션을 살펴보실 수 있습니다. 과연 이것의 어노테이션의 역할은 무엇일까요?<br>
즉, 기존의 Spring에서는 <code>@Bean</code>을 붙여 빈을 등록하던 것처럼 빈 클래스에 <code>@Component</code> 애노테이션을 붙여 빈을 등록할 수 있습니다. 따라서 <code>@Controller</code> 어노테이션 내부에는 해당 컨트롤러를 <code>@Bean</code> 으로 등록하는 역할도 하고 있다는 뜻입니다.<br>
@Component를 붙여 빈을 등록하면 클래스 이름의 첫 문자를 소문자로 바꾼 것이 빈의 이름(id)이 됩니다. 그리고 빈 객체가 생성되는 시점은 ApplicationContext 객체가 생성되는 시점이며 기본적으로 singleton scope 입니다.</p>
<p><code>localhost:8080/mvc</code>의 요청경로에 맞는 컨트롤러를 @Bean 컴포넌트 스캔을 통하여 해당 경로를 가지고 있는 컨트롤러를 찾아주게 됩니다.  만약 <code>@ResponseBody</code> 가 붙여져 있지 않다면 해당 모델에 값을 넘겨줄 수도 있고, String을 반환하게 되면 데이터를 넘겨주는것이 아니라 해당 View의 Path값에 맞게  모델값과 함께 반환시켜주게 됩니다.</p>
<p>간단한 예제로는</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/mvc"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>, <span class="string">"kgh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"root"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>형식을 들 수 있습니다. 모델값을 가져와 거기에 <code>&lt;Key,value&gt;</code> 형식으로 값을 넣어주고 반환값을 String으로 한 <code>'root' View Path</code>를 반환시켜주게 됩니다. 즉, 컨트롤러에서 리턴 값으로 문자를 반환하면 <code>뷰 리졸버( viewResolver )</code>가 화면을 찾아서 처리를 진행합니다.</p>
<blockquote>
<p>@ResponseBody를 붙여주면 무슨일이 발생할까요?</p>
</blockquote>
<p><code>@ResponseBody</code>의 역할은 <code>HTTP BODY</code>문자내용을 반환하는 <code>api</code>라고 할 수 있습니다. 즉, 기존에 <code>@ResponseBody</code>가 없는 경우에 <code>viewResolver</code> 대신에 <code>httpMessageConverter</code>가 동작하여 문자일 경우에는 <code>StringHttpMessageConverter</code> 객체일 경우에는 <code>MappingJackson2HttpMessageConverter</code>로 이루어져있습니다. 클라이언트의 HTTP Accept헤더와 서버 컨트롤러의 반환 타입 정보 둘을 조합해서 HttpMessageConverter가 동작되게 됩니다. 기본으로 동작되는 데이터반환형식은 Default JSON형식으로 동작되게 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/mvc"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloString</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"kgh"</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>ResponseBody</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Gradle 빠르게 설정하기</title>
    <url>/Spring-20201231-springboot-gradle-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="seupeuringbuteueseo-gradle-bbareuge-seoljeonghagi"><a href="#seupeuringbuteueseo-gradle-bbareuge-seoljeonghagi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#스프링부트에서-gradle-빠르게-설정하기"></a> 스프링부트에서 Gradle 빠르게 설정하기</h1>
<p><code>IntellJ</code> 로 프로젝트를 생성하고나면 IntellJ에서 Gradle을 통해서 파일들을 컴파일하는것을 알 수 있습니다.<br>
하지만, 이 방식은 실행속도에 있어서 많은 차이점을 가져다주게 됩니다.</p>
<blockquote>
<p>이것을 어떻게 변경할 수 있을까요?</p>
</blockquote>
<p>Java진영에서 직접 컴파일을 실행시킬 수 있도록 처리해주는 것이 빠른 속도를 가져올 수 있습니다.<br>
<code>MacOS</code> 기준 왼쪽 상단에 <code>IntellJ IDEA</code>를 클릭하시고<br>
<code>Preferences Build -&gt; Execution -&gt; Deployment Build Tools Gradle</code> 의 위치에서 다음과 같이 설정을 진행합니다.</p>
<p>또 다른 방식으로는 Shift를 두번눌러서 전체 검색을 통해서 <code>Deployment Build Tools Gradle</code>을 입력하시면 해당 설정하는 곳으로 바로 이동하실 수 있습니다.</p>
<ul>
<li><code>Build and run using: Gradle -&gt; IntelliJ IDEA</code></li>
<li><code>Run tests using: Gradle -&gt; IntelliJ IDEA</code></li>
</ul>
<p>모두 Gradle로 되어있는 것을 IntellJ IDEA로 변경을 진행하면 조금 더 빠른 환경에서 개발을 진행할 수 있습니다.</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 프로젝트 환경설정</title>
    <url>/Spring-20201231-springboot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="springboot-peurojegteu-hwangyeongseoljeonghagi"><a href="#springboot-peurojegteu-hwangyeongseoljeonghagi" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#springboot-프로젝트-환경설정하기"></a> Springboot 프로젝트 환경설정하기</h1>
<p>이번시간부터 스프링부트 프로젝트생성부터 스프링 개념에 대해서 정리를 진행하려고합니다.</p>
<p>프로젝트 생성을 위한 환경은 다음과 같습니다.</p>
<ul>
<li><code>Intellj IDEA</code></li>
<li><code>Springboot 2.4.1 버전</code></li>
<li><code>Gradle</code></li>
<li><code>Java 11</code></li>
</ul>
<p>스프링 프로젝트를 진행하기 위해서는 <a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a> 에서 생성하는 방법과<br>
인텔리제이 프로젝트 생성에서 만들 수 있는 방법이 있습니다.</p>
<blockquote>
<p>build Gradle의 전체 설정</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.4.1'</span></span><br><span class="line">    id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.10.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.kgh'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-thymeleaf'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    runtimeOnly <span class="string">'com.h2database:h2'</span>            </span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>springboot-starter-we, spring-boot-starter 에는 다음과 같은 의존성 라이브러리가 추가됩니다.</p>
</blockquote>
<ul>
<li>spring-boot-starter-tomcat 톰캣</li>
<li>spring-webmvc 스프링 웹 MVC</li>
<li>spring-boot -&gt; spring-core</li>
<li>spring-boot-starter-logging -&gt; logback, slf4j</li>
</ul>
<p>springboot-starter-web은 다음과 같은 라이브러리를 포함하고 있기때문에 따로 톰캣설정과 MVC에 대한 설정을 따로 해줄 필요가 없습니다. 즉, 매우 편리하게 설정들을 진행해준다는 장점이 있습니다.</p>
<blockquote>
<p>테스트 라이브러리 의존성 라이브러리는 다음과 같습니다.</p>
</blockquote>
<p><code>junit: 테스트 프레임워크</code><br>
<code>mockito: Mock 라이브러리</code><br>
<code>assertj: 테스트코드를 손쉽게 작성할 수 있도록 도와줍니다.</code><br>
<code>spring-test: 스프링 통합 테스트 지원</code></p>
<p>이러한 역할을 한다는것을 알고 계신후 위의 코드를 작성후 프로젝트를 생성한 뒤 Run을 통해서 <code>localhost:8080</code>에 접속하시면<br>
에러가 발생하는 화면이 나오는것을 확인하실 수 있는데 그러면 <code>정상적으로 서버가 가동</code>된 것입니다.</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>환경설정</tag>
        <tag>Spring</tag>
        <tag>IntelliJ</tag>
      </tags>
  </entry>
  <entry>
    <title>IntellJ Error: java: invalid source release: 11</title>
    <url>/Spring-20201123-java-compile-error/</url>
    <content><![CDATA[<h1 id="munje"><a href="#munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>IntellJ에서 JDK 버전이 다른 프로젝트를 진행하는 경우가 생기가 되었습니다. 이때, 현재 사용중인 1.8.0_161 JDK버전과의 충돌이 발생하였습니다. <code>IntellJ Error: java: invalid source release: 11</code>의 에러가 발생하였습니다. 따라서 해당 에러를 해결하기 위해서 처음에 시도한 방식은 다음과 같습니다.</p>
<blockquote>
<ol>
<li>Fix Language Level</li>
</ol>
</blockquote>
<p><code>File -&gt; Project Structure -&gt; Project Settings -&gt; Project</code> 에서 Language level을 8로 수정하였습니다.</p>
<blockquote>
<ol start="2">
<li>Fix Java Compiler</li>
</ol>
</blockquote>
<p>Preference -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler에서 Project bytecode version을 8로 수정하고 Target bytecode version을 1.8로 수정하였습니다.</p>
<p>하지만, 이 방식대로 진행하였지만 여전히 <code>java: invalid source release: 11</code> 라는 에러가 발생하였습니다.</p>
<h1 id="haegyeol-bangbeob"><a href="#haegyeol-bangbeob" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#해결-방법"></a> 해결 방법</h1>
<h3 id="1-java-jdk-11-seolci"><a href="#1-java-jdk-11-seolci" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#1-java-jdk-11-설치"></a> 1. Java JDK 11 설치</h3>
<blockquote>
<p>brew java 11 설치</p>
</blockquote>
<p>JDK 1.8버전과 호환이 맞지 않는다고 생각하여 JDK Homebrew를 통하여 Java 11 버전을 설치하게 되었습니다.</p>
<blockquote>
<p>homebrew 설치</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>해당 명령어를 통해 homebrew를 설치를 진행하였습니다.</p>
<blockquote>
<p>OpenJdk 저장소 추가</p>
</blockquote>
<p>OpenJdk저장소를 추가시켜주었습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap AdoptOpenJDK/openjdk</span><br></pre></td></tr></table></figure>
<blockquote>
<p>자바 11버전 설치</p>
</blockquote>
<p>제가 설치할 자바버전은 11버전이기 때문에</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew cask install adoptopenjdk8</span><br></pre></td></tr></table></figure>
<p>명령어를 통해 설치를 진행하였습니다.</p>
<blockquote>
<p>java version</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>해당 명령어를 통해 <code>Java 11버전</code> 설치를 완료하였습니다.</p>
<blockquote>
<p>java JDK 설치 경로</p>
</blockquote>
<p>이제, 제가 맨 처음에 불러왔던 프로젝트 기본 JDK설정을 자바 11로 설정하였으며 Mac기준 설정경로는<br>
<code>Macintosh HD -&gt; Library -&gt; Java -&gt; JavaVirtualMachines -&gt; adoptopenjdk-11.jdk -&gt; contents -&gt; home</code> 으로 진행하였습니다.</p>
<h3 id="2-lombok-peulreogeuin-seolci-mic-annotationprocessor-seoljeong"><a href="#2-lombok-peulreogeuin-seolci-mic-annotationprocessor-seoljeong" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#2-lombok-플러그인-설치-및-annotationprocessor-설정"></a> 2. Lombok 플러그인 설치 및 annotationProcessor 설정</h3>
<p>하지만, 이번에도 <code>cannot find symbol</code> 라는 에러가 발생하게 되었으며 이 문제를 해결하기 위해 다음과 같은 방법을 사용하였습니다.</p>
<blockquote>
<p>lombok plugin 설치</p>
</blockquote>
<p><code>롬복 관련 플러그인</code>이 설치되지 않아 발생하는 문제라 판단되어 <code>롬복을 설치</code>해주었습니다.</p>
<blockquote>
<p>annotationProcessor Enable</p>
</blockquote>
<p><code>annotationProcessor은</code> <code>어노테이션의 코드베이스를 검사, 수정 또는 생성하는데 사용</code>됩니다. 따라서, 해당 설정을 같이 진행해주었습니다.</p>
<p><code>Preference -&gt; Build,Execution,Deployment -&gt; Annotation Processers에서 Enable annotation processing</code> 에 대한 체킹을 처리하여주었고 해당 <code>annotationProcesser</code>가 <code>Gradle</code>에서 올바르게 인식이 가능하도록 <code>Build.gradle</code>파일에 소스코드를 추가시켜주었습니다.</p>
<p>그리고, build.gradle에서</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">annotationProcessor 'org.projectlombok:lombok'</span><br></pre></td></tr></table></figure>
<p>을 추가하고 <code>gradle synchronized</code>설정을 다시 진행해주니 해당 오류를 해결 할 수 있었습니다.</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>annotationProcessor</tag>
        <tag>JDK</tag>
        <tag>Spring</tag>
        <tag>IntelliJ</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>운영체제 프로세스 스레드 메모리 구조</title>
    <url>/OS-20201116-OS-Process-Thread/</url>
    <content><![CDATA[<h1 id="peurogeuraem-program"><a href="#peurogeuraem-program" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그램program"></a> 프로그램(Program)</h1>
<p>어떤 <code>작업을 위해 실행할 수 있는 파일</code>로 정의할 수 있습니다.</p>
<h1 id="peuroseseu-process"><a href="#peuroseseu-process" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#프로세스process"></a> 프로세스(Process)</h1>
<blockquote>
<p>의미</p>
</blockquote>
<p><code>사전적 의미</code>로는 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램 또는 메모리에 올라와 실행되고 있는 프로그램의 인스턴스(독립적 개체)<br>
즉, 운영체제로 부터 시스템 자원을 할당받는 작업의 단위이며 실행된 프로그램을 의미한다.</p>
<blockquote>
<p>할당 시스템 자원</p>
</blockquote>
<p>CPU시간, 운영시 필요한 주소공간 <code>Code, Data, Stack, Heap</code>의 구조로 되어있는 독립된 <code>메모리 영역</code></p>
<blockquote>
<p>특징</p>
</blockquote>
<p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRYwhbEyPQiBjioNBtK0ftojMhvhyy343NGsg&amp;usqp=CAU" alt="프로세스 메모리 영역"></p>
<p>프로세스는 각각 도립된 <code>메모리 영역(Code, Data, Stack, Heap)구조</code>를 할당받게 되며 프로세스당 <code>최소 1개의 메인스레드</code>를 가지고 있습니다.<br>
각 프로세스는 별도의 주소 공간에서 실행되며, <code>한 프로세스는 다른 프로세스의 변수나 자료구조에 접근할 수 없습니다.</code><br>
만약, 한 프로세스가 다른 프로세스의 자원에 접근하려면 <code>프로세스간의 통신(IPC, inter-process communication)</code>을 사용해야합니다.<br>
하나의 예로 <code>pipe, file, socket</code></p>
<h1 id="seuredeu-thread"><a href="#seuredeu-thread" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#스레드thread"></a> 스레드(thread)</h1>
<blockquote>
<p>의미</p>
</blockquote>
<p><code>프로세스 내에서 실행되는 여러 흐름의 단위</code>이며 프로세스의 특정한 수행 경로입니다. <code>즉, 프로세스가 할당받은 자원을 이용하는 실행의 단위입니다.</code></p>
<blockquote>
<p>특징</p>
</blockquote>
<p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ9Lpf4DJh4AV-l6t6jOsbntASGR76jfIc1qg&amp;usqp=CAU" alt="스레드 메모리 영역"></p>
<p>스레드는 프로세스 내에서 각각 <code>Stack만 할당</code>받고 <code>Code, Data, Heap영역은 공유</code>됩니다. 그리고, <code>한 프로세스 내에서 동작되는 여러 실행의 흐름</code>이며 <code>프로세스내의 주소공간이나 자원(Heap) 등과 같은 프로세스 내에 스레드끼리 공유하면서 실행</code>이 됩니다. 같은 프로세스 안에 있는 <code>여러 스레드들은 같은 힙 공간을 공유</code>하지만 <code>프로세스는 다른 프로세스의 메모리에 직접 접근은 불가능합니다.</code><br>
각각의 스레드는 별도의 <code>레지스터</code>와 <code>스택</code>을 갖고 있지만 <code>힙 메모리</code>는 서로 읽고 쓸 수 있습니다. 또한, <code>한 스레드가 프로세스 자원을 변경하면 다른 이웃 스레드(Sibling thread)도 변경된 사항을 확인 할 수 있습니다.</code></p>
<h1 id="meolti-peuroseseu-multi-process"><a href="#meolti-peuroseseu-multi-process" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#멀티-프로세스multi-process"></a> 멀티 프로세스(Multi Process)</h1>
<blockquote>
<p>멀티프로세싱 의미</p>
</blockquote>
<p>하나의 응용프로그램을 여러 프로세스로 구성하여 <code>각 프로세스</code>가 하나의 <code>Task를 수행</code>하는것을 일컫는 말.</p>
<blockquote>
<p>특징</p>
</blockquote>
<p>여러 개의 자식프로세스 중 하나의 문제가 발생하면 <code>그 자식프로세스만 영향</code>을 받으며 그 외에는 다른 영향을 끼치지 않습니다.<br>
<code>Context Switching 오버헤드</code>가 발생할 수 있는데, 그 과정에서 <code>캐시 메모리 등 무거운 작업이 진행과 Task수행에 있어서 시간 소모 및 오버헤드가 발생</code>하게 됩니다.<br>
<code>프로세스</code>는 <code>각각의 독립된 메모리 영역</code>을 <code>할당</code>받았기 때문에 프로세스 사이에서 공유하는 메모리가 없어 <code>Context Switching</code>이 발생하면 <code>캐시에 있는 모든 데이터를 리셋</code>하고 <code>다시 캐시 정보를 불러와야 합니다.</code><br>
<code>프로세스</code>는 <code>각각의 독립된 메모리 영역을 할당</code>받았기 때문에 하나의 프로그램에 속하는 프로세스들 사이의 <code>변수를 공유 할 수 없습니다.</code></p>
<h1 id="context-switching"><a href="#context-switching" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#context-switching"></a> Context Switching</h1>
<p>CPU에서 여러 프로세스를 돌아가면서 작업을 처리하는데 이 과정을 <code>Context Switching</code>이라 합니다. <code>즉, 동작 중인 프로세스가 대기를 하면서 해당 프로세스의 상태(Context)를 보관하고, 대기하고 있던 다음 순서의 프로세스가 동작하면서 이전에 보관했든 프로세스의 상태를 복구하는 작업</code>을 일컫는 말입니다.</p>
<h1 id="meolti-seuredeu-multi-thread"><a href="#meolti-seuredeu-multi-thread" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#멀티-스레드multi-thread"></a> 멀티 스레드(Multi Thread)</h1>
<blockquote>
<p>멀티 스레딩</p>
</blockquote>
<p>하나의 응용프로그램을 여러개의 스레드로 구성하고 각 스레드로 하여금 <code>하나의 작업을 처리</code>하도록 하는것입니다.<br>
WIndow, Linux 등 많은 운영체제들이 멀티 프로세싱을 지원하고 있지만 <code>멀티스레딩을 기본</code>으로 하고있습니다.<br>
대표적인 멀티스레딩의 예는 <code>웹서버</code>를 들 수 있습니다.</p>
<blockquote>
<p>특징</p>
</blockquote>
<p><code>장점</code>으로는 <code>시스템 자원 소모 감소로 자원의 효율성</code>을 가져다 줄 수 있습니다. 프로세스를 생성하여 자원을 할당하는 <code>시스템 콜이 줄어들어 효율적으로 자원을 관리</code> 할 수 있습니다.<br>
<code>시스템 처리량</code>이 증가되어 <code>처리비용</code>을 감소시킬 수 있습니다. 스레드간 데이터를 주고 받는것이 간단해지고 <code>시스템 자원의 소모</code>가 줄어들게 됩니다. 스레드 사이의 작업량이 작아 <code>Context Switching</code>이 빠르고 간단한 통신방법으로 인한 프로그램 응답시간을 단축시킬 수 있습니다. <code>즉, 스레드는 프로세스내의 Stack영역을 제외한 모든 메모리를 공유하기 때문에 통신의 부담이 적게 됩니다.</code></p>
<p><code>단점</code>으로는 주의 깊은 설계가 요구되고 디버깅이 까다롭게 됩니다. 그리고 단일 프로세스 시스템을 사용할 경우 효과를 기대하기 어렵고 다른 프로세스에서 스레드를 제어할 수 없습니다. 즉, 프로세스 밖에서 스레드를 제어하기에는 어려움이 나타나게 됩니다.</p>
<p>멀티 스레딩의 가장 큰 문제점인 <code>자원의 공유 동기화 문제</code>가 나타날 수 있으며 하나의 스레드에 문제가 발생하면 <code>전체 프로세스가 영향</code>을 받게됩니다.</p>
<h1 id="meoltipeuroseseu-vs-meoltiseuredeu"><a href="#meoltipeuroseseu-vs-meoltiseuredeu" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#멀티프로세스-vs-멀티스레드"></a> 멀티프로세스 VS 멀티스레드</h1>
<blockquote>
<p>비교</p>
</blockquote>
<p>프로그램을 여러개 키는것보다 하나의 프로그램안에서 작업을 해결하는것이 <code>효율성</code>이 더 좋으며 여러 프로세스의 작업을 단일 프로세스에서 여러스레드로 나눠가면서 하는 이유는 여러가지가 있습니다.</p>
<blockquote>
<p>특징</p>
</blockquote>
<p><code>대표적인 장점은</code> <code>첫번째,</code> <code>자원의 효율성을 증대</code>시켜 프로세스를 생성하여 자원을 할당하는 시스템 콜이 줄어들어 자원을 효율적으로 관리할 수 있습니다. 프로세스간의 Context Switching시 단순히 CPU 레지스터 교체뿐만아니라 RAM, CPU사이의 캐시메모리에 대한 데이터까지 초기화되므로 오버헤드가 크게 발생할 수 있습니다.<br>
그리고 스레드는 프로세스 내의 메모리를 공유하기 때문에 독립적인 프로세스와 달리 스레드간의 데이터를 주고 받는것이 간단해지고 시스템 자원 소모가 줄어들게됩니다.<br>
<code>두번째,</code> <code>처리 비용 감소 및 응답 시간 단축</code>이 가능합니다. 스레드는 Stack영역을 제외한 모든 메모리를 공유하기 때문에 프로세스간의 통신(IPC)보다 스레드간 통신비용이 적으므로 작업들간의 통신 부담이 줄어들게됩니다. 그리고, 프로세스간의 전환 속도보다 스레드간의 전환속도가 더 빠릅니다.</p>
<blockquote>
<p>동기화 문제</p>
</blockquote>
<p>스레드간의 자원 공유는 전역 변수 데이터세그먼트를 이용하므로 함께 상용할때 충돌이 발생할 가능성이 높습니다.</p>
<h1 id="pcb-process-control-block"><a href="#pcb-process-control-block" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#pcbprocess-control-block"></a> PCB(Process Control Block)</h1>
<blockquote>
<p>PCB<br>
<code>프로세스 제어블록(PCB)는</code> 특정한 프로세스를 관리 할 필요가 있는 정보를 포함하는 운영체제 <code>커널의 자료구조</code>이며 <code>운영체제가 프로세스를 표현</code>한 것이라 할 수 있습니다.<br>
운영 체제가 <code>프로세스 스케줄링을 위해 프로세스에 관한 모든 정보</code>를 가지고 있는 데이터베이스를 <code>PCB</code>라고 합니다. 운영체제에서 프로세스는 PCB로 나타내어지며 PCB는 프로세스의 주요 정보를 가지고 있습니다. <code>각 프로세스가 생성될 때 마다 고유의 PCB가 생성되고 프로세스가 완료되면 PCB는 제거됩니다.</code></p>
</blockquote>
<blockquote>
<p>특징</p>
</blockquote>
<p><code>프로세스는</code> <code>CPU를 점유하여 작업을 처리하다가도 상태가 전이되면 진행하던 작업 내용을 모두 정리하고 CPU를 반환</code>해야하는데 진행하던 작업들을 저장하지않으면 추후에 어떤작업을 해야할지에 대한 <code>정보를 알 수 없습니다.</code></p>
<p><code>즉</code>, <code>프로세스는</code> <code>CPU가 처리하던 작업의 내용들을 자신의 PCB에 저장</code>하고 <code>그 후에 다시 CPU를 점유</code>하여 작업을 수행해야할 때 <code>PCB로 부터 해당 정보들을 CPU에 넘겨와서 계속해서 하던 작업을 진행</code>할 수 있습니다.</p>
<blockquote>
<p>PCB에서 제공하는 정보</p>
</blockquote>
<p><img src="https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&amp;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F2142EF505714CBD520" alt="Process Control Block"></p>
<ul>
<li><code>1)프로세스 식별자(Process ID)</code></li>
<li><code>2)프로세스 상태(Process State)</code> : 생성(create), 준비(ready), 실행 (running), 대기(waiting), 완료(terminated) 상태가 있습니다.</li>
<li><code>3)프로그램 계수기(Program Counter)</code> : 프로그램 계수기는 이 프로세스가 다음에 실행할 명령어의 주소를 가리킵니다</li>
<li><code>4)CPU 레지스터 및 일반 레지스터</code></li>
<li><code>5)CPU 스케줄링 정보</code> : 우선 순위, 최종 실행시각, CPU 점유시간 등</li>
<li><code>6)메모리 관리 정보</code> : 해당 프로세스의 주소 공간 등</li>
<li><code>7)프로세스 계정 정보</code> : 페이지 테이블, 스케줄링 큐 포인터, 소유자, 부모 등</li>
<li><code>8)입출력 상태 정보</code> : 프로세스에 할당된 입출력장치 목록, 열린 파일 목록 등</li>
<li><code>9)포인터</code> : 부모프로세스에 대한 포인터, 자식 프로세스에 대한 포인터, 프로세스가 위치한 메모리 주소에 대한 포인터, 할당된 자원에 대한 포인터 정보 등.</li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>프로세스</tag>
        <tag>스레드</tag>
        <tag>멀티프로세스</tag>
        <tag>멀티스레드</tag>
        <tag>PCB</tag>
        <tag>ContextSwitching</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 maximum subarray</title>
    <url>/Leetcode-20201115-leetcode-maximum-subarray/</url>
    <content><![CDATA[<h1 id="riskodeu-maximum-subarray"><a href="#riskodeu-maximum-subarray" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-maximum-subarray"></a> <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">릿코드 maximum-subarray</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]<br>
Output: 6<br>
Explanation: [4,-1,2,1] has the largest sum = 6.</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: nums = [1]<br>
Output: 1</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: nums = [0]<br>
Output: 0</p>
<h3 id="example-4"><a href="#example-4" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#example-4"></a> Example 4:</h3>
<p>Input: nums = [-1]<br>
Output: -1<br>
Example 5:</p>
<p>Input: nums = [-2147483647]<br>
Output: -2147483647</p>
<p>Constraints:</p>
<p>1 &lt;= nums.length &lt;= 2 * 104<br>
-231 &lt;= nums[i] &lt;= 231 - 1</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>값 나열시 하나의 규칙을 처음에 찾아보면서 dp를 사용하면 되겠다 생각하였습니다.</li>
</ul>
<blockquote>
<p>완전탐색</p>
</blockquote>
<ul>
<li>완전탐색의 경우 2중 포문을 사용하여 모든 경우 탐색하였는데 O(N)의 경우 시간초과</li>
</ul>
<blockquote>
<p>DP(dynamic programming)</p>
</blockquote>
<ul>
<li>DP의 경우 작은부분을 점차 늘려가면서 부분집합의 최댓값을 찾아주면 최종적으로 dp[length-1]에는 최적화된 값을 찾을 수 있습니다.(Bottom up)</li>
</ul>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_maximum_subarray_kgh</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        maxSubArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;);</span><br><span class="line">        maxSubArrayBruteforce(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;);</span><br><span class="line">        maxSubArrayBruteforce(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">2147483647</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            nums[i] = Math.max(nums[i], nums[i]+ nums[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxSubArrayBruteforce</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">2147483647</span>;      <span class="comment">// 기존에 -1 넣었는데 입력이 -2147483647 예외 처리해주기 위해서 초기화</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;nums.length; j++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(sum &gt; max)&#123;</span><br><span class="line">                    max = sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>완전탐색</tag>
        <tag>DP</tag>
        <tag>릿코드</tag>
        <tag>부분집합의 합</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 방문길이</title>
    <url>/Programmers-20201115-Programmers-length-of-visit/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-bangmungili"><a href="#peurogeuraemeoseu-bangmungili" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-방문길이"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/49994" target="_blank" rel="noopener">프로그래머스 방문길이</a></h1>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<blockquote>
<p>맵 시작점</p>
</blockquote>
<ul>
<li>음수의 값을 사용하기 싫었기 때문에 전체의 맵을 10x10으로 생각하여 시작점은 (5,5)에서 시작한다고 가정하였습니다.</li>
</ul>
<blockquote>
<p>간선 체크</p>
</blockquote>
<ul>
<li>간선보다는 정점을 체킹하는 형식으로 진행하였으나 중복점을 체킹하기가 어려워 간선풀이로 변경 Set자료구조를 사용하여 처리하였습니다.</li>
<li>시작 x, y 도착 tmp_x tmp_y 양방향을 HashSet에 넣어주면서 하나의 문자열을 간선처럼 생각하여 넣어주었습니다.</li>
</ul>
<blockquote>
<p>방향체크</p>
</blockquote>
<ul>
<li>방문 체크는 북, 남, 동, 서 4방향으로 진행하면서 간선을 체크하였습니다.</li>
</ul>
<blockquote>
<p>벽에 부딪혔을 때</p>
</blockquote>
<ul>
<li>벽에 부딪힌 경우는 방향을 이동하고나서 다시 제자리로 돌려주는 로직을 넣어주었습니다.</li>
</ul>
<blockquote>
<p>시간복잡도<br>
O(dirs.length() + Hashset add()1) 즉, 상수를 무시하므로 O(N)</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">programmers_</span>방문길이<span class="title">_kgh</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,-<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] check;</span><br><span class="line">    <span class="keyword">static</span> HashSet&lt;String&gt; hs;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="string">"ULURRDLLU"</span>);</span><br><span class="line">        solution(<span class="string">"LULLLLLLU"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String dirs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        hs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;dirs.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dirs.charAt(i) == <span class="string">'U'</span>)&#123;</span><br><span class="line">                idx = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dirs.charAt(i) == <span class="string">'D'</span>)&#123;</span><br><span class="line">                idx = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dirs.charAt(i) == <span class="string">'R'</span>)&#123;</span><br><span class="line">                idx = <span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dirs.charAt(i) == <span class="string">'L'</span>)&#123;</span><br><span class="line">                idx = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp_x = x;</span><br><span class="line">            <span class="keyword">int</span> tmp_y = y;</span><br><span class="line">            x = x + dir[idx][<span class="number">0</span>];</span><br><span class="line">            y = y + dir[idx][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set으로 고유값 저장</span></span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">10</span> &amp;&amp; y &gt;=<span class="number">0</span> &amp;&amp; y &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">                hs.add(x+<span class="string">""</span>+y+<span class="string">""</span>+tmp_x+<span class="string">""</span>+tmp_y);</span><br><span class="line">                hs.add(tmp_x+<span class="string">""</span>+tmp_y+<span class="string">""</span>+x+<span class="string">""</span>+y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 벽 부딪히는 경우</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                x = x - dir[idx][<span class="number">0</span>];</span><br><span class="line">                y = y - dir[idx][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// hs.forEach(value -&gt;&#123;</span></span><br><span class="line">        <span class="comment">//     System.out.println(value);</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="comment">// 간선으로 처리하였으므로 / 2(양방향 -&gt; 단방향 개수)</span></span><br><span class="line">        answer = hs.size()/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>그래프</tag>
        <tag>프로그래머스</tag>
        <tag>Set자료구조</tag>
        <tag>간선</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 배달</title>
    <url>/Programmers-20201114-Programmers-delivery/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-baedal"><a href="#peurogeuraemeoseu-baedal" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-배달"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/12978" target="_blank" rel="noopener">프로그래머스 배달</a></h1>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>N개의 마을로 이루어진 나라가 있습니다. 이 나라의 각 마을에는 1부터 N까지의 번호가 각각 하나씩 부여되어 있습니다. 각 마을은 양방향으로 통행할 수 있는 도로로 연결되어 있는데, 서로 다른 마을 간에 이동할 때는 이 도로를 지나야 합니다. 도로를 지날 때 걸리는 시간은 도로별로 다릅니다. 현재 1번 마을에 있는 음식점에서 각 마을로 음식 배달을 하려고 합니다. 각 마을로부터 음식 주문을 받으려고 하는데, N개의 마을 중에서 K 시간 이하로 배달이 가능한 마을에서만 주문을 받으려고 합니다. 다음은 N = 5, K = 3인 경우의 예시입니다.</p>
<p>위 그림에서 1번 마을에 있는 음식점은 [1, 2, 4, 5] 번 마을까지는 3 이하의 시간에 배달할 수 있습니다. 그러나 3번 마을까지는 3시간 이내로 배달할 수 있는 경로가 없으므로 3번 마을에서는 주문을 받지 않습니다. 따라서 1번 마을에 있는 음식점이 배달 주문을 받을 수 있는 마을은 4개가 됩니다.<br>
마을의 개수 N, 각 마을을 연결하는 도로의 정보 road, 음식 배달이 가능한 시간 K가 매개변수로 주어질 때, 음식 주문을 받을 수 있는 마을의 개수를 return 하도록 solution 함수를 완성해주세요.</p>
<p><img src="https://res.cloudinary.com/dpxurmkij/image/upload/c_scale,w_250/v1494901794/%EB%B0%B0%EB%8B%AC_1_uxun8t.png" alt="Image1"></p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<p>마을의 개수 N은 1 이상 50 이하의 자연수입니다.<br>
road의 길이(도로 정보의 개수)는 1 이상 2,000 이하입니다.<br>
road의 각 원소는 마을을 연결하고 있는 각 도로의 정보를 나타냅니다.<br>
road는 길이가 3인 배열이며, 순서대로 (a, b, c)를 나타냅니다.<br>
a, b(1 ≤ a, b ≤ N, a != b)는 도로가 연결하는 두 마을의 번호이며, c(1 ≤ c ≤ 10,000, c는 자연수)는 도로를 지나는데 걸리는 시간입니다.<br>
두 마을 a, b를 연결하는 도로는 여러 개가 있을 수 있습니다.<br>
한 도로의 정보가 여러 번 중복해서 주어지지 않습니다.<br>
K는 음식 배달이 가능한 시간을 나타내며, 1 이상 500,000 이하입니다.<br>
임의의 두 마을간에 항상 이동 가능한 경로가 존재합니다.<br>
1번 마을에 있는 음식점이 K 이하의 시간에 배달이 가능한 마을의 개수를 return 하면 됩니다.</p>
<h3 id="ibculryeog-ye"><a href="#ibculryeog-ye" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#입출력-예"></a> 입출력 예</h3>
<p>N    road    K    result<br>
5    [[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]]    3    4<br>
6    [[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]]    4    4</p>
<p>입출력 예 설명</p>
<h3 id="ibculryeog-ye-1"><a href="#ibculryeog-ye-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#입출력-예-1"></a> 입출력 예 #1</h3>
<p>문제의 예시와 같습니다.</p>
<h3 id="ibculryeog-ye-2"><a href="#ibculryeog-ye-2" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#입출력-예-2"></a> 입출력 예 #2</h3>
<p>주어진 마을과 도로의 모양은 아래 그림과 같습니다.<br>
1번 마을에서 배달에 4시간 이하가 걸리는 마을은 [1, 2, 3, 5] 4개이므로 4를 return 합니다.<br>
<img src="https://res.cloudinary.com/dpxurmkij/image/upload/c_scale,w_250/v1494911214/%EB%B0%B0%EB%8B%AC_3_njc7kq.png" alt="Image2"></p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>그래프문제는 <code>자료구조를 인접행렬이나 인접리스트</code>로 접근해야될 것을 생각하여 <code>DFS나 BFS 알고리즘</code>을 사용해야한다는 생각을 가지고 있어야합니다.</li>
<li>각 노드의 가중치값이 최솟값이 될 수 있어야하기 때문에 <code>우선순위큐</code>를 사용하여 작은순서대로 처리하였습니다.</li>
</ul>
<blockquote>
<p>우선순위큐(Priority Queue)</p>
</blockquote>
<p>Pair클래스에 Comparable implements를 하여 compareTo함수를 사용하여 우선순위큐의 조건을 바로 사용할 수 있도록 하였습니다.</p>
<p><strong>오름차순 정렬</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair pair)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value - pair.value; (오름차순)</span><br><span class="line">    <span class="keyword">return</span> pair.value - <span class="keyword">this</span>.value; (내림차순)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>가장 작은 가중치값을 찾아야하므로 비교를 위해 모든값을 최대값으로 초기화하여 <code>check변수</code>에 <code>Integer.MAX_VALUE</code>값을 할당하였습니다.</p>
<blockquote>
<p>노드의 가중치값을 어떻게 비교할까요?</p>
</blockquote>
<p>현재 노드의 거리, 현재까지의 거리를 더한값을 현재 각 노드의 거리 저장값과 비교하여 <code>더 작을 경우 값을 갱신</code>시켜줍니다.</p>
<blockquote>
<p>거리의 합이 K값의 이하의 값을 처리할때는 어떻게 할까요?</p>
</blockquote>
<p><code>체크된 거리값들이 &lt;= K 의 범위</code>를 만족하는 값들만 <code>answer를 카운팅</code> 시켜줍니다.</p>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<p>조건: V: 정점, E:간선<br>
시간복잡도: <code>모든 정점을 방문 O(V)</code>, 우선순위큐 트리형식으로 값을 삽입/삭제 <code>O(logE)</code><br>
즉, <code>O(V * log E)의 시간복잡도</code>를 같습니다.</p>
<blockquote>
<p>인접리스트 VS 인접행렬</p>
</blockquote>
<p><code>인접리스트</code> 시간복잡도: <code>O(V+E)</code><br>
<code>인접행렬</code> 시간복잡도: <code>O(V^2)</code></p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<blockquote>
<p>다익스트라</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">programmers_</span>배달<span class="title">_kgh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> PriorityQueue&lt;Pair&gt; pq;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Pair&gt;&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(solution(<span class="number">5</span>, <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>&#125;,&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>&#125;&#125;,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] road, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(check, Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=N; i++)&#123;</span><br><span class="line">            arr.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;road.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = road[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = road[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> value = road[i][<span class="number">2</span>];</span><br><span class="line">            arr.get(x).add(<span class="keyword">new</span> Pair(y,value));</span><br><span class="line">            arr.get(y).add(<span class="keyword">new</span> Pair(x,value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bfs(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;check.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] &lt;= K)&#123;</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="number">0</span>;</span><br><span class="line">        pq.offer(<span class="keyword">new</span> Pair(x, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            Pair pair = pq.poll();</span><br><span class="line">            <span class="keyword">int</span> from_y = pair.y;</span><br><span class="line">            <span class="keyword">int</span> from_value = pair.value;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.get(from_y).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> to_y = arr.get(from_y).get(i).y;</span><br><span class="line">                <span class="keyword">int</span> to_value = arr.get(from_y).get(i).value;</span><br><span class="line">                <span class="comment">//System.out.println(check[from_y] + to_value);</span></span><br><span class="line">                <span class="keyword">if</span>(check[to_y] &gt; check[from_y] + to_value)&#123;</span><br><span class="line">                    check[to_y] = check[from_y] + to_value;</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> Pair(to_y, to_value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Pair</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        Pair(<span class="keyword">int</span> y, <span class="keyword">int</span> value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair pair)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 오름차순 정렬</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value - pair.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>인접리스트</tag>
        <tag>우선순위큐</tag>
        <tag>다익스트라</tag>
        <tag>힙</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 불량사용자</title>
    <url>/Programmers-20201112-Programmers-bad-user/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-kakao-bulryangsayongja"><a href="#peurogeuraemeoseu-kakao-bulryangsayongja" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-카카오-불량사용자"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/64064" target="_blank" rel="noopener">프로그래머스 카카오 불량사용자</a></h1>
<h2 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h2>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>개발팀 내에서 이벤트 개발을 담당하고 있는 무지는 최근 진행된 카카오이모티콘 이벤트에 비정상적인 방법으로 당첨을 시도한 응모자들을 발견하였습니다. 이런 응모자들을 따로 모아 불량 사용자라는 이름으로 목록을 만들어서 당첨 처리 시 제외하도록 이벤트 당첨자 담당자인 프로도 에게 전달하려고 합니다. 이 때 개인정보 보호을 위해 사용자 아이디 중 일부 문자를 ‘<em>’ 문자로 가려서 전달했습니다. 가리고자 하는 문자 하나에 '</em>’ 문자 하나를 사용하였고 아이디 당 최소 하나 이상의 ‘*’ 문자를 사용하였습니다.<br>
무지와 프로도는 불량 사용자 목록에 매핑된 응모자 아이디를 제재 아이디 라고 부르기로 하였습니다.</p>
<p>예를 들어, 이벤트에 응모한 전체 사용자 아이디 목록이 다음과 같다면</p>
<p>응모자 아이디<br>
frodo<br>
fradi<br>
crodo<br>
abc123<br>
frodoc<br>
다음과 같이 불량 사용자 아이디 목록이 전달된 경우,</p>
<p>불량 사용자<br>
fr<em>d</em><br>
abc1**<br>
불량 사용자에 매핑되어 당첨에서 제외되어야 야 할 제재 아이디 목록은 다음과 같이 두 가지 경우가 있을 수 있습니다.</p>
<p>제재 아이디<br>
frodo<br>
abc123<br>
제재 아이디<br>
fradi<br>
abc123<br>
이벤트 응모자 아이디 목록이 담긴 배열 user_id와 불량 사용자 아이디 목록이 담긴 배열 banned_id가 매개변수로 주어질 때, 당첨에서 제외되어야 할 제재 아이디 목록은 몇가지 경우의 수가 가능한 지 return 하도록 solution 함수를 완성해주세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> [제한사항]</h3>
<p>user_id 배열의 크기는 1 이상 8 이하입니다.<br>
user_id 배열 각 원소들의 값은 길이가 1 이상 8 이하인 문자열입니다.<br>
응모한 사용자 아이디들은 서로 중복되지 않습니다.<br>
응모한 사용자 아이디는 알파벳 소문자와 숫자로만으로 구성되어 있습니다.<br>
banned_id 배열의 크기는 1 이상 user_id 배열의 크기 이하입니다.<br>
banned_id 배열 각 원소들의 값은 길이가 1 이상 8 이하인 문자열입니다.<br>
불량 사용자 아이디는 알파벳 소문자와 숫자, 가리기 위한 문자 ‘<em>’ 로만 이루어져 있습니다.<br>
불량 사용자 아이디는 '</em>’ 문자를 하나 이상 포함하고 있습니다.<br>
불량 사용자 아이디 하나는 응모자 아이디 중 하나에 해당하고 같은 응모자 아이디가 중복해서 제재 아이디 목록에 들어가는 경우는 없습니다.<br>
제재 아이디 목록들을 구했을 때 아이디들이 나열된 순서와 관계없이 아이디 목록의 내용이 동일하다면 같은 것으로 처리하여 하나로 세면 됩니다.</p>
<h3 id="ibculryeog-ye"><a href="#ibculryeog-ye" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#입출력-예"></a> [입출력 예]</h3>
<p>user_id    banned_id    result<br>
[“frodo”, “fradi”, “crodo”, “abc123”, “frodoc”]    [“fr<em>d</em>”, “abc1**”]    2<br>
[“frodo”, “fradi”, “crodo”, “abc123”, “frodoc”]    [“<em>rodo&quot;, &quot;<em>rodo&quot;, &quot;</em></em>**<em><em>&quot;]    2<br>
[“frodo”, “fradi”, “crodo”, “abc123”, “frodoc”]    [&quot;fr</em>d</em>”, “<em>rodo&quot;, &quot;</em>*****”, “******”]    3<br>
입출력 예에 대한 설명</p>
<h3 id="ibculryeog-ye-1"><a href="#ibculryeog-ye-1" class="header-anchor">1.1.4. </a><a class="markdownIt-Anchor" href="#입출력-예-1"></a> 입출력 예 #1</h3>
<p>문제 설명과 같습니다.</p>
<h3 id="ibculryeog-ye-2"><a href="#ibculryeog-ye-2" class="header-anchor">1.1.5. </a><a class="markdownIt-Anchor" href="#입출력-예-2"></a> 입출력 예 #2</h3>
<p>다음과 같이 두 가지 경우가 있습니다.</p>
<p>제재 아이디<br>
frodo<br>
crodo<br>
abc123<br>
제재 아이디<br>
frodo<br>
crodo<br>
frodoc</p>
<h3 id="ibculryeog-ye-3"><a href="#ibculryeog-ye-3" class="header-anchor">1.1.6. </a><a class="markdownIt-Anchor" href="#입출력-예-3"></a> 입출력 예 #3</h3>
<p>다음과 같이 세 가지 경우가 있습니다.<br>
제재 아이디<br>
frodo<br>
crodo<br>
abc123<br>
frodoc<br>
제재 아이디<br>
fradi<br>
crodo<br>
abc123<br>
frodoc<br>
제재 아이디<br>
fradi<br>
frodo<br>
abc123<br>
frodoc</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>응모자 아이디 중에서 불량 사용자 아이디목록이 전달 된 경우 당첨에서 제외되어야할 아이디목록의 경우의 수를 반환하는 문제입니다.</li>
<li>정규표현식을 사용하여 불량아이디의 목록중에 <code>*</code> 표시가 되어 있는 값을 <code>.</code> 으로 변경해줍니다. 정규표현식에서 <code>.</code>의 표현은  <code>.</code> 임의의 한 문자(<code>필수입력, 문자의 종류 가리지 않음</code>)을 나타내기 때문에 어떠한 문자가 와도 가능함을 표현합니다.</li>
</ul>
<p>처음 <code>DFS로 모든 경우를 탐색</code>을 진행합니다. 불량아이디 목록이 가능한 경우를 찾기 위해서 입니다. 즉, 제제아이디를 찾기 위하여 DFS를 수행합니다.<br>
<code>idx는 0</code>부터 수행하는데 현재까지 수행한 <code>idx값이 불량 아이디 목록의 길이</code>와 같으면 <code>Basement 조건</code>을 주어 종료시켜줍니다.</p>
<p>이제, 유저 아이디 목록중에서 정규표현식의 조건에 매칭되는 문자를 찾아주면서 DFS를 진행하다보면 해당 check[i]가 true인 경우는 제제아이디의 값과 일치합니다.</p>
<p><code>StringBuilder</code>를 사용하여 <code>check[i] = true</code>인 인덱스의 값을 더해주면서 더해준 값을 중복되지 않는 값을 체크하기 위해서 HashSet에 넣어주게 됩니다. 이제 <code>모든 DFS</code>를 수행하고 <code>HashSet 사이즈 값을 반환</code> 시켜주면 제제 아이디로 처리되는 개수를 확인 할 수 있습니다.</p>
<p>정규표현식을 사용하면 쉽게 풀리는 문제였습니다.<br>
<a href="https://postitforhooney.tistory.com/entry/JavaRegex-%EC%9E%90%EB%B0%94-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B3%A0-%EC%98%88%EC%A0%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0" target="_blank" rel="noopener">정규표현식 참고 예제 </a></p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> HashSet&lt;String&gt; hs;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String[] user_id, String[] banned_id)</span> </span>&#123;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[user_id.length];</span><br><span class="line">        hs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        dfs(user_id, banned_id, <span class="number">0</span>);</span><br><span class="line">        answer = hs.size();</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String[] user_id, String[] banned_id, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// basement</span></span><br><span class="line">        <span class="keyword">if</span>(idx == banned_id.length)&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;user_id.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                    sb.append(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!hs.contains(sb.toString()))&#123;</span><br><span class="line">                hs.add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;user_id.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String rex = banned_id[idx].replace(<span class="string">"*"</span>, <span class="string">"."</span>);</span><br><span class="line">            <span class="keyword">if</span>(user_id[i].matches(rex))&#123;</span><br><span class="line">                check[i] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(user_id, banned_id, idx+<span class="number">1</span>);</span><br><span class="line">                check[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>문자열</tag>
        <tag>정규표현식</tag>
      </tags>
  </entry>
  <entry>
    <title>알고리즘 에라토스테네스의 체, 소수, 소인수분해</title>
    <url>/Algorithm-20201029-Algorithm-Eratosthenes/</url>
    <content><![CDATA[<h1 id="sosu-prime-number"><a href="#sosu-prime-number" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#소수prime-number"></a> 소수(Prime Number)</h1>
<h2 id="sosuyi-jeongyi"><a href="#sosuyi-jeongyi" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#소수의-정의"></a> 소수의 정의</h2>
<p><code>소수란</code> 약수가 1과 자기 자신밖에 없는수를 일컫는 말입니다.</p>
<h2 id="sosuyi-teugjing"><a href="#sosuyi-teugjing" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소수의-특징"></a> 소수의 특징</h2>
<ol>
<li>N이 소수가 되려면 <code>2&lt;= N &lt;= N-1</code> 2보다 크거나 같고, N-1보다 작거나 같은 자연수로 나누어 떨어지면 안됩니다.<br>
그 이유는 N의 약수중에서 가장 큰것은 N/2보다 작거나 같기 때문입니다.</li>
<li><code>N = a * b</code> 로 나타낼 수 있는데, <code>a가 작을 수록 b값이 크게</code> 됩니다.</li>
<li>가능한 a 중에서 가장 작은 값은 2이기 때문에 b는 <code>N/2</code>를 넘지 않습니다.</li>
<li>두 수 a와 b차이가 가장 작은 경우는 루트 N이기 때문에 <code>루트 N</code>까지만 검사를 진행하면 됩니다.</li>
<li>어떤 수 N이 소수인지 아닌지 알아내는데 걸리는 시간 복잡도는 <code>O(루트N)</code>이었다.</li>
<li><code>N= 백만일 경우: 루트 N=1000, N=1억인 경우: 루트 N=10000</code></li>
</ol>
<blockquote>
<p>만약, <code>1부터 1,000,000</code>까지 모든 소수를 구하는데 걸리는 시간복잡도는 어떻게 될까요?</p>
</blockquote>
<p>각각의 수에 대해서 소수 인지 아닌지를 검사해야합니다. <code>판별</code>만 하는데 사용되는 <code>시간복잡도: O(루트N)</code><br>
수는 <code>총 N개</code>이기 때문에 <code>모든 소수</code>를 구하는데 걸리는 <code>시간복잡도는 N*O(루트N)</code>의 시간이 소요됩니다.<br>
즉 <code>N이 1,000,000 백만</code>이라고 가정하였을때 시간복잡도는 <code>1,000,000 * 1,000 = 1,000,000,000 = 10억 = 10초</code>라는 시간이 걸리게 됩니다. 이는 1초에 1억을 연산하는 시간복잡도를 생각하였을때 큰 시간이 필요하게 됩니다.</p>
<blockquote>
<p>소수의 예시</p>
</blockquote>
<p>1-100까지의 소수<br>
<code>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</code></p>
<blockquote>
<p>소수 판별 기본 함수</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">bool <span class="title">prime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>num값이 i로 나누어 떨어지는 값</code>이 <code>0일 경우</code> 소수가 아닙니다.</p>
<blockquote>
<p>소수 루트 N까지 진행하는 함수</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">bool <span class="title">prime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>루트 i&lt;=N은 i&lt;= N<em>N과 같이 나타내 수 있으며 즉, 루트 N은 i</em>i, i^2으로 나타낼 수 있다.<br>
어떤 수 N이 소수인지 아닌지 <code>판별</code>만 하는데 걸리는 <code>시간복잡도는 O(루트 N)</code> 입니다.<br>
<code>모든 소수</code>를 구하게 되면 <code>N * O(루트N)</code>의 시간 복잡도를 갖는다는것에 유의해야합니다.</p>
<ul>
<li>지워지지 않은 수를 찾을 때 n이 아니라 <code>sqrt(n)</code> 까지만 찾습니다. i의 배수들을 지울 때 2 * i 에서 시작하는 것이 아니라 <code>i * i</code> 에서 시작한다. <code>2 * i에서 2의 배수 들은 모두 지워졌을 것이고 3 * i 는 3의 배수를 지울 때 이미 지워졌을 것입니다.</code></li>
</ul>
<h1 id="eratoseuteneseuyi-ce-sieve-of-eratosthenes"><a href="#eratoseuteneseuyi-ce-sieve-of-eratosthenes" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#에라토스테네스의-체sieve-of-eratosthenes"></a> 에라토스테네스의 체(Sieve of Eratosthenes)</h1>
<h2 id="eratoseuteneseuyi-ce-jeongyi"><a href="#eratoseuteneseuyi-ce-jeongyi" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#에라토스테네스의-체-정의"></a> 에라토스테네스의 체 정의</h2>
<p>위에서 확인한 바와 같이 <code>1~1,000,000</code>까지 <code>모든 소수를 구하기 위해서는 많은 시간이 소요</code>되는것을 확인하였습니다. 이것을 해결하기 위해서 <code>에라토스테네스의 체</code>를 사용하면 해결 할 수 있습니다.</p>
<blockquote>
<p>에라토스테네스의 체 원리</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="에라토스테네스의 체 원리"></p>
<p><strong>1. 2부터 N까지 모든 수를 써놓는다.</strong><br>
<strong>2. 아직 지워지지않은 수 중에서 가장 작은수를 찾는다.</strong><br>
<strong>3. 그 수는 소수이다.</strong><br>
<strong>4. 이제 그 수의 배수를 모두 지웁니다.</strong></p>
<blockquote>
<p>과정</p>
</blockquote>
<p><strong>1. 지워지지 않은 수 중에서 가장 작은 수는 2이다.</strong><br>
<strong>2. 2는 소수이고 2의 배수를 모두 지웁니다.</strong><br>
<strong>3. 3의 배수를 지웁니다.</strong><br>
<strong>4. 5의 배수를 지웁니다.</strong><br>
<strong>5. 7의 배수를 지웁니다.</strong><br>
<strong>6. 11의 배수는 이미 지워져있습니다. 이미 2,3,5,7의 배수를 지우는 과정에서 지워졌기때문입니다.</strong><br>
<strong>7. 11*11은 특히 121로 100을 넘어가기 때문에 더이상 수행할 필요가 없게 됩니다. 따라서, 남아 있는 모든 수가 소수가 되게 됩니다.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*소수 저장*/</span></span><br><span class="line"><span class="keyword">int</span>[] prime = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line"><span class="comment">/*소수의 개수를 저장하기 위한 변수*/</span></span><br><span class="line"><span class="keyword">int</span> prime_num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*소수가 지워졌으면 true*/</span></span><br><span class="line"><span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">101</span>];</span><br><span class="line"><span class="comment">/*100까지의 소수*/</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(check[i] == <span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    prime[prime_num++] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i; j&lt;=n; j+=i)&#123;</span><br><span class="line">        check[j] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>여기서 잘보면 i*i 대신 i+i 부터 시작하는것을 볼 수 있는데, 그 이유는 <code>i가 백만일 경우 i*i</code>를 하게되면 범위를 넘어서게 됩니다. 예를 들면 <code>백만 * 백만 일 경우 10^12</code>가 되기 때문에 <code>오버플로우</code>에 대해서 생각을 할 수 있어야합니다. <code>총 10^12</code>까지 진행되므로 <code>int형 자료형의 범위인 21억</code>까지 진행하기가 힘들 것으로 판단할 수 있어야합니다. 그리고, <code>long의 범위로 변경</code>하여 진행하여야합니다.</p>
<p><code>int 자료형: 2,147,483,646</code><br>
<code>long 자료형: 9,223,372,036,854,775,806</code></p>
<p>따라서, 21억 이상을 표현하려면 long형이 필요하다는것을 알 수 있어야합니다.</p>
<p>이것을 자바로 표현하였을때는 <code>Long.parseLong</code> 함수를 사용하여 long의 범위를 Long의 형태로 바꾸어줄 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long.parseLong(<span class="string">"9999962000357"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="soinsu-bunhae-prime-factorization"><a href="#soinsu-bunhae-prime-factorization" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소인수-분해prime-factorization"></a> 소인수 분해(prime factorization)</h1>
<h2 id="soinsubunhae-jeongyi"><a href="#soinsubunhae-jeongyi" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#소인수분해-정의"></a> 소인수분해 정의</h2>
<blockquote>
<p>소인수분해란(prime factorization, integer factorization)?</p>
</blockquote>
<p>합성수를 소수의 곱으로 나타내는 방법을 말합니다. 소수의 곱으로 나타낼 수 있는 값을 <code>합성수</code>라고 합니다.<br>
즉, <code>N이 4</code>일 경우 <code>소수 2를 두번곱</code>해서 만들 수 있는 값이 되는 것입니다. <code>N이 합성수가 되고 2는 소수가 되게 됩니다.</code></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/2b/PrimeDecompositionExample.png" alt="소인수분해 그림"></p>
<p>다음 아래는 합성수의 소인수 분해의 예시를 가져왔습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>＝<span class="number">2</span>×<span class="number">2</span></span><br><span class="line"><span class="number">6</span>＝<span class="number">2</span>×<span class="number">3</span></span><br><span class="line"><span class="number">8</span>＝<span class="number">2</span>×<span class="number">2</span>×<span class="number">2</span></span><br><span class="line"><span class="number">9</span>＝<span class="number">3</span>×<span class="number">3</span></span><br><span class="line"><span class="number">10</span>＝<span class="number">2</span>×<span class="number">5</span></span><br><span class="line"><span class="number">12</span>＝<span class="number">2</span>×<span class="number">2</span>×<span class="number">3</span></span><br><span class="line"><span class="number">14</span>＝<span class="number">2</span>×<span class="number">7</span></span><br><span class="line"><span class="number">15</span>＝<span class="number">3</span>×<span class="number">5</span></span><br><span class="line"><span class="number">16</span>＝<span class="number">2</span>×<span class="number">2</span>×<span class="number">2</span>×<span class="number">2</span></span><br><span class="line"><span class="number">18</span>＝<span class="number">2</span>×<span class="number">3</span>×<span class="number">3</span></span><br><span class="line"><span class="number">20</span>＝<span class="number">2</span>×<span class="number">2</span>×<span class="number">5</span></span><br><span class="line"><span class="number">21</span>＝<span class="number">3</span>×<span class="number">7</span></span><br><span class="line"><span class="number">22</span>＝<span class="number">2</span>×<span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>아래문제는 직접 만들어본 문제입니다.</p>
<h2 id="habseongsuga-jueojimyeon-sosuyi-gobeuro-natanael-su-issneun-susjareul-guhasio-dan-1-lt-n-lt-1-000-000"><a href="#habseongsuga-jueojimyeon-sosuyi-gobeuro-natanael-su-issneun-susjareul-guhasio-dan-1-lt-n-lt-1-000-000" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#합성수가-주어지면-소수의-곱으로-나타낼-수-있는-숫자를-구하시오-단-1-n-1000000"></a> 합성수가 주어지면 소수의 곱으로 나타낼 수 있는 숫자를 구하시오. 단, 1&lt;= N &lt;= 1,000,000</h2>
<blockquote>
<p>자료형 접근</p>
</blockquote>
<p>소인수분해 가정에서 가장 중요하게 생각해야하는점은 i*i를 통해 소수의 값을 가져올때가 문제가 됩니다.<br>
<code>만약 i = 1,000,000일 경우 i * i = 1,000,000,000,000 약 10^12</code>까지 진행이 됩니다. 이럴 경우 int자료형으로는 접근할 수 없고,<code>long타입</code>을 사용해야겠다고 생각을 해야합니다.<br>
위에서 말씀드린바와 같이 아래의 자료형의 범위를 갖게 됩니다. 21억 이상 표현하기 위해서는 long형을 사용합니다.</p>
<p><code>int 자료형: 2,147,483,646</code><br>
<code>long 자료형: 9,223,372,036,854,775,806</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long num = Long.parseLong(&quot;9999962000357&quot;);</span><br><span class="line">long num_tmp = Long.parseLong(&quot;9999962000357&quot;);</span><br></pre></td></tr></table></figure>
<p>해당 long의 범위를 구하기 위해서 위와 같이 표현하였습니다.</p>
<blockquote>
<p>소인수 분해의 원리</p>
</blockquote>
<p><code>2~N까지의 값</code>중에서 <code>N % i 의 값이 0</code> 일때 해당 몫의 값으로 다시 N에 넣어주면서 진행하는것을 뜻합니다. 결국 <code>i의 값이 소인수 분해의 값이고 N&gt;1클 경우 마지막의 값을 출력</code>시킬 수 있습니다.</p>
<p>반드시, <code>sqrt 루트</code>까지 진행하는데 에라토스테네스의체를 진행하면 <code>기존의 N배수는 지워졌을 것</code>이기때문에 Sqrt(N)까지만 진행해도 됩니다… 이것을 코드로 나타내면 <code>i=2; i*i ≤ N; i++</code>으로 나타낼 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">2</span>; i*i&lt;=num; i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        num = num / i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num == num_tmp)&#123;</span><br><span class="line">    System.out.println(<span class="string">"-1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>num == num_tmp</code>의 코드는 기존의 num값이 <code>num % i == 0인 값이 없다는 것</code>을 뜻하고 <code>즉, 소인수 되는 수를 찾을 수 없을때 -1</code>을 출력하는 코드입니다. 그리고 해당 <code>num의 값이 1보다 큰 값을 가지고 있으면 해당 마지막 인수를 출력</code>시켜주는 부분입니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 소인수분해 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> num = Long.parseLong(<span class="string">"9999962000357"</span>);</span><br><span class="line">        <span class="keyword">long</span> num_tmp = Long.parseLong(<span class="string">"9999962000357"</span>);</span><br><span class="line">        HashMap&lt;String,Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        long타입을 표현하기 위해서는 Long.parseLong으로 선언한다.</span></span><br><span class="line"><span class="comment">        최적화 방안</span></span><br><span class="line"><span class="comment">        - 지워지지 않은 수를 찾을 때 n이 아니라 sqrt(n) 까지만 찾는다.</span></span><br><span class="line"><span class="comment">        - i의 배수들을 지울 때 2 * i 에서 시작하는 것이 아니라 i * i 에서 시작한다. 2 * i에서 2의 배수 들은 모두 지워졌을 것이고 3 * i 는 3의 배수를 지울 때 이미 지워졌을 테니까.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">2</span>; i*i&lt;=num; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                num = num / i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == num_tmp)&#123;</span><br><span class="line">            System.out.println(<span class="string">"-1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>소수</tag>
        <tag>수학</tag>
        <tag>에라토스테네스의체</tag>
        <tag>소인수분해</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연속합 1912</title>
    <url>/BOJ-20201027-BOJ-continuous-sum/</url>
    <content><![CDATA[<h1 id="baegjun-yeonsoghab-1912-munje"><a href="#baegjun-yeonsoghab-1912-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-연속합-1912-문제"></a> <a href="https://www.acmicpc.net/problem/1912" target="_blank" rel="noopener">백준 연속합 1912 문제</a></h1>
<hr>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.</p>
<p>예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 답을 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>10<br>
10 -4 3 1 5 6 -35 12 21 -1</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>33</p>
<h3 id="yeje-ibryeog-2"><a href="#yeje-ibryeog-2" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#예제-입력-2"></a> 예제 입력 2</h3>
<p>10<br>
2 1 -4 3 4 -4 6 5 -5 1</p>
<h3 id="yeje-culryeog-2"><a href="#yeje-culryeog-2" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#예제-출력-2"></a> 예제 출력 2</h3>
<p>14</p>
<h3 id="yeje-ibryeog-3"><a href="#yeje-ibryeog-3" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#예제-입력-3"></a> 예제 입력 3</h3>
<p>5<br>
-1 -2 -3 -4 -5</p>
<h3 id="yeje-culryeog-3"><a href="#yeje-culryeog-3" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#예제-출력-3"></a> 예제 출력 3</h3>
<p>-1</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>연속합 문제를 풀때 맨 처음에 생각한 방법은 DFS로 각각의 경우를 모두 구해서 합을 구하는 방식으로 구현하였습니다.<br>
하지만, 4%쯤 되서 시간초과가 발생하는 불상사가 생기게 되었습니다. 문제를 다시 읽어보니 N의 제한이 <code>n(1 ≤ n ≤ 100,000)</code> 까지 였기때문에 <code>1초에 10억번연산을 수행해야하는 경우가 생길 수 있다고 판단</code>하였습니다.</li>
</ul>
<p>따라서, DFS로 구현하기에는 복잡도 면에서 무리가 있다고 생각하여 <code>메모이제이션(DP)</code>를 이용하였습니다.</p>
<p>테스트 케이스를 잘 살펴보면 이전의 합이 음수일때는 <code>가장 큰값</code>을 구할 수가 없습니다. 그리고, <code>(이전의 합 + 현재의 합)이 음수</code>일 경우도 최댓값을 구할 수가 없습니다.</p>
<p>따라서, 이것을 DP의 조건으로 생각하여 진행하였습니다.</p>
<blockquote>
<p>입력</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">    dp[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>맨 처음의 최댓값을 dp[0]으로 기준을 잡고 bottom-up방식으로 구현을 진행하였습니다.</p>
<blockquote>
<p>DP 조건</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(dp[i] + dp[i-<span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; dp[i-<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dp[i] = dp[i-<span class="number">1</span>] + dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DP의 조건을 살펴보면 두가지</code>로 나눌 수 있습니다.</p>
<ol>
<li>처음 이전의 합이 음수라면 선택하지 않고 현재부터 다시 선택합니다. 즉, 이전의 합이 양수일때만 진행한다는 뜻입니다.</li>
<li>이전의 합과 현재의 수를 더한 값이 음수라면 선택하지 않습니다.</li>
</ol>
<blockquote>
<p>최댓값 선택</p>
</blockquote>
<p>만약 max값이 dp값보다 작을 경우 현재의 합을 max값으로 갱신시켜줍니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(max &lt; dp[i])&#123;</span><br><span class="line">    max = dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<blockquote>
<p>시간초과 브루트포스</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연속합1912 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; answer;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> max = -<span class="number">1000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        n = Integer.parseInt(br.readLine());</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            arr[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            dfs(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt;= n || idx &gt;= n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;cnt; i++)&#123;</span><br><span class="line">            ans += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; max)&#123;</span><br><span class="line">                max = ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(idx,cnt+<span class="number">1</span>);</span><br><span class="line">        dfs(idx+<span class="number">1</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DP</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연속합1912<span class="title">DP</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dp;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        n = Integer.parseInt(br.readLine());</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            dp[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] + dp[i-<span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; dp[i-<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                dp[i] = dp[i-<span class="number">1</span>] + dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; dp[i])&#123;</span><br><span class="line">                max = dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        첫번째 경우 dp[i-1] &gt; 0</span></span><br><span class="line"><span class="comment">          이전의 합이 음수라면 선택하지 않습니다.</span></span><br><span class="line"><span class="comment">        두번째 경우 dp[i] + dp[i-1] &gt; 0</span></span><br><span class="line"><span class="comment">          이전의 합과 현재의 수를 더한 값이 음수라면 선택하지 않습니다.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>구현</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 색종이 2563</title>
    <url>/BOJ-20201027-BOJ-colored-paper/</url>
    <content><![CDATA[<h1 id="baegjun-saegjongi-2563-munje"><a href="#baegjun-saegjongi-2563-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-색종이-2563-문제"></a> <a href="https://www.acmicpc.net/problem/2563" target="_blank" rel="noopener">백준 색종이 2563 문제</a></h1>
<hr>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>가로, 세로의 크기가 각각 100인 정사각형 모양의 흰색 도화지가 있다. 이 도화지 위에 가로, 세로의 크기가 각각 10인 정사각형 모양의 검은색 색종이를 색종이의 변과 도화지의 변이 평행하도록 붙인다. 이러한 방식으로 색종이를 한 장 또는 여러 장 붙인 후 색종이가 붙은 검은 영역의 넓이를 구하는 프로그램을 작성하시오.<br>
<img src="https://www.acmicpc.net/upload/images/IcZB4bH8h7wwEY6z7qyoqNXkMsh.png" alt="그림 1"></p>
<p>예를 들어 흰색 도화지 위에 세 장의 검은색 색종이를 그림과 같은 모양으로 붙였다면 검은색 영역의 넓이는 260이 된다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 색종이의 수가 주어진다. 이어 둘째 줄부터 한 줄에 하나씩 색종이를 붙인 위치가 주어진다. 색종이를 붙인 위치는 두 개의 자연수로 주어지는데 첫 번째 자연수는 색종이의 왼쪽 변과 도화지의 왼쪽 변 사이의 거리이고, 두 번째 자연수는 색종이의 아래쪽 변과 도화지의 아래쪽 변 사이의 거리이다. 색종이의 수는 100 이하이며, 색종이가 도화지 밖으로 나가는 경우는 없다</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 색종이가 붙은 검은 영역의 넓이를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>3<br>
3 7<br>
15 7<br>
5 2</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<h2 id="260"><a href="#260" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#260"></a> 260</h2>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>해당 가로,세로 크기가 각각 100인 정사각형의 모양의 흰색도화지 위에 가로,세로 크기가 10인 정사각형의 모양의 검은 색종이를 붙여 해당 검은색종이의 넓이를 구하는 문제입니다.</li>
</ul>
<blockquote>
<p>접근방법</p>
</blockquote>
<p>이 문제를 접근할때 검은색부분의 넓이를 모두 구해서 더해주는것으로 생각하고 진행하였습니다. 입력으로 총 N개의 검은색 정사각형의 왼쪽하단점이 주어지기 때문에 각 정사각형별로 가로 x, 세로 y라고 생각하였을때 x+10, y+10까지의 영역을 모두 더해주면 되겠다고 생각하였습니다.</p>
<p>그리고, 겹치는 부분에 있어서는 map라는 변수를 하나 선언하여 map의 값이 0이 일때만 넓이를 계산해주고 한번 넓이를 계산 해준곳은 1로 만들어주어서 체크해주었습니다. 즉, 겹치는 부분은 단 한번만 넓이를 더할 수 있게 처리하였습니다.</p>
<blockquote>
<p>정사각형의 넓이<br>
정사각형의 넓이를 구할때 x ~ x+10, y ~ y+10까지 모두 값을 구해주게 되면 정사각형의 넓이를 구할 수 있습니다.</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 색종이2563 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y= Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;x+<span class="number">10</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;y+<span class="number">10</span>; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                        map[i][j] = <span class="number">1</span>;</span><br><span class="line">                        sum+=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>완전탐색</tag>
        <tag>구현</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 빗물 14719</title>
    <url>/BOJ-20201026-BOJ-rain-water/</url>
    <content><![CDATA[<h1 id="baegjun-bismul-14719-munje"><a href="#baegjun-bismul-14719-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-빗물-14719-문제"></a> <a href="https://www.acmicpc.net/problem/14719" target="_blank" rel="noopener">백준 빗물 14719 문제</a></h1>
<hr>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>2차원 세계에 블록이 쌓여있다. 비가 오면 블록 사이에 빗물이 고인다.<br>
<img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14719/1.png" alt="빗물 그림1"><br>
<img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14719/2.png" alt="빗물 그림2"></p>
<p>비는 충분히 많이 온다. 고이는 빗물의 총량은 얼마일까?</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫 번째 줄에는 2차원 세계의 세로 길이 H과 2차원 세계의 가로 길이 W가 주어진다. (1 ≤ H, W ≤ 500)</p>
<p>두 번째 줄에는 블록이 쌓인 높이를 의미하는 0이상 H이하의 정수가 2차원 세계의 맨 왼쪽 위치부터 차례대로 W개 주어진다.</p>
<p>따라서 블록 내부의 빈 공간이 생길 수 없다. 또 2차원 세계의 바닥은 항상 막혀있다고 가정하여도 좋다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>2차원 세계에서는 한 칸의 용량은 1이다. 고이는 빗물의 총량을 출력하여라.</p>
<p>빗물이 전혀 고이지 않을 경우 0을 출력하여라.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>4 4<br>
3 0 1 4</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>5</p>
<h3 id="yeje-ibryeog-2"><a href="#yeje-ibryeog-2" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#예제-입력-2"></a> 예제 입력 2</h3>
<p>4 8<br>
3 1 2 3 4 1 1 2</p>
<h3 id="yeje-culryeog-2"><a href="#yeje-culryeog-2" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#예제-출력-2"></a> 예제 출력 2</h3>
<p>5</p>
<h3 id="yeje-ibryeog-3"><a href="#yeje-ibryeog-3" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#예제-입력-3"></a> 예제 입력 3</h3>
<p>3 5<br>
0 0 0 2 0</p>
<h3 id="yeje-culryeog-3"><a href="#yeje-culryeog-3" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#예제-출력-3"></a> 예제 출력 3</h3>
<p>0</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>2차원 세계 블록에서 빗물이 얼만큼 고이는지를 확인하는 문제이다. 이 문제는 이전에 풀어보았던 창고다각형 문제와 비슷하다.<br>
<a href="https://www.acmicpc.net/problem/2304" target="_blank" rel="noopener">백준 창고다각형 2304 문제</a><br>
<a href="https://gwanhyeon.github.io/warehouse-polygon/">창고다각형 2304 문제 풀이</a></p>
</li>
<li>
<p>이 문제에서 가장 중요한 점은 2차원 세계블록에서 블록내부의 빈 공간이 생길 수 없도록 빗물이 얼마나 고이는지를 확인하면 된다. 빗물이 고이지 않았으면 0, 고였으면 1로 처리해준다. 즉, 블록의 면적을 구할 수 있다.</p>
</li>
</ul>
<blockquote>
<ol>
<li>블록의 최대 높이의 인덱스 구하기</li>
</ol>
</blockquote>
<p><code>블록의 높이가 가장 높은 인덱스의 값</code>을 구해주어야 합니다. 그 이유는 <code>지붕의 높이가 가장 높은 인덱스의 값</code>을 기준으로 <code>빗물을 고이게 만들어</code>야하기 때문입니다.</p>
<blockquote>
<ol start="2">
<li>블록의 높이가 있는 가장 작은 인덱스와 큰 인덱스 구하기</li>
</ol>
</blockquote>
<p>블록의 높이가 있는 가장 작은 인덱스와 큰 인덱스를 구해주어야 하는이유는 <code>블록의 최대 높이의 인덱스를 기준으로 좌측</code>, <code>우측의 최대로 가질 수 있는 블록의면적</code>을 구해야하기 때문입니다.</p>
<blockquote>
<p>문제 풀이</p>
</blockquote>
<ol>
<li>map이라는 배열을 하나 선언합니다. <code>배열의 인덱스값에는 블록의 인덱스값이 들어가게 되고 값에는 블록의 높이</code>가 들어가게 됩니다.</li>
<li>값을 입력 받는것과 동시에 블록의 높이를 가진 인덱스의 최댓값과 최솟값을 <code>Math.max(), Math.min()</code> 함수를 사용하여 구해주게 됩니다.</li>
<li>그리고, 지붕의 최댓값을 가지는 인덱스의값을 구해줍니다. 현재 <code>입력받은 인덱스의 값(블록의 높이)가 현재 블록의 높이 보다 클 경우 해당 인덱스 값을 갱신</code>시켜주게 됩니다.</li>
<li><code>좌측의 경우, 우측의 경우를 나누어서 블록의 만드는 값을 더해주면서 진행</code>해줍니다.</li>
</ol>
<blockquote>
<p>좌측</p>
</blockquote>
<p>좌측의 경우 블록의 높이를 가지는 <code>인덱스의 최솟값~블록의 높이가 가장 큰 블록의 인덱스값</code> 까지 값을 순회하면서 h의 값을 갱신하면서 순회하는 값의 높이가 더 클 경우에 sum의 값을 더해주게 됩니다.<br>
예를 들면, 높이가 (2,1), (2,3)의 경우를 비교해보겠습니다.<br>
<code>높이가 idx=0 h= 2, idx=1 h= 1</code>일 경우 현재 <code>idx=0의 높이가 idx=1보다 더 크므로</code>, <code>Math.max()</code> 함수를 사용하여 <code>더 큰 h값으로 sum</code>의 값을 더해주면서 진행합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// left -&gt; max_hight_idx</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=min_idx; i&lt;max_hight_idx; i++)&#123;</span><br><span class="line">    h = Math.max(h, map[i]);</span><br><span class="line">    sum += h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>우측</p>
</blockquote>
<p>우측의 경우는 블록의 높이를 가지는 <code>인덱스의 최댓값~블록의 높이가 가장 큰 블록의 인덱스값</code>까지 값을 순회하면서 h의 값 역시 최댓값으로 sum에 값을 더해줍니다. 그 이유는 위와 같습니다.</p>
<p>최종적으로 <code>sum의 값에는 좌측에서의 최대로 가질 수 있는 높이값, 우측에서 최대로 가질 수 있는 높이값</code>을 가지고 있습니다. 하지만, 아직 구해지지않은 값은 <code>max_hight_idx의 값</code> 즉, 가장 높은 블록의 값을 더해지지않은 상태이기 때문에 <code>map[max_hight_idx]</code>의 값으로 최종 결과값을 출력시켜주게 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">h = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// right -&gt; max_hight_idx</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=max_idx; i&gt;max_hight_idx; i--)&#123;</span><br><span class="line">   h = Math.max(h, map[i]);</span><br><span class="line">   sum += h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>블록의 빗물만 구하는 방법<br>
기존의 지붕의 높이에 기둥을 넣은 부분의 면적을 구하려면 기존의 블록의 채워진 모든 블록+빗물의 면적에서 - 블록의 값을 빼주면 현재 채워진 빗물의 양(면적)을 확인할 수 있습니다.<br>
<a href="https://www.acmicpc.net/problem/2304" target="_blank" rel="noopener">백준 창고다각형 2304 문제</a>와 유사한 문제입니다.</p>
</blockquote>
<p>결과적으로  <code>모든 영역의 넓이에서 - 각 영역의 기존의 값</code>을 빼준다면 빗물이 채워진 부분의 넓이를 구할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> left_sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right_sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// left_sum</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=min_idx; i&lt;max_hight_idx; i++)&#123;</span><br><span class="line">    left_sum += map[i];</span><br><span class="line">    h = Math.max(map[i], h);</span><br><span class="line">    sum += h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// right_sum</span></span><br><span class="line">h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=max_idx; i&gt;max_hight_idx; i--)&#123;</span><br><span class="line">    right_sum += map[i];</span><br><span class="line">    h = Math.max(map[i], h);</span><br><span class="line">    sum += h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이런형식으로 값을 구할 수 있겠습니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 빗물14719 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> map[];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max_hight_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i;</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            map[x] = y;</span><br><span class="line">            max_idx = Math.max(max_idx, x);</span><br><span class="line">            min_idx = Math.min(min_idx, x);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(map[x] &gt; map[max_hight_idx])&#123;</span><br><span class="line">                max_hight_idx = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right_sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// left_sum</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min_idx; i&lt;max_hight_idx; i++)&#123;</span><br><span class="line">            left_sum += map[i];</span><br><span class="line">            h = Math.max(map[i], h);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// right_sum</span></span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max_idx; i&gt;max_hight_idx; i--)&#123;</span><br><span class="line">            right_sum += map[i];</span><br><span class="line">            h = Math.max(map[i], h);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> answer = sum - (left_sum + right_sum);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>완전탐색</tag>
        <tag>구현</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 창고 다각형 2304</title>
    <url>/BOJ-20201026-BOJ-warehouse-polygon/</url>
    <content><![CDATA[<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>창고 다각형의 면적이 최소가 되는 값을 찾아내는 문제입니다.</li>
</ul>
<p>이 문제에서 가장 중요한 점은 좌측과 우측으로 오면서 <code>순차적으로 진행되는 높이보다 값이 같거나 커야합니다.</code> 그래야지 지붕을 만들때 물이 고이지 않도록 만들 수 있게 됩니다.<br>
문제의 조건을 살펴보면 <code>지붕의 수평 부분은 반드시 어떤 기둥의 윗면과 닿아야 한다. 지붕의 수직 부분은 반드시 어떤 기둥의 옆면과 닿아야 한다. 지붕의 가장자리는 땅에 닿아야 한다.</code> 라는 조건을 가지고 있고 지붕의 최대 높이의 인덱스 구하기 지붕의 높이가 가장 높은 인덱스의 값을 구해주어야 합니다.<br>
그 이유는 지붕의 높이가 <code>가장 높은 인덱스의 값을 기준으로 지붕</code>을 만들어야하기 때문입니다. 높이가 10이 되기 때문에 지붕의 최대 높이의 인덱스는 8이 됩니다.</p>
<p>지붕의 높이가 있는 <code>가장 작은 인덱스와 큰 인덱스 구하기</code> 지붕의 높이가 있는 <code>가장 작은 인덱스와 큰 인덱스</code>를 구해주어야 하는이유는 지붕의 최대 높이의 인덱스를 기준으로 <code>좌측, 우측</code>의 최대로 가질 수 있는 <code>지붕의 면적</code>을 구해야하기 때문입니다. 지붕의 높이를 가진 <code>가장 작은 인덱스를 2와 높이 4, 가장 큰 인덱스를 16과 8</code>를 가지게 됩니다.</p>
<blockquote>
<p>문제 풀이</p>
</blockquote>
<p>map이라는 배열을 하나 선언합니다. <code>배열의 인덱스값</code>에는 <code>지붕의 인덱스값</code>이 들어가게 되고 <code>값에는 지붕의 높이</code>가 들어가게 됩니다.<br>
예) map[2] = 4, map[16] = 8 값을 입력 받는것과 동시에 지붕의 높이를 가진 인덱스의 최댓값과 최솟값을 <code>Math.max(),Math.min()</code> 함수를 사용하여 구해주게 됩니다.<br>
그리고, 지붕의 최댓값을 가지는 인덱스의값을 구해줍니다. 현재 입력받은 <code>인덱스의 값(지붕의 높이)</code>가 현재 지붕의 높이 보다 클<br>
경우 해당 인덱스 값을 갱신시켜주게 됩니다.</p>
<p>좌측의 경우, 우측의 경우를 나누어서 지붕을 만드는 값을 더해주면서 진행해줍니다.</p>
<blockquote>
<p>좌측</p>
</blockquote>
<p>지붕의 높이를 가지는 인덱스의 <code>최솟값~지붕의 높이</code>가 <code>가장 큰 지붕의 인덱스값 까지 값</code>을 순회하면서 h의 값을 갱신하면서 순회하는 값의 높이가 더 클 경우에 sum의 값을 더해주게 됩니다.</p>
<p>예를 들면, 높이가 (2,1), (2,3)의 경우를 비교해보겠습니다. 높이가 <code>idx=0 h= 2, idx=1 h= 1일 경우</code> 현재 idx=0의 높이가 idx=1보다 더 크므로, <code>Math.max()</code> 함수를 사용하여 더 큰 h값으로 sum의 값을 더해주면서 진행합니다. 그 이유는 현재 h값이 더 작을 경우 값을 더하게 되면 어떤 기둥의 윗면과 닿거나 옆면에 닿아야한다 라는 조건에 위배되기 때문입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// left -&gt; max_hight_idx</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=min_idx; i&lt;max_hight_idx; i++)&#123;</span><br><span class="line">    h = Math.max(h, map[i]);</span><br><span class="line">    sum += h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>우측<br>
우측 우측의 경우는 지붕의 높이를 가지는 <code>인덱스의 최댓값~지붕의 높이</code>가 <code>가장 큰 지붕의 인덱스값</code>까지 값을 순회하면서 h의 값 역시 최댓값으로 sum에 값을 더해줍니다. 그 이유는 위와 같습니다. <code>최종적으로 sum의 값에는 좌측에서의 최대로 가질 수 있는 높이값, 우측에서 최대로 가질 수 있는 높이값을 가지고 있습니다.</code><br>
하지만, 아직 구해지지않은 값은 max_hight_idx의 값 즉, <code>가장 높은 지붕의 값을 더해지지않은 상태이기 때문에 map[max_hight_idx]의 값으로 최종 결과값을 출력시켜주게 됩니다.</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">h = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// right -&gt; max_hight_idx</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=max_idx; i&gt;max_hight_idx; i--)&#123;</span><br><span class="line">   h = Math.max(h, map[i]);</span><br><span class="line">   sum += h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>응용하는 경우</p>
</blockquote>
<p>만약에, 현재 문제를 다른경우로 생각해보면 <code>기존의 지붕의 높이에 기둥을 넣은 부분의 면적</code>을 구하려면 어떻게 구할 수 있을까요? 즉, 채워진 부분의 넓이를 구하는 문제를 구할수도 있습니다. <a href="https://www.acmicpc.net/problem/1912" target="_blank" rel="noopener">백준 빗물 14719 문제</a> 과 유사한 문제입니다.</p>
<p>네 맞습니다. 방금까지 우리구한 모든 영역의 넓이에서 - 각 영역의 기존의 값을 빼준다면 채워진 부분의 넓이를 구할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> left_sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right_sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;map.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; max_hight_idx)&#123;</span><br><span class="line">        left_sum += map[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=map.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; max_hight_idx)&#123;</span><br><span class="line">        right_sum += map[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이런형식으로 값을 구할 수 있겠습니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 창고다각형2304 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 인덱스 가장작은값, 큰값 구하고 기둥중에서 높이가 가장 큰 인덱스를 구한다.</span></span><br><span class="line">        <span class="keyword">int</span> max_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max_hight_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">            map[x] = y;</span><br><span class="line">            max_idx = Math.max(max_idx, x);</span><br><span class="line">            min_idx = Math.min(min_idx, x);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(map[x] &gt; map[max_hight_idx])&#123;</span><br><span class="line">                max_hight_idx = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// left -&gt; max_hight_idx</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min_idx; i&lt;max_hight_idx; i++)&#123;</span><br><span class="line">            h = Math.max(h, map[i]);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// right -&gt; max_hight_idx</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max_idx; i&gt;max_hight_idx; i--)&#123;</span><br><span class="line">            h = Math.max(h, map[i]);</span><br><span class="line">            sum += h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;map.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; max_hight_idx)&#123;</span><br><span class="line">                left_sum += map[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=map.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; max_hight_idx)&#123;</span><br><span class="line">                right_sum += map[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map[max_hight_idx] + sum);</span><br><span class="line">        <span class="comment">//System.out.println("left painting: "+ left_sum + " right painting : " + right_sum + " max painting :" + map[max_hight_idx]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>완전탐색</tag>
        <tag>구현</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 텀 프로젝트 9466</title>
    <url>/BOJ-20201022-BOJ-term-project/</url>
    <content><![CDATA[<h1 id="baegjun-teom-peurojegteu-9466-munje"><a href="#baegjun-teom-peurojegteu-9466-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-텀-프로젝트-9466-문제"></a> <a href="https://www.acmicpc.net/problem/9466" target="_blank" rel="noopener">백준 텀 프로젝트 9466 문제</a></h1>
<hr>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>이번 가을학기에 ‘문제 해결’ 강의를 신청한 학생들은 텀 프로젝트를 수행해야 한다. 프로젝트 팀원 수에는 제한이 없다. 심지어 모든 학생들이 동일한 팀의 팀원인 경우와 같이 한 팀만 있을 수도 있다. 프로젝트 팀을 구성하기 위해, 모든 학생들은 프로젝트를 함께하고 싶은 학생을 선택해야 한다. (단, 단 한 명만 선택할 수 있다.) 혼자 하고 싶어하는 학생은 자기 자신을 선택하는 것도 가능하다.</p>
<p>학생들이(s1, s2, …, sr)이라 할 때, r=1이고 s1이 s1을 선택하는 경우나, s1이 s2를 선택하고, s2가 s3를 선택하고,…, sr-1이 sr을 선택하고, sr이 s1을 선택하는 경우에만 한 팀이 될 수 있다.</p>
<p>예를 들어, 한 반에 7명의 학생이 있다고 하자. 학생들을 1번부터 7번으로 표현할 때, 선택의 결과는 다음과 같다.</p>
<p>1    2    3    4    5    6    7<br>
3    1    3    7    3    4    6<br>
위의 결과를 통해 (3)과 (4, 7, 6)이 팀을 이룰 수 있다. 1, 2, 5는 어느 팀에도 속하지 않는다.</p>
<p>주어진 선택의 결과를 보고 어느 프로젝트 팀에도 속하지 않는 학생들의 수를 계산하는 프로그램을 작성하라.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫 줄에는 학생의 수가 정수 n (2 ≤ n ≤ 100,000)으로 주어진다. 각 테스트 케이스의 둘째 줄에는 선택된 학생들의 번호가 주어진다. (모든 학생들은 1부터 n까지 번호가 부여된다.)</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>각 테스트 케이스마다 한 줄에 출력하고, 각 줄에는 프로젝트 팀에 속하지 못한 학생들의 수를 나타내면 된다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>2<br>
7<br>
3 1 3 7 3 4 6<br>
8<br>
1 2 3 4 5 6 7 8</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>3<br>
0</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<blockquote>
<p>문제 해석</p>
</blockquote>
<p>텀 프로젝트 수행시 자기자신이 혼자 팀일 수도 있으며, 한 팀만 있을 수도 있을 때 텀 프로젝트를 구성하는 문제입니다.<br>
이 문제에서 가장 중요한 점은 <code>학생들이(s1, s2, ..., sr)이라 할 때, r=1이고 s1이 s1을 선택하는 경우나, s1이 s2를 선택하고, s2가 s3를 선택하고,..., sr-1이 sr을 선택하고, sr이 s1을 선택하는 경우에만 한 팀이 될 수 있다.</code> 라는 조건입니다.</p>
<blockquote>
<p>그래프</p>
</blockquote>
<p>예시 문제에서 주어진 그래프는 다음과 같이 생성되어 있습니다.<br>
<code>1-2-3-5 3-3 4-6-7</code><br>
<code>총 2개의 연결요소에서 3-3 하나의 사이클, 4-6-7의 사이클이 존재</code>하는 것을 알 수 있습니다. <code>사이클이 존재</code>한다는 것은 즉, 팀을 구성한 것과 같습니다. <code>이 사이클이 존재하는 팀을 제외하고 나머지 인원의 개수</code>를 구하시면 됩니다.</p>
<blockquote>
<p>접근 방식</p>
</blockquote>
<p>맨 처음에 문제를 접근하였을때 인접리스트로 사이클을 구하는것처럼 처리해주고, 연결점이 같을때 <code>(3,3 x=y) cnt값을 처리해주면 되지 않을까</code> 라는 생각을 하게 되었습니다. 하지만 이렇게 하게되면 <code>시작점과 하나의 사이클이 연결되는 지점을 찾기가 어려웠습니다.</code></p>
<p>따라서, DFS를 사용한 재귀호출방식을 다시 고민해보기 시작하였습니다.</p>
<p>예시에서 주어진 <code>3 1 3 7 3 4 6의 예시를 이용하여 설명을 진행하겠습니다.</code></p>
<blockquote>
<p><code>3-&gt;3</code> 경우</p>
</blockquote>
<p>자기자신을 가리키기 하나의 팀으로 완성이 가능합니다.</p>
<blockquote>
<p><code>4-&gt;7-&gt;6-&gt;4</code>의 경우를 살펴보겠습니다.</p>
</blockquote>
<p>DFS구현시<br>
DFS( 시작 변수 , 1-N 정점 cnt, 출발지점을 저장하기 위한 변수)로 재귀를 구현하였습니다.</p>
<p><code>check = 몇번째 노드를 방문했는지 개수 저장 startVertex = 해당 사이클에서 시작점 저장 cnt = 몇번쨰 노드 방문 개수 A = 1번부터 N까지의 노드가 가리키는 값 저장</code></p>
<blockquote>
<p>정점이 4인경우</p>
</blockquote>
<p>시작은 dfs(4,1,4)를 호출합니다.<br>
check[4] = 1, startVertex[4] = 1</p>
<blockquote>
<p>정점이 7인 경우</p>
</blockquote>
<p>4가 7을 가리키기 때문에 <code>dfs(7, 2, 4)</code>를 호출합니다.<br>
check[7] = 2, startVertex[7] = 4</p>
<blockquote>
<p>정점이 6인 경우</p>
</blockquote>
<p>7이 6을 가리키기 때문에 <code>dfs(6, 3, 4)</code>를 호출합니다.<br>
check[6] = 3, startVertex[6] = 4</p>
<blockquote>
<p>정점이 4인 경우</p>
</blockquote>
<p>6은 4를 가리키기 때문에 <code>dfs(4, 4, 4)</code>를 호출합니다.</p>
<p>즉, 시작점과 끝점이 같아지는 경우입니다. 하나의 싸이클이 생성된것을 확인하실 수 있습니다.</p>
<p>이때, 체크해야할 부분은 세가지 입니다.</p>
<ol>
<li>방문하였던 정점인지 아닌지 확인</li>
</ol>
<ul>
<li><code>시작정점과 같지 않은지 확인</code>을 합니다. <code>시작정점과 같지 않으면 해당 재귀를 종료</code>합니다.</li>
<li>시작정점과 같으면 몇번째 지점에 방문한 점인지 리턴을 해주게 됩니다. 이때 <code>cnt-check[i]</code>의 값을 리턴해주게 되는데 이 값을 리턴해주게 되는 이유는 <code>처음시작점부터 노드를 지나 다시 처음시작점</code>으로 돌아왔을때 <code>총 4번의 과정</code>을 지나가게됩니다. 이때 현재 check[4]에 저장된 값은 1의 값을 나타냅니다. <code>노드를 들어온 순서</code>를 나타내는 값입니다. 즉, 4번의 과정은 3개의 노드들로 이루어진것이므로 <code>현재노드의 점을 빼주게 됩니다.</code> 즉, <code>cnt - check[4]=1</code> 으로 <code>총 3명</code>이 함께 <code>텀 프로젝트</code>를 진행하게 됩니다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(check[x] != <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(step != startVertex[x])&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(check[x]);</span><br><span class="line">          <span class="keyword">return</span> cnt-check[x];</span><br><span class="line">      &#125;</span><br><span class="line">      check[x] = cnt;</span><br><span class="line">      startVertex[x] = step;</span><br><span class="line">      <span class="keyword">return</span> dfs(A[x], cnt+<span class="number">1</span>, step);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>결론</p>
</blockquote>
<p>최종적으로 모든 DFS를 호출하고나면 텀 프로젝트 인원 3명 + 개인이 진행 1명 = 총 4명이 되고 전체 학생들의 수는 n = 7이 되기때문에 7-4 = 3명이 되게 됩니다. 7명의 학생중에 3명을 제외한 나머지 학생들은 텀프로젝트를 진행할 수 있다는 뜻입니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TermProject9466</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] A;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] startVertex;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        t = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">            check = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>];</span><br><span class="line">            A = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>];</span><br><span class="line">            startVertex = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">                A[x] = y;</span><br><span class="line">                check[x] = <span class="number">0</span>;</span><br><span class="line">                startVertex[x] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                    ans += dfs(i,<span class="number">1</span>,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(n-ans);</span><br><span class="line">            Arrays.fill(check,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[x] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(step != startVertex[x])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cnt-check[x];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        check[x] = cnt;</span><br><span class="line">        startVertex[x] = step;</span><br><span class="line">        <span class="keyword">return</span> dfs(A[x], cnt+<span class="number">1</span>, step);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
        <tag>순열</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 반복 순열 2331</title>
    <url>/BOJ-20201022-BOJ-repeat-permutation/</url>
    <content><![CDATA[<h1 id="baegjun-banbog-sunyeol-2331-munje"><a href="#baegjun-banbog-sunyeol-2331-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-반복-순열-2331-문제"></a> <a href="https://www.acmicpc.net/problem/2331" target="_blank" rel="noopener">백준 반복 순열 2331 문제</a></h1>
<hr>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>다음과 같이 정의된 수열이 있다.</p>
<p>D[1] = A<br>
D[n] = D[n-1]의 각 자리의 숫자를 P번 곱한 수들의 합<br>
예를 들어 A=57, P=2일 때, 수열 D는 {57, 74(=5<sup>2+7</sup>2=25+49), 65, 61, 37, 58, 89, 145, 42, 20, 4, 16, 37, …}이 된다. 그 뒤에는 앞서 나온 수들(57부터가 아니라 58부터)이 반복된다.</p>
<p>이와 같은 수열을 계속 구하다 보면 언젠가 이와 같은 반복수열이 된다. 이때, 반복되는 부분을 제외했을 때, 수열에 남게 되는 수들의 개수를 구하는 프로그램을 작성하시오. 위의 예에서는 {57, 74, 65, 61}의 네 개의 수가 남게 된다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 A(1 ≤ A ≤ 9999), P(1 ≤ P ≤ 5)가 주어진다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 반복되는 부분을 제외했을 때, 수열에 남게 되는 수들의 개수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>57 2</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>4</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>이번 반복순열 문제는 중복되는 구간을 제외한 나머지영역의 개수를 구하는 문제입니다.</li>
<li>처음에 접근시에 인접리스트로 문제를 풀이하였었는데 <code>9%에서 런타임에러</code>로 계속 터지는 상황이 발생하여 <code>처음부터 로직을 구현</code>하게 되었습니다.</li>
<li>생각한 결과로 단순히 <code>DFS</code>로 중복이 cnt값을 <code>1~1,000,000</code>까지 값을 진행하다가 <code>순열의 값을 인덱스로 한 값을 cnt값으로 변경</code>하면서 진행하였습니다.</li>
</ul>
<blockquote>
<p>알고리즘 풀이</p>
</blockquote>
<p>예를 들어, 수열 D는 {57, 74(=5<sup>2+7</sup>2=25+49), 65, 61, <code>37, 58, 89, 145, 42, 20, 4, 16</code>, <code>37, …</code>}식으로 진행됩니다. 이때 37부터 값이 반복되고 있는 상황을 알 수 있습니다. <code>check[37]은 이미 5라는 값을 가지고 있겠지요?</code></p>
<p><code>check[57] = 1 check[74] = 2 check[65] = 3 check[61] = 4 check[37] = 5</code><br>
의 형태로 저장되는 상황일 것입니다. 따라서 반복되는 <code>두번째시점의 37의 구간에서 37이 가지고 있는 값-1을 반환</code>하게 된다면 <code>중복이 나오기전의 시점의 개수</code>를 찾아낼 수 있습니다.</p>
<blockquote>
<p>아래는 DFS함수 코드의 일부를 가져왔습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (check[a] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> check[a]-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    check[a] = cnt;</span><br><span class="line">    <span class="keyword">int</span> b = getNextNumber(a, p);</span><br><span class="line">    <span class="keyword">return</span> dfs(b, p, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>37로 예를 들어 check[37]은 이미 할당</code>되어있는 값이므로 <code>중복되는 시점</code>입니다. 따라서 <code>현재 값이 할당된 cnt값의 -1</code>은 <code>중복되지 않은 값의 개수</code>를 알 수 있습니다.</p>
<ul>
<li>나머지는 <code>한자리 숫자의 합을 구해주는 getNextNumber()함수</code>로 계속해서 값을 진행하게 하였습니다. 그리고 <code>dfs를 호출</code>해주면서 <code>이미 값을 가지고 있으면 해당값을 리턴하여 종료</code>하게 하였습니다.</li>
</ul>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 반복수열2331 </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] check = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000000</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextNumber</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans += Math.pow(a%<span class="number">10</span>, p);</span><br><span class="line">            a /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 예: check[37]은 이미 할당되어있는 값이므로 중복되는 시점이다. 따라서 현재 값이 할당된 cnt값의 -1은 중복되지 않은 값의 개수를 알 수 있다.</span></span><br><span class="line">        <span class="keyword">if</span> (check[a] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> check[a]-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[a] = cnt;</span><br><span class="line">        <span class="keyword">int</span> b = getNextNumber(a, p);</span><br><span class="line">        <span class="keyword">return</span> dfs(b, p, cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> p = sc.nextInt();</span><br><span class="line">        System.out.println(dfs(a, p, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
        <tag>순열</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 순열 사이클 10451</title>
    <url>/BOJ-20201022-BOJ-permutation-cycle/</url>
    <content><![CDATA[<h2 id="baegjun-sunyeol-saikeul-10451-munje"><a href="#baegjun-sunyeol-saikeul-10451-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-순열-사이클-10451-문제"></a> <a href="https://www.acmicpc.net/problem/10451" target="_blank" rel="noopener">백준 순열 사이클 10451 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>1부터 N까지 정수 N개로 이루어진 순열을 나타내는 방법은 여러 가지가 있다. 예를 들어, 8개의 수로 이루어진 순열 (3, 2, 7, 8, 1, 4, 5, 6)을 배열을 이용해 표현하면  와 같다. 또는, Figure 1과 같이 방향 그래프로 나타낼 수도 있다.</p>
<p>순열을 배열을 이용해  로 나타냈다면, i에서 πi로 간선을 이어 그래프로 만들 수 있다.</p>
<p>Figure 1에 나와있는 것 처럼, 순열 그래프 (3, 2, 7, 8, 1, 4, 5, 6) 에는 총 3개의 사이클이 있다. 이러한 사이클을 “순열 사이클” 이라고 한다.</p>
<p>N개의 정수로 이루어진 순열이 주어졌을 때, 순열 사이클의 개수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫째 줄에는 순열의 크기 N (2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 순열이 주어지며, 각 정수는 공백으로 구분되어 있다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>각 테스트 케이스마다, 입력으로 주어진 순열에 존재하는 순열 사이클의 개수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>2<br>
8<br>
3 2 7 8 1 4 5 6<br>
10<br>
2 1 3 4 5 6 7 9 10 8</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>3<br>
7</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>해당 문제는 그래프문제입니다. 그래프문제로 해당 순열으로 주어졌을때 순열 사이클의 개수를 구해주면 됩니다.</li>
</ul>
<p>문제에서 나와있듯이 <code>(3, 2, 7, 8, 1, 4, 5, 6)</code>의 배열을 이용하여 입력된 값들과 방향그래프로 만들어 낼 수 있습니다. <code>문제의 뜻을 이해하셨나요?</code></p>
<p>네 만약 8개의 수로 이루어져있을 경우 <code>(1,2,3,4,5,6,7,8)</code> <code>정점(Vertex)</code>을 가지게 됩니다. 순서대로 들어온 입력 값들을 <code>해당 정점들과 연결해주면 순열 그래프</code>가 나온다는 말입니다.</p>
<blockquote>
<p>순열과 그래프를 연결하기</p>
</blockquote>
<p><code>1번 Vertex - Value 3 2번 Vertex - Value 2 3번 Vertex - Value 7 4번 Vertex - Value 8 5번 Vertex - Value 1 6번 Vertex - Value 4 7번 Vertex - Value 5 8번 Vertex - Value 6</code></p>
<p>하나의 그래프 형태에서 <code>순열사이클의 개수</code>를 구하는것이 <code>포인트</code>입니다. 즉 ,<code>연결요소를 이루는 집합이 몇개</code>인지를 찾으면 됩니다. 따라서, 하나의 정점들과 연결된 그래프들은 모두 <code>Check</code>를 시키게 될 것이고, 이때 DFS를 이용하여 인접 리스트로 값을 처리하였고 한번 순회시 <code>Cnt+1</code>값을 처리하여 <code>순열 사이클의 개수</code>를 구할 수 있도록 하였습니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 순열사이클10451 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; A;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        t = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n = Integer.parseInt(br.readLine());</span><br><span class="line">            check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">            StringTokenizer st;</span><br><span class="line">            A = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                A.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> x = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">                A.get(x).add(y);</span><br><span class="line">                A.get(y).add(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                    dfs(i);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(cnt);</span><br><span class="line">            Arrays.fill(check,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
        <tag>순열</tag>
      </tags>
  </entry>
  <entry>
    <title>그래프 인접행렬, 인접리스트 및 DFS,BFS</title>
    <url>/Algorithm-20201021-Algorithm-graph-summary/</url>
    <content><![CDATA[<h1 id="geuraepeu"><a href="#geuraepeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#그래프"></a> 그래프</h1>
<p>그래프의 정의를 살펴보면 <code>G=(V,E)</code>가 성립하게 됩니다. <code>G: 그래프, V: 정점, E: 간선</code>을 의미합니다.</p>
<h1 id="gyeongro"><a href="#gyeongro" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#경로"></a> 경로</h1>
<p>만약 <code>A-&gt;C, A-&gt;B, C-&gt;B, E-&gt;B, C-&gt;E, C-&gt;D, D-&gt;E</code>의 정점과 간선으로 연결된 그래프가 있다고 생각하겠습니다. 이때 정점 A-&gt;B로 가는 경로는 몇가지 일까요?<br>
총 4가지 입니다.</p>
<ol>
<li>A-&gt;B</li>
<li>A-&gt;C-&gt;E-&gt;B</li>
<li>A-&gt;C-&gt;D-&gt;E-&gt;B</li>
<li>A-&gt;C-&gt;B<br>
의 경로가 나오게 됩니다.</li>
</ol>
<h1 id="banghyangi-issneun-geuraepeu"><a href="#banghyangi-issneun-geuraepeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#방향이-있는-그래프"></a> 방향이 있는 그래프</h1>
<p><code>A-&gt;C</code> 로 가는 같은 간선에 방향이 있을경우 이것을 <code>방향이 있는 그래프</code>라고 합니다.</p>
<h1 id="banghyangi-eobsneun-geuraepeu"><a href="#banghyangi-eobsneun-geuraepeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#방향이-없는-그래프"></a> 방향이 없는 그래프</h1>
<p><code>A-C</code> 로 가는 간선에 방향이 없는 경우를 <code>방향이 없는 그래프</code> 라고 합니다.</p>
<h1 id="du-jeongjeom-saie-geuraepeu"><a href="#du-jeongjeom-saie-geuraepeu" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#두-정점-사이에-그래프"></a> 두 정점 사이에 그래프</h1>
<p>두 정점 사이에 그래프는 <code>간선이 여러개</code> 존재할 수도 있습니다.</p>
<h1 id="sunhwan-rupeu"><a href="#sunhwan-rupeu" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#순환-루프"></a> 순환 루프</h1>
<p>자기자신으로 하는 <code>순환하는 간선</code>이 존재할 수도 있습니다.</p>
<h1 id="dansun-gyeongrowa-dansun-saikeul"><a href="#dansun-gyeongrowa-dansun-saikeul" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#단순-경로와-단순-사이클"></a> 단순 경로와 단순 사이클</h1>
<p>경로/사이클에서 같은 정점을 <code>두번 이상 방문하지 않는 경로/사이클</code>을 뜻합니다. 특별한 말이 없다면 일반적으로 사용할 경로와 사이클을 <code>단순 경로/사이클</code>이라고 합니다.</p>
<h1 id="casu-degree"><a href="#casu-degree" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#차수degree"></a> 차수(Degree)</h1>
<p><code>하나의 정점</code>에 연결되어 있는 <code>간선의 개수</code>를 뜻합니다.<br>
예를 들면 <code>1-5, 2-5, 4,5 정점</code>간의 <code>간선으로 이루어진 그래프</code>가 있다고 생각하겠습니다.<br>
지금 현재 5번 정점과 연결되어 있는 간선의 개수는 3개가 됩니다. 즉, <code>Degree차수의 값이 3개</code>라고 생각하시면 됩니다.</p>
<h1 id="gajungci"><a href="#gajungci" class="header-anchor">9. </a><a class="markdownIt-Anchor" href="#가중치"></a> 가중치</h1>
<p>그래프는 가중치의 값을 갖습니다. <code>정점과 정점사이의 간선에 가중치</code>가 부여될 수도 있는데요. 만약 <code>아무런 표시가 없다면 1</code>이라는 값으로 주어진다고 생각하시면 됩니다.</p>
<h1 id="geuraepeuyi-pyohyeon-injeobhaengryeol-injeob-riseuteu"><a href="#geuraepeuyi-pyohyeon-injeobhaengryeol-injeob-riseuteu" class="header-anchor">10. </a><a class="markdownIt-Anchor" href="#그래프의-표현인접행렬-인접-리스트"></a> 그래프의 표현(인접행렬, 인접 리스트)</h1>
<p>그래프의 표현의 종류는 인접행렬과 인접리스트로 나누어지게 됩니다. 해당 설명에서는 <code>i-&gt;j</code> 로 연결된 정점과 간선이 있다고 생각하겠습니다. 이것은 A[i] = j 와 연결된 정점을 행렬이나 링크드 리스트로 나타냅니다.</p>
<p>인접행렬은 말 그대로 행렬을 사용하여 인접한것이 있는지 없는지를 판단하는 행렬입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[i][j] = A[j][i] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>와 같이 서로 연결되어 있는것들을 행렬형식으로 처리할 수 있습니다.</p>
<p>인접리스트는 연결리스트를 사용하여 그래프를 표현하는 방식입니다.<br>
i-&gt;j 로 연결된 리스트가 있다고 가정하면 이것을 인접리스트로 표현하면 다음과 같습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[i] = &#123;j&#125;</span><br></pre></td></tr></table></figure>
<p>이렇게 표현할 수 있습니다. 이것의 의미하는 바는 어떻게 될까요? i의 정점에 연결된 j 정점입니다.</p>
<p>이해를 돕기위해서 1-&gt;2 가중치 1, 1-&gt;3 가중치2 이라고 해보면</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>으로 표현 할 수 있습니다.<br>
하지만, 그래프는 가중치가 존재할 수도있겠죠? 이럴때는 어떻게할까요?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>] = &#123;&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>과 같이 나타낼 수 있습니다.</p>
<h1 id="injeob-riseuteu-vs-injeob-haengryeol-siganbogjabdo-mic-teugjing"><a href="#injeob-riseuteu-vs-injeob-haengryeol-siganbogjabdo-mic-teugjing" class="header-anchor">11. </a><a class="markdownIt-Anchor" href="#인접-리스트-vs-인접-행렬-시간복잡도-및-특징"></a> 인접 리스트 VS 인접 행렬 시간복잡도 및 특징</h1>
<p><code>시간복잡도의 차이점</code>으로는 인접 리스트로 표현된 <code>그래프: O(V+E), 인접 행렬로 표현된 그래프: O(V^2)</code>로 나타낼 수 있습니다.</p>
<p>즉, 그래프 내에 적은 숫자의 간선만을 가지는 희소 그래프의 경우 <code>인접 행렬보다 인접 리스트</code>를 사용하는 것이 <code>시간복잡도면</code>에서 뛰어납니다.</p>
<h1 id="gipi-useon-tamsaeg-dfs"><a href="#gipi-useon-tamsaeg-dfs" class="header-anchor">12. </a><a class="markdownIt-Anchor" href="#깊이-우선-탐색dfs"></a> 깊이 우선 탐색(DFS)</h1>
<p>DFS는 말 그대로 깊이를 우선탐색하는 기법입니다. 진행시 깊이우선 계속해서 값이 있으면 최대깊이까지 들어가는것을 뜻합니다. 구현은 <code>Stack이나 Recursive</code>를 이용해서 갈 수 있는 만큼 최대 -&gt; 갈수 없으면 이전 정점으로 돌아갑니다.</p>
<h1 id="neolbi-useon-tamsaeg-bfs"><a href="#neolbi-useon-tamsaeg-bfs" class="header-anchor">13. </a><a class="markdownIt-Anchor" href="#넓이-우선-탐색bfs"></a> 넓이 우선 탐색(BFS)</h1>
<p>BFS는 <code>하나의 정점에서 갈 수 있는 모든정점을 방문</code>하고 <code>다음 깊이</code>로 들어가게 됩니다.<br>
큐를 이용하여 갈 수 있는 <code>정점 모두 Queue -&gt; insert</code>를 해준후  <code>먼저 넣고 -&gt; Queue pop()</code>  의 형식으로 이루어 집니다.</p>
<p>각각의 그래프 탐색 방식이 다르기 때문에, 구현하는 방법도 너무나도 다릅니다.<br>
보통 DFS를 사용하게 되면 <code>Stack을 사용하거나 재귀호출</code>을 이용한 구현을 하게 되며, BFS를 사용하게 된다면 <code>Queue</code>를 이용하는 방식이라고 알고 계셔야합니다.</p>
<h1 id="injeobriseuteureul-iyonghan-dfs-bfs-puli"><a href="#injeobriseuteureul-iyonghan-dfs-bfs-puli" class="header-anchor">14. </a><a class="markdownIt-Anchor" href="#인접리스트를-이용한-dfsbfs-풀이"></a> 인접리스트를 이용한 DFS,BFS 풀이</h1>
<p><code>인접행렬과 인접리스트</code> 이용한 백준 <code>DFS BFS 1260번 문제</code>를 예시로 가져와봤습니다.</p>
<blockquote>
<p>인접행렬<br>
인접행렬을 이용한 풀이입니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Queue는 LinkedList 로 선언되어야한다</span></span><br><span class="line"><span class="comment">DFS 진행시 반드시 ArrayList나 LinkedList에 대한 값을 초기화 시켜주어야한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 인접행렬 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] A;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        start = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        A = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            A[x][y] = <span class="number">1</span>;</span><br><span class="line">            A[y][x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//인접행렬시에는 정렬이 필요 없다!! 인접리스트만 필요하다.</span></span><br><span class="line">        <span class="comment">//자식이 여러개라면 노드 번호가 작은 것 먼저 방문하므로 오름차순으로 정렬</span></span><br><span class="line">        dfs(start);</span><br><span class="line">        Arrays.fill(check,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        bfs(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        System.out.print(x + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 인접 행렬</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i] &amp;&amp; A[x][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        q.offer(v);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 인접 행렬</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check[i] &amp;&amp; A[x][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                    check[i] =<span class="keyword">true</span>;</span><br><span class="line">                    q.offer(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>인접리스트<br>
인접리스트를 이용한 풀이입니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Queue는 LinkedList 로 선언되어야한다</span></span><br><span class="line"><span class="comment">DFS 진행시 반드시 ArrayList나 LinkedList에 대한 값을 초기화 시켜주어야한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DFSBFS_LIST1260</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; A = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        start = Integer.parseInt(st.nextToken());</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            A.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            A.get(x).add(y);</span><br><span class="line">            A.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//자식이 여러개라면 노드 번호가 작은 것 먼저 방문하므로 오름차순으로 정렬을 해줬다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            Collections.sort(A.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(start);</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        System.out.println();</span><br><span class="line">        bfs(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        System.out.print(x + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 인접 리스트</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        q.offer(v);</span><br><span class="line">        <span class="comment">// 2. 인접리스트</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                    check[y] = <span class="keyword">true</span>;</span><br><span class="line">                    q.offer(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연결요소의 개수 11724</title>
    <url>/BOJ-20201021-BOJ-connected-component/</url>
    <content><![CDATA[<h2 id="baegjun-yeongyeolyosoyi-gaesu-11724-munje"><a href="#baegjun-yeongyeolyosoyi-gaesu-11724-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-연결요소의-개수-11724-문제"></a> <a href="https://www.acmicpc.net/problem/11724" target="_blank" rel="noopener">백준 연결요소의 개수 11724 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 연결 요소의 개수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>6 5<br>
1 2<br>
2 5<br>
5 1<br>
3 4<br>
4 6</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>2</p>
<h3 id="yeje-ibryeog-2"><a href="#yeje-ibryeog-2" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#예제-입력-2"></a> 예제 입력 2</h3>
<p>6 8<br>
1 2<br>
2 5<br>
5 1<br>
3 4<br>
4 6<br>
5 4<br>
2 4<br>
2 3</p>
<h3 id="yeje-culryeog-2"><a href="#yeje-culryeog-2" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#예제-출력-2"></a> 예제 출력 2</h3>
<h2 id="1"><a href="#1" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#1"></a> 1</h2>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li><code>그래프 상</code>에서 <code>연결요소의 개수</code>를 구하는 문제입니다. 여기서 가장 중요한점은 <code>각각의 그래프를 연결 요소</code>라고 하는데 <code>나누어진 그래프의 개수를 찾는 문제</code>입니다.</li>
</ul>
<p><code>연결요소의 개수</code>를 찾기전에 <code>그래프 개념</code>에 대해서 살펴보고 넘어가겠습니다.<br>
<a href="https://gwanhyeon.github.io/graph-summary/">그래프 인접행렬, 인접리스트 및 DFS,BFS</a> 해당 포스트에서 <code>인접행렬, 인접리스트와 DFS,BFS의 개념</code>에 대해서 <code>상세히 설명</code>해놓았습니다. 이부분을 참고하시면 어렵지 않게 문제를 푸실 수 있을것 입니다.</p>
<blockquote>
<p>문제를 풀기위해서는 필요한 지식은 다음과 같습니다.</p>
</blockquote>
<ul>
<li><code>인접행렬과 인접리스트</code>의 차이를 알 수 있어야합니다.</li>
<li><code>DFS와 BFS의 차이점</code>을 알고 있어야합니다.</li>
<li><code>가장 적은 정점부터 방문해야한다는 조건이 있을때는Sort</code>를 진행해야합니다.</li>
<li><code>DFS, BFS 백준 1260번</code> 문제와 유사하므로 이것이 잘 이해가 가지않으신다면 먼저 풀어보시는것을 권장드립니다.</li>
<li><code>직접 손으로 그래프</code>를 그리면서 하나하나씩 <code>과정</code>이 어떻게 이루어지는지 알고 계셔야합니다.</li>
</ul>
<p>간략히 풀이한 것에 말씀드려보면 <code>(1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2)</code>이라는 조건이 있으므로 각각의 <code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt;</code> 형식의 리스트에 값을 할당하였습니다. 또한, 내가 체크한 부분인지 아닌지를 확인하기 위한 <code>check변수</code>를 선언하여 문제를 해결 하였습니다.<br>
결국, <code>check된 부분이 false인 경우</code>에 카운트 값을 하나씩 올려주면서 재귀호출을 하게 된다면 결국엔 <code>그 정점(V)에 포함된 간선(E)의 연결요소의 개수</code>를 알 수 있겠죠?</p>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<p>시간복잡도는 현재 <code>(1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2)</code> 의 조건을 가지고 있습니다.<br>
<code>N은 최대 1000</code>까지의 수를 가질 수 있으며, M 같은경우는 <code>(1000*(999-1)/2)</code> 까지의 값을 가집니다.<br>
약 <code>500,000 정확히 말해서 499,500까지의 값</code>을 가질 수 있다는 말인데요.</p>
<p>N의 시간복잡도에 대해서는 <code>O(N^2)까지의 수</code>를 계산 하였을때, <code>1000 * 1000 =&gt; 1,000,000 백만</code>까지 나오게 됩니다. <code>M같은경우</code>는 <code>O(M^2) 약 500,000</code> 이기때문에 <code>O(M^2)</code>을 하게 되면 <code>500,000 * 500,000 =&gt; 250,000,000,000 = 2500억정도</code>의 <code>시간복잡도가 계산</code> 될 수 있기때문에 주의하여야합니다. 시간복잡도는 약 1초에 1억번 컴퓨터가 수행 할 수 있는 시간을 말하는데요.  <code>2500억</code>정도가 나오게된다면 컴퓨터 시간복잡도를 수행하는데 있어서 <code>2500초 정도</code>가 걸린다고 생각하시면 됩니다. 이러한 <code>시간복잡도 또한 무시할 수 없는 알고리즘</code>의 하나이기 때문에 <code>주의를 귀울이셔야 할 것 같습니다.</code></p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BFS DFS두가지 방법으로 사용하기</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연결요소11724 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] connCheck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; A = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            A.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(st.nextToken());</span><br><span class="line">            A.get(x).add(y);</span><br><span class="line">            A.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                <span class="comment">//dfs(i);</span></span><br><span class="line">                bfs(i);</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(v);</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">                <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                    check[y] = <span class="keyword">true</span>;</span><br><span class="line">                    q.offer(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        check[x] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.get(x).size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = A.get(x).get(i);</span><br><span class="line">            <span class="keyword">if</span>(!check[y])&#123;</span><br><span class="line">                check[y] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>그래프</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 부등호 2529</title>
    <url>/BOJ-20201020-BOJ-inequality-sign/</url>
    <content><![CDATA[<h2 id="baegjun-budeungho-2529-munje"><a href="#baegjun-budeungho-2529-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-부등호-2529-문제"></a> <a href="https://www.acmicpc.net/problem/2529" target="_blank" rel="noopener">백준 부등호 2529 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>두 종류의 부등호 기호 ‘&lt;’와 ‘&gt;’가 k개 나열된 순서열  A가 있다. 우리는 이 부등호 기호 앞뒤에 서로 다른 한 자릿수 숫자를 넣어서 모든 부등호 관계를 만족시키려고 한다. 예를 들어, 제시된 부등호 순서열 A가 다음과 같다고 하자.</p>
<p><code>A =&gt; &lt; &lt; &lt; &gt; &lt; &lt; &gt; &lt; &gt;</code></p>
<p>부등호 기호 앞뒤에 넣을 수 있는 숫자는 0부터 9까지의 정수이며 선택된 숫자는 모두 달라야 한다. 아래는 부등호 순서열 A를 만족시키는 한 예이다.</p>
<p><code>3 &lt; 4 &lt; 5 &lt; 6 &gt; 1 &lt; 2 &lt; 8 &gt; 7 &lt; 9 &gt; 0</code></p>
<p>이 상황에서 부등호 기호를 제거한 뒤, 숫자를 모두 붙이면 하나의 수를 만들 수 있는데 이 수를 주어진 부등호 관계를 만족시키는 정수라고 한다. 그런데 주어진 부등호 관계를 만족하는 정수는 하나 이상 존재한다. 예를 들어 3456128790 뿐만 아니라 5689023174도 아래와 같이 부등호 관계 A를 만족시킨다.</p>
<p><code>5 &lt; 6 &lt; 8 &lt; 9 &gt; 0 &lt; 2 &lt; 3 &gt; 1 &lt; 7 &gt; 4</code></p>
<p>여러분은 제시된 k개의 부등호 순서를 만족하는 (k+1)자리의 정수 중에서 최댓값과 최솟값을 찾아야 한다. 앞서 설명한 대로 각 부등호의 앞뒤에 들어가는 숫자는 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }중에서 선택해야 하며 선택된 숫자는 모두 달라야 한다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫 줄에 부등호 문자의 개수를 나타내는 정수 k가 주어진다. 그 다음 줄에는 k개의 부등호 기호가 하나의 공백을 두고 한 줄에 모두 제시된다. k의 범위는 2 ≤ k ≤ 9 이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>여러분은 제시된 부등호 관계를 만족하는 k+1 자리의 최대, 최소 정수를 첫째 줄과 둘째 줄에 각각 출력해야 한다. 단 아래 예(1)과 같이 첫 자리가 0인 경우도 정수에 포함되어야 한다. 모든 입력에 답은 항상 존재하며 출력 정수는 하나의 문자열이 되도록 해야 한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>2<br>
&lt; &gt;</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>897<br>
021</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>부등호의 개수가 주어지고 0~9까지의 값들을 가지고 해당 부등호 조건들이 만족하는 값들을 찾아 최댓값, 최솟값을 찾는 문제입니다.</li>
<li>선택된 숫자는 <code>모두 달라야하기때문에</code> 값들을 <code>체킹하는 변수</code>가 필요해 보입니다. 그렇기 때문에 <code>순열</code>을 사용하면 되겠다 라는 생각을 하게 되었습니다.</li>
<li>K개의 부등호의 개수는 0~9까지의 값중 K+1개를 선택할 수 있는것과 같은 의미입니다.</li>
</ul>
<p>입력으로 주어진 부등호 <code>&gt;, &lt;</code>에 따라 값 a,b가 만족하는지 찾는 함수가 필요합니다. 그리고 idx값이 0일때나 부등호가 성립하는경우에만 브루트포스를 사용하여 값을 순회합니다.<code>idx값이 0일때 브루트포스를 순회하는 이유</code>는 맨처음 문자열값이 <code>&quot;&quot;으로 호출을 진행하기 때문에 이것에 대한 예외처리</code>를 해준 것입니다.</p>
<blockquote>
<p>문자열 완전탐색 문제는 어떻게 풀까?</p>
</blockquote>
<ul>
<li>문제마다 다를 수 있겠지만 보통 <code>브루트포스 문자열관련 문제가 나오게 되면 DFS호출시 문자열을 더하고 빼주는 형식</code>으로 진행하는 것이 깔끔하고 구현이 더 쉽다고 생각합니다. 맨 처음에 문자열을 더하고 빼주는 형식으로 진행하지 않고 <code>Basement조건이 만족했을때(return 조건)</code> 처리를 하게 되면 복잡함을 느낄 수 있었습니다.</li>
</ul>
<blockquote>
<p>Basement 만족시<br>
K+1개를 선택하여 DFS를 통해 모든 조건을 구하였던 문자열 값을 answer에 모든 값을 담아주게 하였습니다.</p>
</blockquote>
<blockquote>
<p>최댓값, 최솟값<br>
문제에서 최댓값, 최솟값을 찾는 문제이므로 <code>Collections.sort()</code>함수를 사용하여 <code>맨 앞(index=0), 맨뒤(answer.size()-1)</code>의 값을 출력시켜주면 값을 도출해날 수 있습니다.</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 부등호문제 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;String&gt; answer;</span><br><span class="line">    <span class="keyword">static</span> String inequality_sign = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(),<span class="string">" "</span>);</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">        answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            inequality_sign += st.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="string">""</span>, <span class="number">0</span>, k);</span><br><span class="line">        Collections.sort(answer);</span><br><span class="line"></span><br><span class="line">        System.out.println(answer.get(answer.size()-<span class="number">1</span>) + <span class="string">"\n"</span> + answer.get(<span class="number">0</span>) + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, <span class="keyword">int</span> idx, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// basement</span></span><br><span class="line">        <span class="keyword">if</span>(idx == k+<span class="number">1</span>)&#123;</span><br><span class="line">            answer.add(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(idx == <span class="number">0</span> || inequality_check(s.charAt(idx-<span class="number">1</span>), (i+<span class="string">'0'</span>), inequality_sign.charAt(idx-<span class="number">1</span>)))&#123;</span><br><span class="line">                check[i] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(s+String.valueOf(i), idx+<span class="number">1</span>, k);</span><br><span class="line">                check[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 부등호 체크 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">inequality_check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">char</span> cal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cal == <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cal == <span class="string">'&gt;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>알고리즘</tag>
        <tag>위상정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 수 이어쓰기1 1748</title>
    <url>/BOJ-20201020-BOJ-number-inheritance1/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-su-ieosseugi1-1748-munje"><a href="#baegjun-su-ieosseugi1-1748-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-수-이어쓰기1-1748-문제"></a> <a href="https://www.acmicpc.net/problem/1748" target="_blank" rel="noopener">백준 수 이어쓰기1 1748 문제</a></h2>
<h3 id="munje"><a href="#munje" class="header-anchor">1.1.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>1부터 N까지의 수를 이어서 쓰면 다음과 같이 새로운 하나의 수를 얻을 수 있다.</p>
<p>1234567891011121314151617181920212223…</p>
<p>이렇게 만들어진 새로운 수는 몇 자리 수일까? 이 수의 자릿수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">1.1.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 N(1≤N≤100,000,000)이 주어진다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">1.1.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 새로운 수의 자릿수를 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">1.1.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>120</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">1.1.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>252</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>1~N까지의 값을 수를 이어서 쓰면 하나의 수를 얻을때 몇자리수인지를 구하는문제입니다.<br>
알고리즘 사고를 말하기 앞서, String VS StringBuilder, StringBuffer의 차이를 확인하고 지나가겠습니다.</li>
</ul>
<blockquote>
<p>String VS StringBuilder, StringBuffer<br>
<code>String 클래스 불변 객체</code>이기 때문에 <code>문자열 연산에서 객체를 계속 생성</code>하므로 성능이 떨어지지만 <code>조회와 멀티스레드 환경</code>에서 <code>큰 이점</code>을 가지고 있습니다.</p>
</blockquote>
<p>이에 반해,StringBuffer 클래스와 StringBuilder 클래스는 문자열 연산이 자주 발생할 때 문자열이 변경가능한 객체이므로 이점을 가지고 있습니다.</p>
<p>즉, <code>StringBuffer와 StringBuilder 차이점은 동기화 지원 유무</code>이고 <code>동기화를 고려하지 않는 환경에서 StringBuilder가 성능이 더 좋고</code>, <code>동기화 멀티스레드 환경</code>에서는 <code>StringBuffer</code>을 사용하는것이 좋습니다.</p>
<blockquote>
<p>모든 경우로 가능할까? 브루트 포스?<br>
N의 범위를 살펴보면 <code>N(1≤N≤100,000,000)</code> 의 조건을 가지고 있습니다. 1초에 1억까지 연산이 가능하므로 1초안에 처리 될 수 있어야합니다.</p>
</blockquote>
<p>즉, <code>모든 경우의 수를 O(N)만큼 진행</code>하면 <code>브루트포스로 진행</code>이 가능하지만, <code>문자열 연산</code>에서 <code>시간복잡도</code>는 <code>O(N) * 10</code>까지 진행될 수 있습니다. 그 이유는 <code>10은 수의 최대 자릿수</code>를 의미하기 때문에 <code>N의 시간복잡도</code>를 넘어버리게 됩니다. <code>문자열 String</code>은 <code>새로운 객체</code>를 계속해서 생성하기때문에 압도적으로 <code>시간복잡도가 증가</code>하는 경우가 될 수 있습니다.</p>
<p>따라서, 일반적인 브루트포스방법으로는 <code>모든 N까지를 진행하게 되면 시간초과</code>가 나게 됩니다. 그렇기 때문에 <code>다른 방법</code>을 <code>고안</code>할 수 있어야합니다.</p>
<blockquote>
<p>다른 방법은 무엇일까?<br>
수학적 연산의 방법을 살펴보면 수의 <code>자리수별로 나누어서 문제를 해결</code> 할 수 있습니다.<br>
만약 <code>N = 120</code>이라고 생각하면</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>~<span class="number">9</span> 길이 <span class="number">1</span></span><br><span class="line">(<span class="number">9</span>-<span class="number">1</span>+<span class="number">1</span>) * <span class="number">1</span> </span><br><span class="line"><span class="number">10</span>~<span class="number">99</span> 길이 <span class="number">2</span></span><br><span class="line">(<span class="number">99</span>-<span class="number">10</span>+<span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"><span class="number">100</span>~<span class="number">120</span> 길이 <span class="number">3</span></span><br><span class="line">(<span class="number">120</span>-<span class="number">100</span>+<span class="number">1</span>) * <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>의 규칙을 찾아낼 수 있습니다. 수의 각 자리별로 나누어서 자리수를 문제를 해결 할 수 있습니다.</p>
<p><code>결과적으로, (N의자리 최대값 - N자리 최솟값 + 1) * 자리수(N자리수 길이)</code> 으로 자리수를 구할 수 있게됩니다.</p>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">자리수 찾기문제</span></span><br><span class="line"><span class="comment">1234567891011 와같이 수를 이어붙이면 브루트포스로 처리하면 O(N) * 10(자리수)의 시간복잡도가 발생하므로 시간초과가 발생합니다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 수이어쓰기1 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i*=<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i*<span class="number">10</span>-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; n)&#123;</span><br><span class="line">                j = n;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (<span class="keyword">long</span>)(j - i + <span class="number">1</span>) * len;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>연산</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 체스판 다시칠하기 1018</title>
    <url>/BOJ-20201019-BOJ-chess-repaint/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-ceseupan-dasicilhagi-1018-munje"><a href="#baegjun-ceseupan-dasicilhagi-1018-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-체스판-다시칠하기-1018-문제"></a> <a href="https://www.acmicpc.net/problem/1018" target="_blank" rel="noopener">백준 체스판 다시칠하기 1018 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje"><a href="#munje" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M<em>N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8</em>8 크기의 체스판으로 만들려고 한다.</p>
<p>체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.</p>
<p>보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8<em>8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8</em>8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>8 8<br>
WBWBWBWB<br>
BWBWBWBW<br>
WBWBWBWB<br>
BWBBBWBW<br>
WBWBWBWB<br>
BWBWBWBW<br>
WBWBWBWB<br>
BWBWBWBW</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>1</p>
<h3 id="yeje-ibryeog-2"><a href="#yeje-ibryeog-2" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#예제-입력-2"></a> 예제 입력 2</h3>
<p>10 13<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
BBBBBBBBWBWBW<br>
BBBBBBBBBWBWB<br>
WWWWWWWWWWBWB<br>
WWWWWWWWWWBWB</p>
<h3 id="yeje-culryeog-2"><a href="#yeje-culryeog-2" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#예제-출력-2"></a> 예제 출력 2</h3>
<p>12</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>입력으로 주어진 체스판을 8*8의 크기의 체스판으로 다시 칠하는 경우를 모두 찾는 브루트포스 문제입니다.</li>
<li>체스판이 White로 시작하는 경우와 Black으로 시작하는 경우 두가지를 나누어서 생각할 수 있어야합니다.</li>
<li><code>BufferedReader</code>를 사용하여 입력을 처리하였고 <code>StringTokenizer</code>를 사용하여 각각의 입력을 처리하였습니다.</li>
<li><code>'B' 블랙의 경우 1, 'W' 흰색의 경우 0</code>으로 변경하여 진행하였습니다.</li>
</ul>
<blockquote>
<p>모든 Board를 어떤식으로 순회할 수 있을까요?<br>
테스트케이스로 주어진 n = 10, m = 13을 예를 들어서 설명하겠습니다.<br>
행같은 경우는 최대 3번, 열은 최대 6번까지 진행이 가능합니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n-<span class="number">8</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m-<span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="comment">// first : black,first : white</span></span><br><span class="line">      separate(i,j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>해당 코드가 최대 행,열이 최대 진행가능한 경우를 나타낼 수 있습니다.</p>
<blockquote>
<p>그래도 이해가 잘 가지 않으신다면?<br>
이해가 잘 가지 않으시면 직접 그림을 그리셔서 주어진 <code>10*13의 체스판위</code>에 <code>8*8의 체스판</code>을 최대 어떻게 이동할 수 있을지 생각해보시면 됩니다.</p>
</blockquote>
<blockquote>
<p>규칙<br>
이제 규칙을 찾아내야합니다.</p>
</blockquote>
<p>첫번째로 <code>WB, BW</code> 으로 시작하는 두가지경우로 나타낼 수 있습니다. 그리고 (행+열)의 값이 홀수, 짝수에 따라 체스판이 이루어진다는것을 알 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WBWBWBWB</span><br><span class="line">BWBWBWBW</span><br><span class="line">WBWBWBWB</span><br><span class="line">BWBBBWBW</span><br><span class="line">WBWBWBWB</span><br><span class="line">BWBWBWBW</span><br><span class="line">WBWBWBWB</span><br><span class="line">BWBWBWBW</span><br></pre></td></tr></table></figure>
<p>즉, <code>(행+열)을 더한값이 짝수, 홀수</code>에 따라 체스판의 규칙을 띄는것을 확인할 수 있습니다.<br>
짝수일 경우 흰색, 홀수일 경우 검은색이라고 생각하시면 됩니다.<br>
흰색이면 검은색으로 값을 증가 시켜주어야하고 , 검은색이라면 흰색으로 값을 증가시켜줍니다. 검은색으로 바꿔야하는 개수와 흰색으로 바꿔야하는 개수중 최소의 값을 찾아주어 <code>최솟값</code>을 처리해주면 됩니다.</p>
<blockquote>
<p>실수한 점<br>
처음에 WB,BW 두가지 경우를 나누는 것을 생각해보지 않고 한가지의 경우만 생각해서 테스트 케이스는 모두 맞았지만 다른 케이스에서 틀렸습니다가 나오게 되었습니다.</p>
</blockquote>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 체스판다시칠하기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> map[][];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> min = <span class="number">80</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(st.nextToken());</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            String val = st.nextToken();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="comment">// black - 0</span></span><br><span class="line">                <span class="keyword">if</span>(val.charAt(j) == <span class="string">'B'</span>)&#123;</span><br><span class="line">                   map[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// white - 1</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    map[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n-<span class="number">8</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m-<span class="number">8</span>; j++)&#123;</span><br><span class="line">                <span class="comment">// first : black,first : white</span></span><br><span class="line">                separate(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separate</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cntBlack = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cntWhite = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;start+<span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &lt; end+<span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 짝수: white</span></span><br><span class="line">                <span class="keyword">if</span>((i+j) % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        cntWhite++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        cntBlack++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 홀수: black</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(map[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        cntBlack++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        cntWhite++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        min = min &lt; cntBlack ? min : cntBlack;</span><br><span class="line">        min = min &lt; cntWhite ? min : cntWhite;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 덩치 7568</title>
    <url>/BOJ-20201016-BOJ-big-body/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-deongci-munje"><a href="#baegjun-deongci-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-덩치-문제"></a> <a href="https://www.acmicpc.net/problem/7568" target="_blank" rel="noopener">백준 덩치 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje"><a href="#munje" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>우리는 사람의 덩치를 키와 몸무게, 이 두 개의 값으로 표현하여 그 등수를 매겨보려고 한다. 어떤 사람의 몸무게가 x kg이고 키가 y cm라면 이 사람의 덩치는 (x,y)로 표시된다. 두 사람 A 와 B의 덩치가 각각 (x,y), (p,q)라고 할 때 x&gt;p 그리고 y&gt;q 이라면 우리는 A의 덩치가 B의 덩치보다 &quot;더 크다&quot;고 말한다. 예를 들어 어떤 A, B 두 사람의 덩치가 각각 (56,177), (45,165) 라고 한다면 A의 덩치가 B보다 큰 셈이 된다. 그런데 서로 다른 덩치끼리 크기를 정할 수 없는 경우도 있다. 예를 들어 두 사람 C와 D의 덩치가 각각 (45, 181), (55,173)이라면 몸무게는 D가 C보다 더 무겁고, 키는 C가 더 크므로, &quot;덩치&quot;로만 볼 때 C와 D는 누구도 상대방보다 더 크다고 말할 수 없다.</p>
<p>N명의 집단에서 각 사람의 덩치 등수는 자신보다 더 &quot;큰 덩치&quot;의 사람의 수로 정해진다. 만일 자신보다 더 큰 덩치의 사람이 k명이라면 그 사람의 덩치 등수는 k+1이 된다. 이렇게 등수를 결정하면 같은 덩치 등수를 가진 사람은 여러 명도 가능하다. 아래는 5명으로 이루어진 집단에서 각 사람의 덩치와 그 등수가 표시된 표이다.</p>
<p>이름    &lt;몸무게, 키&gt;    덩치 등수<br>
A    &lt;55, 185&gt;    2<br>
B    &lt;58, 183&gt;    2<br>
C    &lt;88, 186&gt;    1<br>
D    &lt;60, 175&gt;    2<br>
E    &lt;46, 155&gt;    5<br>
위 표에서 C보다 더 큰 덩치의 사람이 없으므로 C는 1등이 된다. 그리고 A, B, D 각각의 덩치보다 큰 사람은 C뿐이므로 이들은 모두 2등이 된다. 그리고 E보다 큰 덩치는 A, B, C, D 이렇게 4명이므로 E의 덩치는 5등이 된다. 위 경우에 3등과 4등은 존재하지 않는다. 여러분은 학생 N명의 몸무게와 키가 담긴 입력을 읽어서 각 사람의 덩치 등수를 계산하여 출력해야 한다.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫 줄에는 전체 사람의 수 N이 주어진다. 그리고 이어지는 N개의 줄에는 각 사람의 몸무게와 키를 나타내는 양의 정수 x와 y가 하나의 공백을 두고 각각 나타난다. 단, 2 ≤ N ≤ 50, 10 ≤ x,y ≤ 200 이다.</p>
<h3 id="culryeog"><a href="#culryeog" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#출력"></a> 출력</h3>
<p>여러분은 입력에 나열된 사람의 덩치 등수를 구해서 그 순서대로 첫 줄에 출력해야 한다. 단, 각 덩치 등수는 공백문자로 분리되어야 한다.</p>
<h3 id="yeje-ibryeog-1"><a href="#yeje-ibryeog-1" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#예제-입력-1"></a> 예제 입력 1</h3>
<p>5<br>
55 185<br>
58 183<br>
88 186<br>
60 175<br>
46 155</p>
<h3 id="yeje-culryeog-1"><a href="#yeje-culryeog-1" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#예제-출력-1"></a> 예제 출력 1</h3>
<p>2 2 1 2 5</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>사람들의 덩치의 등수를 매길때 조건인 (x,y), (p,q)라고 할때 x&gt;p, y&gt;q이라면 A의 덩치가 B의 덩치보다 <code>더크다</code> 라는게 가장 중요한 조건이였습니다. 이 문제는 개인적으로 브루트포스 + 조합이라고 생각합니다.</li>
<li>각각의 몸무게와 키를 저장시킬 배열을 하나선언하여 주었습니다.</li>
<li>그리고 check변수를 두개 선언해주었습니다. 두개를 선언해주는 이유는 첫번째 사람이 나머지사람들의 모든 덩치비교, 두번째 사람이 모든 덩치비교 … 이런식으로 모든사람의 덩치를 비교해야합니다. 따라서, 각각의 사람에 따라 덩치큰사람의 개수를 찾아주어야합니다. 그렇기 때문에 타겟이 되는 사람을 체크해줄 변수와 타겟변수와 비교되는 사람들을 체크해줄 변수를 선언해주었습니다.</li>
<li>각각 타겟이 되는 사람을 순회해주어야하므로 n까지의 모든 경우사람을 DFS돌려주었습니다.</li>
</ul>
<blockquote>
<p>몸무게, 키 비교의 경우</p>
</blockquote>
<p>첫번째 사람일 경우 그 나머지사람 모두와 비교, 두번째 사람일 경우 그 나머지 사람들과 모두 …(계속) 비교의 형식으로 진행하였습니다.</p>
<p>만약 첫번째 사람의 경우는 2~N까지의 사람을 모두 비교해주어야하므로</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(idx == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(c &gt; a &amp;&amp; d &gt; b)&#123;</span><br><span class="line">        cnt +=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>선택된 사람이 한명이고, <code>c &gt; a &amp;&amp; d &gt; b</code> 의 조건을 만족하면 cnt++를 해주었습니다. 그리고나서 모든 DFS의 경우를 빠져나오게 되면 cnt값을 1로 초기화 시켜주었습니다. 문제에서 보면 <code>큰 덩치의 사람이 k명이라면 그 사람의 덩치 등수는 k+1이 된다.</code> 라는 조건이 있기때문에 1로 초기화시켜주었습니다. 값을 도출하였을때 -1씩 줄어든 값이 출력되어서 문제를 다시 읽어보니 조건을 찾았습니다.<br>
그리고 나서 나머지 사람들을 선택할때는 조합의 경우를 찾아주면서 값을 비교해주었습니다.</p>
<hr>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 덩치7568 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] value_check;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] stature;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st;</span><br><span class="line">        weight= <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        stature = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        check = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        value_check = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine(),<span class="string">" "</span>);</span><br><span class="line">            weight[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">            stature[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            check[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(weight[i],stature[i],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, n);</span><br><span class="line">            answer.add(cnt);</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            check[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;answer.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == answer.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(answer.get(i));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(answer.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> idx, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c &gt; a &amp;&amp; d &gt; b)&#123;</span><br><span class="line">                cnt +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(value_check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            value_check[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(a,b,weight[i],stature[i], idx+<span class="number">1</span> ,n);</span><br><span class="line">            value_check[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 분해합 2231</title>
    <url>/BOJ-20201015-BOJ-decomposition-sum/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="baegjun-bunhaehab-munje"><a href="#baegjun-bunhaehab-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#백준-분해합-문제"></a> <a href="https://www.acmicpc.net/problem/2231" target="_blank" rel="noopener">백준 분해합 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje"><a href="#munje" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h3>
<p>어떤 자연수 N이 있을 때, 그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다. 어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다. 예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다. 따라서 245는 256의 생성자가 된다. 물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다. 반대로, 생성자가 여러 개인 자연수도 있을 수 있다.</p>
<p>자연수 N이 주어졌을 때, N의 가장 작은 생성자를 구해내는 프로그램을 작성하시오.</p>
<h3 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h3>
<p>첫째 줄에 자연수 N(1 ≤ N ≤ 1,000,000)이 주어진다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>분해합을 구하기 위해서는 <code>M은 N의 생성자이여야한다.</code> 가 가장 중요한 조건이였습니다.<br>
예를 들어보겠습니다.<br>
N이 216일 경우 (216+2+1+6) =&gt; 198이 됩니다.<br>
즉,198은 225의 분해합입니다.</li>
</ul>
<blockquote>
<p>분해합의 원리<br>
각 자리의 수 + 분해합 M의 값 = N이 되는 경우를 찾아주면 되는 문제였습니다.<br>
브루트포스를 사용하여 모든경우 i=1~100000까지의 값을 순회하면서 N의 값과 같은 경우를 찾아주었습니다. 정수값을 문자열로 변경하여 각 자리의 값의 합을 저장시킨후 <code>(i의 값 + 각 자리 값의 합)</code> 이 같을 경우 값을 찾아주었습니다.</p>
</blockquote>
<blockquote>
<p>회고<br>
처음에 문제의 뜻을 제대로 파악못하였는데 직접 써보면서 하나씩 대입해보니까 쉽게 풀 수 있었던 문제였습니다. 약 40분정도 소요되었던 문제였습니다.</p>
</blockquote>
<p>문제에서 주어진 각 분해합의 개념을 잘 파악하고 브루트포스로 값을 찾아주면 쉽게 도출 할 수 있습니다. N의 값과 같은 생성자를 모두 answer 변수에 넣어준 후 <code>Collections.min()</code> 함수를 사용하여 최솟값을 찾아주었습니다.</p>
<hr>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 분해합 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        Scanner sc= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">            String str = Integer.toString(i);</span><br><span class="line">            <span class="keyword">int</span> str_value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;str.length(); j++) &#123;</span><br><span class="line">                str_value += Integer.parseInt(String.valueOf(str.charAt(j)));</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(n,i,i+str_value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(answer.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            min = Collections.min(answer);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> value, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sum == n의 값과 같을 경우 즉, 생성자일 경우</span></span><br><span class="line">        <span class="keyword">if</span>(sum == n)&#123;</span><br><span class="line">            answer.add(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 도둑질</title>
    <url>/Programmers-20201013-Programmers-house-steal/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="peurogeuraemeoseu-dodugjil-munje"><a href="#peurogeuraemeoseu-dodugjil-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#프로그래머스-도둑질-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42897?language=java" target="_blank" rel="noopener">프로그래머스 도둑질 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>도둑이 어느 마을을 털 계획을 하고 있습니다. 이 마을의 모든 집들은 아래 그림과 같이 동그랗게 배치되어 있습니다.</p>
<p>각 집들은 서로 인접한 집들과 방범장치가 연결되어 있기 때문에 인접한 두 집을 털면 경보가 울립니다.</p>
<p>각 집에 있는 돈이 담긴 배열 money가 주어질 때, 도둑이 훔칠 수 있는 돈의 최댓값을 return 하도록 solution 함수를 작성하세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<p>이 마을에 있는 집은 3개 이상 1,000,000개 이하입니다.<br>
money 배열의 각 원소는 0 이상 1,000 이하인 정수입니다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<p>훔친 비용의 값을 점진적으로 사용하기때문에 DP로 풀면 되겠다 라는 생각을 하게 되었습니다.</p>
<ul>
<li>첫번째집을 훔치는 경우 VS 첫번째집을 훔치지 않는 경우<br>
훔치는 경우의 수에 따라서 DP를 나누어서 값을 계산하였습니다.</li>
</ul>
<blockquote>
<p>첫번째 집을 훔치는 경우</p>
</blockquote>
<p>첫번째집을 훔쳤을 경우에는 <code>dp[0] = 첫번째집의 비용</code>을 저장시켜줍니다.<br>
첫번째집을 훔쳤을때에는 인접한 두번째집은 훔칠수 없습니다. 따라서 첫번째집을 훔치는경우는 두번째집을 선택할수없기때문에 두번째집도 지금까지 가장 큰 첫번째집 돈을 넣어줍니다. <code>dp[1] = 첫번째 집의 비용</code></p>
<p>여기서 length의 범위를 -1을 해주게 되는데 첫번째집을 선택하게 될 경우 마지막에 있는 집은 방문을 하지않는것이 확실하기때문에 -1로 마지막 길이 이전까지만 순회시켜주었습니다.</p>
<blockquote>
<p>첫번째 집을 훔치지 않는 경우<br>
첫번째 집을 훔치지 않는 경우는 첫번째집은 0의 값을 넣어주게 됩니다.<br>
<code>dp1[0] = 훔치지 않으므로 0</code><br>
두번째 집은 기존의 money[1]의 값을 넣어주게 되면서 이제 모든 비용을 구해주면됩니다.</p>
</blockquote>
<p>이제 모든 비용을 구하기 위해서는 값을 누적해서 더해주면서 가장 큰 값으로 업데이트를 시켜줍니다. 즉, <code>최댓값</code>을 구하기 위해서 <code>Math.max()</code> 함수를 사용하였습니다.</p>
<p>결, <code>dp[길이-2], dp1[길이-1]</code>에 집을 훔쳤을때, 훔치지 않았을때의 최대값이 저장되어 있을 것입니다. 그래서 dp의 비용과 dp1의 최댓값을 다시 구해주어 값을 리턴해주면 원하는 값을 찾을 수 있습니다.</p>
<blockquote>
<p>이 문제의 핵심은 인접했을때의 경우의 수와 첫번째 집을 훔친 경우와 훔치지 않는 경우를 찾아내는것이 중요합니다.</p>
</blockquote>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 도둑질 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] money = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[money.length];</span><br><span class="line">        <span class="keyword">int</span>[] dp1 = <span class="keyword">new</span> <span class="keyword">int</span>[money.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//첫번째 집을 훔치는 경우</span></span><br><span class="line">        dp[<span class="number">0</span>] = money[<span class="number">0</span>]; <span class="comment">// 첫번째집의 돈 훔치기</span></span><br><span class="line">        dp[<span class="number">1</span>] = money[<span class="number">0</span>]; <span class="comment">// 첫번째집을 훔치는경우는 두번째집을 선택할수없기때문에 두번째집도 지금까지 가장 큰 첫번째집 돈을 넣어준다.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//첫번째 집을 훔치지 않는 경우</span></span><br><span class="line">        dp1[<span class="number">0</span>] = <span class="number">0</span>;     <span class="comment">//첫번째집 훔치지않으므로 0</span></span><br><span class="line">        dp1[<span class="number">1</span>] = money[<span class="number">1</span>]; <span class="comment">//두번째집은 훔치는 가격</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;money.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">2</span>] + money[i], dp[i-<span class="number">1</span>]);      <span class="comment">// 1번째 세번째 훔치는 경우</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;money.length; i++)&#123;</span><br><span class="line">            dp1[i] = Math.max(dp1[i-<span class="number">2</span>] + money[i], dp1[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Math.max(dp[money.length-<span class="number">2</span>], dp1[money.length-<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>dp</tag>
        <tag>다이나믹프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 큰 수 만들기</title>
    <url>/Programmers-20201009-Programmers-bignumber/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="peurogeuraemeoseu-keunsumandeulgi"><a href="#peurogeuraemeoseu-keunsumandeulgi" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#프로그래머스-큰수만들기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42883" target="_blank" rel="noopener">프로그래머스 큰수만들기</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<h3 id="munje-seolmyeong"><a href="#munje-seolmyeong" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#문제-설명"></a> 문제 설명</h3>
<p>어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.</p>
<p>예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.</p>
<p>문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.</p>
<h3 id="jehan-jogeon"><a href="#jehan-jogeon" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#제한-조건"></a> 제한 조건</h3>
<p>number는 1자리 이상, 1,000,000자리 이하인 숫자입니다.<br>
k는 1 이상 number의 자릿수 미만인 자연수입니다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>숫자로 주어진 문자열에서 - k만큼의 수 만큼을 선택하여 가장 큰 수를 골라주면된다.</li>
<li>이전에 프로그래머스 소수찾기에서 풀었던 것과 유사하긴 하지만 이것이 더 쉽습니다. DFS를 통하여 <code>number.size() - k</code> 개수만큼 숫자를 선택한다</li>
<li>basement조건은 선택한 개수와 k개의 개수를 제거한 개수와 같을 경우이다.</li>
<li>basement조건에 걸리게 되면 check된 값들만 문자열 결합을 통해서 값을 만들어준다. 그 이후 그 값들을 정수로 변환시켜서 최댓값을 구해준다.</li>
<li>모든 최댓값을 구하게 되었으면 to_string()함수를 이용해서 리턴시켜준다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">int</span> max_num= <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> number,<span class="keyword">int</span> cnt, <span class="keyword">int</span> len, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len == cnt)&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;number.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                str += number[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = atoi(str.c_str());</span><br><span class="line">        <span class="comment">// v.push_back(atoi(str.c_str()));</span></span><br><span class="line">        <span class="keyword">if</span>(res &gt; max_num)&#123;</span><br><span class="line">            max_num = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; len)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;number.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(number, cnt+<span class="number">1</span>, len, k);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> number, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = number.size() - k;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    dfs(number,<span class="number">0</span>, len , k);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> to_string(max_num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>DFS</tag>
        <tag>프로그래머스</tag>
        <tag>그리디</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 카펫</title>
    <url>/Programmers-20201009-Programmers-carpet/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<h2 id="peurogeuraemeoseu-kapes-munje"><a href="#peurogeuraemeoseu-kapes-munje" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#프로그래머스-카펫-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42842?language=java" target="_blank" rel="noopener">프로그래머스 카펫 문제</a></h2>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>문제 설명<br>
Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.</p>
<p>Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.</p>
<p>Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<p>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.<br>
노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.<br>
카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.</p>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>이문제의 핵심은 카펫간의 규칙을 찾아내는것이 급선무입니다.</li>
<li>첫번째 테스트케이스 brown 10, yellow 2 일 경우 가로 일경우 [4,3] 세로일 경우 [3,4]의 값이 반환됩니다. 이것이 뜻하는 바는 yellow가 <code>직사각형이거나 정사각형</code>일 수 있다는것을 뜻하게 됩니다. 즉, <code>노란블록은 정사각형또는 직사각형</code>으로 가능합니다. 그이유는 n &gt; m 카펫의 가로길이는 세로 길이와 같거나 길기때문입니다.</li>
</ul>
<blockquote>
<p>이것을 어떻게 표현할 수 있을까요?<br>
yellow = 24 테스트케이스를 살펴봅시다.<br>
yellow가 24일 경우 나타낼 수 있는 케이스는(24 * 1, 12 * 2, 8 * 3, 6 * 4)로 표현할 수 있습니다.<br>
즉, 노란블록의 총 가로 길이를 a, 세로길이를 b 라고 봤을때 (2a) + (2b) + 4 로 표현할 수 있습니다. 잘 생각해보시면 <code>노란색 위아래</code>로 갈색블록과 <code>노란색 좌우</code>로 갈색블록이기때문에 총 가로길이 2a, 총 세로길이 2b, 전체 카펫의 <code>좌측 상단, 우측상단, 좌측하단, 우측하단</code> 의 개수 총 4개로 표현 할 수 있습니다.</p>
</blockquote>
<p>결과적으로, (2a) + (2b) + 4 의 조건이 성립됩니다.</p>
<p>이에 따라 (2a) + (2b) + 4 의 값이 brown의 개수와 같다는 조건이 성립하면 되겠죠?<br>
즉, 현재 a + 2(끝에 두점) , b + 2(끝에 두점)의 값으로 가로,세로의 최종길이를 구할 수 있게됩니다.</p>
<blockquote>
<p>요약</p>
</blockquote>
<ul>
<li>카펫의 길이는 n&gt;m의 크기를 만족합니다.</li>
<li>노란카펫은 직사각형 또는 정사각형을 만족합니다.</li>
<li>(2a) + (2b) + 4 의 조건이 brown과 같을때 해당 가로,세로의 최종길이입니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="wanjeontamsaeg-puli"><a href="#wanjeontamsaeg-puli" class="header-anchor">2.2.1. </a><a class="markdownIt-Anchor" href="#완전탐색-풀이"></a> 완전탐색 풀이</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 카펫 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> brown = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> yellow = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=yellow; i &gt;= (yellow/i); i--)&#123;</span><br><span class="line">            <span class="comment">// 나눠지는값이 아니면분리 못</span></span><br><span class="line">            <span class="keyword">if</span>(yellow % i != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 가로 2배, 세로2배 모서리 4개 추가</span></span><br><span class="line">            <span class="keyword">if</span>(((<span class="number">2</span>*i)+(<span class="number">2</span>*(yellow/i)) + <span class="number">4</span>) == brown)&#123;</span><br><span class="line">                answer[<span class="number">0</span>] = <span class="number">2</span>+i;        <span class="comment">// 가로 + 2 끝점</span></span><br><span class="line">                answer[<span class="number">1</span>] = (<span class="number">2</span>+(yellow/i)); <span class="comment">// 세로 +2 끝점</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer[<span class="number">0</span>] + <span class="string">""</span>+ answer[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>완전탐색</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 주식가격</title>
    <url>/Programmers-20200923-Programmers-stock-price/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42584?language=java" target="_blank" rel="noopener">프로그래머스 주식가격</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.</p>
<blockquote>
<p>제한사항<br>
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.<br>
prices의 길이는 2 이상 100,000 이하입니다.</p>
</blockquote>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>스택으로 진행하는 방법도 있고, 배열로 진행하여도됩니다. 해당 풀이는 배열을 사용하였습니다.</li>
<li>prices배열에 담긴 값들이 초 단위로 기록되었을때 가격이 <code>몇초간 떨어지지않았는지</code>를 구하는 문제였습니다.</li>
<li>순수히 배열로만 사용하여 현재 가격과 그 이후에 일어날 시간의 값들을 비교해주었습니다. 현재의 가격이 뒤에 진행될 가격보다 크게 될 경우 <code>뒤에 진행된 시간- 현재의 시간</code>으로 계산하여 해당 조건들을 빠져나오게됩니다. 필요한값은 떨어지는 시점 즉, 현재의 가격보다 낮은값이 나왔을때 해당 조건을 벗어나게 됩니다.</li>
<li>처음에 주식가격보다 클경우 cnt값을 증가시켜서 arr배열에 담아주었는데, 정확도 면에서 틀린부분이 있었습니다. 기존의 실행은 통과하였으나 다른 테스트케이스를 통과를 하지 못했습니다. 제가 생각하지못한 예외가 있었을것이라고 생각이드는데, 바로 다른방식으로 진행하여 <code>다음에 일어날 시간 - 현재 시간</code>의 조건을 가지고 진행하였습니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<blockquote>
<p>잘못생각하였던 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주식가격 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] prices = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(prices[i] &lt;= prices[j])&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] +<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>올바른 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 주식가격 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] prices = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(prices[i] &gt; prices[j])&#123;</span><br><span class="line">                    arr[i] = j-i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == prices.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    arr[i] = j-i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] +<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 멀쩡한 사각형</title>
    <url>/Programmers-20200922-Programmers-good-shape-sqaure/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/62048?language=java#" target="_blank" rel="noopener">프로그래머스 멀쩡한 사각형</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>가로 길이가 Wcm, 세로 길이가 Hcm인 직사각형 종이가 있습니다. 종이에는 가로, 세로 방향과 평행하게 격자 형태로 선이 그어져 있으며, 모든 격자칸은 1cm x 1cm 크기입니다. 이 종이를 격자 선을 따라 1cm × 1cm의 정사각형으로 잘라 사용할 예정이었는데, 누군가가 이 종이를 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았습니다. 그러므로 현재 직사각형 종이는 크기가 같은 직각삼각형 2개로 나누어진 상태입니다. 새로운 종이를 구할 수 없는 상태이기 때문에, 이 종이에서 원래 종이의 가로, 세로 방향과 평행하게 1cm × 1cm로 잘라 사용할 수 있는 만큼만 사용하기로 하였습니다.<br>
가로의 길이 W와 세로의 길이 H가 주어질 때, 사용할 수 있는 정사각형의 개수를 구하는 solution 함수를 완성해 주세요.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li><code>유클리드 알고리즘</code> 원리. 임의의 <code>두 자연수 a, b</code>가 주어졌을때. 둘중 큰 값이 a라고 가정해보겠습니다. <code>n이 0일때, b가 최대 공약수(GCD)</code>입니다. 즉, 최대공약수(GCD)를 구하는 방식을 알고있어야합니다.<br>
<code>gcd(greatest common divisor)</code>는 최대공약수의 약자인데요 최대 공약수는 어떻게 구할수 있을까요?</li>
</ul>
<blockquote>
<p>최대공약수 구하기<br>
예를 들면 12,8 이라는 숫자가 있다고 가정하겠습니다. 이것의 숫자의 최대 공약수는 어떻게 될까요? 작은숫자이기 때문에 <code>최대공약수는 4</code>라고 하는것을 쉽게 알 수 있을것입니다.<br>
하지만 값이 더 커질때는 암산으로 하기에는 힘든감이 있겠죠?<br>
일단, <code>12와 8의 값의 최대 공약수</code>를 구해보겠습니다. <code>12를 w, 8을 h</code>라고 가정하겠습니다.<br>
최대 공약수는 (h, w%h)의 값으로 구할 수 있습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span>, <span class="number">8</span></span><br><span class="line"><span class="number">8</span>, <span class="number">4</span>(<span class="number">12</span>를 <span class="number">8</span>로 나눈 나머지)</span><br><span class="line"><span class="number">4</span>, <span class="number">0</span>(<span class="number">8</span>을 <span class="number">4</span>로 나눈나머지)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>사각형의 넓이를 구하기<br>
<code>사각형의 넓이는 너비 * 높이</code>로 구할 수 있습니다.</p>
</blockquote>
<blockquote>
<p>대각선방향으로 자르는 정사각형의 개수는 어떻게 구할 수 있나요?<br>
<code>전체 사각형 넓이 -(너비 + 높이) + 최대 공약수</code><br>
의 값으로 정답을 노출해낼 수 있습니다.</p>
</blockquote>
<blockquote>
<p>W,H의 제한<br>
<code>W와 H의 제한은 1억이하의 자연수입니다.</code> 따라서 long타입으로 조금 더 넓은 범위로 연산이 가능하게 하였습니다.</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gcd(h, w % h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> gcd_num = gcd(w,h);</span><br><span class="line">        <span class="keyword">long</span> squreArea = (<span class="keyword">long</span>)w * (<span class="keyword">long</span>)h;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> answer = squreArea - ((<span class="keyword">long</span>)w + (<span class="keyword">long</span> )h) + gcd_num;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>수학</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 숫자카드 10815</title>
    <url>/BOJ-20200922-BOJ-number-card/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/10815" target="_blank" rel="noopener">백준 숫자카드 10815</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<blockquote>
<p>문제<br>
숫자 카드는 정수 하나가 적혀져 있는 카드이다. 상근이는 숫자 카드 N개를 가지고 있다. 정수 M개가 주어졌을 때, 이 수가 적혀있는 숫자 카드를 상근이가 가지고 있는지 아닌지를 구하는 프로그램을 작성하시오.</p>
</blockquote>
<blockquote>
<p>입력<br>
첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.</p>
</blockquote>
<p>셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다. 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다. 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>1,2번째 줄에 입력에 상근이가 가지고 있는 카드의 개수를 저장시킵니다.</li>
<li>3,4번째 줄에 찾고자하는 숫자를 입력합니다.</li>
</ul>
<p>처음에 모든 경우의 수를 탐색하게 된다면 <code>-10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다.</code> 라는 조건때문에 시간복잡도 상으로 시간초과가 날 것으로 생각하였습니다. 그래서 HashSet과 이분탐색을 진행하여 해당 문제를 풀어보면 시간복잡도면에서 통과할 수 있을것이라는 생각이 들게되었습니다. 해당 포스팅에는 HashSet과 이분탐색을 이용한 풀이를 두가지 방법을 모두 사용해보았습니다.</p>
<h3 id="hashseteul-sayonghan-puli"><a href="#hashseteul-sayonghan-puli" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#hashset을-사용한-풀이"></a> HashSet을 사용한 풀이</h3>
<p>문제조건상 반복되는 수가 없다고 하였지만, <code>Map</code>을 사용하기에는 <code>(key, value)</code>가 필요하기 때문에 <code>HashSet</code>을 사용하였습니다. 상근이가 가진 카드를 모두 HashSet에 넣어주게 된다음에 이제 상근이가 <code>찾을 값들을 HashSet에 있는 값과 비교</code>해주면 됩니다. <code>찾았다면 1</code>, <code>찾지못했다면 0을 add</code>시켜주게 되고 <code>ArrayList</code> 자료 구조를 사용하여 최종 결과값을 출력시켜주었습니다.</p>
<blockquote>
<p>HashSet의 특징<br>
자바 Collection 중 Set의 대표적인 <code>HashSet 클래스</code>입니다. HashSet은 Set 인터페이스의 구현 클래스입니다.  <code>HashSet은 Set의 파생클래스</code>로 Set은 기본적으로 집합으로 중복된 원소를 허용하지 않으며 순서 또한 고려하지 않습니다.</p>
</blockquote>
<h3 id="binary-search-ibun-tamsaeg"><a href="#binary-search-ibun-tamsaeg" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#binary-search이분-탐색"></a> Binary Search(이분 탐색)</h3>
<blockquote>
<p>이분 탐색이란?<br>
<code>이진 탐색은</code> 정렬된 데이터의 집합을 <code>이분화 하면서 탐색</code>하는 알고리즘입니다.</p>
</blockquote>
<blockquote>
<p>이분 탐색의 장점<br>
정렬이 되어 있어야 이진탐색을 할 수 있습니다.<code>O(logN)</code> 으로 빠르게 탐색할 수 있습니다. <code>O(logN)인 이유는</code> 이진 트리형태로 <code>절반을 줄여가면서 값을 탐색</code>하는 형식이기 때문입니다.<br>
이분 탐색의 단점<br>
만약 이분탐색에서 값들이 정렬이 되어 있지 않다면 <code>정렬하는데 많은시간이 소요</code>되며 정렬된 데이터가 아니면 <code>이분탐색에 적용할 수 없습니다.</code></p>
</blockquote>
<blockquote>
<p>이진탐색 문제 풀이</p>
</blockquote>
<ul>
<li>상근이가 가진 카드의 값들을 <code>입력</code>을 받습니다.</li>
<li>상근이가 가진 카드의 값들을 <code>정렬</code>합니다<code>(오름차순정렬)</code></li>
<li>상근이가 찾고하자는 개수까지 Binary Search함수를 호출합니다. 이때 첫번째 파라미터는 찾고자하는 <code>target</code> 값입니다. 그리고 두번째 파라미터는 상근이가 가지고 있는 카드의 개수입니다.</li>
</ul>
<blockquote>
<p>binary Search함수</p>
</blockquote>
<ul>
<li><code>시작점은 0</code>, <code>끝점은 len-1</code>의 값으로 <code>초기화</code> 시켜줍니다.</li>
<li>while문으로 end보다 크거나 작을때 까지 계속 루프를 진행합니다.</li>
<li><code>mid</code>라는 변수를 선언하여 <code>시작점과 끝점을 더한값의 / 2</code>를 연산하여 중간값을 구해주게 됩니다.</li>
<li>만약 상근이가 가진 카드의 값이 <code>target값 보다 작을 경우</code> 시작점을 <code>start = mid-1</code>점으로 설정하게 됩니다.</li>
<li>만약 상근이가 가진 카드의 값이 <code>target값 보다 클 경우</code> 끝점을 <code>end = mid-1</code>로 설정하게 됩니다.</li>
<li>상근이가 <code>가진값과 찾고자하는 값이 같을 경우</code>에는 현재 중간값을 리턴해주게 됩니다. 즉, <code>상근이가 갖고 있는 카드에서 상근이가 찾고자하는 값을 찾은게 됩니다.</code></li>
<li>해당 binary search함수는 값을 찾았기 때문에 <code>중간값을 리턴</code>해줍니다. 찾았을 경우에는 1을 넣어주게 됩니다.</li>
<li><code>값을 찾지 못하였을 경우</code>에는 <code>-1을 리턴</code>을 받습니다. 그리고 <code>0을 넣어주게됩니다.</code></li>
<li>최종적으로 값을 출력시키게 되면 해당되는 <code>값을 찾았는지 못찾았는지의 여부</code>를 확인할 수 있습니다.<code>(0,1)</code></li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<blockquote>
<p>Binary Search(이분탐색) 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 숫자카드 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            arr[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(st.nextToken());</span><br><span class="line">            <span class="comment">// none contain</span></span><br><span class="line">            <span class="keyword">if</span>(BinarySearch(x,n) == -<span class="number">1</span>)&#123;</span><br><span class="line">                answer.add(<span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                answer.add(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : answer) &#123;</span><br><span class="line">            System.out.print(value + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &lt; target)&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; target)&#123;</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HashSet 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 숫자카드 </span>&#123;</span><br><span class="line">    <span class="comment">// HashSet 문제</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; s = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            s.add(Integer.parseInt(st.nextToken()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line">        st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(st.nextToken());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s.contains(num))&#123;</span><br><span class="line">                arr.add(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arr.add(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : arr) &#123;</span><br><span class="line">            System.out.print(value + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>이분탐색</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 치킨배달 15686</title>
    <url>/Samsung-20210216-chicken-delivery/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 치킨배달 15686</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>0은 빈 칸, 1은 집, 2는 치킨집이다.</p>
<p>(2, 1)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |2-1| + |1-2| = 2, (5, 5)에 있는 치킨집과의 거리는 |2-5| + |1-5| = 7이다. 따라서, (2, 1)에 있는 집의 치킨 거리는 2이다.</p>
<p>(5, 4)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |5-1| + |4-2| = 6, (5, 5)에 있는 치킨집과의 거리는 |5-5| + |4-5| = 1이다. 따라서, (5, 4)에 있는 집의 치킨 거리는 1이다.</p>
<p>이 도시에 있는 치킨집은 모두 같은 프랜차이즈이다. 프렌차이즈 본사에서는 수익을 증가시키기 위해 일부 치킨집을 폐업시키려고 한다. 오랜 연구 끝에 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.</p>
<p>도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다. 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li><code>0은 빈칸, 1은 집, 2는 치킨집</code>을 갖는 하나의 맵이 주어진다.</li>
<li>간혹 이것을 <code>BFS로 생각하여 풀이를 할 수 있는 경우</code>가 있을 텐데, 문제를 자세히 읽어보면 상하좌우의 방향이 주어지긴하지만 결국 우리에겐 필요한 것은 집과 치킨과의 치킨거리를 구하는것입니다. 즉 <code>DFS 브루트포스</code> 방법을 사용할 것입니다.</li>
<li>집과 치킨집과의 거리의 좌표값을 기반으로 <code>|집 X - 치킨 X| + |집 Y - 치킨 Y|</code>의 값을 구하는것이라고 생각하면 됩니다.</li>
<li>집에서 치킨집중 <code>최대 M개</code>를 고르는 문제가 여기서 <code>핵심 포인트</code>입니다. 집하나에서 M개의 치킨집을 고를 수 있습니다. 즉, <code>브루트포스로 치킨집 M개를 선택</code>하는 <code>basement의 조건</code>을 가질 수 있습니다.</li>
<li>치킨집을 1개를 골랐을때의 치킨거리의 최솟값, 치킨집 2개를 골랐을때의 최솟값…M개를 골랐을때의 <code>최솟값</code>을 구하는것입니다.</li>
<li>치킨집은 좌표상 <code>고를 수도 있고 안고를수도 있는 브루트포스 호출조건</code>을 잘생각해야합니다. 치킨집에 <code>3개 A,B,C</code>가 있다고 가정했을때 <code>A / AB / AC / BC / ABC</code> 의 경우를 고른다고 생각을 하셔야합니다.  이때, <code>M개를 선택해야하므로 가능한 선택의 수는 AB,AC,BC</code>가 될 것입니다.</li>
</ul>
<blockquote>
<p>치킨 배달 순서</p>
</blockquote>
<ol>
<li>좌표에서 <code>집인경우</code> 집의 좌표를 담을 벡터를 선언합니다.</li>
<li>좌표에서 <code>치킨집인</code> 경우 치킨집의 좌표를 담을 벡터를 선언합니다.</li>
<li><code>DFS(0,0)</code> 을 호출합니다. 첫번째 파라미터는 <code>현재 치킨집의 순서</code>, 두번째 파라미터는 <code>현재 선택된 치킨집의 개수</code>를 뜻합니다.</li>
<li>치킨집은 <code>M개까지 선택</code>하였을때 <code>집과 치킨거리를 계산</code>하여 <code>최솟값</code>으로 <code>업데이트 시켜줍니다.</code> 치킨이 선택된 것을 체크해주기 위한 <code>check배열을 선언</code>해줍니다.<br>
아직 M개가 선택되지 않았더라면</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">check[idx] = <span class="literal">true</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">check[idx] = <span class="literal">false</span>;</span><br><span class="line">dfs(idx+<span class="number">1</span>, cnt);</span><br></pre></td></tr></table></figure>
<p><code>치킨을 선택한 경우와 치킨을 선택하지 않은 경우</code>로 나누어주면서 <code>DFS를 모두 수행</code>해줍니다.<br>
5. M개를 선택하였을때 모든 치킨거리값을 ans의 값과 갱신하여 최솟값을 구해줍니다.<br>
주의 해야할점은 <code>치킨거리의 거리</code>와 <code>모든 집의 치킨거리</code>는 다릅니다.<br>
6. 만약 <code>idx값이 치킨값보다 클경우 종료</code>시켜줍니다. 조건에 위배됩니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  치킨배달15686.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/21.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; house;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; chicken;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> ans = MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 치킨 사이즈를 넘게되었을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx &gt; chicken.size())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨집 m개를 선택하였을때</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == m)&#123;</span><br><span class="line">        <span class="keyword">int</span> chicken_street = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;house.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> dist = MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;chicken.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] == <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> ax = house[i].first;</span><br><span class="line">                    <span class="keyword">int</span> ay = house[i].second;</span><br><span class="line">                    <span class="keyword">int</span> bx = chicken[j].first;</span><br><span class="line">                    <span class="keyword">int</span> by = chicken[j].second;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">int</span> distance = <span class="built_in">abs</span>(ax-bx) + <span class="built_in">abs</span>(ay-by);</span><br><span class="line">                    dist = min(dist,distance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chicken_street += dist;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, chicken_street);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 치킨 선택</span></span><br><span class="line">    check[idx] = <span class="literal">true</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 치킨 미선택</span></span><br><span class="line">    check[idx] = <span class="literal">false</span>;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                house.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                chicken.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>알고리즘</tag>
        <tag>BOJ</tag>
        <tag>삼성SW역량테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 시저암호</title>
    <url>/Programmers-20200921-Programmers-caesar-password/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12926?language=java" target="_blank" rel="noopener">프로그래머스 시저암호</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<blockquote>
<p>문제 설명<br>
어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.</p>
</blockquote>
<blockquote>
<p>제한 조건<br>
공백은 아무리 밀어도 공백입니다.<br>
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.<br>
s의 길이는 8000이하입니다.<br>
n은 1 이상, 25이하인 자연수입니다.</p>
</blockquote>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>알파벳은 총 52개 대문자 26개, 소문자 26개를 가지고 있습니다.</li>
<li>문자 값이 <code>' '</code> 공백일 경우 공백을 넣어주게 됩니다.</li>
<li>해당 문자가 소문자일 경우와 대문자 일 경우를 나누어서 생각을 해줍니다. 기존의 알파벳이 A이며 n=1이라고 가정하면 문자를 미는 거리 만큼 값을 도출하면 알파벳 B의 값을 도출하게 될것입니다.<br>
여기서 주의해야 할점은 <code>z, Z</code>의 경우를 잘 생각해주어야합니다. 값을 밀면서 z와 Z의 범위를 벗어나게 되면 다시 값 a, A 값부터 진행되어야한다는점입니다. 즉 현재의 값을 +n값을 시켜주면서 -26을 빼주게 된다면 기존 a, A의 값에서 + N값이 된 값이 도출될 것입니다. 반드시 값을 -26해주고 캐릭터 형변 환 해주어야 본래의 값으로 돌아옵니다.<br>
음수값 계산시에는 아스키코드 값 자체로 비교하여 연산을 진행하기 때문입니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 시저암호 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"AB"</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        StringBuilder answer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> alpha = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(alpha == <span class="string">' '</span>)&#123;</span><br><span class="line">                answer.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(Character.isLowerCase(alpha))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(alpha + n &gt; <span class="string">'z'</span>)&#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n-<span class="number">26</span>));</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(Character.isUpperCase(alpha))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(alpha + n &gt; <span class="string">'Z'</span>)&#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n-<span class="number">26</span>));</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        answer.append((<span class="keyword">char</span>)(alpha+n));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                if(s.charAt(i) &gt;='a' &amp;&amp; s.charAt(i) &lt;= 'Z')&#123;</span></span><br><span class="line"><span class="comment">                    answer.append((char) ((s.charAt(i)-26)+n));</span></span><br><span class="line"><span class="comment">                &#125;else if(s.charAt(i) &gt;= 'A' &amp;&amp; s.charAt(i) &lt;= 'Z')&#123;</span></span><br><span class="line"><span class="comment">                    answer.append((char) ((s.charAt(i)-26)+n));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 아기상어 16236</title>
    <url>/Samsung-20210216-baby-shark/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 아기상어 16236</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.</p>
<p>아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.</p>
<p>아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.</p>
<p>아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.</p>
<p>더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.<br>
먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.<br>
먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.<br>
거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.<br>
거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.<br>
아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.</p>
<p>아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.</p>
<p>공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.</p>
<blockquote>
<p>입력<br>
첫째 줄에 공간의 크기 N(2 ≤ N ≤ 20)이 주어진다.</p>
</blockquote>
<p>둘째 줄부터 N개의 줄에 공간의 상태가 주어진다. 공간의 상태는 0, 1, 2, 3, 4, 5, 6, 9로 이루어져 있고, 아래와 같은 의미를 가진다.</p>
<p>0: 빈 칸<br>
1, 2, 3, 4, 5, 6: 칸에 있는 물고기의 크기<br>
9: 아기 상어의 위치<br>
아기 상어는 공간에 한 마리 있다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<blockquote>
<p>물고기까지의 최단 거리 구하기<br>
최단거리 구하는방식은 다익스트라와 BFS를 이용한 풀이로 구할 수 있습니다.<br>
해당 풀이에서는 BFS를 이용한 풀이를 진행하겠습니다.<br>
BFS</p>
</blockquote>
<ol>
<li>현재 상어의 위치에서 모든 물고기까지의 이동거리를 찾을 배열 변수를 하나 선언해줍니다.</li>
<li>그 중에서 가장 이동거리가 짧은 물고기를 찾아서 최단거리를 찾아줍니다.</li>
</ol>
<ul>
<li>위치 정보구하기<br>
Queue를 이용한 x,y 상어 = 9, 물고기 1,2,3,4,5의 위치를 구해주었습니다.</li>
</ul>
<blockquote>
<p>상하좌우로 이동하기</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>상하좌우의 좌표를 해당 코드처럼 표시할 수 있습니다.<br>
최단거리가 check변수에 있는 값과 같다면 min_dis 가장짧은거리 이므로 min_x와 min_y를 선언하여 가장 짧은 좌표를 갱신시켜줍니다.</p>
<blockquote>
<p>시간복잡도</p>
</blockquote>
<ul>
<li>
<p>BFS<br>
모든정점 O(N^2) O(4n^2) 4방향의 간선을 가지고 있으므로<br>
즉,  앞의 상수를 무시하면 시간복잡도 O(N^2)</p>
</li>
<li>
<p>물고기 먹을 경우<br>
N = 20이하 이므로 O(N^4) = 약 16만</p>
</li>
</ul>
<blockquote>
<p>가장 거리가 짧은 물고기가 여러마리일경우 상,좌를 처리</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> width = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> height = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[width][height];</span><br><span class="line"><span class="keyword">int</span> check[width][height];</span><br><span class="line"><span class="keyword">int</span> shark_x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> shark_y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> shark_size = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> shark_eat_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min_dist=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min_x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min_y=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    check[x][y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt;n )&#123;</span><br><span class="line">                <span class="comment">// 1.자기보다 큰 상어는 지나칠 수 없음</span></span><br><span class="line">                <span class="keyword">if</span>(check[mx][my] != <span class="number">-1</span> || <span class="built_in">map</span>[mx][my] &gt; shark_size)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 2. 이동거리를 갱신시켜준다.</span></span><br><span class="line">                check[mx][my] = check[dx][dy] + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">// 3. 먹을수 있는 물고기 인지 체크</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[mx][my] != <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[mx][my] &lt; shark_size)&#123;</span><br><span class="line">                    <span class="comment">// 3.1최단 거리인지 확인</span></span><br><span class="line">                    <span class="keyword">if</span>(check[mx][my] &lt; min_dist)&#123;</span><br><span class="line">                        min_x = mx;</span><br><span class="line">                        min_y = my;</span><br><span class="line">                        min_dist = check[mx][my];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 3.2최단거리가 같은게 여러개 일 경우</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(check[mx][my] == min_dist)&#123;</span><br><span class="line">                        <span class="comment">// x점은 동일선상에 있어야하고 위에 있는 값중에서 최소가 되야하므로 my가 min_y보다 작은것이 최소 좌표다.</span></span><br><span class="line">                        <span class="comment">// 3.2.1위쪽</span></span><br><span class="line">                        <span class="keyword">if</span>(min_x == mx)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(min_y &gt; my)&#123;</span><br><span class="line">                                min_x = mx;</span><br><span class="line">                                min_y = my;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 3.2.2왼쪽</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(min_x &gt; mx)&#123;</span><br><span class="line">                            min_x = mx;</span><br><span class="line">                            min_y = my;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(&#123;mx,my&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">9</span>)&#123;</span><br><span class="line">                shark_x = i;</span><br><span class="line">                shark_y = j;</span><br><span class="line">                <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;     <span class="comment">//이동시간</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        min_dist = MAX;</span><br><span class="line">        min_x = width;</span><br><span class="line">        min_y = height;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                check[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(shark_x, shark_y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 먹을수 있는 물고기를 찾은경우</span></span><br><span class="line">        <span class="keyword">if</span>(min_x != width &amp;&amp; min_y != height)&#123;</span><br><span class="line">            <span class="comment">// 이동시간을 더해줍니다.</span></span><br><span class="line">            result += check[min_x][min_y];</span><br><span class="line">            shark_eat_size++;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 만약 먹은 물고기수가 상어의 크기가 같다면</span></span><br><span class="line">            <span class="keyword">if</span>(shark_eat_size == shark_size)&#123;</span><br><span class="line">                shark_size++;</span><br><span class="line">                shark_eat_size=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 먹은 물고기 위치 0 갱신</span></span><br><span class="line">            <span class="built_in">map</span>[min_x][min_y] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 상어 위치 갱신</span></span><br><span class="line">            shark_x = min_x;</span><br><span class="line">            shark_y = min_y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//엄마 상어 찾기</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>BOJ</tag>
        <tag>삼성SW역량테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>02.Reactive Streams</title>
    <url>/RXJAVA-20200919-RXJAVA-reactive-programming-section02/</url>
    <content><![CDATA[<h1 id="reactive-streamsran"><a href="#reactive-streamsran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#reactive-streams란"></a> Reactive Streams란</h1>
<p>Rxjava 버전이 1.x에서 2.x로 올라간 배경에는 Reactive Streams가 있습니다. Reactive Streams란 라이브러리나 프레임워크 상관없이 데이터 스트림을 비동기로 다룰수 잇는 공통 매커니즘으로, 이 매커니즘을 편리하게 사용할 수 있는 인터페이스를 제공합니다.</p>
<p><a href="http://www.reactive-streams.org" target="_blank" rel="noopener">Reactive Streams</a></p>
<p>즉, Reactive Streams는 인터페이스만 제공하고 구현은 각 라이브러리와 프레임워크에서 합니다.</p>
<p><a href="https://github.com/reactive-streams/reactive-streams-jvm" target="_blank" rel="noopener">Reactive Streams Specification for the JVM</a></p>
<h1 id="reactive-streamsyi-guseong"><a href="#reactive-streamsyi-guseong" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#reactive-streams의-구성"></a> Reactive Streams의 구성</h1>
<p>Reactive Streams는 데이터를 만들어 통지하는 <code>Publisher(생산자)</code>와 통지된 데이터를 받아 처리하는 <code>Subscriber(소비자)</code>로 구성됩니다.</p>
<p><code>Subscriber</code>가 <code>Publisher</code>를 <code>구독(subscribe)</code>하면 <code>Publisher</code>가 통지한 데이터를 <code>Subscriber</code>가 받을 수 있습니다.</p>
<ul>
<li>Publisher : 데이터를 통지하는 생산자</li>
<li>Subscriber: 데이터를 받아 처리하는 소비자</li>
</ul>
<blockquote>
<p>데이터 흐름</p>
</blockquote>
<ul>
<li><code>Publisher</code>는 통지 준비가 끝나면 이를 <code>Subscriber</code>에 <code>통지(onSubscribe)</code>합니다.</li>
<li>해당 통지를 받은 <code>Subscriber</code>는 받고자 하는 데이터 개수를 요청합니다.</li>
</ul>
<p>이때, <code>Subscriber</code>가 자신이 통지 받을 데이터 개수를 요청하지 않으면 <code>Publisher</code>는 통지해야 할 데이터 개수 요청을 기다리게 되므로 통지를 시작 할 수 없습니다.</p>
<ul>
<li>그 다음 <code>Publisber</code>는 데이터를 만들어서 <code>Subscriber</code>에 <code>통지(onNext)</code>합니다.</li>
<li>이 데이터를 받은 <code>Subscriber</code>는 데이터를 사용해 처리 작업을 수행합니다.</li>
<li><code>Publisher</code>는 요청받은 만큼의 데이터를 통지한 뒤 <code>Subscriber</code>로 부터 다음 요청이 올때까지 데이터 통지를 중단합니다.</li>
<li>이후 <code>Subscriber</code>가 처리 작업을 완료하면 다음에 받을 데이터 개수를 <code>Publisher</code>에게 요청합니다.</li>
</ul>
<p>이 요청을 보내지 않으면 <code>Publisher</code>는 요청 대기 상태가 돼 <code>Subscriber</code>에 데이터를 통지할 수 없습니다.</p>
<ul>
<li><code>Publisher</code>는 <code>Subscriber</code>에 모든 데이터를 통지하고 마지막으로 데이터 전송이 완료돼 정상 종료 됐다고 <code>통지(onComplete)</code>합니다.</li>
<li>완료 통지를 하고나면 <code>Publisher</code>는 이 구독건에 대해 어떤 통지도 하지 않습니다.</li>
</ul>
<p>또한, <code>Publisher</code>는 처리 도중에 에러가 발생하면 <code>Subscriber</code>에 발생한 에러 객체와 함께 에러를 <code>통지(onError)</code>합니다.</p>
<blockquote>
<p>데이터 흐름 설명</p>
</blockquote>
<p><code>Subscriber</code>가 <code>Publisher</code>에 통지 받을 데이터 개수를 요청하는 것은 <code>Publisher</code>가 통지하는 데이터 개수를 제어하기 위해서 입니다. 예를 들어, <code>Publisher</code>와 <code>Subscriber</code>의 처리가 각각 다른 스레드에서 진행되는데 <code>Publisher</code>의 통지 속도가 빠르면 <code>Subscriber</code>가 소화할 수 없을만큼 많은 처리 대기 데이터가 쌓입니다.</p>
<p>→ 이를 막기위해 <code>Publisher</code>가 통지할 데이터 개수를 <code>Subscriber</code>가 처리 할 수 있을 만큼으로 제어하는 수단이 필요합니다.</p>
<blockquote>
<p>Reactive Streams가 제공하는 프로토콜</p>
</blockquote>
<table>
<thead>
<tr>
<th>프로토콜</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>onSubscribe</td>
<td>데이터 통지가 준비됐음을 통지</td>
</tr>
<tr>
<td>onNext</td>
<td>데이터통지</td>
</tr>
<tr>
<td>onError</td>
<td>에러(이상 종료)통지</td>
</tr>
<tr>
<td>onComplete</td>
<td>완료(정상 종료)통지</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Reactive Streams의 인터페이스</p>
</blockquote>
<table>
<thead>
<tr>
<th>인터페이스</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>Publisher</td>
<td>데이터를 생성하고 통지하는 인터페이스</td>
</tr>
<tr>
<td>Subscriber</td>
<td>통지된 데이터를 전달받아 처리하는 인터페이스</td>
</tr>
<tr>
<td>Subscription</td>
<td>데이터개수를 요청하고 구독해지 하는 인터페이스</td>
</tr>
<tr>
<td>Processor</td>
<td>Publisher와 Subscriber의 기능이 모두 있는 인터페이스</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Publisher.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//데이터를 통지하는 생산자</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 데이터를 받는 Subscriber 등록</span></span><br><span class="line">    <span class="keyword">public</span> void subscribe(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subscriber.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscription;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터를 받아 처리 하는 소비자</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 구독 시작시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onSubscribe(Subscription subscription);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 데이터 통지시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onNext(T item);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 에러 통지시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onError(Throwable error);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 완료 통지시 처리</span></span><br><span class="line">    <span class="keyword">public</span> void onComplete();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subscription.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생산자와 소비자를 연결하는 인터페이스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 통지 받을 데이터 개수 요청</span></span><br><span class="line">    <span class="keyword">public</span> void request(long num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 구독 해지</span></span><br><span class="line">    <span class="keyword">public</span> void cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Processor.java</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="type">T,R</span>&gt; <span class="title">extends</span> <span class="title">Subscriber</span>&lt;<span class="type">T</span>&gt;, <span class="type">Publisher</span>&lt;<span class="type">R</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subscription 보관</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscription;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> <span class="title">implements</span> <span class="title">Subscriber</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subscriber내부에 subscription보관하기</span></span><br><span class="line">    <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onSubscribe(Subscription subscription) &#123;</span><br><span class="line">        <span class="comment">// 받은 Subscription을 Subscriber 내부에 보관한다</span></span><br><span class="line">        <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">        <span class="keyword">this</span>.subscription.request(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onNext(Object item) &#123;</span><br><span class="line">        <span class="comment">// 요청한 데이터를 처리하면 다음 데이터 개수를 요청한다.</span></span><br><span class="line">        subscription.request(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onError(Throwable error) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onComplete() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>→ <code>Subscription</code>처리가 <code>Subscriber</code> 외부에서는 호출되지 않는다는 것을 전제로 구현할 수 있습니다.</p>
<p>Rxjava처럼 외부에서 구독을 해지할 방법을 제공한다면 <code>Subscription</code>이 비동기로 호출돼도 문제가 없게 구현되어야 합니다.</p>
<p>→ 추가로 <code>Reactive Streams</code>에 <code>Processor</code>라는 <code>인터페이스가</code> 있습니다. 이 <code>Processor</code>는 <code>Publisher와 Subscriber</code> 모두 상속받아 데이터 통지와 수신이 가능합니다.</p>
<p>즉, <code>Processor</code>는 다른 <code>Publisher</code>를 <code>구독</code>하거나 다른 <code>Subscriber</code>가 자신을 <code>구독</code>하게 할 수 있습니다.</p>
<blockquote>
<p>인터페이스 기능 설명</p>
</blockquote>
<p><code>Publisher</code>가 <code>Subscriber</code>가 사용하는 <code>Subscription</code>은 통지받을 데이터 개수를 지정해 데이터 통지를 요청하거나 통지받지 않게 구독을 해지할 때 사용하는 인터페이스입니다. <code>Subscription</code>은 <code>Publisher</code>에서 인스턴스가 생성돼 통지 준비가 끝났을 때 호출하는 <code>onSubscribe</code> 메서드의 인자로 <code>Subscriber</code>에 전달됩니다. 이 <code>Subscription</code>을 받은 <code>Subscriber</code>는 <code>Subscription</code>의 메서드를 호출해 데이터 개수를 요청하거나 구독을 해지합니다.</p>
<p>또한, <code>onNext</code> 메서드에서 이 <code>Subscription</code>을 사용하려면 <code>onSubscribe</code> 메서드로 전달받은 <code>Subscription</code>이 <code>Subscriber내부</code>에 있어야합니다.</p>
<h1 id="reactive-streamsyi-gyucig"><a href="#reactive-streamsyi-gyucig" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#reactive-streams의-규칙"></a> Reactive Streams의 규칙</h1>
<p><code>Reactive Streams</code>는 <code>인터페이스로 데이터를 통지하는 구조를 제공</code>합니다. 해당 구조가 제대로 작동하기 위해서는 Reactive Streams의 규칙을 따라야합니다.</p>
<h3 id="reactive-streamsyi-gibongyucig"><a href="#reactive-streamsyi-gibongyucig" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#reactive-streams의-기본규칙"></a> Reactive Streams의 기본규칙</h3>
<blockquote>
<ol>
<li>구독 시작 통지(onSubscribe)는 해당 구독에서 한 번만 발생합니다.</li>
</ol>
</blockquote>
<p>Reactive Streams에서 구독 시작 통지는 해당 구독에서 한 번만 수행됩니다. 따라서 Subscriber의 onSubscribe메서드는 구독을 시작해 통지준비가 끝났을때 한번만 실행됩니다.<br>
<code>단, 다음 작업은 추천하지 않지만 처리가 종료된 이후에는 같은 Publisher와 Subscriber로 subscribe 메서드를 호출하면 다시 onSubscribe 메서드가 실행됩니다.</code><br>
이는 처리가 끝난뒤에 subscribe 메서드를 호출하면 새로운 구독을 시작한다고 생각합니다. 그러나 같은 인스턴스를 다시 사용해 subscribe 메서드를 호출할 때 Publisher나 Subscriber 내부의 관리 상태를 초기화하지 않으면 의도하지 않은 결과가 발생할 수 있습니다.</p>
<blockquote>
<ol start="2">
<li>통지는 순차적으로 이루어집니다.</li>
</ol>
</blockquote>
<p>Reactive Streams에서는 데이터 통지가 순차적으로 이루어집니다. 즉, 여러 통지를 동시에 할 수 없으며 RxJava의 <code>Observable 규약</code> 이라는 규칙에 따른것으로, 데이터가 동시에 통지돼 불일치가 발생하는것을 막을 수 있습니다.</p>
<blockquote>
<ol start="3">
<li>null을 통지하지 않습니다.<br>
Reactive Streams에서는 null을 통지 할 수 없습니다. 만약 null을 통지하려면 Reactive Streams에서 NullPoiuntException을 발생시킵니다. 이는 데이터를 통지할 때 뿐만 아니라 에러를 통지할때도 마찬가지로 진행됩니다.<br>
<code>null을 통지하지 않는다</code> 라는 사양은 RxJava 1.x, 2.x 간 다른 사양이므로 주의해야합니다.</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>Publisher의 처리는 완료(onComplete) 또는 에러(onError)를 통지해 종료합니다.</li>
</ol>
</blockquote>
<p>Reactive Streams에서는 완료나 에러를 통지하면 Publisher가 처리를 끝 마친것으로 판단합니다.이는 완료나 에러 통지를 마친 구독은 더 이상 통지하지 않는다는 의미입니다.<br>
예를 들면, 완료를 통지한 뒤에 에러가 발생했다면 이 에러는 통지하지 않으므로 정상적으로 종료되었다고 생각 할 수 있습니다.</p>
<h3 id="deiteo-gaesu-yoceongina-gudoghaejireul-suhaenghaneun-subscriptionyi-gyucig"><a href="#deiteo-gaesu-yoceongina-gudoghaejireul-suhaenghaneun-subscriptionyi-gyucig" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#데이터-개수-요청이나-구독해지를-수행하는-subscription의-규칙"></a> 데이터 개수 요청이나 구독해지를 수행하는 Subscription의 규칙</h3>
<blockquote>
<ol>
<li>데이터 개수 요청에 Long.MAX_VALUE를 설정하면 데이터 개수에 의한 통지 제한은 없어집니다.<br>
Reactive Streams에서 Long.MAX_VALUE를 데이터 개수 요청으로 지정하면 통지할 데이터 개수의 제한이 없어집니다. 그러므로, 이 요청을 전송한 후에는 데이터 개수 요청을 보내지 않아도 데이터 통지를 계속해서 받을 수 있습니다.<br>
요청받은 데이터 개수가 남은 상태에서 추가로 데이터 개수를 요청받으면 새로 요청받은 데이터 개수가 기존 데이터 개수에 추가된다는 점을 주의해야합니다.<br>
즉, 데이터 개수 요청을 받을때 마다 기존 개수에 더해져 통지 가능한 데이터 개수가 증가합니다. 이 결과가 Long.MAX_VALUE에 도달하면 통지 가능한 데이터 개수 제한이 사라집니다.</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>Subscription의 메서드는 동기화된 상태로 호출해야 합니다.<br>
Subscription 메서드는 동기화된 상태로 호출해야합니다. 즉, Subscription의 메서드를 동시에 호출해서는 안됩니다.</li>
</ol>
</blockquote>
<p>RxJava를 사용할 때는 각 통지 메서드와 Subscription의 메서드를 호출할 때 동기화가 이뤄지므로 처리 자체가 스레드 안전(Thread safety)한지를 특히 신경 써야합니다. 잘못 될 경우 제대로 통지가 되지 않을 가능성이 있습니다.</p>
<h1 id="reference"><a href="#reference" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1>
<p><img src="https://tech.kakao.com/2018/05/29/reactor-programming/" alt="https://tech.kakao.com/2018/05/29/reactor-programming/"></p>
]]></content>
      <categories>
        <category>RXJAVA</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>리액티브프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 내마음대로 정렬하기</title>
    <url>/Programmers-20200918-Programmers-sort-you-want-in-string/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12915?language=java" target="_blank" rel="noopener">프로그래머스 내마음대로 정렬하기</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다.</p>
<p>제한 조건</p>
<ul>
<li>strings는 길이 1 이상, 50이하인 배열입니다.</li>
<li>strings의 원소는 소문자 알파벳으로 이루어져 있습니다.</li>
<li>strings의 원소는 길이 1 이상, 100이하인 문자열입니다.</li>
<li>모든 strings의 원소의 길이는 n보다 큽니다.</li>
<li>인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>문자열의 사전순대로 정렬을 해야합니다.<br>
만약 배열을 사용할 경우  java.util.Arrays 유틸리티의 Arrays.sort()클래스를 사용하고 List와 같은 경우는 java.util.Collections클래스의 static 메소드인 sort()를 사용합니다.<br>
즉, List형식으로 만들어서 Collections.sort()를 사용하거나 Array인 경우 Arrays.sort()를 사용합니다.</li>
</ul>
<p>Colletions.sort()를 사용하게 될 경우 n에 해당하는 값을 맨앞으로 추가시켜준다음에 그 값을 기준으로 오름 차순정렬을 시켜주게 됩니다. 그리고 나서 해당값을 다시 <code>substring(1, arr.get(i).length())</code>함수를 사용하여 값을 잘라주게 됩니다. 그러면 기존의 값으로 원상복귀 한다고 생각하시면 됩니다.</p>
<blockquote>
<p>Arrays.sort()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(strings, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>람다식으로 간단하게 변경도 가능합니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 오름차순 Arrays.sort(strings,(s1,s2) -&gt; s1.length() - s2.length());</span><br><span class="line">// 내림차순 Arrays.sort(strings,(s1,s2) -&gt; s2.length() - s1.length());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Colletions.sort()</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collections.sort(arr);</span><br></pre></td></tr></table></figure>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열내마음대로정렬하기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = &#123;<span class="string">"sun"</span>, <span class="string">"bed"</span>, <span class="string">"car"</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        String[] answer;</span><br><span class="line">        Arrays.sort(strings, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 사전순으로 정렬하기</span></span><br><span class="line">                <span class="keyword">return</span> s1.charAt(n) - s2.charAt(n);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 사전순 역순으로 정렬하기</span></span><br><span class="line">                <span class="comment">//return s2.charAt(n) - s1.charAt(n);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// lamda</span></span><br><span class="line">        <span class="comment">// Arrays.sort(strings,(s1,s2) -&gt; s1.charAt(n) - s2.charAt(n););</span></span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열내마음대로정렬하기 </span>&#123;</span><br><span class="line">    <span class="comment">/* ArrayList를 사용한 풀이</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        String[] strings = &#123;"sun", "bed", "car"&#125;;</span></span><br><span class="line"><span class="comment">        int n = 1;</span></span><br><span class="line"><span class="comment">        String[] answer;</span></span><br><span class="line"><span class="comment">        ArrayList&lt;String&gt; arr = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; strings.length; i++)&#123;</span></span><br><span class="line"><span class="comment">            arr.add(strings[i].charAt(n) + strings[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Collections.sort(arr);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        answer = new String[arr.size()];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;arr.size(); i++)&#123;</span></span><br><span class="line"><span class="comment">            answer[i] = arr.get(i).substring(1,arr.get(i).length());</span></span><br><span class="line"><span class="comment">        &#125; System.out.println(Arrays.toString(strings));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
        <tag>프로그래머스</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 나누어 떨어지는 숫자 배열</title>
    <url>/Programmers-20200918-Programmers-divisor-number-array/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12910?language=java" target="_blank" rel="noopener">프로그래머스 나누어 떨어지는 숫자</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.<br>
divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>배열에 담겨진 값을 divisor의 값의 나머지가 0이라면 나누어 떨어지는 값입니다.</li>
<li>Collections.sort()를 사용하여 오름차순 정렬을 진행하였습니다.</li>
<li>만약 리스트에 담긴 값이 없다면 answer 값에 -1을 추가 해줍니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] % divisor == <span class="number">0</span>)&#123;</span><br><span class="line">                answer.add(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(answer);</span><br><span class="line">        <span class="keyword">if</span>(answer.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            answer.add(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>03.Kotlin Data Types</title>
    <url>/Kotlin-20200917-Kotlin-datatype-03/</url>
    <content><![CDATA[<h1 id="data-types"><a href="#data-types" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#data-types"></a> Data Types</h1>
<ol>
<li>숫자 – Byte, Short, Int, Long, Float, Double</li>
<li>Boolean – True, false</li>
<li>문자</li>
<li>배열</li>
<li>문자열</li>
</ol>
<h2 id="numbers"><a href="#numbers" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#numbers"></a> Numbers</h2>
<p>Kotlin에서 숫자를 나타내는 여러 데이터 유형이 있습니다.</p>
<h2 id="byte"><a href="#byte" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#byte"></a> Byte</h2>
<p>Byte 데이터 유형의 범위는 -128 ~ 127입니다. 이는 더 작은 정수 값을 나타내는 데 사용됩니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Byte</span> = <span class="number">99</span> </span><br><span class="line">    println ( <span class="string">"<span class="variable">$num</span>"</span> ) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>잘못된 예</p>
</blockquote>
<p>오류를 방지하려면 데이터 유형의 범위를 알고 있어야합니다. 예를 들어, 다음 코드는 byte 유형의 변수에 지정된 값이 범위에 없기 때문에 오류를 생성합니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 범위는 -128에서 127 사이입니다. </span></span><br><span class="line">    <span class="keyword">val</span> num:<span class="built_in">Byte</span> = <span class="number">300</span> </span><br><span class="line">    println(<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 유형의 최댓값과 최솟값을 어떻게 구할수 있을까요?</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; </span><br><span class="line">    <span class="keyword">var</span> bigByte : <span class="built_in">Byte</span> = <span class="built_in">Byte</span>.MAX_VALUE</span><br><span class="line">    <span class="keyword">var</span> smallByte : <span class="built_in">Byte</span> = <span class="built_in">Byte</span>.MIN_VALUE </span><br><span class="line">    println (<span class="string">"가장 큰 바이트 값 : <span class="variable">$bigByte</span>"</span>)</span><br><span class="line">    println (<span class="string">"가장 작은 바이트 값 : <span class="variable">$smallByte</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="short"><a href="#short" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#short"></a> Short</h2>
<p>Short 데이터 유형의 범위는 -32768 ~ 32767입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Short</span> = <span class="number">29999</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Short 데이터 유형에서 더 큰 범위를 가질 때 왜 Byte 데이터 유형을 사용할까요?</p>
</blockquote>
<p>이것은 메모리를 절약하기위한 것입니다. Short 데이터 유형은 Byte 데이터 유형에 비해 더 많은 메모리를 보유하므로 값이 -128에서 127까지의 한계에 있다고 확신하는 경우 Byte 데이터 유형이 메모리 관점에서 더 나은 선택이 될 것입니다.</p>
<h2 id="int"><a href="#int" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#int"></a> Int</h2>
<p>Int 데이터 유형의 범위는 -2^31 ~ 2^31 -1입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Int</span> = <span class="number">123456</span> </span><br><span class="line">    println(<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>참고<br>
변수의 유형을 명시 적으로 지정하지 않으면 값이 -2 31 에서 2 31 -1 사이 인 경우 컴파일러는 해당 변수를 Int로 처리합니다.</p>
</blockquote>
<h2 id="long"><a href="#long" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#long"></a> Long</h2>
<p>Long 데이터 유형의 범위는 -2 63 ~ 2 63 -1입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> num : <span class="built_in">Long</span> = <span class="number">12345678</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>변수 유형을 명시 적으로 지정하지 않으면 값이 -2^31 ~ 2^31-1 범위를 벗어나지만 -2^63 ~ 범위에있는 경우 컴파일러는 해당 변수를 Long으로 처리합니다. 2 (63) -1</p>
</blockquote>
<h2 id="double"><a href="#double" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#double"></a> Double</h2>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 모든 부동 숫자는 기본적으로 두 배입니다 // 값에 F 문자를 추가하지 않으면</span></span><br><span class="line">    <span class="keyword">val</span> num = <span class="number">101.99</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="float"><a href="#float" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#float"></a> Float</h2>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> )</span></span> &#123; <span class="comment">// 이것은 우리가 접미사로 붙인 float 데이터 유형입니다(문자 'F'가 뒤에 추가됩니다.)  </span></span><br><span class="line">    값 <span class="keyword">val</span> num = <span class="number">101.99F</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$num</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean"><a href="#boolean" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#boolean"></a> Boolean</h2>
<p>부울 변수의 값은 true 또는 false입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">(args : <span class="type">Array</span>)</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> boolValue = <span class="literal">false</span> </span><br><span class="line">    println (<span class="string">"<span class="variable">$boolValue</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="char"><a href="#char" class="header-anchor">1.9. </a><a class="markdownIt-Anchor" href="#char"></a> Char</h2>
<p>모든 영어 알파벳 (소문자 또는 대문자)은 Char 데이터 유형에 포함됩니다. Char 데이터 유형의 변수에는 숫자를 할당 할 수 없습니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">(args : <span class="type">Array</span>)</span></span> &#123; </span><br><span class="line">    <span class="keyword">val</span> ch = <span class="string">'A'</span></span><br><span class="line">    println ( <span class="string">"<span class="variable">$ch</span>"</span> ) </span><br><span class="line">    <span class="keyword">val</span> ch2 : <span class="built_in">Char</span> </span><br><span class="line">    ch2 = <span class="string">'Z'</span></span><br><span class="line">    println (<span class="string">"<span class="variable">$ch2</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>데이터타입</tag>
      </tags>
  </entry>
  <entry>
    <title>02.Kotlin Variables</title>
    <url>/Kotlin-20200917-Kotlin-variable-02/</url>
    <content><![CDATA[<p>변수에는 변경 가능(mutable)과 불변(immutable)의 두 가지 유형이 있습니다. 불변 변수(immutable)은 값을 변경할 수없는 변수로, 변경 불가능 또는 읽기 전용 변수라고도합니다. 반면에 가변 변수의 값은 변경 될 수 있습니다.</p>
<h1 id="bulbyeon-byeonsu-val-kiweodeu"><a href="#bulbyeon-byeonsu-val-kiweodeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#불변-변수-val-키워드"></a> 불변 변수 : val 키워드</h1>
<p>불변 변수는 <code>val</code>Kotlin에서 키워드를 사용하여 선언됩니다 . 이 예에서는 키워드를 <code>myName</code>사용하여 불변 변수 를 선언 <code>val</code> 후 값을 표시하였습니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 불가능한 </span><br><span class="line">     변수 </span><br><span class="line">     * 또는 변경 불가능한 변수 * 또는 읽기 전용 변수 라고도 합니다. </span><br><span class="line">     * / </span><br><span class="line">    <span class="keyword">val</span> myName = <span class="string">"KGH"</span> </span><br><span class="line">    println ( <span class="string">"내 이름 :"</span> + myName ) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>immutable 변수를 변경하게 되면 어떻게 될까요?</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 불가능한 </span><br><span class="line">     변수 또는 변경 불가능한 변수 * 또는 읽기 전용 변수 라고도 합니다. </span><br><span class="line">     * / </span><br><span class="line">    <span class="keyword">val</span> myName = <span class="string">"KGH"</span> </span><br><span class="line">    myName = <span class="string">"gwanhyeon kim"</span> </span><br><span class="line">    println ( <span class="string">"내 이름 :"</span> + myName ) &#125;</span><br></pre></td></tr></table></figure>
<p>immutable한 변수이므로 컴파일 오류가 발생합니다.</p>
<h1 id="gabyeonbyeonsu-var-kiweodeu"><a href="#gabyeonbyeonsu-var-kiweodeu" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#가변변수-var-키워드"></a> 가변변수: var 키워드</h1>
<p>불변 변수와 달리, 우리는 가변 변수의 값을 변경할 수 있습니다. kotlin에서는 var 키워드를 사용하여 가변 변수를 선언합니다. 이것을 이해하기 위해 예를 들어 보겠습니다.</p>
<p>이 예에서는 <code>var</code>키워드를 사용하여 가변 변수를 선언했습니다 . 값을 변경할 수 있음을 보여주기 위해 <code>myName</code>변수에 다른 값을 다시 할당했습니다 .</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">( args : <span class="type">Array</span> &lt; <span class="type">String</span> &gt;)</span></span> &#123; / ** </span><br><span class="line">     * 이것은 변경 가능한 변수입니다 </span><br><span class="line">     *이 변수 의 값을 변경할 수 있습니다 </span><br><span class="line">     * / <span class="keyword">var</span> myName = <span class="string">"KGH"</span> </span><br><span class="line">    myName = <span class="string">"gwanhyeon kim"</span> </span><br><span class="line">    println ( <span class="string">"내 이름 :"</span> + myName ) &#125;</span><br></pre></td></tr></table></figure>
<h1 id="byeonsuyi-yimi"><a href="#byeonsuyi-yimi" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#변수의-의미"></a> 변수의 의미</h1>
<p>변수는 데이터를 저장할 수있는 메모리의 위치에 주어진 이름입니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beginnersbook</span><br><span class="line"><span class="keyword">var</span> book = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
<p>데이터“gwanhyeon kim”은 웹 사이트라는 이름의 특정 위치에있는 메모리에 저장됩니다.</p>
<p>여기서 var는 변수 선언에 사용되는 키워드,책은 식별자 (변수 이름),“beginnersbook”은 데이터 (변수 값), 변수 유형은 String입니다.</p>
<h1 id="yuhyeong-curon"><a href="#yuhyeong-curon" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#유형-추론"></a> 유형 추론</h1>
<p>단일 문에서 변수를 선언하고 초기화 할 수 있습니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
<p>위에서는 변수의 유형을 지정하지 않았습니다. kotlin은 변수 book이 문자열 이라는 것을 알고 있습니다. 컴파일러는 값을보고 변수의 유형을 이해할 수 있습니다.</p>
<blockquote>
<p>이것을 명시적으로 표현하려면?</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book : String = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
<p>&quot;book&quot;변수의 유형을 String으로 명시 적으로 언급했습니다.</p>
<blockquote>
<p>먼저 선언하고 나중에 초기화</p>
</blockquote>
<p>변수를 먼저 선언 한 다음 나중에 프로그램에서 초기화 할 수 있습니다. 여기서 주목해야 할 중요한 점은 우리가 이렇게하는 것입니다. 선언하는 동안 변수의 유형을 지정해야합니다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//이 경우 유형을 지정해야합니다 . var website : String </span></span><br><span class="line">book = <span class="string">"gwanhyeon kim"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>변수</tag>
      </tags>
  </entry>
  <entry>
    <title>01.What is Kotlin and Why use it?</title>
    <url>/Kotlin-20200916-Kotlin-envirenment-01/</url>
    <content><![CDATA[<h1 id="kotliniran"><a href="#kotliniran" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#kotlin이란"></a> Kotlin이란?</h1>
<p>JetBrains에서 개발 한 정적으로 형식화 된 프로그래밍 언어입니다. 자바에 대한 기본지식 있다면 Kotilin을 금방 배울 수 있습니다.</p>
<p>Kotlin과 자바는 상호 운용이 가능하므로 프로젝트에서 함께 사용할 수 있으며 Kotlin에서 자바 코드를 효율적으로 다시 작성할 수 있습니다. Kotlin은 특히 Java보다 간결합니다.</p>
<h1 id="kotlinyi-teugjing"><a href="#kotlinyi-teugjing" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#kotlin의-특징"></a> Kotlin의 특징</h1>
<blockquote>
<p>간결성</p>
</blockquote>
<p>Kotlin은 자바보다 간결하며 자바에 비해 40% 적은 코드 라인을 작성할 수 있습니다.</p>
<blockquote>
<p>상호 운용성</p>
</blockquote>
<p>Kotlin은 Java와 상호 운용성이 뛰어납니다. Java프로젝트에서 사용하는데 어려움이 없습니다.</p>
<blockquote>
<p>오픈소스</p>
</blockquote>
<p>Kotlin은 오픈소스 프로그래밍 언어</p>
<blockquote>
<p>높은 신뢰도</p>
</blockquote>
<p>Kotlin은 유명하고 잘 알려진 회사 인 JetBrains에서 개발한 것이므로 신뢰도가 높습니다.</p>
<blockquote>
<p>다양한 기능</p>
</blockquote>
<p>Kotlin은 연산자 오버로딩, Lambda 표현식, 문자열 템플릿 등과 같은 여러 고급기능들을 제공합니다.</p>
<blockquote>
<p>배우기가 쉽습니다.</p>
</blockquote>
<p>Java환경과 유사하므로 처음에 진입장벽이 없습니다.</p>
<blockquote>
<p>오류발생 가능성이 적습니다.</p>
</blockquote>
<p>Kotlin은 정적으로 형식화 된 프로그래밍 언어로, 정적으로 형식화 된 프로그래밍 언어가 컴파일 타임에 형식 검사를 수행하므로 컴파일 타임에 오류를 포착할 수 있습니다.</p>
<hr>
<h1 id="intellij-ideaeseo-kotlin-peurojegteu-saengseong-mic-silhaeng"><a href="#intellij-ideaeseo-kotlin-peurojegteu-saengseong-mic-silhaeng" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#intellij-idea에서-kotlin-프로젝트-생성-및-실행"></a> IntelliJ IDEA에서 Kotlin 프로젝트 생성 및 실행</h1>
<p>공식 Jetbrains 웹 사이트 의 <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">다운로드 페이지</a> 로 이동합니다 . 운영 체제를 선택하고 커뮤니티 에디션을 다운로드하십시오.</p>
<h2 id="1dangye"><a href="#1dangye" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#1단계"></a> 1단계</h2>
<p>&quot;새 프로젝트 만들기&quot;를 선택합니다.</p>
<h2 id="2dangye"><a href="#2dangye" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#2단계"></a> 2단계</h2>
<p>&quot;추가 라이브러리 및 프레임 워크&quot;섹션에서 Kotlin / JVM을 선택 하고 &quot;다음&quot;을 클릭합니다.</p>
<h2 id="3dangye"><a href="#3dangye" class="header-anchor">3.3. </a><a class="markdownIt-Anchor" href="#3단계"></a> 3단계</h2>
<p>3 단계 : 프로젝트 이름을 입력하고 &quot;마침&quot;을 클릭합니다.</p>
<h2 id="4dangye"><a href="#4dangye" class="header-anchor">3.4. </a><a class="markdownIt-Anchor" href="#4단계"></a> 4단계</h2>
<p>단계 : Kotlin 프로젝트의 'src’폴더에 새 Kotlin 파일을 만듭니다.</p>
<h2 id="5dangye"><a href="#5dangye" class="header-anchor">3.5. </a><a class="markdownIt-Anchor" href="#5단계"></a> 5단계</h2>
<p>코드 입력 후 Kotlin 파일을 실행하려면 왼쪽에 있는 Kotlin 아이콘을 클릭합니다 . ‘코틀린 파일’(.kt)실행을 선택하여 실행합니다.</p>
<h2 id="6dangye"><a href="#6dangye" class="header-anchor">3.6. </a><a class="markdownIt-Anchor" href="#6단계"></a> 6단계</h2>
<p>올바르게 프로그램 출력이 되는지를 확인합니다.</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>환경설정</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 드래곤커브 15685</title>
    <url>/Samsung-20210216-dragon-curve/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 드래곤커브 15685</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. <code>좌표 평면의 x축은 → 방향, y축은 ↓ 방향</code>이다.</p>
<ol>
<li>시작 점</li>
<li>시작 방향</li>
<li>세대</li>
</ol>
<p>0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.</p>
<p><img src="http://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/1.png" alt></p>
<p>1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/2.png" alt></p>
<p>2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/3.png" alt><br>
3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/4.png" alt></p>
<p>즉, K(K &gt; 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.</p>
<p><code>크기가 100×100</code>인 격자 위에 드래곤 커브가 N개 있다. 이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.</p>
<h2 id="ibryeog"><a href="#ibryeog" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#입력"></a> 입력</h2>
<p>첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. <code>드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다.</code> (0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)</p>
<p>입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.</p>
<p>방향은 <code>0, 1, 2, 3</code> 중 하나이고, 다음을 의미한다.</p>
<ul>
<li>0: x좌표가 증가하는 방향 (→)</li>
<li>1: y좌표가 감소하는 방향 (↑)</li>
<li>2: x좌표가 감소하는 방향 (←)</li>
<li>3: y좌표가 증가하는 방향 (↓)</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>드래곤 커브라는것은 세가지 속성을 갖고 있습니다. <code>좌표평면위에 X축은 → 방향, Y축은 ↓ 방향</code>으로 나타내며 일단 문제의 정의를 정확히 파악해야하는 문제입니다.</li>
<li>속성 3가지는 <code>시작점(x,y), 시작방향(상하좌우), 세대(0~3세대)</code>를 나타냅니다. 세대는 총 0,1,2,3세대까지 나타낼 수 있습니다.</li>
<li>문제를 접근하였을때 끝점을 기준으로 좌표가 어떤식으로 규칙을 띄고 있는지를 확인하였습니다. 하지만 제대로된 규칙을 찾을 수 없었습니다. 결국 상하좌우의 방향에 따라서 규칙성을 찾아보면 어떨까라는 생각을 하게 되었습니다.</li>
</ul>
<blockquote>
<p>세대의 규칙</p>
</blockquote>
<p>0세대: 0</p>
<p>1세대: 0 1</p>
<p>2세대: 0 1 2 1</p>
<p>3세대 0 1 2 1 2 3 2 1</p>
<p>세대의 규칙을 찾으셨나요? <code>세대의 규칙을 찾은 방법</code>에 대해 말씀드리겠습니다. 말그대로 시작점으로 부터 시작방향을 따라서 어떤 방향으로 이동하는지만 알면 됩니다.</p>
<p>0세대 같은 경우는 <code>자기 자신(시작점)</code>을 뜻합니다.</p>
<p>1세대 시작점에서 부터 <code>오른쪽방향</code>으로 움직입니다. 즉, <code>1(오른쪽)방향</code>입니다.</p>
<p>2세대 <code>0세대, 1세대를 거쳐서</code> <code>왼쪽(2)→위(1)</code>로 올라갑니다.</p>
<p>3세대 <code>0세대, 1세대, 2세대를 거쳐서</code> <code>왼쪽(2)→아래(3)→왼쪽(2)→위(1)</code>의 방향으로 움직이게 됩니다.</p>
<blockquote>
<p>이제 규칙을 발견하셨나요?</p>
</blockquote>
<p><code>1세대→ 2세대</code>가 움직이는 방향을 살펴보게 되면 <code>01(1세대), 21(2세대)</code>입니다. 자세히 살펴보면 <code>01의 값을 역순</code>을 해주면 <code>10</code>의 값이 됩니다. 여기에서 각각 <code>+1씩 증가</code>하면 <code>21</code>의 값이 되겠지요?</p>
<p>다음 차례인, <code>2세대 → 3세대</code>의 값을 살펴보겠습니다. <code>2세대는 0121 방향</code>으로 움직이게 됩니다. 이 값들을 역순을 하게되면 <code>1210의 값</code>이 되게 됩니다. 여기에서 <code>값을 +1</code> 시켜준다면 <code>2321 의 방향</code>으로 움직이는 규칙을 찾을 수 있습니다.</p>
<p>즉, <code>이전 세대 = (현재 세대의 역순의 방향을 모두 + 1)</code>의 규칙을 찾을 수 있습니다.</p>
<blockquote>
<p>세대별 방향 처리</p>
</blockquote>
<p>dx, dy를 선언하여 아래와 같은 방향을 처리해주었습니다.</p>
<ul>
<li>0: x좌표가 증가하는 방향 (→)</li>
<li>1: y좌표가 감소하는 방향 (↑)</li>
<li>2: x좌표가 감소하는 방향 (←)</li>
<li>3: y좌표가 증가하는 방향 (↓)</li>
</ul>
<blockquote>
<p>0~N세대의 방향을 저장시켜야 합니다.</p>
</blockquote>
<p>이렇게 <code>0세대부터 N세대</code>까지로 이동하게 될때 세대의 방향값들을 저장시킬 하나의 저장소가 필요합니다. 저 같은 경우에는 vector를 사용하여 진행하였습니다.</p>
<blockquote>
<p>격자위에 표시</p>
</blockquote>
<p>0세대와 1세대는 <code>첫 진입시 시작점</code>을 하나의 <code>격자위에 표시</code>해주었습니다.</p>
<blockquote>
<p>드래곤 커브 진행시 주의해야 할점</p>
</blockquote>
<p>상하좌우의 값들을 진행시키기 위해서 <code>0~3까지의 방향을 처리</code>해야합니다. 0~3까지의 방향을 <code>총 4개의 규칙적인 패턴</code>을 처리하기 위해서는 어떻게 해야할까요? 나머지의 원리를 이용하면 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span> </span><br><span class="line">i % <span class="number">4</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">i % <span class="number">4</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">2</span></span><br><span class="line">i % <span class="number">4</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">3</span></span><br><span class="line">i % <span class="number">4</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>의 패턴을 가지게 됩니다. 만약 i가 4일경우는 나머지가 0이 되겠지요? 이렇게 계속 <code>순서대로 패턴</code>을 처리하면서 진행할 수 있습니다.</p>
<p>세대별로 처리하면서 방문한곳은 <code>격자에 표시</code>를 진행하면서 G번만큼의 드래곤 커브를 진행하게 됩니다.</p>
<blockquote>
<p>사각형의 개수 구하기</p>
</blockquote>
<p>G번만큼의 드래곤 커브를 진행하게 되면 격자위에 모든 세대들의 드래곤 커브가 완성되게 됩니다. 이제 모든 드래곤커브끼리 감싸고 있는 값들의 정사각형의 개수를 구하면 되겠지요?</p>
<p>정사각형의 개수를 구할때는 현재점을 (x, y)라고 지정하겠습니다.</p>
<p>정사각형이 되기위해서는 현재 자기자신<code>(x,y) → (x+1,y) → (x,y+1) → (x+1,y+1)</code>의 점들이 모두 격자에 표시되어야지 정사각형이 될 수 있습니다. 이렇게 표시된 점을 하나의 정사각형이라고 체킹을 할 수 있으며 이때 카운트변수를 하나 선언하여 return 해주게 된다면 최종적인 결과값을 구할 수 있게됩니다.</p>
<p>직접 그려보시면 평면좌표위에 어떻게 표시되는지 알 수 있을것입니다.</p>
<blockquote>
<p>결론</p>
</blockquote>
<p>좌표값으로 규칙을 찾으려고 하였는데 세대의 방향별 접근을 생각하지 못했습니다.</p>
<hr>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  드래곤커브.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/16.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y,d,g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir_info;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragon_curve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqaure_find</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g세대까지 드래곤커브를 진행합니다.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragonCurve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = dir_info.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> nDir = (dir_info[i] + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        x = x + dx[nDir];</span><br><span class="line">        y = y + dy[nDir];</span><br><span class="line">        <span class="built_in">map</span>[x][y] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        dir_info.push_back(nDir);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqaureFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAX; j++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[i+<span class="number">1</span>][j] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[i+<span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[i][j+<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; d &gt;&gt; g;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 맨 처음 시작지점 체크</span></span><br><span class="line">        <span class="built_in">map</span>[x][y] = <span class="number">1</span>;</span><br><span class="line">        x = x + dx[d];</span><br><span class="line">        y = y + dy[d];</span><br><span class="line">        <span class="built_in">map</span>[x][y] = <span class="number">1</span>;</span><br><span class="line">        dir_info.clear();</span><br><span class="line">        <span class="comment">// 방향을 체크해서 저장시켜놔야지 나중에 역순+1을 시켜줄 수 있다.</span></span><br><span class="line">        dir_info.push_back(d);</span><br><span class="line">        <span class="comment">// 다음 세대의 추가되는 선분의 방향정보 = 이전 세대의 방향정보를 역순으로 탐색하면서 + 1 % 4 를 한 것이 된다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;g; j++)&#123;</span><br><span class="line">            <span class="comment">// function dragon curve</span></span><br><span class="line">            dragonCurve();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> answer = sqaureFind();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; answer &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>알고리즘</tag>
        <tag>BOJ</tag>
        <tag>삼성SW역량테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 124나라의숫자</title>
    <url>/Programmers-20200923-Programmers-country-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12899" target="_blank" rel="noopener">프로그래머스 124 나라의 숫자 </a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다.</p>
<p>124 나라에는 자연수만 존재합니다.<br>
124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다.<br>
예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다.</p>
<p>10진법    124 나라    10진법    124 나라<br>
1    1    6    14<br>
2    2    7    21<br>
3    4    8    22<br>
4    11    9    24<br>
5    12    10    41<br>
자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요.</p>
<blockquote>
<p>제한사항<br>
n은 500,000,000이하의 자연수 입니다.</p>
</blockquote>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>10진법을 124나라의 진법 형식대로 변환하는 문제입니다.</p>
<blockquote>
<p>규칙</p>
</blockquote>
<ul>
<li>규칙을 살펴보면 <code>n % 3 == 0</code>이 되는 시점에 값이 4가 되는것을 확인할 수 있습니다.</li>
<li><code>n % 3</code>을 했을때의 나머지를 계속 앞의 값으로 넣어주면 해당되는 124나라의 숫자로 변경하는것을 확인할 수 있습니다.</li>
<li>res값이 = 일경우 res값을 4로 갱신해주고, 종료조건을 만들어주기위해서 n을 3으로 나눈값에서 -1을 빼주게 됩니다.</li>
<li><code>Stringbuilder를 사용한 이유</code>는  String은 새로운 값을 할당될때마다 생성되기 때문에 효율이 떨어지게 되므로, <code>Stringbuilder는 동일 객체내에서 문자열을 변경</code>하는것이 가능합니다.</li>
<li>마지막에 reverse() 함수를 사용하여 값을 출력시킨 이유는 역순으로 값이 들어가있는 상태이기 때문입니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 나라의숫자124 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        StringBuilder answer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = n % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res == <span class="number">0</span>)&#123;</span><br><span class="line">                res = <span class="number">4</span>;</span><br><span class="line">                n = (n/<span class="number">3</span>)-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                n = (n/<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            answer.append(Integer.toString(res));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer.reverse());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 실패율</title>
    <url>/Programmers-20200912-Programmers-failure-rate/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.welcomekakao.com/learn/courses/30/lessons/42889?language=java" target="_blank" rel="noopener">프로그래머스 실패율</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>실패율은 다음과 같이 정의한다.</p>
<ul>
<li>
<p>스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수</p>
</li>
<li>
<p>제한사항</p>
</li>
<li>
<p>스테이지의 개수 N은 <code>1</code> 이상 <code>500</code> 이하의 자연수이다.</p>
</li>
<li>
<p>stages의 길이는 <code>1</code> 이상 <code>200,000</code> 이하이다.</p>
</li>
<li>
<p>stages에는 <code>1</code> 이상 <code>N + 1</code> 이하의 자연수가 담겨있다.</p>
<ul>
<li>각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.</li>
<li>단, <code>N + 1</code> 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.</li>
</ul>
</li>
<li>
<p>만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.</p>
</li>
<li>
<p>스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 <code>0</code> 으로 정의한다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>실패율과 해당스테이지를 저장시키기 위한 List를 선언하였다.</li>
<li>stages에 있는 값들을 <code>Arrays.sort</code> 로 선언하여 값들을 정렬해주었다. 그 이유는 스테이지가 [2, 1, 2, 6, 2, 4, 3, 3] 라고 가정하였을때 오름차순 정렬을 해주면 [1, 2, 2, 2, 3, 3, 4, 6]의 값이 나오므로 스테이지별 처리를 해줄 수 있다.</li>
</ul>
<blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 플레이어 수</p>
</blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 플레이어 수를 체크 하였다. 스테이지별로 순회하는 값과 스테이지에 있는 값이 같을 경우 스테이지에 도달은 하였지만 클리어를 하지 못한 수이다.</p>
<blockquote>
<p>스테이지에 도달한 플레이어 수</p>
</blockquote>
<p>현재 스테이지를 순회하면서 그 값과 같거나 그 이상인 값은 스테이지에 도달한 플레이어 수 라고 생각할 수 있다.</p>
<blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 수가 0일 경우</p>
</blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 수가 0일 경우 실패율을 0으로 놓는다. 실패율 0의 값과 현재 스테이지를 리스트에 담아준다</p>
<blockquote>
<p>스테이지에 도달했지만 클리어 하지 못한 수가 0이 아닐 경우</p>
</blockquote>
<p><code>double type</code>으로 <code>스테이지 클리어한 수 / 스테이지에 도달한 수</code> 를 리스트에 실패율과 현재 스테이지 값을 담아주었다.</p>
<blockquote>
<p>Arrays.sort VS Collections.sort</p>
</blockquote>
<p>Arrays.sort()는 Primitive Type이나 Object Type의 Array를 정렬할때 사용합니다. 그리고Collections.sort()는 Collection의 List를 정렬할 때 사용합니다.</p>
<p>기본적으로 둘 다 오름차순 정렬이고, 인자로서 Array 또는 List를 넣어주면 인자로 넘겨진 객체의 내용 자체가 바뀐다. 둘 다 static method이므로 Arrays나 Collections객체를 바로 호출한다.</p>
<p>공통점으로는 Arrays.sort(), Collections.sort() 모두 Comparator를 통한 커스터마이징을 지원합니다.</p>
<p>Collections.reverse()는 내림차순 정렬이 아닌, 리스트의 구성을 반대로 뒤집는 것이다.</p>
<blockquote>
<p>내림차순 정렬로 바꾸려면 어떤 형식으로 리턴을 해주어야할까?</p>
</blockquote>
<p><code>Collections.sort(arr,Comparator.reverseOrder());</code></p>
<p>다음과 같이 내림차순 정렬로 바꿔줄 수 있다. 이렇게 바꿔주는 형식아니면 직접 커스터마이징을 해줄 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Pair</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        Pair(<span class="keyword">double</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair arr2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(y &lt; arr2.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>compareTo함수의 특징을 살펴보면</p>
<p><code>A와 B가 같으면 0을 반환, A가 B보다 크면 양수를 반환, A가 B보다 작으면 음수를 반환합니다.</code></p>
<ul>
<li>실패율이 높은 스테이지부터 내림차순으로 스테이지 번호 출력</li>
</ul>
<p>내림차순으로 정렬된 상태이므로 리스트에 담겨있는 값중에서 (실패율, 스테이지번호) 스테이지번호값들을 출력시켜줍니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 실패율 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Pair</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        Pair(<span class="keyword">double</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * A와 B가 같으면 0을 반환</span></span><br><span class="line"><span class="comment">         * A가 B보다 크면 양수를 반환</span></span><br><span class="line"><span class="comment">         * A가 B보다 작으면 음수를 반환</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair arr2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(y &lt; arr2.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; arr2.x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span>[] stages =&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Pair&gt; arr = <span class="keyword">new</span> ArrayList&lt;Pair&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> stage_clear = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> stage_arrive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] answer = &#123;&#125;;</span><br><span class="line">        Arrays.sort(stages);</span><br><span class="line">        <span class="comment">// 1stage ~ N stage</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            stage_clear = <span class="number">0</span>;</span><br><span class="line">            stage_arrive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stages.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 스테이지 도달했지만 클리어하지 못한 플레이어 수</span></span><br><span class="line">                <span class="keyword">if</span> (stages[j] == i) &#123;</span><br><span class="line">                    stage_clear++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 스테이지에 도달한 플레이어수</span></span><br><span class="line">                <span class="keyword">if</span> (stages[j] &gt;= i) &#123;</span><br><span class="line">                    stage_arrive++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">                        <span class="comment">// 스테이지 도달했지만 클리어하지 못한 플레이어수 가 0일 경우 실패율 = 0</span></span><br><span class="line">            <span class="keyword">if</span> (stage_clear == <span class="number">0</span>) &#123;</span><br><span class="line">                arr.add(<span class="keyword">new</span> Pair(<span class="number">0</span>, i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.add(<span class="keyword">new</span> Pair((<span class="keyword">double</span>) stage_clear / stage_arrive, i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                <span class="comment">// 실패율이 높은 순서대로 내림 차순 정렬</span></span><br><span class="line">        Collections.sort(arr);</span><br><span class="line">        <span class="comment">//Arrays.sort(arr, Comparator.reverseOrder());</span></span><br><span class="line">        answer = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.size(); i++)&#123;</span><br><span class="line">            Pair p = arr.get(i);</span><br><span class="line">            answer[i] = arr.get(i).y; <span class="comment">// 스테이지 번호 넣기</span></span><br><span class="line">            System.out.println(answer[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 완주하지못한 선수</title>
    <url>/Programmers-20200914-Programmers-uncompleted-player/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42576?language=java" target="_blank" rel="noopener">프로그래머스 완주하지못한 선수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>
<p>제한사항<br>
마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.<br>
completion의 길이는 participant의 길이보다 1 작습니다.<br>
참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.<br>
참가자 중에는 동명이인이 있을 수 있습니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>이 문제에 있어서 가장 중요했던 점은 hashmap을 사용할 수 있는지 여부를 확인하는 문제였습니다. 참가자와 완주자의 명단이 주어졌을때 완주자의 명단을 Key, 완주자의 등장횟수를 Value로 두면 쉽게 풀 수 있습니다.</p>
<blockquote>
<p>완주자의 명단을 HashMap에 저장하기<br>
완주자의 명단을 HashMap에 저장합니다. 예를 들면, 참가자[leo, kiki, eden]  완주자  [eden, kiki]의 값이 주어졌다고 생각을 하겠습니다. 완주자 &lt;eden, 1&gt;, &lt;kiki,1&gt;의 값으로 저장시킵니다.</p>
</blockquote>
<blockquote>
<p>참가자의 명단에서 참가했지만 완주하지 못한 선수 찾아내기<br>
완주한 명단 즉, 완주한 사람의 이름 Key값이 참가자의 명단에 없을 경우 그 사람은 참가는 했지만 완주하지 못한 경우가 됩니다.</p>
</blockquote>
<blockquote>
<p>동명이인 찾아내기<br>
레오가 두명이 등장하는 참가자 [leo, leo, kiki, eden] 완주자[leo, eden, kiki] 라고 가정하겠습니다. 레오 같은 경우는 완주자의 명단에는 한명이 존재하고 참가자의 명단에는 두명이 존재하게됩니다. 즉, 완주자 1명, 참가자 2명이기때문에 레오의 동명이인이 참가자이지만 완주자의 명단에 오르지 못했다는것을 알 수 있습니다.</p>
</blockquote>
<blockquote>
<p>이것을 소스코드로 어떻게 표현했을까요<br>
? leo의 키값을 찾은 후에 leo의 등장하면 현재 Hashmap 즉, 완주자 명단에 있는 value의 값을 가져오게 됩니다. 그중에서 leo라는 값이 두번등장하게 되면 음수값이 되므로 결국 leo는 동명이인이며 2명중 1명만 참가하는것이 됩니다.</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(String[] participant, String[] completion)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;completion.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!m.containsKey(completion[i]))&#123;</span><br><span class="line">                m.put(completion[i],<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = m.get(completion[i]);</span><br><span class="line">                m.put(completion[i], tmp+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;participant.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 완주자와 참가명단에서 못찾았으면</span></span><br><span class="line">            <span class="keyword">if</span>(!m.containsKey(participant[i]))&#123;</span><br><span class="line">                answer = participant[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 동명이인일 경우 값을 하나씩 줄였을때 0보다 작으면 그 사람이 완주자, 동명이인 체크해주기</span></span><br><span class="line">                <span class="keyword">int</span> tmp = m.get(participant[i]);</span><br><span class="line">                m.put(participant[i],tmp-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(m.get(participant[i])&lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    answer = participant[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; participant, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; completion)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> answer = <span class="string">""</span>;</span><br><span class="line">     <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;completion.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">// 완주자 없는 경우</span></span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(completion[i]) == m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            m.insert(make_pair(completion[i], <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 완주자 있는 경우</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 완주자 수 카운팅</span></span><br><span class="line">            m[completion[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;participant.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">// 완주자와 참가자 명단에서 못찾았을 경우</span></span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(participant[i]) == m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            answer = participant[i];        <span class="comment">// 못찾은 사람이 정답</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 동명이인일 경우 값을 하나씩 줄였을때 0보다 작으면 그 사람이 완주자, 동명이인 체크해주기</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            m[participant[i]]--;</span><br><span class="line">            <span class="keyword">if</span>(m[participant[i]] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                answer = participant[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>해시</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 오픈채팅방</title>
    <url>/Programmers-20200911-Programmers-open-chat-room/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.welcomekakao.com/learn/courses/30/lessons/42888?language=java" target="_blank" rel="noopener">프로그래머스 오픈 채팅방</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>
<p>record는 다음과 같은 문자열이 담긴 배열이며, 길이는 <code>1</code> 이상 <code>100,000</code> 이하이다.</p>
</li>
<li>
<p>다음은 record에 담긴 문자열에 대한 설명이다.</p>
<ul>
<li>
<p>모든 유저는 [유저 아이디]로 구분한다.</p>
</li>
<li>
<p>[유저 아이디] 사용자가 [닉네임]으로 채팅방에 입장 -  (ex. )</p>
<p>Enter [유저 아이디] [닉네임]</p>
<p>Enter uid1234 Muzi</p>
</li>
<li>
<p>[유저 아이디] 사용자가 채팅방에서 퇴장 -  (ex. )</p>
<p>Leave [유저 아이디]</p>
<p>Leave uid1234</p>
</li>
<li>
<p>[유저 아이디] 사용자가 닉네임을 [닉네임]으로 변경 -  (ex. )</p>
<p>Change [유저 아이디] [닉네임]</p>
<p>Change uid1234 Muzi</p>
</li>
<li>
<p>첫 단어는 Enter, Leave, Change 중 하나이다.</p>
</li>
<li>
<p>각 단어는 공백으로 구분되어 있으며, 알파벳 대문자, 소문자, 숫자로만 이루어져있다.</p>
</li>
<li>
<p>유저 아이디와 닉네임은 알파벳 대문자, 소문자를 구별한다.</p>
</li>
<li>
<p>유저 아이디와 닉네임의 길이는 <code>1</code> 이상 <code>10</code> 이하이다.</p>
</li>
<li>
<p>채팅방에서 나간 유저가 닉네임을 변경하는 등 잘못 된 입력은 주어지지 않는다.</p>
</li>
</ul>
<p>채팅방에 들어오고 나가거나, 닉네임을 변경한 기록이 담긴 문자열 배열 record가 매개변수로 주어질 때, 모든 기록이 처리된 후, 최종적으로 방을 개설한 사람이 보게 되는 메시지를 문자열 배열 형태로 return 하도록 solution 함수를 완성하는 문제입니다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>하나의 Hashmap을 생성하여 (Key,Value)의 값을 (유저아이디, 유저닉네임 값으로 저장시켰습니다.</li>
<li>그리고 하나의 Queue를 생성하여 <code>Enter, Leave, Change</code>세개의 명령어들을 담게 하였습니다. 그 이유는 하나의 Queue에 <code>Pair의 값으로 (행동, 유저아이디)</code>값을 담게하여 모든 유저의 행동의 값들을 모두 담을 수 있게하였습니다. Map을 사용하게 되면 키 값이 <code>중복되는것이 허용되지 않기때문에</code> <code>Queue값으로 들어온 순서</code>대로 채팅방 화면을 처리했습니다.</li>
</ul>
<blockquote>
<p>채팅방에 입장</p>
</blockquote>
<p>채팅방에 입장하였을때는 <code>Queue와 Map에 (명령어, 유저아이디), (유저아이디, 닉네임)</code> 값을 담게하였습니다. 공통의 값은 유저아이디이기 때문에 나중에 값을 출력할때 <code>유저아이디 공통의 키</code>값으로 출력시켜주기 위함입니다.</p>
<blockquote>
<p>채팅방에 퇴장</p>
</blockquote>
<p>이미 들어온 유저였기때문에 Queue에만 해당 (명령어, 유저아이디) 값을 담아주게 하였습니다.</p>
<blockquote>
<p>채팅방 닉네임 변경</p>
</blockquote>
<p>채팅방에서 닉네임을 변경하였을때는 Map에만 값을 변경시켜주었는데요. 예를 들어 <code>(UserId, 1) → (UserId, 2)</code>로 변경을 시켜주면 해당 유저의 닉네임만 변경시켜줄 수 있도록 하였습니다. <code>Queue에는 값을 넣어주지않은 이유</code>는 Change값에 따른 값을 출력해줄 필요가 없기때문에 해당 <code>닉네임값만</code> 변경하였습니다.</p>
<blockquote>
<p>실수한 점</p>
</blockquote>
<p>결과적으로 <code>Queue의 값이 비지않을때</code> 까지 값을 반복하면서 값을 꺼내줍니다. 이쪽에서 제가 실수한 부분은 q.poll.x, q.poll.y 로 값을 꺼내주게 되었는데 poll을 해줄때마다 <code>하나의 Pair의 전체(x,y)를 가져오게</code> 되었습니다. 그래서 디버깅을 통하여 잘못된점을 인지하고 Pair p를 선언하여 하나의 <code>Pair에 있는 x,y의 값</code>을 꺼내주면서 진행하였습니다.</p>
<p><code>닉네임 님이 들어왔습니다. 닉네임 님이 나갔습니다.</code></p>
<p>와 같이 결과를 출력해주었어야했으므로 answer의 배열을 Queue의 사이즈만큼 할당한 후에 Queue의 y값 <code>즉, Map의 키값인 닉네임값을 뽑게하였습니다.</code></p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 오픈채팅방 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        String x;</span><br><span class="line">        String y;</span><br><span class="line">        Pair(String x, String y)&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        HashMap&lt;String,String&gt; command_map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        String[] answer = &#123;&#125;;</span><br><span class="line">        String record[] = &#123;<span class="string">"Enter uid1234 Muzi"</span>, <span class="string">"Enter uid4567 Prodo"</span>,<span class="string">"Leave uid1234"</span>,<span class="string">"Enter uid1234 Prodo"</span>,<span class="string">"Change uid4567 Ryan"</span>&#125;;</span><br><span class="line">        Queue&lt;Pair&gt; q = <span class="keyword">new</span> LinkedList&lt;Pair&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;record.length; i++)&#123;</span><br><span class="line">            String[] arr = record[i].split(<span class="string">" "</span>);</span><br><span class="line">            <span class="comment">// Enter [0], uid1234 [1], Muzi [2]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 채팅방에 입장하였을때</span></span><br><span class="line">            <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"Enter"</span>))&#123;</span><br><span class="line">                q.add(<span class="keyword">new</span> Pair(arr[<span class="number">0</span>],arr[<span class="number">1</span>]));</span><br><span class="line">                map.put(arr[<span class="number">1</span>],arr[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 채팅방에 떠났을때</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"Leave"</span>))&#123;</span><br><span class="line">                q.add(<span class="keyword">new</span> Pair(arr[<span class="number">0</span>],arr[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 채팅방에 이름을 변경하였을 때</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"Change"</span>))&#123;</span><br><span class="line">                map.replace(arr[<span class="number">1</span>], arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        answer = <span class="keyword">new</span> String[q.size()];</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            Pair p = q.poll();</span><br><span class="line">            <span class="comment">//Queue&lt;Pair&gt; res = q.poll</span></span><br><span class="line">            String x = p.x;</span><br><span class="line">            String y = p.y;</span><br><span class="line">            <span class="keyword">if</span>(x.equals(<span class="string">"Enter"</span>))&#123;</span><br><span class="line">                answer[cnt] = map.get(y) + <span class="string">"님이 들어왔습니다."</span>;</span><br><span class="line">                <span class="comment">//System.out.println(map.get(y) + "님이 들어왔습니다.");</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x.equals(<span class="string">"Leave"</span>))&#123;</span><br><span class="line">                answer[cnt] = map.get(y) + <span class="string">"님이 나갔습니다."</span>;</span><br><span class="line">                <span class="comment">//System.out.println(map.get(y) + "님이 나갔습니다.");</span></span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 크레인 인형뽑기</title>
    <url>/Programmers-20200911-Programmers-crane-claw-machine-game/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/64061" target="_blank" rel="noopener">프로그래머스 크레인 인형뽑기 게임</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>
<p>게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.</p>
</li>
<li>
<p>만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.</p>
</li>
<li>
<p>크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다.</p>
</li>
<li>
<p>제한 사항</p>
</li>
<li>
<p>board 배열은 2차원 배열로 크기는  이상  이하입니다.</p>
<p>5 x 5</p>
<p>30 x 30</p>
</li>
<li>
<p>board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.</p>
<ul>
<li>0은 빈 칸을 나타냅니다.</li>
<li>1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.</li>
</ul>
</li>
<li>
<p>moves 배열의 크기는 1 이상 1,000 이하입니다.</p>
</li>
<li>
<p>moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>두개의 동일한 인형일 경우 바구니 remove</li>
<li><strong>빈곳일 경우 아무일도 일어나지 않는다. 즉, 크레인에서 뽑은 값은 인형 N*N에서 value 를 0 으로 초기화</strong></li>
<li>바구니 크기는 충분하다</li>
<li>board range (5 &lt; board &lt; 30)</li>
<li>moves range(1 &lt; moves &lt; 1000</li>
<li>board value range(1 &lt; board value &lt; 100)</li>
<li>stack의 empty조건과 인형맵에서 값이 있을 경우만 로직을 진행</li>
<li>로직이 모두 진행되고나서 0으로 초기화 후 해당 로직을 빠져오는것이 가장 중요한 포인트였다.</li>
</ul>
<blockquote>
<p>Stack 자료구조를 사용한다.</p>
</blockquote>
<p>이 크레인인형뽑기의 문제에서 가장 중요했던 부분은 Stack을 사용하여 바구니의 역할을 하게 해야한다. 그리고 그 바구니가 비어있는지의 조건을 무조건 체크하고 들어가고, 비어있으면서도 값이 있는 경우를 조건으로 처리해야한다. 그 이유는 한가지 조건만 만족시키면 문제의 조건과 stack의 조건을 만족시키지 못한다</p>
<p>그리고, 바구니에 들어져 있는 값이 현재 뽑은 인형과의 값을 비교하여 바구니의 값을 빼주면서 answer의 값을 +2 를 해준다. 그 이유는 바구니에 들어가 있는 값(+1)과 크레인이 뽑은 값(+1)이 동일한 인형이기 때문에 이 경우 answer에다가 값을 +2를 해주었다. 결국 바구니의 값과 크레인의 값이 같으니 2개의 인형이 remove되었다고 생각하면 된다.</p>
<blockquote>
<p>인형을 뽑고나면 값을 0으로 초기화 시켜준다.</p>
</blockquote>
<p>그리고 해당 로직이 다 실행되고 나면 크레인이 뽑은 인형의 값을 '0’으로 초기화 시켜준다. 그 이유는 '0’으로 초기화 시켜주지 않으면 다음로직시에도 해당 인형을 또 뽑을 수 있기 때문이다. 그리고 이때 해당 로직을 진행후 break;문을 사용하여 해당 로직을 빠져나온다. break를 해주지 않으면 다음 로직시에 뽑으려고 하지 않았던 인형과의 충돌이 생길 수 있다.</p>
<p>예) 1번 인형을 뽑고 3번을 뽑고 다시 1번으로 오는 경우</p>
<p>Input으로 들어오는 값들의 Init 값이 1부터시작하기 때문에 moves[i]-1;을 해주면서 0(Index)의 값으로 진행시키기 위함이다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; board, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; moves)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;moves.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> moves_size = moves[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board.size(); j++)&#123;</span><br><span class="line">            <span class="comment">// 인형이 있는 경우 </span></span><br><span class="line">            <span class="keyword">if</span>(board[j][moves_size] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s.empty() &amp;&amp; s.top() == board[j][moves_size])&#123;</span><br><span class="line">                       s.pop();</span><br><span class="line">                       answer +=<span class="number">2</span>;   </span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    s.push(board[j][moves_size]); </span><br><span class="line">                &#125;</span><br><span class="line">                   board[j][moves_size] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC Gradle IntelliJ 환경설정</title>
    <url>/Spring-20200911-spring-mvc-environment/</url>
    <content><![CDATA[<h1 id="intellij-gradle-spring-mvc-hwangyeong-seoljeong"><a href="#intellij-gradle-spring-mvc-hwangyeong-seoljeong" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#intellij-gradle-spring-mvc-환경-설정"></a> IntelliJ Gradle Spring MVC 환경 설정</h1>
<h3 id="teseuteu-hwangyeong"><a href="#teseuteu-hwangyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#테스트-환경"></a> 테스트 환경</h3>
<p>OS: Mac 10.14.6 Mojave</p>
<p>gradle: v5.5.12</p>
<p>apache-tomcat: v9.0.27</p>
<h3 id="seupeuringeseo-hwangyeongseoljeongeul-hal-su-issneun-bangbeobeun-keuge-dugajiida"><a href="#seupeuringeseo-hwangyeongseoljeongeul-hal-su-issneun-bangbeobeun-keuge-dugajiida" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#스프링에서-환경설정을-할-수-있는-방법은-크게-두가지이다"></a> 스프링에서 환경설정을 할 수 있는 방법은 크게 두가지이다.</h3>
<ul>
<li>
<p>Eclipse와 STS</p>
</li>
<li>
<p>IntelliJ와 Gradle</p>
</li>
</ul>
<p>그중에서 Gradle은 아래와 같은 일반적인 시나리오에서 빌드성능에 대한 테스트결과를 공개하였다. 테스트에 사용된 하드웨어는 <code>Dell XPS 15, I7-4712HQ CPU @ 2.30GHz, 16GB of RAM, SSD, Linux Min 18.1</code>이다.</p>
<p>Apache Common Lang3를 Maven에서 Gradle로 변경하여 테스트한 결과이다. 테스트를 실행한 결과는 Gradle이 약1.7배 정도 빠르며 Build Cache로 인한 빌드는 약 72배이상 빠르다고 나와있기 때문에 IntelliJ Idea와 Gradle을 사용하였다.</p>
<p><code>결론적으로</code></p>
<ul>
<li>Gradle은 모든 시나리오에서 적어도 2배이상은 빠르다.</li>
<li>변경 사항을 반영한 빌드에서는 Gradle이 Maven에 비해서 10~100배 빠르며, 하위프로젝트가 많으면 더욱 유리하다.</li>
</ul>
<p><a href="https://gradle.org/gradle-vs-maven-performance/" target="_blank" rel="noopener">Gradle 성능 비교</a></p>
<h3 id="gradle-seoljeonghagi"><a href="#gradle-seoljeonghagi" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#gradle-설정하기"></a> Gradle 설정하기</h3>
<p><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle 공식홈페이지</a></p>
<p>2019년 11월 기준 Gradle v5.6.4 버전이 최신버전으로 나와 있으며, Gradle설치하시기전에 JDK 1.7이상</p>
<p><code>Mac환경</code> 기준으로 설명드리겠습니다. 위 링크를 클릭하여 Gradle을 받지못하신분들은 압축을 풀어 원하시는 폴더에 저장하신 후 프로젝트 준비를 해주시면 됩니다.  저 같은경우는 usr/library에 경로설정을 진행하였습니다.</p>
<p><code>Windows</code>같은 경우는 C://드라이브 경로에 압축을 풀어서 진행합니다. 그리고 Gradle을 환경설정을 하는것이 좋기때문에 환경변수에 Path에 추가적인 설정이 필요합니다.</p>
<p>[내 컴퓨터] → [속성] → [고급 시스템 설정] → [고급] → [환경변수] → [Path] → [편집]</p>
<p><code>MAC</code> 해당폴더 경로에 가서 Mac터미널에서 아래와 같은 명령어를 사용합니다.</p>
<p>Mac <code>$./gradle -version</code></p>
<p><code>windows</code>해당폴더 경로에 가서 Windows터미널에서 아래와 같은 명령어를 사용합니다. 단, 환경변수가 설정되어있어야 올바르게 작동합니다.</p>
<p>Windows <code>gradle -v</code></p>
<h1 id="spring-mvc-peurojegteu-saengseonghagi"><a href="#spring-mvc-peurojegteu-saengseonghagi" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#spring-mvc-프로젝트-생성하기"></a> Spring MVC 프로젝트 생성하기</h1>
<p>IntelliJ를 실행하고 프로젝트 생성을 눌러줍니다.</p>
<p>여기에서 Gradle을 왼쪽에 그래들을 선택한 후 Java, Web에 선택을 하고 Next를 눌러줍니다.</p>
<ul>
<li>GroupId
<ul>
<li>자신의 프로젝트를 고유하게 식별자입니다.</li>
<li>package 명명 규칙을 따른다.</li>
<li>하위 그룹은 얼마든지 추가할 수 있다.</li>
</ul>
</li>
<li>ArtifactId
<ul>
<li>제품의 이름으로, 버전 정보를 생략한 jar 파일의 이름이다.</li>
<li>프로젝트 이름과 동일하게 설정한다.</li>
<li>소문자로만 작성하며 특수문자는 사용하지 않는다.</li>
</ul>
</li>
<li>Version
<ul>
<li>SNAPSHOT: 개발용, RELEASE: 배포용</li>
<li>숫자와 점을 사용하여 버전 형태를 표현한다(1.0)</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>com.회사이름.프로그램이름</th>
<th>com.kgh.miniapp</th>
</tr>
</thead>
<tbody>
<tr>
<td>com.회사이름.플랫폼.프로그램이름</td>
<td>com.kgh.miniapp.web.miniapp</td>
</tr>
<tr>
<td>kr.co.회사이름.프로그램이름</td>
<td>kr.co.kgh.miniapp</td>
</tr>
<tr>
<td>kr.co.회사이름.플랫폼.프로그램이름</td>
<td>kr.co.kgh.web.miniapp</td>
</tr>
</tbody>
</table>
<p>위와 같은 형식으로 사용할 수 있습니다.</p>
<p>그 다음,</p>
<p>방금전에 다운받은 Gradle을 지정해주고 나머지 조건들은 그대로 두고 진행하였습니다.</p>
<p>저같은 경우는 이미 경로가 잡혀있었기 때문에 /Library/Java/JavaVirtual…으로 나오게되었습니다.</p>
<p>이제 Finish를 눌러 프로젝트를 생성해보겠습니다.</p>
<p><code>이때 프로젝트를 생성할 폴더를 하나 미리 만들어 주셔야 그 폴더안에 모든 설정파일들이 들어가게 됩니다. 만약 많은 폴더들이 존재하고 있는곳에 프로젝트를 finish누르게 된다면 시각적으로나 관리면에서 좋지않은 효율이 발생할 가능성이 높습니다.</code></p>
<p>이제 프로젝트가 Web, MVC형태로 만들어지게 되었습니다. 이제는 아직 추가되지 않은 스프링프레임 워크를 추가해보도록 하겠습니다.</p>
<p><code>해당 최상위 프로젝트에서 오른쪽 마우스 클릭 후 Add Framework Support를 눌러줍니다.</code></p>
<p>그 다음, Spring을 선택한후 OK를 클릭해줍니다. 이제 gradle.Build에다가 Maven Spring에 적용되던것들을 이제 build.gradle에 넣어주려고 합니다.</p>
<p>위에서 말씀드렸다시피 Eclipse+Maven조합, IntelliJ+Gradle조합 둘중하나로 프로젝트를 구성할 수 있기 때문입니다. 이제 그러면 build.gradle에 코드를 추가해봅시다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">    version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이제 해당 코드를 넣어주면 자동으로 다운로드와 빌드가 실행됩니다.</p>
<h1 id="lombokpeulreogeuin-cuga"><a href="#lombokpeulreogeuin-cuga" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#lombok플러그인-추가"></a> Lombok플러그인 추가</h1>
<p>이제 Lombok을 사용하기 위해 추가적인 설정을 해봅시다.</p>
<p><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">Lombok공식사이트</a></p>
<h3 id="lombokeul-sayonghamyeon-daeumgwa-gateun-ijeomeul-gajigo-issseubnida"><a href="#lombokeul-sayonghamyeon-daeumgwa-gateun-ijeomeul-gajigo-issseubnida" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#lombok을-사용하면-다음과-같은-이점을-가지고-있습니다"></a> Lombok을 사용하면 다음과 같은 이점을 가지고 있습니다.</h3>
<p>① <strong>lombok</strong> - Java 기반에서 <strong>기계적으로 작성하는 VO, DTO, Entity 관련 작업</strong>을 보다 쉽게 하게 해주는 도구입니다.</p>
<p>② Getter, Setter, ToString, hashCode 관련 메소드 작업 관련 Class(클래스) <strong>코드를 깔끔하게 작성</strong>할 수 있습니다.</p>
<p>③ <strong>Spring(SpringSTS)</strong> 프로젝트에서 사용할 경우 <strong>JPA 환경과 함께 일관화 되고 가독성이 좋은</strong> 애플리케이션을 작성할 수 있습니다.</p>
<p>④ <strong>단점</strong>은 협업 모든 인원이 <strong>lombok을 설치해야 한다는 것</strong>과 추가 어노테이션 사용할 경우 <strong>소스코드 분석이 난해해지는 것</strong> 등이 있습니다.</p>
<p>이제 Lombok 장단점을 알았으니, 진행해봅시다.</p>
<p>상단에 <code>IntelliJIdea</code>를 눌러주시고 <code>Preferences</code>를 클릭해주세요. 그리고 왼쪽 상단에 <code>Plugin</code>을 클릭한다음 <code>lombok을 검색</code>하여 <code>install</code>해줍니다.</p>
<p>플러그인을 사용하고나면 Intellij를 재시작하게 되고, 이제 build.gradle 파일에 Lombok을 아래와 같이 추가해줍니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>위와 같은 코드를 작성하면 <code>IntelliJ Idea</code>에서 자동으로 빌드 및 컴파일을 진행합니다</p>
<blockquote>
<p>이때 주의 하실 사항이 있습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br></pre></td></tr></table></figure>
<p>원인은 <code>IntelliJ - How to solve lombok &quot;Cannot resolve symbol 'log'&quot;</code> 컴파일시 해당 에러가 나타났습니다.</p>
<p>해결방법은 두가지가 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line">or</span><br><span class="line">compileOnly <span class="string">'org.projectlombok:lombok:1.18.6'</span></span><br><span class="line">annotationProcessor <span class="string">'org.projectlombok:lombok:1.18.6'</span></span><br></pre></td></tr></table></figure>
<p>둘중 하나를 이용하면 에러를 해결할 수 있습니다. 정확한 원인은 컴파일대상과 IDE해석상의 문제가 발생한것으로 보입니다.</p>
<h3 id="lombok-keompail-hwangyeong"><a href="#lombok-keompail-hwangyeong" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#lombok-컴파일-환경"></a> Lombok 컴파일 환경</h3>
<p>이제 Lombok을 제대로 사용하기위해서 컴파일 환경을 설정해주어야합니다.</p>
<p><code>상단에 IntelliJIdea Preferences-&gt;build,Execution, Deployment -&gt;Compiler-&gt;Annotaion Processors</code> 를 클릭해서 들어옵니다.</p>
<p>이제 오른쪽 상단에 있는 Enable annotation processing을 클릭하여 컴파일할때 같이 돌아가도록 동작시켜줍니다. 그리고 OK를 누릅니다.</p>
<h1 id="log4j-raibeureori"><a href="#log4j-raibeureori" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#log4j-라이브러리"></a> Log4j 라이브러리</h1>
<p>이제 테스트나 Tomcat메시지를 조금 더 잘 확인할 수 있도록 log4j라이브러리를 사용할 것입니다.</p>
<p>System.out.println과 같이 로그를 찍을 필요가 없고 log를 사용할 것입니다.</p>
<p>build.gradle에 추가하여 log4j라이브러리를 사용해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-webmvc'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line">    compile group: <span class="string">'log4j'</span>, name: <span class="string">'log4j'</span>, version: <span class="string">'1.2.17'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="log4j-properties-seoljeonghagi"><a href="#log4j-properties-seoljeonghagi" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#log4j-properties-설정하기"></a> log4j properties 설정하기</h3>
<p><code>src내의 resource</code> 경로에 log4.j.properties파일을 작성합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log4j.properties</span><br><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"></span><br><span class="line"># Direct log messages to stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern= %-<span class="number">5</span>p %c&#123;<span class="number">1</span>&#125;:%L - %m%n</span><br></pre></td></tr></table></figure>
<p>다음과 같은 코드를 넣어줍니다. Log4j를 이용하기 위해서는 설정파일과 객체파일을 생성해야하므로 이것들을 properties에 담기위한 작업입니다.</p>
<h1 id="tomcatseoljeonghagi"><a href="#tomcatseoljeonghagi" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#tomcat설정하기"></a> Tomcat설정하기</h1>
<p>Tomcat버전 apache-tomcat: v9.0.27</p>
<p>Intellij는 Tomcat을 설정하고 프로젝트실행에 Tomcat에 프로젝트를 추가하는 방식을 사용합니다.</p>
<p>그림</p>
<p>톰캣을 사용하기위해서 해당 Run-&gt;Edit Configuration을 선택합니다. 그리고 Deployment를 선택하여 +버튼으로 해당 톰켓 폴더를 선택해줍니다. 이제 그러면 tomcat이 활성화되고 실행이 가능합니다.</p>
<blockquote>
<p>톰켓 실행시 오류</p>
</blockquote>
<p><code>[IntelliJ says 'cannot run program '/path/to/tomcat/bin/catalina.sh' error=13 permission denied](https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per)</code></p>
<p>라는 오류가 발생하면</p>
<p><code>chmod a+x /path/to/tomcat/bin/catalina.sh</code></p>
<p>해당 톰켓 경로를 직접 지정해서 경로 권한을 바꿔주어야합니다. 임의로 주어진 예시입니다.</p>
<h1 id="spring-mvccugawa-xmlpail-saengseong"><a href="#spring-mvccugawa-xmlpail-saengseong" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#spring-mvc추가와-xml파일-생성"></a> Spring MVC추가와 XML파일 생성</h1>
<p>build.gradle에 spring-webmvc를 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line"><span class="comment">//    testCompile group: 'junit', name: 'junit', version: '4.12'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-webmvc'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line">    compile group: <span class="string">'log4j'</span>, name: <span class="string">'log4j'</span>, version: <span class="string">'1.2.17'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compile group에 추가된 Name 'spring-webmvc’를 추가해줍니다.</p>
<h3 id="ije-root-context-xmlgwa-servlet-context-xmleul-cugahaejubnida"><a href="#ije-root-context-xmlgwa-servlet-context-xmleul-cugahaejubnida" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#이제-root-contextxml과-servlet-contextxml을-추가해줍니다"></a> 이제 root-context.xml과 servlet-context.xml을 추가해줍니다.</h3>
<p>src밑에 webapp폴더에 필요한 폴더 구조를 생성해서 사용합니다. webapp밑에 'WEB-INF’폴더를 먼저 생성하고 Spring,appServlet폴더를 생성합니다.</p>
<p>이제, WEB-INF밑에 spring폴더에는 root-context.xml, servlet-context.xml 파일을 생성합니다. XML파일을 직접 생성할 수도 있지만 메뉴를 이용해서 생성할 수 있습니다.</p>
<p>src 오른쪽마우스 -&gt; new -&gt; XML Configuration -&gt; Spring config를 선택하여 해당 root-context.xml, servlet-context.xml을 생성해줍니다.</p>
<p>servlet-contex.xml로 화면을 이동하면 Application Context…와 같은 메시지가 보이게 됩니다.</p>
<p>그리고 Project Structure를 확인해보면 root-context.xml과 servlet-context.xml파일이 추가된것을 확인할 수 있습니다.</p>
<h1 id="controller-cugahagi"><a href="#controller-cugahagi" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#controller-추가하기"></a> Controller 추가하기</h1>
<p>main폴더내에 java폴더 안에 org.kgh.controller라고 패키지를 생성하겠습니다. 생성된 패키지에 TestController클래스를 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.kgh.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Log</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"테스트중입니다."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이 @Log4j, Lombok을 이용하는 컴파일이 정상적으로 실행되는지 확인합니다.</p>
<p>servlet-context.xml에서 설정해보겠습니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.kgh.controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>이와 같이 설정해주게 되면 정확히 맵핑이 되어 진행될것입니다. 이제는 file-Project Structure내에 Facets항목을 열어서 web.xml을 추가해줍니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>다음과 같이 매핑되는것을 확인할 수 있고, 이제 톰캣을 확인해보면 정상적으로 서버가 구동되는것을 확인할 수 있습니다.</p>
<h1 id="reference"><a href="#reference" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#reference"></a> reference</h1>
<p><a href="https://gradle.org/releases/" target="_blank" rel="noopener">https://gradle.org/releases/</a></p>
<p><a href="https://www.holaxprogramming.com/2017/07/04/devops-gradle-is-faster-than-maven/" target="_blank" rel="noopener">https://www.holaxprogramming.com/2017/07/04/devops-gradle-is-faster-than-maven/</a></p>
<p><a href="https://blog.naver.com/PostView.nhn?blogId=sharplee7&amp;logNo=221412143968" target="_blank" rel="noopener">https://blog.naver.com/PostView.nhn?blogId=sharplee7&amp;logNo=221412143968</a></p>
<p><a href="https://niceman.tistory.com/99" target="_blank" rel="noopener">https://niceman.tistory.com/99</a></p>
<p><a href="https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per" target="_blank" rel="noopener">https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>environment</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 로봇청소기 14503</title>
    <url>/Samsung-20210216-robot-vacuum-cleaner/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 로봇청소기 14503</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>장소 조건</li>
</ul>
<p>로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.</p>
<ul>
<li>로봇청소기의 작동 방식</li>
</ul>
<p>로봇 청소기는 다음과 같이 작동한다.</p>
<ol>
<li>현재 위치를 청소한다.</li>
<li>현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
<ol>
<li>왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.</li>
<li>왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.</li>
<li>네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.</li>
<li>네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.</li>
</ol>
</li>
</ol>
<p>단, 로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>로봇이 북동남서의 방향에 따른 왼쪽 회전의 경우를 잘 생각해주어야 합니다.</li>
<li>로봇이 후진하는 경우에 대해서 좌표값을 잘 이해할 수 있어야합니다.</li>
</ul>
<p>로봇이 왼쪽방향으로 부터 차례대로 탐색을 진행 할 수 있어야 한다.</p>
<p><code>북(0) → 서(3), 서(3) → 남(2), 남(2) → 동(1), 동(1) → 북(0)</code></p>
<p>하나의 예를 들어서 설명해보겠습니다. 첫번째 테스트 케이스를 예로 들어보겠습니다. 현재 방향이 북(0), r = 1, c = 1 의 값을 갖습니다. 현재 (1,1)의 위치에서 북쪽방향을 바라보고있는 로봇청소기 입니다. 로봇청소기가 이제 왼쪽으로 값을 회전시키기 위해서는 어떻게 할 수 있을까요?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>현재 위치가 0번 즉, 북쪽을 바라보고 있습니다. 북쪽을 바라보고 있으면서 이제 로봇청소기가 왼쪽으로 탐색을 진행해야하기때문에 서쪽방향으로 이동할 수 있어야합니다. 그러면 현재 (1,1)의 위치에서 (현재 R 위치-1),(현재 C위치 - 0) 의 방향으로 이동을 시키면 왼쪽으로 이동시킬 수 있겠습니다.</p>
<p>그래서 dx,dy의 값의 기준도 (북→서, 서→남, 남→동, 동→북) 의 형식으로 dx,dy의 값을 기준을 잡았습니다.</p>
<blockquote>
<p>방향 회전</p>
</blockquote>
<p>그러면 이것을 방향회전하는 경우로 바꾸려면 어떻게 진행해야 할까요? 현재 북쪽을 제외한 나머지는 차이가 1이나는것을 확인할 수 있습니다.</p>
<p><code>북(0) → 서(3), 서(3) → 남(2), 남(2) → 동(1), 동(1) → 북(0)</code></p>
<p>이것을 코드로 표현한다면 북쪽을 제외한 나머지는 차이가 d-1만큼 차이가 나게됩니다. 그러면 북쪽의 값은 d-1이 음수가 되는경우 즉, d가 0(북쪽)일 경우 이 값을 3으로 변경해주면 됩니다.</p>
<p>코드에서 표현한 것은</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> next_dir = d<span class="number">-1</span> &lt; <span class="number">0</span> ? <span class="number">3</span> : d<span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p>아래와 같이 표현할 수 있습니다.</p>
<p>또 다른 방식으로는</p>
<p>북쪽을 제외한 값들이 차이가 1이나고 북쪽(0)과 이동하려는 왼쪽의 서쪽값이(3)이 되기때문에 이것을 코드로 표현하면</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> next_dir = (d+<span class="number">3</span>) % <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>의 형태로도 나타낼 수 있습니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">d = (<span class="number">0</span> + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">0</span> 나머지: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">d = (<span class="number">1</span> + <span class="number">3</span> )% <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">d = (<span class="number">2</span> + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = (<span class="number">3</span> + <span class="number">3</span>) % <span class="number">4</span>  </span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>의 형태를 띄기 때문에 이것을 표현한 것과 같습니다.</p>
<blockquote>
<p>방향 후진</p>
</blockquote>
<p>방향 후진의 경우에는 모든 4개의 방향을 탐색하고 나고나서도 청소가 되어있으면 다시 제자리로 돌아와서 후진을 해주면됩니다.</p>
<p>예를 들어서 서쪽 기준으로 (남,동,북,서)를 탐색한다고 생각을 하면 모든 방향이 청소가 되어 있거나 벽일 경우면 다시 제자리 서쪽으로 돌아오게 될 것입니다. 이제 서쪽기준으로 후진을 하게 되면 (1,0) 만큼 후진을 진행하게 될 것입니다. 남쪽 기준으로 탐색을 한다고 하면 다시 남쪽으로 돌아온다면 (0,-1)만큼 후진을 진행하면 됩니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> back_dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> back_dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>이와 같이 후진하는 경우에 대해서도 배열형태로 확인을 할 수 있습니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  로봇청소기.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/09.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> back_dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> back_dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX_SIZE][MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> r,c,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 뒤에가 벽이라면 종료 시켜준다.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[r][c] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 현재 위치 청소</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[r][c] == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">map</span>[r][c] = <span class="number">2</span>;      <span class="comment">// 현재 위치 청소</span></span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//int next_dir = d-1 &lt; 0 ? 3 : d-1;</span></span><br><span class="line">        <span class="keyword">int</span> next_dir = (d+<span class="number">3</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> next_x = r + dx[next_dir];</span><br><span class="line">        <span class="keyword">int</span> next_y = c + dy[next_dir];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 빈칸 이면 청소</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[next_x][next_y] == <span class="number">0</span>)&#123;</span><br><span class="line">            dfs(next_x, next_y, next_dir);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 빈칸이 아닐 경우</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            d = next_dir;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4번의 방향을 모두돌고 다시 제자리로 돌아가는것이므로 만약에 0에서 시작해서 3까지 이동해서 모든 값들의 방향이 이동되어서 3일 경우 0의 자리로 돌아가주는것을 생각해주어야한다. 그리고 나서 후진을 한다.</span></span><br><span class="line">    <span class="keyword">int</span> next_x = r + back_dx[d]; <span class="comment">// 기존의 방향대로 회전시켜준다.</span></span><br><span class="line">    <span class="keyword">int</span> next_y = c + back_dy[d];</span><br><span class="line">    dfs(next_x, next_y, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(r,c,d);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>BOJ</tag>
        <tag>삼성SW역량테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 예산</title>
    <url>/Programmers-20200912-Programmers-budget/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12982" target="_blank" rel="noopener">프로그래머스 예산</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.</li>
<li>d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.</li>
<li>budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>이문제를 풀기 위해서 가장 중요한것은 처음에 이것을 DFS로 풀어야하나? 라는 생각을 했다는 것입니다. <code>최대 몇 개의 부서에 물품을 지원</code> 이라는 말에서 dfs를 통한 모든 개수를 구한 후 *max_element를 사용해서 값을 구하면 되지 않을까 라는생각을 하였습니다. 하지만 이 문제는 순열과 조합의 문제가 아니라 단순히 구현문제였습니다.</p>
<p>모든 예산을 sort()정렬을 시킨 후 가장 작은 예산의 문제부터 풀어나가면서 answer의 값을 +1 씩 늘려가면 최종적으로 최대 구할 수 있는 예산의 수를 확인할 수 있습니다.</p>
<p>그리고 budget 현재 예산에서 d[i]만큼을 값을 빼주면서 계속 진행해 나가면 됩니다. 작은값부터 이루어져 나가니 다른 경우는 신경쓸 필요가 없다는 것입니다.</p>
<p>왜 이것을 DFS로 풀려고 했을까? 맨처음 basement cnt를 둘까 sum을 둘까라는 고민을 하게되었는데 너무 어렵게 생각을 하게 되었습니다. 여러 조합을 끼워맞춰서 가장 큰 값을 구하려고 하였던것이 오류였습니다. 단순히 정렬한번만으로도 충분히 풀 수 있었던 그런 문제였습니다.</p>
<blockquote>
<p>요약</p>
</blockquote>
<p>그리디 알고리즘을 사용해서 d의 각 원소는 부서별로 신청한 금액을 오름차순 정렬 후 적은금액부터 예산을 처리합니다. 그리고 d의 요소들과 budget을 비교해나가면서 예산금액을 (budget - d)로 연산하면서 나갑니다. 단, budget이 0보다 클 경우에만 가능합니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d, <span class="keyword">int</span> budget)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    sort(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;d.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(budget - d[i] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            answer +=<span class="number">1</span>;</span><br><span class="line">            budget = budget - d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>카카오</tag>
        <tag>그리디</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 모의고사</title>
    <url>/Programmers-20200915-Programmers-mock-test/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p>(프로그래머스 모의고사)[<a href="https://programmers.co.kr/learn/courses/30/lessons/42840" target="_blank" rel="noopener">https://programmers.co.kr/learn/courses/30/lessons/42840</a>]</p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …</p>
<p>2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, …</p>
<p>3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, …</p>
<p>1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
<h3 id="jehan-jogeon"><a href="#jehan-jogeon" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#제한-조건"></a> 제한 조건</h3>
<ul>
<li>시험은 최대 10,000 문제로 구성되어있습니다.</li>
<li>문제의 정답은 1, 2, 3, 4, 5중 하나입니다.</li>
<li>가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>모의고사 문제를 풀때 가장 중요한것은 수포자가 찍는 방식에 대한 패턴을 찾아내는것입니다.</li>
<li>1번~3번 수포자들의 패턴을 찾아보면</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> st1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st2[<span class="number">8</span>] = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st3[<span class="number">10</span>] = &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>다음과 같은 패턴을 찾을 수 있습니다.</p>
<blockquote>
<p>특정 패턴 규칙 구하기<br>
5번째마다 같은패턴 8번째마다 같은 패턴 10번째마다 같은 패턴 이것을 코드로 나타내면 어떻게 나타낼 수 있을까요?</p>
</blockquote>
<p>바로 (idx % 5),(idx % 8),(idx % 10) 의 형식으로 나타내면 5번째마다 패턴으로 규칙적으로 구할 수 있습니다.</p>
<p>예를 들어보겠습니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span> 일 경우 <span class="number">0</span> % <span class="number">5</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span> 일 경우 <span class="number">1</span> % <span class="number">5</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">2</span> 일 경우 <span class="number">2</span> % <span class="number">5</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">3</span> 일 경우 <span class="number">3</span> % <span class="number">5</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">4</span> 일 경우 <span class="number">4</span> % <span class="number">5</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">5</span> 일 경우 <span class="number">5</span> % <span class="number">5</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>i=0부터 시작하며 i번째는 시험문제라고 생각하겠습니다.</p>
<p>i가 5가 되는 순간 나머지는 0이 되게됩니다. 따라서 0~4까지 총 5번의 패턴을 확인할 수 있는것입니다.</p>
<p>만약 나머지값이 answer[i]과 같다면, 즉 문제의 정답과 같다면 문제의 정답의 개수를 늘려주는것입니다.</p>
<blockquote>
<p>가장 높은 점수 찾기</p>
</blockquote>
<p>그래서 총 3명의 수포자들중에서 가장 높은 점수를 얻은 사람을 winner을 구해주고 만약 다시 모든 수포자의 점수를 점수가 가장높은점수와 같을 경우 answer에 값을 넣어주게됩니다. answer에는 수포자의 1,2,3번중 가장높은 점수를 받은 사람이 들어가있게됩니다. (단, 여럿일 경우도 존재하므로 그부분도 확인해야합니다)</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> st1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st2[<span class="number">8</span>] = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> st3[<span class="number">10</span>] = &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solution(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> winner;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st_score(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answers;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;answer.size(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(st1[i % <span class="number">5</span>] == answer[i])&#123;</span><br><span class="line">            st_score[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st2[i % <span class="number">8</span>] == answer[i])&#123;</span><br><span class="line">            st_score[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st3[i % <span class="number">10</span>] == answer[i])&#123;</span><br><span class="line">            st_score[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    winner = max(max(st_score[<span class="number">0</span>], st_score[<span class="number">1</span>]),st_score[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(winner == st_score[i])&#123;</span><br><span class="line">            answers.push_back(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 모의고사 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; winner = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] student1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] student2 = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] student3 = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] students = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] answers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] answer = &#123;&#125;; <span class="comment">// 출력값</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;answers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(student1[i % student1.length] == answers[i])&#123;</span><br><span class="line">                students[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(student2[i%student2.length] == answers[i])&#123;</span><br><span class="line">                students[<span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(student3[i%student3.length] == answers[i])&#123;</span><br><span class="line">                students[<span class="number">2</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> win = students[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 가장높은 점수를 받은 사람 찾기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;students.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(win &lt; students[i])&#123;</span><br><span class="line">                win = students[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 같은 값을 가진 여럿사람일 경우도 있기때문에 확인을 해서 넣어줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;students.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(win == students[i])&#123;</span><br><span class="line">                winner.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        answer = <span class="keyword">new</span> <span class="keyword">int</span> [winner.size()];</span><br><span class="line">        <span class="comment">// 가장 높은 점수를 가진사람의 값을 answer에 담아줍니다.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;winner.size();i++)&#123;</span><br><span class="line">            answer[i]=winner.get(i)+<span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 K번째수</title>
    <url>/Programmers-20200910-Programmers-k-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42748?language=java" target="_blank" rel="noopener">프로그래머스 K번째수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
<h3 id="jehansahang"><a href="#jehansahang" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#제한사항"></a> 제한사항</h3>
<ul>
<li>array의 길이는 1 이상 100 이하입니다.</li>
<li>array의 각 원소는 1 이상 100 이하입니다.</li>
<li>commands의 길이는 1 이상 50 이하입니다.</li>
<li>commands의 각 원소는 길이가 3입니다.</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p>K번째수는 정렬문제입니다. 문제에서 말해주는 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하는 문제입니다.</p>
<ul>
<li>i번째 숫자부터 j번째 숫자까지 자르고 나서 ArrayList를 사용하여 값들을 담아주게 하였습니다.</li>
<li>해당 값들은 Collections.sort()함수를 사용하여 오름차순으로 정렬시켜주었습니다.</li>
<li>리스트를 순회하면서 리스트의 인덱스값과 k-1값이 같은경우 answer값에 담아주었습니다. 왜 k-1의 값과 인덱스값을 비교하였을까요. i번째는 1부터 시작하고 배열이 0번 인덱스부터 할당되어 있기때문에 이렇게 풀이해주었습니다.</li>
</ul>
<blockquote>
<p>K번째수 예시</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">array가 [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>], i = <span class="number">2</span>, j = <span class="number">5</span>, k = <span class="number">3</span>이라면</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. array의 <span class="number">2</span>번째부터 <span class="number">5</span>번째까지 자르면 [<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>]입니다.</span><br><span class="line"><span class="number">2</span>. <span class="number">1</span>에서 나온 배열을 정렬하면 [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]입니다.</span><br><span class="line"><span class="number">3</span>. <span class="number">2</span>에서 나온 배열의 <span class="number">3</span>번째 숫자는 <span class="number">5</span>입니다.</span><br></pre></td></tr></table></figure>
<p>여기서 주의할점은 command가 2차원배열로 주어진다는것입니다. 그렇기때문에 commands [[2, 5, 3], [4, 4, 1], [1, 7, 3]] 의 경우 배열하나당 하나의 경우라고 생각하셔야합니다. return값이 3개를 반환하는것을 보면 확인하실 수 있습니다.</p>
<p>기존의 값들이 변하면 안되기때문에 해당 배열을 Arrays.copy() 를 사용하였고 List의 값을 매번 경우의 수마다 clear()시켜서 갱신시켜주었습니다. 갱신을 시켜주지 않으면 기존의 값들과 섞여서 올바르지 않은 결과값을 노출합니다.</p>
<blockquote>
<p>시간복잡도<br>
시간복잡도 같은 경우는 command.size를 N, array.size를 M으로 놓으면<br>
O(N*M) 이라고 할 수 있습니다. command의 길이는 1~50이하, arrays의 길이는 1~100이하 이기때문에 시간복잡도의 5000번의 정도의 연산이 이루어지므로 1초의 시간제한에 문제가 없습니다.</p>
</blockquote>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">k</span>번째수 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] commands = &#123;&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;commands.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> copy[] = array.clone();</span><br><span class="line">            <span class="keyword">int</span> start = commands[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> end = commands[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> k = commands[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=start-<span class="number">1</span>; j&lt;end; j++)&#123;</span><br><span class="line">                ans.add(copy[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(ans);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;ans.size(); m++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(m == k-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(ans.get(k-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>01.Rxjava와 리액티브 프로그래밍</title>
    <url>/RXJAVA-20200909-RXJAVA-reactive-programming-section01/</url>
    <content><![CDATA[<h1 id="what-is-rxjava"><a href="#what-is-rxjava" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#what-is-rxjava"></a> What is RxJava?</h1>
<p>자바(Java)에서 리액티브 프로그래밍(Reactive Programming)을 구현하는데 사용하는 <code>라이브러리</code>입니다.</p>
<p>이벤트 처리와 같은 <code>비동기</code> 처리에 최적화됐으며, <code>2.0버전부터 Reactive Streams 사양을 구현</code>합니다. Reactive Streams 사양을 구현합니다. Reactive Streams는 어떤 라이브러리나 프레임워크라도 데이터 스트림을 비동기로 처리하는 공통 메커니즘을 인터페이스로 제공합니다.</p>
<p>즉, <code>RxJava2.0</code>부터는 Reative Streams API를 의존하고 Reactive Streams를 제외한 다른 라이브러리는 의존하지 않습니다.  RxJava는 <code>함수형 리액티브(Functional Reactive Programming)</code>은 아니지만, 함수형 프로그램의 영향을 받아 함수형 인터페이스를 인자로 전달받는 메서드가 많습니다. 이러한 함수형 인터페이스를 사용하는 메서드들을 조합하면 함수형 프로그래밍을 하는 것 처럼 데이터를 <code>필터링하거나 변환</code>하는 등의 처리를 유연하게 할 수 있습니다.</p>
<h2 id="rxjavayi-jiweon-beojeon"><a href="#rxjavayi-jiweon-beojeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#rxjava의-지원-버전"></a> Rxjava의 지원 버전</h2>
<p><code>Java 6 버전</code> 이상과 <code>안드로이드2.3버전 진저브레드(gingerbread)이상</code>을 지원합니다.</p>
<h2 id="rxjava-gibon-culryeoghaebogi"><a href="#rxjava-gibon-culryeoghaebogi" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#rxjava-기본-출력해보기"></a> RxJava 기본 출력해보기</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxjavaOutput</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Flowable&lt;String&gt; flowable = Flowable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line">        flowable.subscribe(data-&gt; System.out.println(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ceori-sunseo"><a href="#ceori-sunseo" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#처리-순서"></a> 처리 순서</h2>
<ul>
<li>just 메서드 인자로 전달된 데이터를 통지하는 생산자(Flowable)를 생성합니다.</li>
<li>생산자가 데이터를 통지하면 소비자(람다식으로 구현된 함수형 인터페이스) 데이터 출력이 됩니다.</li>
</ul>
<h1 id="what-is-reactive-programming"><a href="#what-is-reactive-programming" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#what-is-reactive-programming"></a> What is reactive programming?</h1>
<p>데이터가 통지될 때마다 관련 프로그램이 반응(reaction)해 데이터를 처리하는 프로그래밍 방식입니다.</p>
<h2 id="example-of-reactive-programming"><a href="#example-of-reactive-programming" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-of-reactive-programming"></a> Example of reactive programming</h2>
<p>GPS위치 정보가 변경될 때의 데이터 전송 흐름을 상상해보면 이해하기 쉽습니다. 이동해 위치 정보가 변경될 때마다 데이터를 전송하고 이동을 멈추면 데이터전송을 중지하는 것처럼 생성되는 데이터를 한 번에 보내지 않고 각각의 데이터가 생성될 때마다 순서대로 보냅니다. 이러한 데이터의 흐름을 <code>데이터 스트림(data stream)</code> 이라고 합니다.</p>
<p>이미 생성된 데이터 집합인 <code>리스트(list)</code>같은 <code>컬렉션(collection)</code> 과는 다르게 앞으로 발생할 가능성이 있는 데이터 까지도 포함하는 데이터 집합체 입니다.</p>
<p>데이터 스트림은 이벤트와도 관련이 있어서 문자열을 입력하는 행위는 입력한 데이터가 순서대로 생성하는것으로 생각 할 수 있습니다.</p>
<p>예를 들어, <code>&quot;abc&quot;</code>라고 입력하면 입력 이벤트가 발생할때 다음과 같은 데이터가 생성된다고 생각할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. [a]</span><br><span class="line"><span class="number">2</span>. [ab]</span><br><span class="line"><span class="number">3</span>. [abc]</span><br></pre></td></tr></table></figure>
<p>마찬가지로 버튼을 누르는 행위에 대한 구체적인 데이터가 없더라도 버튼 이벤트와 같은 데이터가 생성된다고 생각할 수 있습니다. 버튼을 여러번 누른다면 <code>누른 횟수만큼 버튼을 누른다</code> 라는 이벤트가 발생할 수 있습니다.</p>
<p>즉, 이벤트도 발생할 때마다 데이터를 전송하는 데이터 스트림으로 다룰 수 있습니다. 데이터 스트림으로 데이터를 전달받은 프로그램이 그때마다 적절히 처리 할 수 있게 구성됐습니다.</p>
<p><strong>⇒ 결론적으로 필요한 데이터를 직접 가져와 처리하는것이 아니라 보내온 <code>데이터</code>를 <code>받은 시점에 반응</code>해 이를 처리하는 프로그램을 만드는것이 리액티브 프로그래밍입니다.</strong></p>
<p>또 다른 예로, 상품가격과 부가가치세 세율로 부가가치세를 계산하는 프로그램이 있다고 할때, 리액티브 프로그래밍이 아니라면 상품가격과 부가가치세 세율을 얻는 것만으로는 어떤 일도 일어나지 않습니다.</p>
<p>값을 얻은 후에 <code>부가가치세를 계산한다</code> 라는 <code>행위(action)</code>이 이루어져야 비로소 부가 가치세를 계산합니다. 또한, 부가 가치세를 계산한 후 상품가격이 변경되더라도 다시 계산처리 <code>행위</code>가 이루어지지 않는 한 부가가치세는 변경되지 않습니다.</p>
<h2 id="riaegtibeu-peurogeuraemingi-anilddae"><a href="#riaegtibeu-peurogeuraemingi-anilddae" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#리액티브-프로그래밍이-아닐때"></a> 리액티브 프로그래밍이 아닐때</h2>
<ol>
<li>입력한다</li>
<li>버튼이 눌린다</li>
<li>계산 결과를 표시한다</li>
</ol>
<p>상품 가격이 바뀌어도 세금계산 버튼을 누르지 않으면 부가가치세가 바뀌지 않는다.</p>
<h2 id="riaegtibeu-peurogeuraemingil-ddae"><a href="#riaegtibeu-peurogeuraemingil-ddae" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#리액티브-프로그래밍일-때"></a> 리액티브 프로그래밍일 때</h2>
<ol>
<li>입력한다</li>
<li>입력한 내용을 통지한다</li>
<li>통지를 받아 계산하고 결과를 표시한다</li>
</ol>
<p>상품가격이 바뀔 때마다 부가가치세가 자동으로 계산된다.</p>
<hr>
<p>상품 가격 변동을 감지하는 <code>리스너(listener)</code>를 이용해 자동으로 부가가치세를 계산하는 프로그램과 어떤 차이가 있는지 의문이 생길 수 있습니다.</p>
<p>예를 들어, 상품가격이 변경 될때 반응하면서 상품가격에 해당하는 부가가치세를 다시 계산해 표시하는 것을 리액티브 프로그래밍이라 할 수 없습니다.</p>
<p><code>리스너(listener)가 반응</code>하면서 부가가치세 항목에 <code>새로운 데이터가 전달되고 부가가치세 항목에서 계산 프로그램을 실행해 결과를 부가가치세로 표시</code>한다고 생각하면 리액티브 프로그래밍이라고 할 수 있습니다.</p>
<p>⇒ 리액티브 프로그래밍에서 데이터를 생산하는 측이 데이터를 전달하는것까지 책임집니다. 데이터를 생산하는측(상품가격)은 데이터를 전달하는것까지 책임집니다.  그러므로 데이터를 생산하는 측은 데이터를 소비하는 측(예 부가가치세)이 전달 받은 데이터로 무엇을 하는지 관여하지 않아도 됩니다.</p>
<p>데이터를 생산하는 측은 데이터를 소비하는 측에 무엇을 하든지 관계가 없으므로 <code>소비하는 측의 처리를 기다릴 필요가 없습니다.</code> 그러므로 데이터를 통지한 후 데이터를 소비하는 측에서 <code>데이터를 처리하는 도중</code>이라도 데이터를 생산하는 측은 <code>바로 다음 데이터를 처리</code> 할 수 있습니다.</p>
<h2 id="siseutem-gucugyi-gwanjeom"><a href="#siseutem-gucugyi-gwanjeom" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#시스템-구축의-관점"></a> 시스템 구축의 관점</h2>
<p>리액티브 프로그래밍은 <code>마이크로서비스(Miscroservice)</code>와 같이 분산 시스템으로 프로그램을 구현하는데 적합해 최근 주목을 받고 있습니다.</p>
<p><code>리액티브 프로그래밍(Programming)</code>과 <code>리액티브 시스템(System)</code>으로 부르지 않고 리액티브 시스템이 리액티브 프로그래밍으로 구현된 시스템을 의미하지 않기 때문입니다.</p>
<h2 id="riaegtibeu-siseutemiran"><a href="#riaegtibeu-siseutemiran" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#리액티브-시스템이란"></a> 리액티브 시스템이란?</h2>
<p>메시지를 보내 데이터를 처리하고 상황에 따라 스케일 아웃(scale out)과 스케일 인(scale in)을 자동으로 수행해 장애 내성을 높임으로써 항상 <code>빠르게 수용</code>할 수 있는 시스템을 말합니다.(인프라 조건+)</p>
<h1 id="rxjavayi-gaeyo"><a href="#rxjavayi-gaeyo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#rxjava의-개요"></a> RxJava의 개요</h1>
<p>에릭마이어가 개발한 .net 프레임워크의 실험적인 라이브러리인 Reactive Extensions 를 줄여서 2009년 마이크로소프트에서 공개하고 2013년 넷플릭스가 자바로 이식한 것이 Rxjava의 시작입니다.</p>
<p>현재 Reative Extensions를 다루는 라이브러리는 <code>ReactiveX</code> 라는 오픈소스 프로젝트로 바뀌어 Java, .Net, javascript, Swift 등 여러 프로그래밍 언어를 지원하고 있습니다.</p>
<p><code>RxJava 1.x버전</code> 때는 자바에 Reactive Extensions를 이식하는 개발이 진행됐고, 리액티브 프로그래밍 개념이 널리 알려지면서 Reactive Extensions와 별도로 여러 업체와 단체에서 데이터 스트림을 비동기로 다루는 라이브러리와 프레임워크를 출시하였습니다.</p>
<p>라이브러리, 프레임워크 차이로 단체들이 데이터 스트림을 비동기로 다루는 최소한의 API를 정하고 제공했습니다. <code>2015년 4월 자바기반의 Reactive Streams for JVM</code> 버전이 <code>1.0.0</code>을 릴리즈하게 되었습니다.</p>
<p><code>Rxjava 1.x버전</code>때는 Reative Streams를 지원하지 않았지만, <code>Rxjava 2.x버전</code>때는 Reative Streams를 지원하여 2016년 10월에 Rxjava2.0이 릴리즈 되었습니다. Rxjava2.0버전부터 내부를 완전히 새롭게 구현하여 성능개선과 배압(back pressure) 사양에 따라 사용하는 API가 변경됐습니다.</p>
<p>그리고, Rxjava 1.x버전에서 2.x버전으로 전환할 때는 API 변경 작업도 반영해야 하므로 2.x버전으로 간단하게 전환할 수가 없습니다. 그 이유는 <code>내부구현을 모두 바꾸었기 때문입니다.</code></p>
<ul>
<li>버전별 루트 패키지</li>
</ul>
<table>
<thead>
<tr>
<th>버전</th>
<th>패키지</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.x</td>
<td>rx</td>
</tr>
<tr>
<td>2.x</td>
<td>io.reactivex</td>
</tr>
</tbody>
</table>
<p>따라서, RxJava의 두 버전을 같은 프로젝트에 함께 사용할 수는 있으나 프로젝트 내부에서 Rxjav에 의존하는 다른 라이브러리를 사용한다면 라이브러리가 어떤 버전을 지원하느냐에 따라 두 버전을 함께 사용하지 못할 수도 있습니다.</p>
<ul>
<li>두 버전을 사용하는것은 바람직 하지 않습니다.</li>
</ul>
<p>Rxjava의 실험적인 API가 있습니다. 해당 에너테이션이 붙어 있는것은 <code>개발중이거나 실험중인 API</code>입니다.</p>
<ul>
<li>@Beta @Experimental</li>
</ul>
<p>추가로 <code>io.reactivex.internal</code>로 시작하는 패키지에 있는 클래스는 <code>Rxjava 내부</code>에서 기본으로 사용하는 클래스입니다. 가능하면 클래스에 의존하지 않는 편이 더 낫습니다.</p>
<h1 id="rxjavayi-teugjing"><a href="#rxjavayi-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#rxjava의-특징"></a> RxJava의 특징</h1>
<p>Rxjava는 디자인 패턴인 옵저버(Observer)패턴을 잘 확장했습니다.</p>
<h2 id="objeobeopaeteoniran"><a href="#objeobeopaeteoniran" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#옵저버패턴이란"></a> 옵저버패턴이란?</h2>
<p>감시 대상 객체의 상태가 변하면 이를 관찰하는 객체에 알려주는 구조입니다. 이 패턴의 특징을 살리면 데이터를 생성하는 측과 데이터를 소비하는 측으로 나눌 수 있습니다.</p>
<p>또한, 옵저버패턴에 완료와 에러통지를 할 수 있어서 모든 데이터 통지가 끝나거나 에러가 발생하는 시점에 별도로 대응해줄수도 있습니다.</p>
<h2 id="bidonggi-ceori"><a href="#bidonggi-ceori" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#비동기-처리"></a> 비동기 처리</h2>
<p>Rxjava의 또 다른 특징으로 쉬운 비동기 처리를 들 수 있습니다. Reactive Streams 규칙의 근간이 되는 <code>Observable규약</code> 이라는 Rxjava개발 가이드라인을 따른 구현이라면 직접 스레드(thread)를 관리하는 번거로움에서 해방되고 구현도 쉽게 가능합니다. 또한, 동기 처리나 비동기 처리나 구현 방법에는 큰 차이가 없는 것도 Rxjava의 특징입니다.</p>
<p>RxJava는 함수형 프로그래밍의 영향을 받아 함수형 인터페이스로 인자를 전달받는 메서드를 사용해 대부분의 처리를 구현합니다. 입력과 결과만 정해져 있으면 구체적인 처리는 개발자에게 맡길 수 잇으므로 더욱 자유로운 구현이 가능합니다.</p>
<h2 id="hamsuhyeong-peurogeuraemyi-weoncig"><a href="#hamsuhyeong-peurogeuraemyi-weoncig" class="header-anchor">4.3. </a><a class="markdownIt-Anchor" href="#함수형-프로그램의-원칙"></a> 함수형 프로그램의 원칙</h2>
<ul>
<li>처리 작업의 영향 범위를 좁힐 수 있고 동시에 복잡하지않게 비동기 처리를 할  수 있습니다.</li>
</ul>
]]></content>
      <categories>
        <category>RXJAVA</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>리액티브프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>삼성 SW 역량테스트 백준 연구소 14502</title>
    <url>/BOJ-20200908-BOJ-beakjoon-laboratory-14502/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 연구소 14502</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>연구소는 크기가 <code>N×M</code>입니다.</li>
<li>연구소에서 <code>빈곳 0, 벽 1, 바이러스 2</code>의 값이 주어지게 됩니다.</li>
<li>벽을 3개만 세운 뒤 바이러스가 퍼질 수 없는 안전영역의 최댓값을 구하는 문제입니다.</li>
<li>지도의 세로 크기 N과 가로 크기 M (3 ≤ N, M ≤ 8)</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p><code>0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</code> 라는 조건이 있는 문제입니다.</p>
<p>이 문제를 풀때 가장 중요한점은 DFS로 접근해야 하는가? BFS로 접근해야 하는가를 많이 고민하였던 문제였습니다.</p>
<p>Basement  조건이 <code>벽을 3개</code> 세울 때 조합의 경우의 수를 사용하기 위해서 DFS를 사용하였으며, 연구소에서 바이러스들이 전염시키는 과정은 BFS로 풀이를 진행하였습니다.</p>
<ul>
<li>값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 됩니다.</li>
<li>빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</li>
<li>DFS 에서의 수행은 빈칸의 개수가 기준이 되므로 empty_size를 선언해서 받아오게 하였습니다.</li>
<li>CNT 값이 3일 경우 3개의 벽을 모두 세운 경우이므로 기존의 값은 변화가 되면 안되기때문에 맵을 Copy시켜줍니다.</li>
<li>이제 BFS를 수행하기위해 각각의 경우에 있어서 Check변수가 1일 경우에만 벽을 세워주게 됩니다.</li>
<li>바이러스가 전파시에 <code>현재 바이러스의 값 2</code>인 좌표 (x,y)의 점을 기준으로 <code>BFS</code>를 수행합니다.</li>
<li>모든 BFS경우를 돌고나서 아직 전염되지 않은 값이 있는곳이 <code>안전지대</code>입니다. 그 곳의 값을 <code>safe_size 카운팅</code> 시켜줍니다.</li>
<li>각 경우마다 안전영역의 최대의 값을 구해주어야하므로 최댓값을 갱신시켜줍니다.</li>
<li>각 경우마다 경우의 수가 달라지므로 visited 변수를 초기화 시켜줍니다.</li>
</ul>
<blockquote>
<p>즉, DFS 반복 → basement 확인 → BFS (x,y)좌표로 부터 바이러스 전염 → 안전영역의 최댓값</p>
</blockquote>
<h1 id="puli-kodeu"><a href="#puli-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이-코드"></a> 풀이 코드</h1>
<blockquote>
<p>C++</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  연구소14502.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/07.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> copy_map[MAX][MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; empty;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> empty_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> check[MAX*MAX];     <span class="comment">// size를 MAX * MAX를 해준이유는 빈칸이 N*M까지 나올 수 있기 때문입니다.</span></span><br><span class="line"><span class="keyword">int</span> visited[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    visited[x][y] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[mx][my] == <span class="number">0</span> &amp;&amp; copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    visited[mx][my] = <span class="number">1</span>;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    q.push(&#123;mx,my&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">        <span class="comment">// 기존의 맵을 변경시키면 안되기때문에 값을 카피시켜줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 벽을 세우기 하나의 경우마다의 벽을 세워야함.</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;empty_size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = empty[i].first;</span><br><span class="line">                <span class="keyword">int</span> y = empty[i].second;</span><br><span class="line">                copy_map[x][y] = <span class="number">1</span>;</span><br><span class="line">                count +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// virus 전염시키기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;virus.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = virus[i].first;</span><br><span class="line">            <span class="keyword">int</span> y = virus[i].second;</span><br><span class="line">            bfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> safe_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe_size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans &lt; safe_size)&#123;</span><br><span class="line">            ans = safe_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 조합의 형식으로 3개가 뽑힐때까지 뽑았다가 종료되는 시점에 그 값을 다시 false로 만들고 다시 조합의 경우를 뽑습니다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;empty_size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 된다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 0: 빈칸</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                empty.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2: 바이러스</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                virus.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</span></span><br><span class="line">    empty_size = empty.<span class="built_in">size</span>();</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JAVA</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copy_map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Dot&gt; virusList = <span class="keyword">new</span> ArrayList&lt;Dot&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir =&#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wallDfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map Copy</span></span><br><span class="line">            copyMapFunc();</span><br><span class="line">            <span class="comment">// virus spread</span></span><br><span class="line">            <span class="keyword">for</span>(Dot dot : virusList)&#123;</span><br><span class="line">                virusSpreadBfs(dot.x, dot.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// safe Area</span></span><br><span class="line">            ans = Math.max(ans, getSafeArea());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n * m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i / m;</span><br><span class="line">            <span class="keyword">int</span> y = i % m;</span><br><span class="line">            <span class="keyword">if</span>(map[x][y] == <span class="number">1</span> || map[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            wallDfs(i+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">            map[x][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 맵 카</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyMapFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 바이러스 퍼트리기</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpreadBfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    virusSpreadBfs(mx,my);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 안전영역 개수 체크</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSafeArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> safe = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> safe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    4 6</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">    1 0 0 0 0 2</span></span><br><span class="line"><span class="comment">    1 1 1 0 0 2</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        copy_map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                    virusList.add(<span class="keyword">new</span> Dot(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        wallDfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>알고리즘</tag>
        <tag>BOJ</tag>
        <tag>삼성SW역량테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 같은숫자는 싫어</title>
    <url>/Programmers-20200918-Programmers-dont-like-same-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12906#" target="_blank" rel="noopener">프로그래머스 같은숫자는 싫어</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,</p>
<p>arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.<br>
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.<br>
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>연속되는 같은 숫자를 체크해서 넣어주면 되는 문제입니다.</li>
<li>연속되는 같은 숫자를 체크하기위해서는 가장 맨처음에 있는 값을 answer값에 넣어주게 됩니다.<br>
맨처음에 있는값을 answer값에 넣어주는이유는 첫번째 연속되는 숫자값은 신경쓰지 않고 그다음부터나오는 값들로만 값을 체크하기 위해서입니다.</li>
<li>두값을 비교해나가면서 앞에있는 값과 뒤에 있는 값이 같지않을경우 해당 값을 넣어주게됩니다.</li>
<li>주의해야할점은 숫자하나만 남기고 전부 제거해야합니다.<br>
처음에 잘못생각하였던 부분이 연속되는부분만 반환되는줄 알았지만 예를 들어, [0,0,1]일 경우 answer = [0,1] 이 반환되게 됩니다. 이부분만 잘 주의하신다면 잘구현하실 수 있을것입니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 같은숫자는싫어 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; answer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    answer.add(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i-<span class="number">1</span>] != arr[i])&#123;</span><br><span class="line">            answer.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Integer a : answer)&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 윤년</title>
    <url>/Programmers-20200917-Programmers-leap-year/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12901" target="_blank" rel="noopener">프로그래머스 2016</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT</p>
<p>입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요.</p>
<p>제한 조건<br>
2016년은 윤년입니다.<br>
2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>1월 1일은 금요일이므로 금요일부터 값을 시작시킨다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>윤년은 1월부터 12월 까지 해당 값을 가진다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span></span><br></pre></td></tr></table></figure>
<ul>
<li>해당 a월까지의 값을 sum에 더해주면서 진행한다.<br>
sum값에는 a월까지의 더한 값이 있다.</li>
<li>모두 더해진 sum값에 1월 1일이 포함되어있는 값을 빼준다.<br>
해당 b일도 sum값에 추가해준다.<br>
위에 모든달에는 1월1일이 포함된 값이다 따라서 -1을 해주어야한다.</li>
<li>윤년은 모든일수에 % 7 을 나눈 나머지를 뜻한다.<br>
몫이 아니라 나머지라는것에 주의한다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> month[] = &#123; <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        String[] day = &#123;<span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;a; i++)&#123;</span><br><span class="line">            sum += month[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1월1일도 포함되어있으므로 -1</span></span><br><span class="line">        sum += (b-<span class="number">1</span>);</span><br><span class="line">        answer = day[sum % <span class="number">7</span>];</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 소수</title>
    <url>/Programmers-20200919-Programmers-prime-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12921" target="_blank" rel="noopener">프로그래머스 소수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.</p>
<p>소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.<br>
(1은 소수가 아닙니다.)</p>
<p>제한 조건<br>
n은 2이상 1000000이하의 자연수입니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>에라토스테네스의 체를 사용합니다.</li>
<li>일반 소수처럼 구현하게 되면 효율성에서 통과를 하지 못합니다.</li>
</ul>
<blockquote>
<p>에라토스테네스의 체 원리<br>
1부터 N까지의 모든 소수를 구하려면 에라토스테네스의 체를 사용한다</p>
</blockquote>
<p>1.2부터 N까지 모든 수를 써놓는다<br>
2.아직지워지지 않은수중에서 가장 작은값을 찾는다<br>
3. 해당 소수 값은 소수가 된다.<br>
4. 이제 그수의 배수를 모두 지운다.</p>
<p>해당원리를 가지고 에라토스 테네스의 체를 구현하게된다면 쉽게 구할수 있습니다.</p>
<p>에라토스테네스의 체를 쓰면서 두가지 경우를 실험하였는데, 하나의 경우는 효율성에서 통과를 하지 못하였고, 하나는 통과를 하였습니다. 그 이유가 있었는데 내부 for문에서 N의 크기에 따라 i<em>i를 할지 i</em>2, i+i의 값에 따라 효율성이 달라지게 됩니다. 그 이유는 i가 100만일 경우 i*i는 100만을 넘어가기 때문입니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<blockquote>
<p>효율성 실패</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 소수찾기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1000001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        check[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        check[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i; j&lt;=n; j+=i)&#123;</span><br><span class="line">                    check[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>효율성 통과</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 소수찾기 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1000001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        check[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        check[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i; j&lt;=n;j+=i)&#123;</span><br><span class="line">                    check[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i])&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>소수</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 문자열내 p와 y의 개수</title>
    <url>/Programmers-20200919-Programmers-string-p-y-number/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12916" target="_blank" rel="noopener">프로그래머스 문자열내 p와 y의 개수</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 'p’의 개수와 'y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. ‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.</p>
<p>예를 들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>String toLowerCase를 사용하여 모두 소문자로 바꿔준후 개수를 체크하여 리턴하였습니다.</li>
<li>만약 p와 y가 하나도 없다면 기존 Boolean true값을 리턴하게 됩니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line">        Boolean answer = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'p'</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'y'</span>)&#123;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == s.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">                    answer = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 두 정수 사이의합</title>
    <url>/Programmers-20200918-Programmers-two-number-between-sum/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12912?language=java" target="_blank" rel="noopener">프로그래머스 두 정수 사이의 합</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.<br>
예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.</p>
<p>제한 조건<br>
a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.<br>
a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.<br>
a와 b의 대소관계는 정해져있지 않습니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>a &gt; b 보다 크거나 같을 경우 for문의 범위를 b&lt;=a로 지정한다.</li>
<li>a &lt; b 보다 작거나 같을 경우 for문의 범위를 a&lt;=b로 지정한다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 두정수사이의합 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &gt;= b) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=b; i&lt;=a; i++)&#123;</span><br><span class="line">                answer += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt;= b)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=a; i&lt;=b; i++)&#123;</span><br><span class="line">                answer += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 서울에서 김서방 찾기</title>
    <url>/Programmers-20200919-Programmers-mr-kim-search/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12919?language=java" target="_blank" rel="noopener">프로그래머스 서울에서 김서방 찾기</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>String형 배열 seoul의 element중 Kim의 위치 x를 찾아, 김서방은 x에 있다는 String을 반환하는 함수, solution을 완성하세요. seoul에 Kim은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.</p>
<p>제한 사항<br>
seoul은 길이 1 이상, 1000 이하인 배열입니다.<br>
seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.<br>
Kim은 반드시 seoul 안에 포함되어 있습니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>문자열을 정수로 변환해서 출력시킬 수 있는지에 관한 문제입니다.</li>
<li>문자열을 정수로 변환 String to int Integer.parseInt()</li>
<li>정수를 문자열로 변환 int to String Integer.toString()</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 서울에서김서방찾기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] seoul = &#123;<span class="string">"Jane"</span>,<span class="string">"Kim"</span>&#125;;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;seoul.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(seoul[i].equals(<span class="string">"Kim"</span>))&#123;</span><br><span class="line">                answer += (<span class="string">"김서방은"</span> +Integer.toString(i)+ <span class="string">"에 있다"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
        <tag>프로그래머스</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 문자열 내림차순으로 배치하기</title>
    <url>/Programmers-20200903-Programmers-string-desc-arrange/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12917?language=java" target="_blank" rel="noopener">프로그래머스 문자열 내림차순으로 배치하기</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<p>문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.<br>
s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>String문자열을 toCharArray() 함수를 사용하여 char[] 배열형태로 변환시켜줍니다.</li>
<li>Arrays.sort를 사용해서 오름차순 정렬을 해준 후에 역순으로 answer문자열에 값을 더해줍니다.</li>
</ul>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 문자열을내림차순으로배치하기 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"Zbcdefg"</span>;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span>[] ch = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(ch);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ch.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            answer += ch[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(answer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">정렬 예시</span></span><br><span class="line"><span class="comment">sort(T[] a, Comparator&lt;? super T&gt; c)</span></span><br><span class="line"><span class="comment">Arrays.sort(a, Collections.reverseOrder());</span></span><br><span class="line"><span class="comment">Collections.sort(list, Collections.reverseOrder());</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>문자열</tag>
        <tag>프로그래머스</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>릿코드 two-sum</title>
    <url>/Leetcode-20210108-twosum/</url>
    <content><![CDATA[<h1 id="riskodeu-leetcode-two-sum"><a href="#riskodeu-leetcode-two-sum" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#릿코드-leetcode-two-sum"></a> <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">릿코드 leetcode two-sum</a></h1>
<h1 id="munje"><a href="#munje" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1>
<p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>You can return the answer in any order.</p>
<h3 id="example-1"><a href="#example-1" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-1"></a> Example 1:</h3>
<p>Input: nums = [2,7,11,15], target = 9<br>
Output: [0,1]<br>
Output: Because nums[0] + nums[1] == 9, we return [0, 1].</p>
<h3 id="example-2"><a href="#example-2" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#example-2"></a> Example 2:</h3>
<p>Input: nums = [3,2,4], target = 6<br>
Output: [1,2]</p>
<h3 id="example-3"><a href="#example-3" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#example-3"></a> Example 3:</h3>
<p>Input: nums = [3,3], target = 6<br>
Output: [0,1]</p>
<h3 id="constraints"><a href="#constraints" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#constraints"></a> Constraints:</h3>
<p>2 &lt;= nums.length &lt;= 103<br>
-109 &lt;= nums[i] &lt;= 109<br>
-109 &lt;= target &lt;= 109<br>
Only one valid answer exists.</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>(1). 하나의 값을 기준으로 모든 배열을 탐색하면서 값을 더해나갑니다.</li>
<li>(2). 더해나가는 값 sum이 target값과 같아진다면 해당 i,j의 값을 리턴합니다.</li>
<li>(3). 시간복잡도 부분에서 O(N^2)이 나오기때문에 매우 비효율적인 연산일 수 있기때문에 다른 풀이를 찾아보니 map을 활용하여 문제풀이도 볼 수 있었습니다.</li>
</ul>
<h2 id="soseukodeu"><a href="#soseukodeu" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#소스코드"></a> 소스코드</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_TwoSum_kgh</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;, <span class="number">9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] answer = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.length; j++)&#123;</span><br><span class="line">                sum = nums[i] + nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                    answer[<span class="number">0</span>] = i;</span><br><span class="line">                    answer[<span class="number">1</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(answer[<span class="number">0</span>] +<span class="string">""</span>+ answer[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="mapeul-hwalyonghan-puli"><a href="#mapeul-hwalyonghan-puli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#map을-활용한-풀이"></a> Map을 활용한 풀이</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>완전탐색</tag>
        <tag>릿코드</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연산자끼워넣기2 15658</title>
    <url>/BOJ-20191220-BOJ-interpolating-operator2-15658/</url>
    <content><![CDATA[<p><a href="https://www.acmicpc.net/problem/15658" target="_blank" rel="noopener">연산자끼워넣기(2)15658</a></p>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<blockquote>
<p>DFS</p>
</blockquote>
<ul>
<li>재귀호출로 백트래킹으로 구해줍니다.</li>
<li>연산자끼워넣기 1번문제와 같은 원리입니다. 정답 또한 같습니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<blockquote>
<p>DFS 백트래킹</p>
</blockquote>
<ul>
<li>맨처음 dfs(v,1,v[0],plus,minus,multi,div); 호출할 때 왜 idx = 1로 시작하고, sum의 값을 v[0]의 값을 넘겨주는가에 대한 의문을 갖고 계신분들이 있습니다. idx를 1로 시작한 이유는 곱하기나, 나눗셈의 경우에서 sum의 값이 0일 경우 올바르지 않은 값이 연산되게 됩니다. 따라서, v[0] (+, -, *, /) v[1] 의 형태로 연산이 되게 됩니다. 따라서 올바른 값을 구할 수 있습니다. 곰곰히 생각해보시면 어떤 말씀인지 알 것이라 생각합니다.</li>
<li>입력받은 plus,minus,multi,div의 개수를 0보다 클 경우에는 계속해서 재귀호출을 합니다.</li>
<li>시간복잡도 계산 총 연산자(+,-,*,/) 4개의 연산자이고, 총 N은 (2&lt;=N&lt;=11) 11까지 이므로 4^10 = 1048570의 복잡도를 가지게 됩니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>만약 v.size() == idx 모든 원소의 개수를 확인하였을 경우에 현재 sum값을 res 벡터에 값을 넣어줍니다. 그 후 <code>auto p = minmax_element(res.begin(), res.end());</code>를 사용하여 최댓값과 최솟값을 구해주게 됩니다. 이렇게 구하지 않고도 문제의 조건에서보면  <code>최댓값과 최솟값이 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다</code> 라는 조건이 있습니다.<br>
이러한 것들에 따라 값을 max함수와 min함수를 사용하면서 최댓값과 최솟값을 구해줍니다.<br>
다른분들의 풀이를 보니 이런식으로 사용하시는것을 보고 배우게 되었습니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxResult = -MAX, minResult = MAX;</span><br><span class="line"> maxResult = <span class="built_in">max</span>(maxResult, sum);</span><br><span class="line"> minResult = <span class="built_in">min</span>(minResult, sum);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; maxResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; minResult &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-puli"><a href="#dfs-baegteuraeking-puli" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-풀이"></a> DFS 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  12_백준_연산자끼워넣기2_15658.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> sum, <span class="keyword">int</span> idx, <span class="keyword">int</span> plus, <span class="keyword">int</span> minus, <span class="keyword">int</span> multi, <span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        res.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum+v[idx],idx+<span class="number">1</span>, plus<span class="number">-1</span>,minus,multi,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum-v[idx],idx+<span class="number">1</span>, plus,minus<span class="number">-1</span>,multi,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum*v[idx],idx+<span class="number">1</span>, plus,minus,multi<span class="number">-1</span>,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum/v[idx],idx+<span class="number">1</span>, plus,minus,multi,div<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">int</span> plus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> multi=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cal=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cal;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            plus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            minus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            multi = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            div = cal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(v, v[<span class="number">0</span>],<span class="number">1</span>,plus, minus, multi, div);</span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">" "</span> &lt;&lt;  *p.first;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 퇴사 14501</title>
    <url>/BOJ-20191217-BOJ-resignation-from-the-company-14501/</url>
    <content><![CDATA[<h2 id="baegjuntoesa14501"><a href="#baegjuntoesa14501" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준퇴사14501"></a> <a href="https://www.acmicpc.net/problem/14501" target="_blank" rel="noopener">백준퇴사14501</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>백트래킹 재귀호출</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>맨 처음에 조합으로 next_permutation을 사용해서 해당 T[i]만큼 false를 만들면서 오는 경우를 찾으면 어떨까 라고 생각하였지만, 직감적으로 쉽지않다는것을 느꼈습니다. 그래서 재귀함수로 풀어보자 라는 생각으로 풀게되었습니다.</li>
<li>이 부분이 가장 중요한 부분입니다. 재귀 백트래킹으로 <code>idx==n+1</code>과 같을때 <code>basement 정답을 찾았을 경우를 확인</code>하였습니다. 그리고 idx값이 n+1보다 클 경우 조건에 퇴사할 수 없으므로 <code>return으로 종료</code>시켜주었습니다.</li>
<li>기존것과 다르게 이것은 선택할지 말지에 대한 경우를 잘 확인해주어야합니다. 예를 들면, [1,2,3,4,5]라는 T배열이있다고 가정하면 1,2,3,4,5라는 값을 모두 사용하는것이 아니라 날짜가 <code>n+1과 같은경우</code>를 찾는 경우이기 때문에 1,2,3,4,5라는 값을 모두 사용할 수 있고, 최소 하나이상의 값만 사용할 수 있습니다.</li>
<li>너무 습관적으로 for문안에다가 재귀함수를 호출하였는데, 이 문제는 조합이나 순열문제가 아니라 말그대로 브루트포스문제였습니다. for을 작성하게 되면 1,2,3,4,5의 모든 값에 대한 경우의 수를 확인하는것입니다. 익숙함에 속아버렸습니다.</li>
<li>dfs를 호출할때 이것도 무의식적으로 <code>dfs(0,0)</code>을 호출하였는데, 문제의 조건에서 보면 <code>최소 1일</code>부터이기 때문에 초기조건을 1부터 시작하였습니다.<code>idx는 상담일 day와 같습니다.</code></li>
<li>최대값을 찾아주는것은 max_num이라는 변수를 활용하여서 그때마다 비교해서 업데이트를 해주었습니다. max_elements를 사용할 수도 있었지만, 빠르게 비교해주기위해서 이런 로직을 사용하였습니다.</li>
</ul>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="baegteuraeking-dfs"><a href="#baegteuraeking-dfs" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#백트래킹-dfs"></a> 백트래킹 DFS</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  11_백준_퇴사_14501.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 17/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max_num)&#123;</span><br><span class="line">            max_num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(sum+P[idx], idx+T[idx]);</span><br><span class="line">    dfs(sum,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; T[i] &gt;&gt; P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>혹시라도 0,1에서 왜 시작하는거지? 라는 의문이 있으신분은 아래와 같이 구현하여도 상관은 없습니다. 단지 문제의 조건에 부합시키기 위해 위와 같이 작성한것 뿐입니다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  11_백준_퇴사_14501.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 17/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max_num)&#123;</span><br><span class="line">            max_num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(sum+P[idx], idx+T[idx]);</span><br><span class="line">    dfs(sum,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; T[i] &gt;&gt; P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 부분수열의합 1182</title>
    <url>/BOJ-20191217-BOJ-sum-of-partial-sequence-1182/</url>
    <content><![CDATA[<h2 id="baegjun-bubunsuyeolyihab-1182"><a href="#baegjun-bubunsuyeolyihab-1182" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-부분수열의합-1182"></a> <a href="https://www.acmicpc.net/problem/1182" target="_blank" rel="noopener">백준 부분수열의합 1182</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>재귀호출 사용, 조합 사용</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>next_permutation을 사용한 조합을 이용한 풀이 방법 1<br>
순열과 조합중 조합을 사용하여 각각의 부분집합의 경우를 모두 구해준다. 하나씩 check변수에 모든 값을 true로 바꾸어준 후, 맨 앞에 있는 값들을 false로 바꾸면서 모든 부분집합의 경우를 구해준다.</p>
</li>
<li>
<p>재귀함수 백트래킹을 이용한 풀이 방법 2</p>
</li>
</ul>
<ol>
<li><code>m == 0 일때 공집합</code>을 빼주어야한다. 양수라고 하였음. 정수에서 양수의 크기만 가지므로 공집합은 제외해야함</li>
<li>int cnt = 0;의 값이 계속초기화된다고 할 수 있지만, 결과값 반환할때는 그값이 더해진값만 반환된다.</li>
<li><strong>경우의 수</strong> 의 문제임 따라서, 그값이 1로반환되어 한번의 경우의수 0번의 경우의수를 반환하여 더해가다보면 최종 경우의 수를 반환하게 된다.</li>
<li>정답일 경우는 sum == m이 같고, cnt ==값이 5개일때만 가능하다.</li>
<li>비정답일 경우는 sum == m이 아닌경우에 cnt==값이 5개 일경우는 불가능하다.<br>
예를 들면, 도달했지만 값이 다를 수 있음 반례임</li>
</ol>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<p>재귀 백트래킹 풀이 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> n,<span class="keyword">int</span> m, <span class="keyword">int</span> idx, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ans.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            s += ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == m)&#123;</span><br><span class="line">            cnt +=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        ans.push_back(v[i]);</span><br><span class="line">        dfs(v,n,m,i,sum);</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,n,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>재귀 백트래킹 풀이 2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> m, <span class="keyword">int</span> cnt,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 합이 m과 같을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">            ans +=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,m,cnt+<span class="number">1</span>,sum+v[cnt]);</span><br><span class="line">    dfs(v,m,cnt+<span class="number">1</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//공집합 빼주기</span></span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">        ans -=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>next_permutation 조합 풀이</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">bool</span> check[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] != <span class="literal">true</span>)&#123;</span><br><span class="line">                    sum += v[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">                cnt +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(check,check+n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
        <tag>알고리즘</tag>
        <tag>조합</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 암호만들기 1759</title>
    <url>/BOJ-20191203-BOJ-Create-a-password-1759/</url>
    <content><![CDATA[<h2 id="baegjunamhomandeulgi1759"><a href="#baegjunamhomandeulgi1759" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준암호만들기1759"></a> <a href="https://www.acmicpc.net/problem/1759" target="_blank" rel="noopener">백준암호만들기1759</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li><code>Recursive</code>를 활용한 풀이 <code>백트래킹 두가지 방법</code>으로 풀겠습니다.</li>
<li>include<algorithm>헤더에 sort함수를 사용하겠습니다. 그 이유는 사전식으로 가능성 있는 암호를 모두 출력한다. 라는 조건이 있기 때문입니다.</algorithm></li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>
<p>조합의 방식으로 풀어야합니다. 어떻게 조합으로 풀어야된다는 생각을 하였을까요? 문자의 종류는 C가지, 암호는 서로 다른 L개의 알파벳 소문자들로 구성된다고 문제에 나와있다. 이것이 뜻하는 바는 바로 <code>C개의 문자중 L개를 뽑는 방식이다</code> 결국 조합을 나타내는 문제라는 것입니다.</p>
</li>
<li>
<p>백트래킹을 푸는 방식은 두가지 방법이 있습니다. 개인마다 풀이의 차이이긴 하나 개인적으로 1번풀이로 진행합니다.</p>
</li>
</ul>
<ol>
<li>vector와 check변수를 활용한 풀이</li>
<li>vector 알파벳을 선택하는 recursive(), 알파벳을 선택하지 않는 recursive()</li>
</ol>
<ul>
<li>
<p>재귀함수 호출시 <code>idx변수와 cnt변수</code>를 사용합니다. <code>Idx변수는 시작점을 결정해주는 변수</code>, <code>cnt는 몇 개를 뽑아야하는지 그리고 재귀 호출 종료 해당 basement 조건</code>이 됩니다.</p>
</li>
<li>
<p>그리고, 조합은 순열과 다르게 해당 지정된 idx값 이하의 값들은 구성하지 않습니다. 예를 들어, <code>123 213 312</code> 는 <code>모두 동일한 경우</code>로 생각합니다. 조합을 구현하기 위해서는 check배열변수와 알파벳을 담기위한 vector<char>를 선언합니다.</char></p>
</li>
<li>
<p>해당값이 사용되었더라면 <code>check[i] == true로 확인하여 continue</code>를 진행합니다. 그리고 나서 다음 반복문 수가 진행되면서 해당값이 사용되지 않았다면 해당 값을 <code>check=true</code>를 진행하고, vector에 해당되는 알파벳을 <code>push_back</code>을 해주게됩니다. 그리고나서 재귀호출을 하면서 cnt+1의 값을 해주며 idx의 값은 i의 값을 넣어주면서 진행합니다. cnt값은 내가 고를 값이며, <code>idx의 값은 해당 기준이 되는 값이기때문에 반복문을 돌면서 해당값에 대한 재귀호출</code>을 반복하게 하게됩니다.</p>
</li>
<li>
<p>만약 cnt의 값이 내가 구하고자하는 n의 값과 같다면 해당 경우를 구한것이기 때문에 실질적인 로직을 작성합니다.</p>
</li>
<li>
<p><code>알파벳은 자음 21가지, 모음 [a,e,i,o,u] 5가지</code>로 구성됩니다. 따라서, push_back으로 넣었던 vector의 값을 하나씩 꺼내면서 해당 알파벳이 <code>[a,e,i,o,u]</code>중에 하나 일 경우 모음에 대한 개수를 증가시켜주고, 이와반대로 자음일 경우 자음의 개수를 증가시켜줍니다.</p>
</li>
<li>
<p>모음의 개수는 1이상이여야하고, 자음의 개수는 2이상이여야합니다. 만약 이 해당되는 조건에 만족한다면 해당 vector에 있는 값을 모두 출력시켜주게 됩니다.</p>
</li>
<li>
<p>그리고, Return값으로 해당 재귀함수가 종료되고나서 check=false로 방문을 해제시키고, 마지막에 들어있던 벡터값도 빼주게 됩니다. 그리고나서 다음에 해당하는 경우의 수로 재귀함수가 호출되면서 조합에 대한 모든경우를 구할 수 있게됩니다.</p>
</li>
<li>
<p><code>idx변수는 해당 기준이 되는점이고, cnt는 해당종료 조건(몇개를 뽑을지 조건)입니다.</code></p>
</li>
<li>
<p><code>2번 백트래킹방식으로 사용할 경우 선택한 경우, 선택하지 않은경우를 cnt값을 더해주는지 안더해주는지 경우로 나누어서 재귀호출이 진행되게 됩니다. 2번방식은 개인적으로 직관적인 판단하기가 힘들고 1번방식이 직관적인 이해가 더 쉬웠습니다.</code></p>
</li>
<li>
<p><code>조합과 반대로 순열은 idx변수가 사라지게 됩니다. 왜냐하면 기준이 되는점을 확인해야합니다. 예를 들어서 [1,2,3,4,5] [2,1,3,4,5]는 조합과 다르게 다른경우의 수로 나타냅니다. 조합은 저것을 하나의 경우의수로 판단하기 때문입니다. 그리고 순열은 idx를 사용하지 않으므로 해당되는 모든값에 첫번째 값부터 다시 확인을 진행한다는 차이점이 있습니다.</code></p>
</li>
</ul>
<h3 id="dfs-baegteuraeking-1beon-bangsig"><a href="#dfs-baegteuraeking-1beon-bangsig" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-1번-방식"></a> DFS 백트래킹 1번 방식</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; str;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ja = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'a'</span> || str[i] == <span class="string">'e'</span> || str[i] == <span class="string">'i'</span> || str[i] == <span class="string">'o'</span> ||str[i] == <span class="string">'u'</span>)&#123;</span><br><span class="line">                mo +=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ja +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mo &gt;=<span class="number">1</span> &amp;&amp; ja &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        str.push_back(v[i]);</span><br><span class="line">        dfs(v,m,n,i,cnt+<span class="number">1</span>);</span><br><span class="line">        str.pop_back();</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    dfs(v,m,n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-2beonbangsig"><a href="#dfs-baegteuraeking-2beonbangsig" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-2번방식"></a> DFS 백트래킹 2번방식</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">string</span> str, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(str.length() == n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ja=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mo=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'a'</span> || str[i] == <span class="string">'e'</span>|| str[i] == <span class="string">'i'</span> || str[i] == <span class="string">'o'</span> || str[i] == <span class="string">'u'</span>)&#123;</span><br><span class="line">                mo +=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ja +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mo &gt;= <span class="number">1</span> &amp;&amp; ja &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v.<span class="built_in">size</span>() == idx)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//알파벳 선택 하는 경우</span></span><br><span class="line">    dfs(v,n,m,str+v[idx],idx+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//알파벳 선택 하지 않는 경우</span></span><br><span class="line">    dfs(v,n,m,str,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    dfs(v,n,m,<span class="string">""</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연산자끼워넣기 14888</title>
    <url>/BOJ-20191202-BOJ-interpolating-operator14888/</url>
    <content><![CDATA[<h2 id="yeonsanjaggiweoneohgi14888"><a href="#yeonsanjaggiweoneohgi14888" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#연산자끼워넣기14888"></a> <a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">연산자끼워넣기14888</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<blockquote>
<p>next_permutation</p>
</blockquote>
<ul>
<li>값을 저장 시킬 vector<int> v;</int></li>
<li>연산자의 개수를 1,2,3,4 의 값으로 넣을 vector<int> cal;</int></li>
<li>#include<algorithm>헤더에 minmax_element으로 최대값과 최소값 구해줍니다.</algorithm></li>
</ul>
<hr>
<blockquote>
<p>DFS</p>
</blockquote>
<ul>
<li>재귀호출로 백트래킹으로 구해줍니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<blockquote>
<p>next_permutation</p>
</blockquote>
<ul>
<li>n을 입력받아 수를 v에 입력을 받아줍니다.</li>
<li><code>+, -, *, /</code>의 개수를 확인해서 cal 변수에 1,2,3,4를 나누어서 넣어줍니다. 예를 들면, 2 0 1 0 일경우 +의 개수는 2개이므로 1을 두번넣어주고, *의 개수는 1개이므로 3을 한번넣어주고 해당 cal 벡터에는 [1, 1, 3]이 됩니다.</li>
<li>cal에 담긴 벡터를 next_permutation을 돌려주면서 순열값 모든경우의 수를 구해줍니다.</li>
<li>cal값이 1일 경우 + , 2일경우 -, 3일 경우 *, 4일 경우 / 의 연산대로 조건을 처리해줍니다.</li>
<li>이때, sum = v[0]을 해준이유는 순차적으로 계산을 진행해야하므로 가장 맨처음에 존재하는 값을 sum에 담고 시작하였습니다. 연산자의 개수는 수의 N-1개이기때문에 미리 sum에 값을 넣어주었습니다. 예를 들면 10 + 20를 연산해야 한다고 할 경우 sum = 10을 두고 sum + 20으로 연산을 처리하기위해서 입니다.</li>
<li>조건에 보면 <code>식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 합니다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다.</code>을 해주어야하므로 sum의 값이 음수일 경우 sum = -sum 으로 양수 값을 변경하고, sum = (sum / v[i]) 을 계산해준 후 다시 음수값으로 변경하였습니다. sum이 양수일 경우 sum = (sum / v[i])로 로직대로 처리하였습니다.</li>
<li>minmax_element를 사용하여 max, min값을 동시에 구하였습니다. <code>auto p = minmax_element(ans.begin(), ans.end());</code>의 형식으로 최대값과 최소값을 모두 구할 수 있습니다. *p.second는 최소값, *p.first는 최대값입니다.</li>
</ul>
<h2 id="haedang-yeonsanjae-gajungcireul-buyeohayeo-geu-gabse-ddara-sunyeoleul-tonghae-modeungyeonguyi-sureul-guhaneungeosi-ki-pointeuyeossseubnida"><a href="#haedang-yeonsanjae-gajungcireul-buyeohayeo-geu-gabse-ddara-sunyeoleul-tonghae-modeungyeonguyi-sureul-guhaneungeosi-ki-pointeuyeossseubnida" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#해당-연산자에-가중치를-부여하여-그-값에-따라-순열을-통해-모든경우의-수를-구하는것이-키-포인트였습니다"></a> 해당 +,-,*,/ 연산자에 가중치를 부여하여 그 값에 따라 순열을 통해 모든경우의 수를 구하는것이 키 포인트였습니다.</h2>
<blockquote>
<p>DFS 백트래킹</p>
</blockquote>
<ul>
<li>맨처음 dfs(v,1,v[0],plus,minus,multi,div); 호출할 때 왜 idx = 1로 시작하고, sum의 값을 v[0]의 값을 넘겨주는가에 대한 의문을 갖고 계신분들이 있습니다. idx를 1로 시작한 이유는 곱하기나, 나눗셈의 경우에서 sum의 값이 0일 경우 올바르지 않은 값이 연산되게 됩니다. 따라서, v[0] (+, -, *, /) v[1] 의 형태로 연산이 되게 됩니다. 따라서 올바른 값을 구할 수 있습니다. 곰곰히 생각해보시면 어떤 말씀인지 알 것이라 생각합니다.</li>
<li>입력받은 plus,minus,multi,div의 개수를 0보다 클 경우에는 계속해서 재귀호출을 합니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>만약 v.size() == idx 모든 원소의 개수를 확인하였을 경우에 현재 sum값을 res 벡터에 값을 넣어줍니다. 그 후 <code>auto p = minmax_element(res.begin(), res.end());</code>를 사용하여 최댓값과 최솟값을 구해주게 됩니다. 이렇게 구하지 않고도 문제의 조건에서보면  <code>최댓값과 최솟값이 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다</code> 라는 조건이 있습니다.<br>
이러한 것들에 따라 값을 max함수와 min함수를 사용하면서 최댓값과 최솟값을 구해줍니다.<br>
다른분들의 풀이를 보니 이런식으로 사용하시는것을 보고 배우게 되었습니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxResult = -MAX, minResult = MAX;</span><br><span class="line"> maxResult = <span class="built_in">max</span>(maxResult, sum);</span><br><span class="line"> minResult = <span class="built_in">min</span>(minResult, sum);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; maxResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; minResult &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-puli"><a href="#dfs-baegteuraeking-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-풀이"></a> DFS 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorihtm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> idx,<span class="keyword">int</span> sum, <span class="keyword">int</span> plus, <span class="keyword">int</span> minus, <span class="keyword">int</span> multi, <span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        res.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> plus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> multi=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> input;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        v.push_back(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cal;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cal;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            plus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            minus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            multi = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            div = cal;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(v,<span class="number">1</span>,v[<span class="number">0</span>],plus,minus,multi,div);</span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">' '</span> &lt;&lt;  *p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next-permutation-puli"><a href="#next-permutation-puli" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#next_permutation-풀이"></a> next_permutation 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  08_백준_연산자끼워넣기_14888.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 02/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cal;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = v[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                sum = sum + v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">                sum = sum - v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">3</span>)&#123;</span><br><span class="line">                sum = sum * v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    sum = -sum;</span><br><span class="line">                    sum = (sum / v[i]);</span><br><span class="line">                    sum = -sum;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sum = (sum / v[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(sum);</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(cal.<span class="built_in">begin</span>(), cal.<span class="built_in">end</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.first &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 로또 6603</title>
    <url>/BOJ-20191202-BOJ-lotto-6603/</url>
    <content><![CDATA[<h2 id="roddo6603"><a href="#roddo6603" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#로또6603"></a> <a href="https://www.acmicpc.net/problem/6603" target="_blank" rel="noopener">로또6603</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>vector<int> check 변수에 6개를 뽑는 경우의 수 이므로, k-6개만큼은 0을 푸쉬백 해주고, 6개까지에 1을 넣어줍니다.</int></li>
<li>check배열로 next_permutation을 수행합니다. true인경우가 조합을 구하는 경우의 수입니다.</li>
<li>테스트케이스를 돌면서 vector<int>v, vector<int> check의 값의 초기화값을 잘 생각해주어야한다. 초기화가 원활하게 이루어지지않을 경우 이상한 값을 가득담고있습니다.<br>
<code>값이 들어있는 vector&lt;int&gt; v; 변수를 next_permutation을 하는것이 아니라 check변수를 수행하는것입니다.</code></int></int></li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>처음에 check배열을 선언해서 단순히 1의 값만넣어서 체크하였지만, check[i]==1 의 경우만 체크해주었다. 하지만, 조합이 나오는것이 아니라 순열의 값이 나오게 되어 올바르지 않은 값이다. 그 이유는 단순히 check배열을 사용하여 true,false값을 사용할 경우에는 중복된 값을 체크 할 수가 없다. check된 값을 next_permutation을 돌려주어야지 조합의 경우를 찾을 수 있습니다.</li>
<li>순열과 조합중에 조합 중복을 제거해야합니다.</li>
<li>push_back 을 0 과 1을 해주는 경우를 잘 생각해야합니다. 6개를 뽑는 경우의 수 이므로, k-6개만큼은 0을 푸쉬백 해주고, 6개까지에 1을 넣어줍니다.</li>
<li>가장 중요한점은 왜 0 111111이 들어가는데 어떻게 이것을 조합을 뽑을지에 대한 고민을 했다. 단순히 0,1과으로 조합의 경우를 세어준것입니다. 순열의 경우에는 이전에 보았던 값들도 확인해주어야하지만, 조합의 경우는 이전의 값을 확인하지 않는다는것이다.</li>
<li>next_permutation을 돌리게 되면서 그 순열의 값들은 계속해서 변경되기때문에 중복없는 값을 계속해서 체크해서 나갈 수 있다는점입니다.</li>
<li>next_permuation을 돌린 후 그 값을 모두 ans 저장시켜 sort(ans.begin(), ans.end())를 통하여 값을 오름차순 정렬을 시켜줍니다.<br>
<code>단순히 check배열로 true를 체크하는것이 아니라, check vector의 값으로 next_permutation을 돌려주면서 check[i]== true일 경우 N개중 K개를 고르는 경우를 구할 수 있습니다.</code></li>
</ul>
<h3 id="next-permutationpuli"><a href="#next-permutationpuli" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#next_permutation풀이"></a> next_permutation풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  07_백준_로또_6603.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 02/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; check;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-6</span>; i++)&#123;</span><br><span class="line">            check.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">            check.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                    curr.push_back(v[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(curr);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(check.<span class="built_in">begin</span>(),check.<span class="built_in">end</span>()));</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;ans[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i][j] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="baegteuraeking-puli"><a href="#baegteuraeking-puli" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#백트래킹-풀이"></a> 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">13</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">6</span>)&#123;</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        ans.push_back(v[i]);</span><br><span class="line">        dfs(v,i,cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dfs(v,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 외원판순회2 10971</title>
    <url>/BOJ-20191202-BOJ-Foreign-edition-tour2-10971/</url>
    <content><![CDATA[<h2 id="baegjunoeweonpansunhoe2-10971"><a href="#baegjunoeweonpansunhoe2-10971" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준외원판순회2-10971"></a> <a href="https://www.acmicpc.net/problem/10971" target="_blank" rel="noopener">백준외원판순회2 10971</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>W[i][j]는 도시 i에서 도시 j로 가기 위한 비용이므로 모든 경우의 수 완전탐색을 수행합니다.</li>
<li>N까지의 값을 vector에 넣어서 next_permutation을 수행합니다. next_permutation을 수행하는이유는 예를 들어 N이 4라고 하였을 경우 0,1,2,3까지의 값들을 vector에 넣고 모든 경우의 수를 만들어서 w[0][0], w[0][1]…w[0][3], w[1][0],w[1][1]…w[1][3]까지의 경우를 수행합니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>잘못 접근하였던점 저 맵을 보는순간 비에프에스로 풀어도될 것같은데 라는생각을 하였습니다. 하지만, 전혀 다른 문제였으며 완전탐색을 통해 풀어야합니다.</li>
<li>n값과 w 이차원배열에 비용을 입력받는다.</li>
<li>w[i][i] = 0일 경우 비용이 없습니다.</li>
<li>모든 각 노드간의 간선의 비용에 따른 최소비용을 찾습니다.</li>
<li>마지막노드와 첫번째 노드를 연결시키는 부분이 가장 핵심문제입니다.</li>
<li>직접 손으로 그래프를 그려보았습니다.</li>
<li>시간복잡도 O(N*N!) N! = 10! = 3628800</li>
</ul>
<p><code>마지막노드에서 첫번째노드를 연결시킬 방법의 조건을 잘 찾아야한다. 가는경우의수와 다시 돌아오는 경우의수를 체크합니다.</code></p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="next-permutationeul-sayonghan-puli"><a href="#next-permutationeul-sayonghan-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#next_permutation을-사용한-풀이"></a> next_permutation을 사용한 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  06_백준_외원판순회2_10971.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=<span class="number">210000000</span>;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(w[v[i]][v[i+<span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">                    check = <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    sum = sum + w[v[i]][v[i+<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(check &amp;&amp; w[v[n<span class="number">-1</span>]][v[<span class="number">0</span>]] != <span class="number">0</span>)&#123;</span><br><span class="line">            sum = sum + w[v[n<span class="number">-1</span>]][v[<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">min</span> &gt; sum)&#123;</span><br><span class="line">               <span class="built_in">min</span> = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">min</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 차이를최대로 10819</title>
    <url>/BOJ-20191130-BOJ-maximum-difference-10819/</url>
    <content><![CDATA[<h2 id="baegjun-caireulcoedaero-10819"><a href="#baegjun-caireulcoedaero-10819" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-차이를최대로-10819"></a> <a href="https://www.acmicpc.net/problem/10819" target="_blank" rel="noopener">백준 차이를최대로 10819</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>#include<algorithm>헤더에 있는 next_permutation()함수를 호출하여 순열과조합을 구현합니다.</algorithm></li>
<li>next_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 다음 순열을 구하고 true를 반환한다. 다음 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 작다면) false를 반환합니다.</li>
<li>prev_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 이전 순열을 구하고 true를 반환한다. 이전 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 크다면) false를 반환합니다.</li>
<li>#include<algorithm>헤더에 있는 abs절대값 함수를 사용합니다.(해당조건)</algorithm></li>
<li></li>
</ul>
<p><code>반드시 정렬이 수행되어야만 올바를 결과값을 얻을 수 있습니다.</code></p>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>|A[0] - A[1]| + |A[1] - A[2]| + … + |A[N-2] - A[N-1]|의 조건에 따라 반복문을 통하여 해당조건에 순열의 첫번째 경우, 두번째 경우, …마지막 경우에 따라 int sum의 값에 저장한 후 그 값을 max값과 비교한다. 최대값을 구해야하므로 이러한 일련의 과정이 필요합니다.</li>
<li>sum += abs(v[i] - v[i+1]); 의 식으로 현재 순열과조합의 경우에서 값들의 합을 구합니다. 이때 i값과 i+1값의 범위가 벗어나지 않는지 반드시 확인합니다. for문을 v.size()만큼 순회하면 오버플로우가 발생합니다.</li>
<li>max값과 sum의 값을 비교한 후 sum의 값이 max값보다 클 경우 max값을 해당 sum의 값으로 업데이트 시켜줍니다.(최대값)</li>
<li>next_permutation의 수행이 모두 끝나면 현재 max을 출력합니다. 현재 최대값이 저장되어 있습니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="next-permutationeul-sayonghan-puli"><a href="#next-permutationeul-sayonghan-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#next_permutation을-사용한-풀이"></a> next_permutation을 사용한 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  05_백준_차이를최대로_10819.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(v[i] - v[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">max</span> &lt; sum)&#123;</span><br><span class="line">            <span class="built_in">max</span> = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 123더하기 9095</title>
    <url>/BOJ-20191130-BOJ-123-Plus-9095/</url>
    <content><![CDATA[<h2 id="baegjun-1-2-3deohagi-9095"><a href="#baegjun-1-2-3deohagi-9095" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-123더하기-9095"></a> <a href="https://www.acmicpc.net/problem/9095" target="_blank" rel="noopener">백준 1,2,3더하기 9095</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>DFS 재귀함수 이용</li>
<li>vector에 테스트케이스 개수만큼의 값들을 넣어준 후, 반복문을 통해 각 경우에 대한 dfs를 호출하여 최종적으로 리턴되는값은 1,2,3으로 만들 수 있는 n에 대한 경우의 수입니다.</li>
<li>dfs를 이해하기에 가장 좋은 예중 하나는 n과m문제입니다. 순열과 조합에 대표적인 문제입니다. 이 시리즈들을 모두 재귀로 한번 풀어보시길 바랍니다.<br>
<a href="https://www.acmicpc.net/workbook/view/2052" target="_blank" rel="noopener">N과 M시리즈 문제집</a></li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>v == sum 일 경우 1,2,3으로 만들 수 있는 경우의 수 이기때문에 return 1을 해줍니다.</li>
<li>v &lt; sum 일 경우 return 0으로 현재 들어온 값을 재귀함수 종료시켜줍니다.</li>
<li>dfs(v,n,sum+1) 1의 경우, dfs(v,n,sum+2) 2의 경우, dfs(v,n,sum+3) 3의 경우입니다.</li>
<li>1,2,3을 더하는 경우이므로 <code>dfs(v,n,sum+1)+dfs(v,n,sum+2)+dfs(v,n,sum+3)</code> 의 값을 반환시켜주면 현재까지 경우의 수를 반환시켜줍니다.<br>
<code>언제 종료될것인가의 조건과 그 조건을 넘어섰을때 조건을 잘 생각해서 로직을 구현하여야 합니다.</code></li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="dfs"><a href="#dfs" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  04_백준_1,2,3더하기_9095.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> n,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//값에 부합할 경우</span></span><br><span class="line">    <span class="keyword">if</span>(v == sum)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//값의 범위를 넘어가게되면 그 이외의 값들이 들어가게되기때문에 반드시 필요한 조건</span></span><br><span class="line">    <span class="keyword">if</span>(v &lt; sum)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dfs(v,n,sum+<span class="number">1</span>)+dfs(v,n,sum+<span class="number">2</span>)+dfs(v,n,sum+<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dfs(v[i], n, <span class="number">0</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 일곱난쟁이 2309</title>
    <url>/BOJ-20191128-BOJ-Seven-Dwarfs-2309/</url>
    <content><![CDATA[<h2 id="baegjun-ilgobnanjaengi-2309"><a href="#baegjun-ilgobnanjaengi-2309" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-일곱난쟁이-2309"></a> <a href="https://www.acmicpc.net/problem/2309" target="_blank" rel="noopener">백준 일곱난쟁이 2309</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>do while ~ (next_permutation)으로 계속해서 다음 조합의 경우의 수를 찾는다.</li>
<li>vector v, check변수를 선언하여 permutation을 수행한다. 9명중 7명을 뽑아야하므로 7명만큼 check=true로 변경해서 수행한다. next_permutation을 수행하면서 값들이 계속변경되기 때문에 값이 변경되면서 출력된다.</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>백설공주를 도와 키를 확인하여 난쟁이를 찾자. 9명의 난쟁이 중에 7명의 난쟁이를 골라 키의 합이 100이 되는 경우를 찾아야한다.</li>
<li>9명중에 7명을 고르는 것은 9C7 = 9C2와 같은 경우의 수이다.</li>
<li>9명중 2명을 골랐을때 두명을 고르는 수는 O(N^2) * 난쟁이의 키의 합을 고르는 복잡도 O(N) = O(N^3)의 시간복잡도를 갖는다. N=9명이므로 9^3 = 729의 모든경우의 수에서 찾을 수 있다.</li>
<li>경우 1)난쟁이가 아닌 9명중 2명을 뽑는 경우를 구해서 sum의 값에서 그 해당 값들을 뺐을때 합이 100인경우를 찾는다.</li>
<li>경우 2)next_permutation을 돌려서 9명중 7명을 선택해서 그 값이 100일때 그 값들을 출력시켜준다. 이때 check변수를 선언하여 7명을 선택해야하는 경우를 true로 바꾸어주면서 수행한다.</li>
</ul>
<p><code>주의해야 할점: 정렬이 되어있는 상태여야 한다.</code></p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="ijung-pomun"><a href="#ijung-pomun" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#이중-포문"></a> 이중 포문</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        sum += v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum - v[i] - v[j] == <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>; z&lt;n; z++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == z || j == z)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; v[z] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next-permutation-johab"><a href="#next-permutation-johab" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#next_permutation-조합"></a> next_permutation 조합</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; check(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">                sum += v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum== <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 날짜계산 1476</title>
    <url>/BOJ-20191129-BOJ-Date-calculation-1476/</url>
    <content><![CDATA[<h2 id="baegjun-naljjagyesan-1476"><a href="#baegjun-naljjagyesan-1476" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-날짜계산-1476"></a> <a href="https://www.acmicpc.net/problem/1476" target="_blank" rel="noopener">백준 날짜계산 1476</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>단순 반복문과 조건문을 이용한 사칙연산 문제</li>
<li>while문을 이용해 지구,태양,달이 해당 입력값과 맞을 경우 break;</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>년도가 증가할때마다 E,S,M이 1씩 증가한다.</li>
<li><code>지구 1&lt;=E&lt;=15, 태양1&lt;=S&lt;=28, 달 1&lt;=m&lt;=19</code>의 범위를 벗어나게 된다면 해당 값을 1로 초기화 시켜야합니다.</li>
<li>E == 16, S == 29, M == 19일때 1로 초기화</li>
<li>입력 x,y,z 지구,태양,달을 입력 받았을때 x == E, y == S, z == M 지구,태양,달이 같은 연도를 찾은것이므로 종료시킵니다. 이때, sum은 몇년이 지났는지를 카운팅한 변수입니다. 따라서 sum을 출력시켜 정답을 도출시킵니다.<br>
<code>계산 범위를 잘 생각해서 풀어야합니다.</code></li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="modeungyeonguyi-sureul-cajseubnida"><a href="#modeungyeonguyi-sureul-cajseubnida" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#모든경우의-수를-찾습니다"></a> 모든경우의 수를 찾습니다.</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  02_백준_날짜계산_1476.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 28/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x,y,z = <span class="number">0</span>;  <span class="comment">// 입력</span></span><br><span class="line">    <span class="keyword">int</span> e=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">1</span>;  <span class="comment">// 지구, 태양, 달</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;    <span class="comment">// 연도</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e == x &amp;&amp; s == y &amp;&amp; m == z)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e +=<span class="number">1</span>;</span><br><span class="line">        s +=<span class="number">1</span>;</span><br><span class="line">        m +=<span class="number">1</span>;</span><br><span class="line">        sum +=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지구범위</span></span><br><span class="line">       <span class="keyword">if</span>(e == <span class="number">16</span>)&#123;</span><br><span class="line">           e = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 태양범위</span></span><br><span class="line">       <span class="keyword">if</span>(s == <span class="number">29</span>)&#123;</span><br><span class="line">           s = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 달 범위</span></span><br><span class="line">       <span class="keyword">if</span>(m == <span class="number">20</span>)&#123;</span><br><span class="line">           m = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>이진 탐색 트리 BST</title>
    <url>/Algorithm-20191123-Algorithm-bst/</url>
    <content><![CDATA[<h1 id="geomsaegteuri-search-tree"><a href="#geomsaegteuri-search-tree" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#검색트리-search-tree"></a> 검색트리 Search Tree</h1>
<h3 id="gyeceungjeogin-gujoreul-pyohyeon"><a href="#gyeceungjeogin-gujoreul-pyohyeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#계층적인-구조를-표현"></a> 계층적인 구조를 표현</h3>
<ul>
<li>조직도</li>
<li>디렉토리와 서브디렉토리 구조</li>
<li>가계도</li>
</ul>
<h3 id="teuriyi-teugjing"><a href="#teuriyi-teugjing" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#트리의-특징"></a> 트리의 특징</h3>
<ul>
<li>트리는 노드(node)들과 노드들을 연결하는 링크(link)들로 구성됩니다.</li>
<li>맨 위의 노드를 <code>&quot;루트(root)&quot;</code>라고 부릅니다.</li>
<li>노드를 연결하는 선을 <code>&quot;link&quot;, &quot;edge&quot;,&quot;branch&quot;</code></li>
<li><code>부모노드 자식노드</code>로 구성되어있습니다.</li>
<li>루트노드를 제외한 트리의 모든 노드들은 <code>유일한 부모노드</code>를 갖습니다.</li>
<li>부모가 동일한 노드들을 형제 <code>&quot;sibling&quot;</code>관계라고 부릅니다.</li>
<li>자식이 없는 노드들을 <code>&quot;leaf&quot;</code>노드라고 부릅니다.</li>
<li>“leaf” 노드가 아닌것 <code>내부 노드</code>라고 부릅니다.</li>
<li><code>조상-자손 관계</code>가 있다. 부모-자식관계를 확장한것 (ancestor-descendant) 관계</li>
<li>루트는 레벨관계 <code>Level 0 ~ Level N</code> 까지 갖습니다.</li>
</ul>
<ul>
<li>트리의 기본적인 성질
<ul>
<li>노드가 N개인 트리는 항상 N-1개의 링크(link)를 가집니다.</li>
<li>트리에서 루트에서 어떤 노드로 가는 경로는 유일하다. 또한 임의의 두 노드간의 경로도 유일(존재,1개)합니다.(단, 같은 노드를 두 번 이상 방문하지 않는다)</li>
<li>트리의 높이는 레벨의 개수입니다.</li>
</ul>
</li>
</ul>
<h1 id="ijin-teuri-binary-tree"><a href="#ijin-teuri-binary-tree" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#이진-트리-binary-tree"></a> 이진 트리 Binary Tree</h1>
<h3 id="teugjing"><a href="#teugjing" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#특징"></a> 특징</h3>
<ul>
<li>이진 트리에서 각 노드는 최대 2개의 자식을 가집니다.</li>
<li>각각의 자식 노드는 자신이 부모의 왼쪽 자식인지 오른쪽 자식인지가 지정됩니다.(자식이 한 명인 경우에도)</li>
<li>서로 다른 이진트리는 값의 위치가 다르면 <code>서로 다른 이진트리</code>라고 불리온다. (자식노드가 한개인 경우에도 해당됩니다)</li>
</ul>
<h3 id="ijinteuriyi-eungyong-expression-tree-huffman-code"><a href="#ijinteuriyi-eungyong-expression-tree-huffman-code" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#이진트리의-응용-expression-tree-huffman-code"></a> 이진트리의 응용 Expression Tree, Huffman Code</h3>
<ul>
<li>
<p>(x+y) * ((a + b) / c) 를 이진 트리형태로 나타낼 수 있다. Expression트리에서 응용한다.</p>
</li>
<li>
<p>허프만 코드 ‘A’ - ‘Z’, ‘a’ - ‘z’ 파일들의 알파벳을 어떤 데이터를 압축하는 것을 뜻한다. 파일의 길이가 최소가 되도록 하는 알고리즘(파일 압축)</p>
</li>
</ul>
<h3 id="full-binary-trees-and-complete-binary-trees"><a href="#full-binary-trees-and-complete-binary-trees" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#full-binary-trees-and-complete-binary-trees"></a> Full Binary Trees And Complete Binary Trees</h3>
<ul>
<li>
<p>Full Binary Trees 모든 레벨에서 노드에 채워져 있는 경우</p>
</li>
<li>
<p>Completr Binary Trees 맨 마지막경우에는 노드가 없을 수 있다.(단, 끝에서부터 노드가 없을 수 있다.)</p>
</li>
<li>
<p>높이가 h인 full binary tree는 2^h-1개의 노드를 가진다.</p>
</li>
<li>
<p>노드가 N개인 full 혹은 complete 이진 트리의 높이는 O(logN)이다.(노드가 N개인 이진트리의 높이는 최악의 경우 N이 될 수 있다.)</p>
</li>
</ul>
<h3 id="ijinteuriyi-pyohyeon"><a href="#ijinteuriyi-pyohyeon" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#이진트리의-표현"></a> 이진트리의 표현</h3>
<ul>
<li>Heap은 Complete Binary Tree이다.</li>
<li>연결 구조 표현
<ul>
<li>각 노드에 하나에의 데이터필드와 왼쪽자식(left), 오른쪽 자식(right),그리고 부모노드§의 주소를 저장</li>
<li>부모노드는 주소는 반드시 필요한 경우가 아니면 보통 생략함</li>
</ul>
</li>
</ul>
<h3 id="ijinteuriyi-sunhoe-traversal"><a href="#ijinteuriyi-sunhoe-traversal" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#이진트리의-순회traversal"></a> 이진트리의 순회(Traversal)</h3>
<ul>
<li>
<p>순회: 이진 트리의 모든 노드를 방문하는 일</p>
</li>
<li>
<p>중순위(inorder) 순회</p>
<ul>
<li>
<p>왼쪽자식기준으로 루트노드를 중간에 방문한다.</p>
</li>
<li>
<p>왼쪽 자식 노드-&gt;루트-&gt;오른쪽 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line"><span class="built_in">print</span> key[x]</span><br><span class="line">pre-order-tree-walk(right[x])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>선순위(preorder) 순회</p>
<ul>
<li>
<p>왼쪽자식기준으로 루트노드를 처음에 방문한다.</p>
</li>
<li>
<p>루트 노드-&gt;왼쪽 자식 노드-&gt;오른쪽 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> key[x]</span><br><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line">pre-order-tree-walk(right[x])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>후순위(postorder) 순회</p>
<ul>
<li>
<p>왼쪽기준으로 루트노드를 마지막에 방문한다.</p>
</li>
<li>
<p>왼쪽 자식 노드-&gt;루트 노드-&gt;중간 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line">pre-order-tree-walk(right[x])</span><br><span class="line"><span class="built_in">print</span> key[x]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>레벨오더(level-order) 순회</p>
<ul>
<li>
<p>레벨 순으로 방문, 동일 레벨에서는 왼쪽에서 오른쪽 순서로 방문합니다.</p>
</li>
<li>
<p>큐(queue)를 이용하여 구현</p>
<p>트리에 [1,2,3,4,5,6,7]이 순서대로 있다고하면 레벨별로 하나씩 방문한다(단, 기준은 왼쪽)</p>
<hr>
<p>Level 0: 1</p>
<p>Level 1: 2,3</p>
<p>Level 2: 4,5,6,7</p>
<hr>
<p>해당 순서로 방문한다고 생각하면 됩니다.</p>
</li>
</ul>
</li>
</ul>
<h3 id="dynamic-set"><a href="#dynamic-set" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#dynamic-set"></a> Dynamic Set</h3>
<ul>
<li>
<p>여러개의 데이터의 집합을 뜻하는 말을 일컫습니다.</p>
</li>
<li>
<p>여러 개의 키(Key)를 저장합니다.</p>
</li>
<li>
<p>다음과 같은 연산들을 지원하는 자료구조입니다.</p>
<ul>
<li>INSERT - 새로운 키의 삽입</li>
<li>SEARCH - 키 탐색</li>
<li>DELETE - 키의 삭제</li>
</ul>
</li>
<li>
<p>예: 심볼 테이블</p>
</li>
</ul>
<h3 id="baeyeol"><a href="#baeyeol" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#배열"></a> 배열</h3>
<ul>
<li>정렬 O
<ul>
<li>검색: O(logN)</li>
<li>삽입: O(N)</li>
<li>삭제: O(N)</li>
</ul>
</li>
<li>정렬 X
<ul>
<li>검색: O(N)</li>
<li>삽입: O(1), O(N)</li>
<li>삭제: O(1)</li>
</ul>
</li>
</ul>
<h3 id="yeongyeolriseuteu"><a href="#yeongyeolriseuteu" class="header-anchor">2.8. </a><a class="markdownIt-Anchor" href="#연결리스트"></a> 연결리스트</h3>
<ul>
<li>
<p>정렬 O</p>
<ul>
<li>검색: O(N), O(logN)</li>
<li>삽입: O(N)</li>
<li>삭제: O(1)</li>
</ul>
</li>
<li>
<p>정렬 X</p>
<ul>
<li>검색: O(N)</li>
<li>삽입: O(1)</li>
<li>삭제: O(1)</li>
</ul>
</li>
</ul>
<p>정렬이 이루어지면 이진검색 O(logN)의 시간복잡도 만큼수행된다. 예를 들면, 1,2,4,8 의 형식으로 트리의 노드의 개수가 증가된다고 하면 2^k = N으로 나타낼 수 있다. k는 시행횟수이며, N은 입력된 개수입니다. 이것을 K = log2N으로 나타낼 수 있습니다. 이때 시간복잡도에서는 상수를 무시하기 때문에 K=logN으로 나타낼 수 있습니다. 따라서, 이진탐색의 시간복잡도는 O(logN) 입니다.</p>
<h3 id="dayanghan-bangbeobdeul"><a href="#dayanghan-bangbeobdeul" class="header-anchor">2.9. </a><a class="markdownIt-Anchor" href="#다양한-방법들"></a> 다양한 방법들</h3>
<ul>
<li>정렬된 혹은 정렬되지 않은 배열 혹은 연결 리스트를 사용할 경우 INSERT, SEARCH, DELETE 중 적어도 하나는 O(N)</li>
<li>이진탐색트리(Binary Search Tree), 레드-블랙트리, AVL-트리 등의 트리에 기반한 구조들</li>
<li>Direct Address Table, 해쉬 테이블 등</li>
</ul>
<h3 id="geomsaegteuri"><a href="#geomsaegteuri" class="header-anchor">2.10. </a><a class="markdownIt-Anchor" href="#검색트리"></a> 검색트리</h3>
<ul>
<li>Dynamic set을 트리의 형태로 구현</li>
<li>일반적으로 SEARCH, INSERT, DELETE 연산이 트리의 높이(height)에 비례하는 시간복잡도를 가짐</li>
<li>이진검색트리(Binary Search Tree), 레드-블랙 트리(Red-black tree), B-트리 등</li>
</ul>
<h1 id="ijintamsaegteuri-binary-search-tree"><a href="#ijintamsaegteuri-binary-search-tree" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#이진탐색트리-binary-search-tree"></a> 이진탐색트리 Binary Search Tree</h1>
<h3 id="ijeongeomsaegteuri-bst-teugjing"><a href="#ijeongeomsaegteuri-bst-teugjing" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#이전검색트리bst-특징"></a> 이전검색트리(BST) 특징</h3>
<ul>
<li>
<p>이진트리이면서 각노드에 하나의 키를 저장</p>
</li>
<li>
<p>각 노드 v에 대해서 그 노드의 왼쪽 부트리(subtree)에 있는 키들은 key[v]보다 작거나 같고, 오른쪽 부트리에 있는 값은 크거나 같다.</p>
</li>
<li>
<p>중위 순회의 값을 갖는다</p>
</li>
<li>
<p>각 노드의 왼쪽 서브트리에는 해당 노드의 값보다 작은 값을 지닌 노드들로 이루어져 있다.</p>
</li>
<li>
<p>각 노드의 오른쪽 서브트리에는 해당 노드의 값보다 큰 값을 지닌 노드들로 이루어져 있다.</p>
</li>
<li>
<p>중복된 노드가 없어야 한다.</p>
</li>
<li>
<p>왼쪽 서브트리, 오른쪽 서브트리 또한 이진탐색트리이다.</p>
</li>
</ul>
<h3 id="1-search"><a href="#1-search" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#1search"></a> 1.SEARCH</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RECURSIVE</span><br><span class="line"></span><br><span class="line">TREE-SEARCH(x,k) x = 루트노드, k = 찾는값</span><br><span class="line">	<span class="comment">// x가 null이거나 k == key[x]를 찾은 경우(원하는 값을 찾은 경우)</span></span><br><span class="line">	<span class="keyword">if</span> x == <span class="literal">NULL</span> || k == key[x]</span><br><span class="line">		then <span class="keyword">return</span> x;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">// 키보다 작을 경우</span></span><br><span class="line">	<span class="keyword">if</span> k &lt; key[x]</span><br><span class="line">		then <span class="keyword">return</span> TREE-SEARCH(left[x],k)</span><br><span class="line">	<span class="comment">// 키보다 클경우</span></span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		then <span class="keyword">return</span> TREE-SEARCH(right[x],k)</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NONE RECURSIVE</span><br><span class="line"></span><br><span class="line">ITERATIVE-TREE-SEARCH(x,k)</span><br><span class="line">	While x != <span class="literal">NULL</span> <span class="keyword">and</span> K != key[x]</span><br><span class="line">		<span class="keyword">do</span> <span class="keyword">if</span> k &lt; key[x]</span><br><span class="line">				then x &lt;- left[x]</span><br><span class="line">				<span class="keyword">else</span> x &lt;- rgiht[x]</span><br><span class="line">	<span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure>
<p>시간복잡도: O(h), h = 트리의 높이</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>검색트리</tag>
        <tag>이진탐색트리</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>알고리즘 N-Queen 문제</title>
    <url>/Algorithm-20191123-Algorithm-n-queen/</url>
    <content><![CDATA[<h2 id="n-queenmunje"><a href="#n-queenmunje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#n-queen문제"></a> <a href="https://www.acmicpc.net/problem/9663" target="_blank" rel="noopener">N-Queen문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>Recursive() 재귀함수 어느지점에서 종료시키고, 다시 재귀호출을 해야하는지의개념을 확실하게 알고 있어야합니다.</li>
<li>Recursive()의 개념을 잡기에 좋은 문제는 <code>백준 N과 M시리즈</code> 입니다. 개념이 약하신분들은 순열과 조합의 개념부터 확실히 잡고 오시는것이 좋을 것이라고 생각을 합니다.</li>
<li><code>백트래킹 깊이우선탐색(DFS)</code>의 개념을 알아야합니다. 깊이우선탐색은 보통 <code>Recursive, Stack</code>를 사용합니다. Recursive가 직관적이고 코드이해하기도 쉽고, 스택보다는 구현이 덜 복잡하다는 장점이 있어서 Recursive로 구현하겠습니다.</li>
</ul>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>깊이우선탐색(DFS) 진행한 Level과 모든 말을 놓는 경우의 수가 같을때 재귀호출을 종료해야합니다.</p>
</li>
<li>
<p>N<em>N</em>N … N^N의 시간복잡도를 갖습니다.</p>
</li>
<li>
<p>백트래킹의 개념에 대해 알고 있어야 한다. 깊이우선탐색의 트리형태로 어떻게 진행하는지 직접 손으로 써보면서 진행해야합니다.</p>
</li>
<li>
<p>상태공간트리의 개념을 알고 있어야합니다.</p>
<ul>
<li>상태공간트리란 찾는 해를 포함하는 트리이며 이트리안에 어떠한 노드에 해당하는 이 트리를 체계적으로 탐색하면서 반드시 해를 찾을 수 있어야합니다.</li>
</ul>
</li>
<li>
<p>해당 퀸이 열 있는지 체크와 대각선을 체크해야합니다.</p>
</li>
</ul>
<p>예를 들어 설명하겠습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start에서 시작하면서 트리의 형태로 가지를 치면서 진행합니다. start-&gt; (0,0) (0,1) (0,2) (0,3)  첫번째 열에서 갈수 있는 모든 경우의 수입니다.</span><br><span class="line"></span><br><span class="line">(1,0) (1,1) (1,2) .... 두번째 열에서 갈 수 있는 경우의 수</span><br><span class="line"></span><br><span class="line">(level, 1) (level, 2) (level, 3) Level 크기에서 갈 수 있는 경우의 수</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Level 0</td>
<td>(0,0)</td>
<td>(0,1)</td>
<td>(0,2)</td>
<td>(0,3)</td>
</tr>
<tr>
<td>Level 1</td>
<td>(1,0)</td>
<td>(1,1)</td>
<td>(1,2)</td>
<td>(1,3)</td>
</tr>
<tr>
<td>Level 2</td>
<td>(2,0)</td>
<td>(2,1)</td>
<td>(2,2)</td>
<td>(2,3)</td>
</tr>
<tr>
<td>Level 3</td>
<td>(3,0)</td>
<td>(3,1)</td>
<td>(3,2)</td>
<td>(3,3)</td>
</tr>
</tbody>
</table>
<hr>
<p>다음의 상황은 <code>Level 0 ~ Level N</code> 의 경우까지 진행하는 경우라고 생각하겠습니다.</p>
<ul>
<li>
<p>Level0의 경우에서 갈 수 있는 모든경우를 탐색하면서 퀸을 놓습니다. 그리고 다음 Level1으로 진행하면서 열에 들어갈 수 있는 경우를 확인하면서 진행합니다. 이때 알아야 하는 부분이 Promissing의 개념입니다.</p>
</li>
<li>
<p>즉,<code>Level0 (0,0)</code>에 퀸을 놓으면 <code>Level1 (1,0)</code>에 퀸을 놓는 경우를 확인해보겠습니다. 퀸을 놓을 수 있는 조건은 <code>동, 서, 남, 북, 대각선</code>에 퀸이 위치해있으면 놓을 수 없습니다. 그러면 당연히 (1,0)은 확인할 필요도 없이 놓을 수 없는 경우의 수라는것입니다. 이것을 Promissing의 개념을 확인하여 더 갈 수 있는지 없는지를 판단하는 것입니다. 체크한다고 하시면 됩니다.</p>
</li>
<li>
<p>레벨의 수가 결국 말의 개수를 뜻합니다. 제 코드에서는 cols라는 배열이 쓰이는데 이것은 현재 말이 어디에 놓였는지에 대한 위치입니다. cols[1] : 1번말이 놓인 열 , cols[2] : 2번말이 놓인 열 … cols[i] = j (i번말이 j에 놓였다는 의미입니다. i는 결국 레벨입니다.)</p>
</li>
<li>
<p>Promissing Test를 진행할 때 마지막에 놓인 이 말이 이전에 놓인 다른 말들과 충돌하는지 검사를 하면 퀸을 놓을수 있는지 없는지를 확인 할 수 있습니다.</p>
</li>
</ul>
<h3 id="recursive-seolgye"><a href="#recursive-seolgye" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#recursive-설계"></a> Recursive 설계</h3>
<ol>
<li>promising()함수를 호출합니다. 진행이 가능한지 여부를 확인하고 아니면 false, 가능하면 true를 리턴합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line"> <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Level과 N의 값이 같은 경우(성공한 경우)</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">      <span class="comment">// 기존의 N-queen의 위치를 구하면 종료하는 형식이였지만, 모든 경우의 수를 구하기 위해서는 해당 cnt값을 증가시켜주어서 확인할 수 있다.</span></span><br><span class="line">      cnt+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Level과 N의 값이 같지 않은 경우 Recursive() 재귀 함수 호출</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">     cols[level+<span class="number">1</span>] = i;</span><br><span class="line">     <span class="comment">// 다음 레벨로 재귀 호출</span></span><br><span class="line">     <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="promising-test-seolgye"><a href="#promising-test-seolgye" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#promising-test-설계"></a> Promising Test 설계</h3>
<ol>
<li>같은 열을 확인하여야합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">      <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>같은 대각선에 놓였는지를 확인하여야 합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-dfs-baegteuraeking-haedang-gabs-cajgi-gibon-gaenyeom"><a href="#1-dfs-baegteuraeking-haedang-gabs-cajgi-gibon-gaenyeom" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-dfs-백트래킹-해당-값-찾기기본-개념"></a> 1. DFS 백트래킹 해당 값 찾기(기본 개념)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  n-queen.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 22/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cols[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">promissing</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;level; i++)&#123;</span><br><span class="line">        <span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">        <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; i &lt;&lt; <span class="string">","</span> &lt;&lt; cols[i] &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        cols[level+<span class="number">1</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 성공할 경우</span></span><br><span class="line">        <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">8</span>;</span><br><span class="line">    recursive(<span class="number">0</span>,N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-dfs-baegteuraeking-haedang-gabs-cajgi-gyeonguyi-su-cajgi-baegjun-munje"><a href="#2-dfs-baegteuraeking-haedang-gabs-cajgi-gyeonguyi-su-cajgi-baegjun-munje" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#2-dfs-백트래킹-해당-값-찾기경우의-수-찾기-백준-문제"></a> 2. DFS 백트래킹 해당 값 찾기(경우의 수 찾기 백준 문제)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  n-queen.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 22/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cols[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">promissing</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;level; i++)&#123;</span><br><span class="line">        <span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">        <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">        <span class="comment">// 기존의 N-queen의 위치를 구하면 종료하는 형식이였지만, 모든 경우의 수를 구하기 위해서는 해당 cnt값을 증가시켜주어서 확인할 수 있다.</span></span><br><span class="line">        cnt+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        cols[level+<span class="number">1</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 성공할 경우</span></span><br><span class="line">        <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    recursive(<span class="number">0</span>,N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>백트래킹</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 더 맵게</title>
    <url>/Programmers-20191120-Programmers-more-spicy/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-deo-maebge-munje"><a href="#peurogeuraemeoseu-deo-maebge-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-더-맵게-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42626" target="_blank" rel="noopener">프로그래머스 더 맵게 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>이번 문제를 해결하기 위해서는 단순 sort를 사용하는것이 아니라 우선순위큐 <code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</code>  오름차순 형식으로 써주어야합니다.</li>
<li>단순히 while문을 통해서 안에서 sort를 처리하려고 하였지만 16번 테스트케이스를 통과하지 못하였고 효율성에서는 시간초과가 발생하였습니다. 또한, 범위값이 너무 제한적이였다. 그래서 우선순위큐를 사용하였습니다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scoville의 길이는 1 이상 1,000,000 이하입니다.</span><br><span class="line">K는 0 이상 1,000,000,000 이하입니다.</span><br><span class="line">scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</span><br></pre></td></tr></table></figure>
<ul>
<li>주의해야할점은 <code>우선순위큐 push는 맨앞으로 들어간다는것과 top에 있는것도 0번째 인덱스에 있는 값</code>입니다.</li>
</ul>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ol>
<li>스코빌 벡터에 있는 값을 우선순위큐에 넣어준다. <code>greater&lt;int&gt;</code>를 옵션으로 지정하였기 때문에 자동으로 오름차순으로 정렬해줍니다. 만약 내림차순으로 하고 싶은경우 less<int>옵션을 사용하시면 됩니다.</int></li>
<li><code>첫번째, 두번째값을 통하여 스코빌 지수</code>를 구합니다. <code>단 q.top()의 값이 K보다 작아야합니다.</code> 반복문 조건</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">예시</span><br><span class="line">스코빌 1 2 3 9 10일경우  </span><br><span class="line">(1 + 2 * 2) 5 3 9 10 으로 변경됩니다. 우선순위큐 이므로 3 5 9 10 정렬됩니다.</span><br><span class="line">(3 + 5 * 2) 13 9 10 으로 변경됩니다. 우선순위큐 이므로 9 10 13 정렬됩니다.</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>기존의 while문에서는 sort를 다시해주어야하는데 우선순위 큐가 자동으로 정렬시켜주기때문에 필요없는 과정입니다.</li>
<li>만약 우선순위큐의 사이즈가 2이하가 되면 더이상 구할 수 없으므로 Return -1을 실행합니다. 그게 아니라면 계속 진행하고 q.top()의 값이 K보다 큰 경우가 있으면 더이상 반복문을 반복하지 않습니다.</li>
</ol>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-ilbanjeogin-sort-puli-sigancogwa"><a href="#1-ilbanjeogin-sort-puli-sigancogwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-일반적인-sort-풀이시간초과"></a> 1. 일반적인 sort 풀이(시간초과)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  더맵게 일반 정렬.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scoville;</span><br><span class="line">  </span><br><span class="line">    scoville.push_back(<span class="number">3</span>);</span><br><span class="line">    scoville.push_back(<span class="number">9</span>);</span><br><span class="line">    scoville.push_back(<span class="number">10</span>);</span><br><span class="line">    scoville.push_back(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">int</span> K=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = scoville.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        sort(scoville.<span class="built_in">begin</span>(),scoville.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 스코빌 첫번째 값이 K보다 작아야하고, cnt 값이 해당 스코빌 사이즈값이전까지 돌아아한다, 그리고 스코빌 사이즈는 2보다 커야한다. 아니면 -&gt; 메모리 에러남</span></span><br><span class="line">        <span class="keyword">if</span>(scoville[<span class="number">0</span>] &lt; K &amp;&amp; cnt &lt; len &amp;&amp; scoville.<span class="built_in">size</span>() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> new_scoville=<span class="number">0</span>;</span><br><span class="line">                  </span><br><span class="line">          new_scoville = scoville[<span class="number">0</span>] + (scoville[<span class="number">1</span>] * <span class="number">2</span>);</span><br><span class="line">          scoville[<span class="number">0</span>] = new_scoville;</span><br><span class="line">          scoville.erase(scoville.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">          cnt+=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 스코빌 첫번째지수가 K보다 작으면 결국 모든것이 되지않았으니까 cnt = 0;</span></span><br><span class="line">            <span class="keyword">if</span>(scoville[<span class="number">0</span>] &lt; K)&#123;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">        answer = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        answer = cnt;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="useonsunwikyu-sayong"><a href="#useonsunwikyu-sayong" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#우선순위큐-사용"></a> 우선순위큐 사용</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  더맵게 우선순위큐.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scoville;</span><br><span class="line">    scoville.push_back(<span class="number">1</span>);</span><br><span class="line">    scoville.push_back(<span class="number">2</span>);</span><br><span class="line">    scoville.push_back(<span class="number">3</span>);</span><br><span class="line">    scoville.push_back(<span class="number">9</span>);</span><br><span class="line">    scoville.push_back(<span class="number">10</span>);</span><br><span class="line">    scoville.push_back(<span class="number">12</span>);</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> K = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scoville.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        q.push(scoville[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> min_num_first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min_num_second = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.top() &lt; K)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        min_num_first = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        min_num_second = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        res = min_num_first + (min_num_second * <span class="number">2</span>);</span><br><span class="line">        q.push(res);</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>레벨2</tag>
        <tag>우선순위큐</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 가장 큰 수</title>
    <url>/Programmers-20191116-Programmers-big-number/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-gajang-keun-su-munje"><a href="#peurogeuraemeoseu-gajang-keun-su-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-가장-큰-수-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42746" target="_blank" rel="noopener">프로그래머스 가장 큰 수 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>0 또는 양의 정수 1 &lt;= numbers_length &lt;= 100,000, 0 &lt;= numbers &lt;= 1000 를 보고 O(N^2) 복잡도 불가할 것이라 예측하였습니다. 왜냐하면 (100,000)^ = 약 100억</li>
<li>String to int 변환 함수 atoi(str.c_str()), int to String 변환함수 to_string(number)
<ul>
<li><code>“String&quot; - ‘0’ =&gt; 숫자</code>로 변경이 가능합니다. <code>단, 범위는 0~9까지</code></li>
<li><code>Number + ‘0’ =&gt; 문자</code>로 변경이 가능합니다. <code>단, 범위는 0~9까지</code></li>
<li>숫자가 10이 나왔을 경우에는 <code>dec = dec * 10 + str[i] - '0'</code>의 형식으로 해주어야합니다. <code>유사문제로는 카카오 셔틀버스 문제</code>가 있습니다.</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 &gt; s2 + s1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s1 &gt; s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>string기준으로 문제를 해결해야한다.</li>
<li>맨 처음 순열과 같이 <code>DFS로 완전탐색</code>을 하였지만 <code>시간초과</code> 가 나서 sort()함수 사용해봤지만 테스트케이스는 맞지만 시간초과는 그대로여서 시간복잡도에 고민을 한번 더 하였습니다.</li>
<li><code>Sort Compare</code>로 비교 후 정렬값들을 가지고 문자열끼리 append시켜주었으면 쉽게 해결하였을 문제였습니다.</li>
<li>compare 함수 기본 형식(기본적으로 오름차순을 적용시킵니다.) 굳이 if문을 쓰지 않고 바로 return s1 &gt; s2형식으로 해주어도 됩니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-dfspuli-sigancogwa"><a href="#1-dfspuli-sigancogwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-dfs풀이시간초과"></a> 1. DFS풀이(시간초과)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  가장큰수.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 14/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value_v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;a, <span class="keyword">const</span> <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(b.<span class="built_in">size</span>() &gt; a.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> b &gt; a;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b &lt; a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//len개를 모두 선택하였을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx == len)&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            str += to_string(value_v[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> comp = atoi(str.c_str());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(comp &gt; ans)&#123;</span><br><span class="line">            ans = comp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        value_v.push_back(v[i]);</span><br><span class="line">        dfs(idx+<span class="number">1</span>, v, len);</span><br><span class="line">        value_v.pop_back();</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    s.push_back(<span class="string">"3"</span>); s.push_back(<span class="string">"30"</span>); s.push_back(<span class="string">"34"</span>);s.push_back(<span class="string">"5"</span>);s.push_back(<span class="string">"9"</span>);</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(len);</span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), compare);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        v[i] = atoi(s[i].c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,v,len);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; to_string(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string-jeongryeol-bigyo-sigancogwa-x-jeongdab"><a href="#string-jeongryeol-bigyo-sigancogwa-x-jeongdab" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#string-정렬-비교시간초과-x-정답"></a> String 정렬 비교(시간초과 X 정답)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 + s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s2 + s1 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1 + s2 &gt; s2 + s1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    numbers.push_back(<span class="number">3</span>); numbers.push_back(<span class="number">30</span>); numbers.push_back(<span class="number">34</span>);numbers.push_back(<span class="number">5</span>);numbers.push_back(<span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> numbers_len = numbers.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers_len; i++)&#123;</span><br><span class="line">        s.push_back(to_string(numbers[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), compare);</span><br><span class="line">    <span class="keyword">int</span> s_len = s.<span class="built_in">size</span>();</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s_len; i++)&#123;</span><br><span class="line">          ans += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">0</span>] == <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>유사문제: <a href="https://www.acmicpc.net/problem/1422" target="_blank" rel="noopener">백준 1422 숫자의 신</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>레벨2</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 H-index</title>
    <url>/Programmers-20191116-Programmers-H-INDEX/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-h-index-munje"><a href="#peurogeuraemeoseu-h-index-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-h-index-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42747" target="_blank" rel="noopener">프로그래머스 H-index 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>정렬문제인 만큼 <code>#include &lt;algorithm&gt; 헤더에 있는 sort를 이용하면 됩니다.</code></li>
<li>sort는 기본적으로 오름차순 정렬로 되어있습니다. 별 다른 옵션을 주지 않아도 오름차순 정렬을 하게 됩니다. 그 외 <code>내림차순정렬</code>을 이용 할 때는 다음과 같은 두가지 방법을 사용할 수 있습니다.</li>
</ul>
<blockquote>
<p>1.compare함수를 이용한 내림차순 방법</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool compare(int v1,int v2)&#123;</span><br><span class="line">    return v1 &lt; v2;</span><br><span class="line">&#125;</span><br><span class="line">sort(citations.begin(),citations.end(),compare);</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>greater<int>() 함수 옵션을 사용한 내림차순 정렬</int></li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort(citations.begin(),citations.end(),greater&lt;int&gt;());</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li><code>H-index</code>의 개념을 알고가셔야 합니다. 논문 n편중 h번이상 인용된 논문이 h편이상이고 h번 이하 인용되었다면 h가 H-index가 됩니다.</li>
<li>첫번째 <code>테스트 케이스인 [3,0,6,1,5]</code>로 예를 들어 설명하겠습니다.</li>
</ul>
<blockquote>
<p>오름차순 정렬 전</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">DATA</th>
<th style="text-align:left">INDEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>오름차순 정렬 후</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">DATA</th>
<th style="text-align:left">INDEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<hr>
<h2 id><a href="#" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#"></a> </h2>
<ul>
<li>정렬전과 정렬후의 과정입니다.<code>H-index</code>라는것을 맨처음에 모든 값의 합을 나눈 평균의 값이 H-Index라고 생각을 하여 아주 단순하게 생각했습니다. 당연히 틀린것이였습니다.</li>
<li><em>index</em>를 가지고 생각했어야 했는데, 값을 가지고 생각을 하였습니다. 위의 테스트케이스는 총 5편의 논문이 쓰여졌으며  <code>인덱스값이 DATA의 값보다 커지는 시점</code> <code>index &gt; data</code>을 찾아야 합니다. 그 시점이 H-index지점입니다.데이터값은 뒤에서부터 비교하고 인덱스값은 앞에서 비교하게 됩니다. 따라서 citations.size()-i-1의 형식이 나오게됩니다. -1을 해주는이유는 for문에서는citiation-1지점까지만 순회하기때문에 이에 따라 -1을 붙여준것입니다. 어디서부터 시작하고 어디서부터 끝내는지에 대해서 한번더 고민해보시면 되겠습니다.</li>
<li>Data = 5, Index = 3의 지점이 H-index에 해당하는값 입니다. <code>index&gt;data</code>의 지점에 index는 3의 값을 반환하게 됩니다. 이 값은 결국 h-index의 값을 나타내는것이며 <code>총 5편의 논문과 3회이상의 인용된 논문 3편, 3회 이하 인용된 논문 2편</code>이 되게 됩니다. 따라서 h-index의 값을 정확하게 도출해냈다고 할 수 있습니다.</li>
<li>문제들을 너무 어렵게 생각하여 풀었는데, <code>index</code>에 대해 유연하게 접근하면 쉽게 풀 수 있었던 문제라고 생각합니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-jeongryeol-puli"><a href="#1-jeongryeol-puli" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#1-정렬-풀이"></a> 1. 정렬 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 오름차순 정렬, 내림차순은 그 반대 v1 &gt; v2</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &lt; v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; citations;</span><br><span class="line">    citations.push_back(<span class="number">3</span>);</span><br><span class="line">    citations.push_back(<span class="number">0</span>);</span><br><span class="line">    citations.push_back(<span class="number">6</span>);</span><br><span class="line">    citations.push_back(<span class="number">1</span>);</span><br><span class="line">    citations.push_back(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    sort(citations.<span class="built_in">begin</span>(),citations.<span class="built_in">end</span>(),compare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;citations.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= citations[citations.<span class="built_in">size</span>()-i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>레벨2</tag>
        <tag>H-INDEX</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 위장</title>
    <url>/Programmers-20191115-Programmers-Camouflage/</url>
    <content><![CDATA[<h1 id="peurogeuraemeoseu-wijangmunje"><a href="#peurogeuraemeoseu-wijangmunje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-위장문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42578" target="_blank" rel="noopener">프로그래머스 위장문제</a></h1>
<hr>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<blockquote>
<p>접근법</p>
</blockquote>
<p>옷 종류 = KEY, 옷 이름= VALUE를 두고 문제를 해결해야 한다고 생각하였습니다.<br>
<code>#include&lt;unordered_map&gt;</code> 헤더에 포함된 <code>unordered_map&lt;string,int&gt;</code> 형태로 사용하려고 하였습니다.<br>
<code>unordered와 map</code>중 <code>unordered 자료구조</code>를 사용한 이유는 <code>map</code>은 <code>balanced tree의 형태</code>를 가지고 있고, <code>unordered_map</code>는 <code>hash</code>형태로 이루어져있기 때문에 <code>성능차이의 이슈로 특별한 이유가 없는</code> 한 <code>unordered_map</code>을 사용하려고 합니다.</p>
<p>주어진 파라미터 <code>vector&lt;vector&lt;string&gt;&gt; clothes;</code> 의 형태가 주어졌는데요. 헷갈리는 부분이 있어서 설명하고 넘어가겠습니다. <code>vector&lt;vector&lt;string&gt;</code>  2차원 벡터는 2차원 배열과 형태가 같습니다.</p>
<p>그리고, 2차원 벡터에 값을 넣게 될경우 주의해야할 점이 한가지 있습니다. 직접 접근해서 벡터값을 넣지 못하게 되어있다는것입니다. <code>clothes[0].push_back(&quot;yellow_hat&quot;)</code> 처럼 값을 넣으려고 하였지만, Xcode에서 <code>Invalid operands to binary expression</code> 에러가 나타났습니다. 직접적으로 2차원벡터에 값을 바로 접근하기가 불가능한 모양입니다.</p>
<p>그래서 <code>1차원 벡터를 생성시킨 후 값을 넣어준 다음, 2차원 벡터에 값이 들어간 벡터</code>를 넣었습니다. 프로그래머스에서 테스트케이스로 바로 Input을 주기 때문에 이러한 과정이 필요없지만, 직접 소스코드를 Xcode에 작성하면서 디버깅도 해보는편이라 저런형식으로 넣어주게 되었습니다.</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; clothes;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3;</span><br><span class="line"></span><br><span class="line">v1.push_back(<span class="string">"yellow_hat"</span>); v1.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">v2.push_back(<span class="string">"blue_sunglasses"</span>); v2.push_back(<span class="string">"eyewear"</span>);</span><br><span class="line">v3.push_back(<span class="string">"green_turban"</span>); v3.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">clothes.push_back(v1);</span><br><span class="line">clothes.push_back(v2);</span><br><span class="line">clothes.push_back(v3);</span><br></pre></td></tr></table></figure>
<p>1차원 행부분에서 열부분을 참고하시면 모든값들을 가져올 수 있겠습니다. 그리고, auto를 사용하셔서 값들을 가져올 수도 있습니다.</p>
<blockquote>
<p>아래와 같은 3가지 형식으로 사용하시면 됩니다.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">    m[clothes[i][<span class="number">1</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p : clothes)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; p.at(<span class="number">0</span>);</span><br><span class="line">  	<span class="built_in">cout</span>&lt;&lt; p[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s : clothes)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>map에 있는 값들을 모두 확인하기 위해서는 <strong>iterator</strong> 를 사용하셔야 합니다. 사용하실 방식은 다음과 같습니다. map과 map::iterator를 선언시켜줍니다. 그리고 iter 변수를 사용해서 <code>unordered_map</code>에 있는 모든 값들을 <code>탐색</code>을 시작하게 됩니다. iter-&gt;first, iter-&gt;second로 참조하여 접근하게 되면 해당 맵의 &lt;string,int&gt;형태로 저장된 값을 가져올 수 있습니다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=m.<span class="built_in">begin</span>(); iter != m.<span class="built_in">end</span>(); iter++)&#123;</span><br><span class="line">    answer *= (iter-&gt;second+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>–</p>
<blockquote>
<p>알고리즘</p>
</blockquote>
<ul>
<li>
<p>첫번째 테스트 케이스를 예시로 설명해보겠습니다. <code>[headergear, eyewear] 의 두가지 종류</code>가 있습니다. <code>headgear를 입거나 안입는 경우 headgear = 2가지 경우</code>, eyewear를 입거나 안입는 경우 1가지 경우입니다. 이것을 경우의 수로 적용시켜보겠습니다. <code>(headgear +1)* (eyewear + 1)로 적용</code>시키면 <code>(2+1) * (1+1) = 6 - 1 = 5가지</code>가 됩니다.</p>
</li>
<li>
<p>이때 <code>+1을 왜 더하는거야?</code> 라고 생각하실분이 있으실 것입니다. 그 이유는 <code>의상을 입을까? 말까?</code> 라는 경우를 고려해주어야하기 때문입니다. 그래서 +1을 해주게 되는것입니다.</p>
</li>
<li>
<p>마지막에 <code>-1은 또 왜해주나요?</code> 적어도 하나의 의상을 입어야하므로 <code>모두 입지않는 경우의 수인 1가지 경우를 빼주어야</code> 결국 모든 경우의 수의 조합이 나오게 될 것입니다.</p>
</li>
<li>
<p>모든 원소는 문자열로 이루어져있고, <code>clothes는 [의상의 이름, 의상의 종류]</code>의 형태를 가지고 있다. 따라서 해시 자료구조형을 사용해서 접근하면 된다. 처음에는 조합개념으로 dfs를 진행하려고 하였지만, 선택한 개수가 매번달라지는 경우때문에 dfs를 사용하지 않았습니다.</p>
</li>
</ul>
<p>개인적으로 다시 풀면서 Java Hashmap을 이용한 풀이법도 올려놓았습니다.</p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<hr>
<blockquote>
<p>C++풀이</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  위장문제.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 15/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; clothes;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3;</span><br><span class="line">    </span><br><span class="line">    v1.push_back(<span class="string">"yellow_hat"</span>); v1.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">    v2.push_back(<span class="string">"blue_sunglasses"</span>); v2.push_back(<span class="string">"eyewear"</span>);</span><br><span class="line">    v3.push_back(<span class="string">"green_turban"</span>); v3.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">    clothes.push_back(v1);</span><br><span class="line">    clothes.push_back(v2);</span><br><span class="line">    clothes.push_back(v3);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        m[clothes[i][<span class="number">1</span>]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="keyword">for</span>(iter=m.<span class="built_in">begin</span>(); iter != m.<span class="built_in">end</span>(); iter++)&#123;</span><br><span class="line">        answer *= (iter-&gt;second+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; answer<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Java 풀이</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String[][] clothes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] answer = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        HashMap&lt;String,Integer&gt; hs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!hs.containsKey(clothes[i][<span class="number">1</span>]))&#123;</span><br><span class="line">                hs.put(clothes[i][<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = hs.get(clothes[i][<span class="number">1</span>]);</span><br><span class="line">                hs.put(clothes[i][<span class="number">1</span>], tmp+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        hs.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.print(value);</span><br><span class="line">            answer[<span class="number">0</span>] *= (value+<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> answer[<span class="number">0</span>]-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>프로그래머스</tag>
        <tag>위장</tag>
        <tag>레벨2</tag>
        <tag>해시</tag>
      </tags>
  </entry>
</search>
