<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>프로그래머스 크레인 인형뽑기</title>
    <url>/crane-claw-machine-game/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/64061" target="_blank" rel="noopener">프로그래머스 크레인 인형뽑기 게임</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>
<p>게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.</p>
</li>
<li>
<p>만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.</p>
</li>
<li>
<p>크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다.</p>
</li>
<li>
<p>제한 사항</p>
</li>
<li>
<p>board 배열은 2차원 배열로 크기는  이상  이하입니다.</p>
<p>5 x 5</p>
<p>30 x 30</p>
</li>
<li>
<p>board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.</p>
<ul>
<li>0은 빈 칸을 나타냅니다.</li>
<li>1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.</li>
</ul>
</li>
<li>
<p>moves 배열의 크기는 1 이상 1,000 이하입니다.</p>
</li>
<li>
<p>moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.</p>
</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>
<p>두개의 동일한 인형일 경우 바구니 remove</p>
</li>
<li>
<p><strong>빈곳일 경우 아무일도 일어나지 않는다. 즉, 크레인에서 뽑은 값은 인형 N*N에서 value 를 0 으로 초기화</strong></p>
</li>
<li>
<p>바구니 크기는 충분하다</p>
</li>
<li>
<p>board range (5 &lt; board &lt; 30)</p>
</li>
<li>
<p>moves range(1 &lt; moves &lt; 1000</p>
</li>
<li>
<p>board value range(1 &lt; board value &lt; 100)</p>
</li>
<li>
<p>stack의 empty조건과 인형맵에서 값이 있을 경우만 로직을 진행</p>
</li>
<li>
<p>로직이 모두 진행되고나서 0으로 초기화 후 해당 로직을 빠져오는것이 가장 중요한 포인트였다.</p>
</li>
<li>
<p>Stack 자료구조를 사용한다.</p>
</li>
</ul>
<p>이 크레인인형뽑기의 문제에서 가장 중요했던 부분은 Stack을 사용하여 바구니의 역할을 하게 해야한다. 그리고 그 바구니가 비어있는지의 조건을 무조건 체크하고 들어가고, 비어있으면서도 값이 있는 경우를 조건으로 처리해야한다. 그 이유는 한가지 조건만 만족시키면 문제의 조건과 stack의 조건을 만족시키지 못한다</p>
<p>그리고, 바구니에 들어져 있는 값이 현재 뽑은 인형과의 값을 비교하여 바구니의 값을 빼주면서 answer의 값을 +2 를 해준다. 그 이유는 바구니에 들어가 있는 값(+1)과 크레인이 뽑은 값(+1)이 동일한 인형이기 때문에 이 경우 answer에다가 값을 +2를 해주었다. 결국 바구니의 값과 크레인의 값이 같으니 2개의 인형이 remove되었다고 생각하면 된다.</p>
<blockquote>
<p>인형을 뽑고나면 값을 0으로 초기화 시켜준다.</p>
</blockquote>
<p>그리고 해당 로직이 다 실행되고 나면 크레인이 뽑은 인형의 값을 '0’으로 초기화 시켜준다. 그 이유는 '0’으로 초기화 시켜주지 않으면 다음로직시에도 해당 인형을 또 뽑을 수 있기 때문이다. 그리고 이때 해당 로직을 진행후 break;문을 사용하여 해당 로직을 빠져나온다. break를 해주지 않으면 다음 로직시에 뽑으려고 하지 않았던 인형과의 충돌이 생길 수 있다.</p>
<p>예) 1번 인형을 뽑고 3번을 뽑고 다시 1번으로 오는 경우</p>
<p>Input으로 들어오는 값들의 Init 값이 1부터시작하기 때문에 moves[i]-1;을 해주면서 0(Index)의 값으로 진행시키기 위함이다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; board, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; moves)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;moves.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> moves_size = moves[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board.size(); j++)&#123;</span><br><span class="line">            <span class="comment">// 인형이 있는 경우 </span></span><br><span class="line">            <span class="keyword">if</span>(board[j][moves_size] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s.empty() &amp;&amp; s.top() == board[j][moves_size])&#123;</span><br><span class="line">                       s.pop();</span><br><span class="line">                       answer +=<span class="number">2</span>;   </span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    s.push(board[j][moves_size]); </span><br><span class="line">                &#125;</span><br><span class="line">                   board[j][moves_size] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>카카오</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC Gradle IntelliJ 환경설정</title>
    <url>/spring-mvc-environment/</url>
    <content><![CDATA[<h1 id="intellij-gradle-spring-mvc-hwangyeong-seoljeong"><a href="#intellij-gradle-spring-mvc-hwangyeong-seoljeong" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#intellij-gradle-spring-mvc-환경-설정"></a> IntelliJ Gradle Spring MVC 환경 설정</h1>
<h3 id="teseuteu-hwangyeong"><a href="#teseuteu-hwangyeong" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#테스트-환경"></a> 테스트 환경</h3>
<p>OS: Mac 10.14.6 Mojave</p>
<p>gradle: v5.5.12</p>
<p>apache-tomcat: v9.0.27</p>
<h3 id="seupeuringeseo-hwangyeongseoljeongeul-hal-su-issneun-bangbeobeun-keuge-dugajiida"><a href="#seupeuringeseo-hwangyeongseoljeongeul-hal-su-issneun-bangbeobeun-keuge-dugajiida" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#스프링에서-환경설정을-할-수-있는-방법은-크게-두가지이다"></a> 스프링에서 환경설정을 할 수 있는 방법은 크게 두가지이다.</h3>
<ul>
<li>
<p>Eclipse와 STS</p>
</li>
<li>
<p>IntelliJ와 Gradle</p>
</li>
</ul>
<p>그중에서 Gradle은 아래와 같은 일반적인 시나리오에서 빌드성능에 대한 테스트결과를 공개하였다. 테스트에 사용된 하드웨어는 <code>Dell XPS 15, I7-4712HQ CPU @ 2.30GHz, 16GB of RAM, SSD, Linux Min 18.1</code>이다.</p>
<p>Apache Common Lang3를 Maven에서 Gradle로 변경하여 테스트한 결과이다. 테스트를 실행한 결과는 Gradle이 약1.7배 정도 빠르며 Build Cache로 인한 빌드는 약 72배이상 빠르다고 나와있기 때문에 IntelliJ Idea와 Gradle을 사용하였다.</p>
<p><code>결론적으로</code></p>
<ul>
<li>Gradle은 모든 시나리오에서 적어도 2배이상은 빠르다.</li>
<li>변경 사항을 반영한 빌드에서는 Gradle이 Maven에 비해서 10~100배 빠르며, 하위프로젝트가 많으면 더욱 유리하다.</li>
</ul>
<p><img src="https://gradle.org/gradle-vs-maven-performance/" alt="Gradle 성능 비교"></p>
<h3 id="gradle-seoljeonghagi"><a href="#gradle-seoljeonghagi" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#gradle-설정하기"></a> Gradle 설정하기</h3>
<p><img src="gradle.org" alt="Gradle 공식홈페이지"></p>
<p>2019년 11월 기준 Gradle v5.6.4 버전이 최신버전으로 나와 있으며, Gradle설치하시기전에 JDK 1.7이상</p>
<p><code>Mac환경</code> 기준으로 설명드리겠습니다. 위 링크를 클릭하여 Gradle을 받지못하신분들은 압축을 풀어 원하시는 폴더에 저장하신 후 프로젝트 준비를 해주시면 됩니다.  저 같은경우는 usr/library에 경로설정을 진행하였습니다.</p>
<p><code>Windows</code>같은 경우는 C://드라이브 경로에 압축을 풀어서 진행합니다. 그리고 Gradle을 환경설정을 하는것이 좋기때문에 환경변수에 Path에 추가적인 설정이 필요합니다.</p>
<p>[내 컴퓨터] → [속성] → [고급 시스템 설정] → [고급] → [환경변수] → [Path] → [편집]</p>
<p><code>MAC</code> 해당폴더 경로에 가서 Mac터미널에서 아래와 같은 명령어를 사용합니다.</p>
<p>Mac <code>$./gradle -version</code></p>
<p><code>windows</code>해당폴더 경로에 가서 Windows터미널에서 아래와 같은 명령어를 사용합니다. 단, 환경변수가 설정되어있어야 올바르게 작동합니다.</p>
<p>Windows <code>gradle -v</code></p>
<h1 id="spring-mvc-peurojegteu-saengseonghagi"><a href="#spring-mvc-peurojegteu-saengseonghagi" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#spring-mvc-프로젝트-생성하기"></a> Spring MVC 프로젝트 생성하기</h1>
<p>IntelliJ를 실행하고 프로젝트 생성을 눌러줍니다.</p>
<p>여기에서 Gradle을 왼쪽에 그래들을 선택한 후 Java, Web에 선택을 하고 Next를 눌러줍니다.</p>
<ul>
<li>GroupId
<ul>
<li>자신의 프로젝트를 고유하게 식별자입니다.</li>
<li>package 명명 규칙을 따른다.</li>
<li>하위 그룹은 얼마든지 추가할 수 있다.</li>
</ul>
</li>
<li>ArtifactId
<ul>
<li>제품의 이름으로, 버전 정보를 생략한 jar 파일의 이름이다.</li>
<li>프로젝트 이름과 동일하게 설정한다.</li>
<li>소문자로만 작성하며 특수문자는 사용하지 않는다.</li>
</ul>
</li>
<li>Version
<ul>
<li>SNAPSHOT: 개발용, RELEASE: 배포용</li>
<li>숫자와 점을 사용하여 버전 형태를 표현한다(1.0)</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>com.회사이름.프로그램이름</th>
<th>com.kgh.miniapp</th>
</tr>
</thead>
<tbody>
<tr>
<td>com.회사이름.플랫폼.프로그램이름</td>
<td>com.kgh.miniapp.web.miniapp</td>
</tr>
<tr>
<td>kr.co.회사이름.프로그램이름</td>
<td>kr.co.kgh.miniapp</td>
</tr>
<tr>
<td>kr.co.회사이름.플랫폼.프로그램이름</td>
<td>kr.co.kgh.web.miniapp</td>
</tr>
</tbody>
</table>
<p>위와 같은 형식으로 사용할 수 있습니다.</p>
<p>그 다음,</p>
<p>방금전에 다운받은 Gradle을 지정해주고 나머지 조건들은 그대로 두고 진행하였습니다.</p>
<p>저같은 경우는 이미 경로가 잡혀있었기 때문에 /Library/Java/JavaVirtual…으로 나오게되었습니다.</p>
<p>이제 Finish를 눌러 프로젝트를 생성해보겠습니다.</p>
<p><code>이때 프로젝트를 생성할 폴더를 하나 미리 만들어 주셔야 그 폴더안에 모든 설정파일들이 들어가게 됩니다. 만약 많은 폴더들이 존재하고 있는곳에 프로젝트를 finish누르게 된다면 시각적으로나 관리면에서 좋지않은 효율이 발생할 가능성이 높습니다.</code></p>
<p>이제 프로젝트가 Web, MVC형태로 만들어지게 되었습니다. 이제는 아직 추가되지 않은 스프링프레임 워크를 추가해보도록 하겠습니다.</p>
<p><code>해당 최상위 프로젝트에서 오른쪽 마우스 클릭 후 Add Framework Support를 눌러줍니다.</code></p>
<p>그 다음, Spring을 선택한후 OK를 클릭해줍니다. 이제 gradle.Build에다가 Maven Spring에 적용되던것들을 이제 build.gradle에 넣어주려고 합니다.</p>
<p>위에서 말씀드렸다시피 Eclipse+Maven조합, IntelliJ+Gradle조합 둘중하나로 프로젝트를 구성할 수 있기 때문입니다. 이제 그러면 build.gradle에 코드를 추가해봅시다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">    version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이제 해당 코드를 넣어주면 자동으로 다운로드와 빌드가 실행됩니다.</p>
<h1 id="lombokpeulreogeuin-cuga"><a href="#lombokpeulreogeuin-cuga" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#lombok플러그인-추가"></a> Lombok플러그인 추가</h1>
<p>이제 Lombok을 사용하기 위해 추가적인 설정을 해봅시다.</p>
<p><img src="https://projectlombok.org/" alt="Lombok공식사이트"></p>
<h3 id="lombokeul-sayonghamyeon-daeumgwa-gateun-ijeomeul-gajigo-issseubnida"><a href="#lombokeul-sayonghamyeon-daeumgwa-gateun-ijeomeul-gajigo-issseubnida" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#lombok을-사용하면-다음과-같은-이점을-가지고-있습니다"></a> Lombok을 사용하면 다음과 같은 이점을 가지고 있습니다.</h3>
<p>① <strong>lombok</strong> - Java 기반에서 <strong>기계적으로 작성하는 VO, DTO, Entity 관련 작업</strong>을 보다 쉽게 하게 해주는 도구입니다.</p>
<p>② Getter, Setter, ToString, hashCode 관련 메소드 작업 관련 Class(클래스) <strong>코드를 깔끔하게 작성</strong>할 수 있습니다.</p>
<p>③ <strong>Spring(SpringSTS)</strong> 프로젝트에서 사용할 경우 <strong>JPA 환경과 함께 일관화 되고 가독성이 좋은</strong> 애플리케이션을 작성할 수 있습니다.</p>
<p>④ <strong>단점</strong>은 협업 모든 인원이 <strong>lombok을 설치해야 한다는 것</strong>과 추가 어노테이션 사용할 경우 <strong>소스코드 분석이 난해해지는 것</strong> 등이 있습니다.</p>
<p>이제 Lombok 장단점을 알았으니, 진행해봅시다.</p>
<p>상단에 <code>IntelliJIdea</code>를 눌러주시고 <code>Preferences</code>를 클릭해주세요. 그리고 왼쪽 상단에 <code>Plugin</code>을 클릭한다음 <code>lombok을 검색</code>하여 <code>install</code>해줍니다.</p>
<p>플러그인을 사용하고나면 Intellij를 재시작하게 되고, 이제 build.gradle 파일에 Lombok을 아래와 같이 추가해줍니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>위와 같은 코드를 작성하면 <code>IntelliJ Idea</code>에서 자동으로 빌드 및 컴파일을 진행합니다</p>
<blockquote>
<p>이때 주의 하실 사항이 있습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br></pre></td></tr></table></figure>
<p>원인은 <code>IntelliJ - How to solve lombok &quot;Cannot resolve symbol 'log'&quot;</code> 컴파일시 해당 에러가 나타났습니다.</p>
<p>해결방법은 두가지가 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line">or</span><br><span class="line">compileOnly <span class="string">'org.projectlombok:lombok:1.18.6'</span></span><br><span class="line">annotationProcessor <span class="string">'org.projectlombok:lombok:1.18.6'</span></span><br></pre></td></tr></table></figure>
<p>둘중 하나를 이용하면 에러를 해결할 수 있습니다. 정확한 원인은 컴파일대상과 IDE해석상의 문제가 발생한것으로 보입니다.</p>
<h3 id="lombok-keompail-hwangyeong"><a href="#lombok-keompail-hwangyeong" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#lombok-컴파일-환경"></a> Lombok 컴파일 환경</h3>
<p>이제 Lombok을 제대로 사용하기위해서 컴파일 환경을 설정해주어야합니다.</p>
<p><code>상단에 IntelliJIdea Preferences-&gt;build,Execution, Deployment -&gt;Compiler-&gt;Annotaion Processors</code> 를 클릭해서 들어옵니다.</p>
<p>이제 오른쪽 상단에 있는 Enable annotation processing을 클릭하여 컴파일할때 같이 돌아가도록 동작시켜줍니다. 그리고 OK를 누릅니다.</p>
<h1 id="log4j-raibeureori"><a href="#log4j-raibeureori" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#log4j-라이브러리"></a> Log4j 라이브러리</h1>
<p>이제 테스트나 Tomcat메시지를 조금 더 잘 확인할 수 있도록 log4j라이브러리를 사용할 것입니다.</p>
<p>System.out.println과 같이 로그를 찍을 필요가 없고 log를 사용할 것입니다.</p>
<p>build.gradle에 추가하여 log4j라이브러리를 사용해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-webmvc'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line">    compile group: <span class="string">'log4j'</span>, name: <span class="string">'log4j'</span>, version: <span class="string">'1.2.17'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="log4j-properties-seoljeonghagi"><a href="#log4j-properties-seoljeonghagi" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#log4j-properties-설정하기"></a> log4j properties 설정하기</h3>
<p><code>src내의 resource</code> 경로에 log4.j.properties파일을 작성합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log4j.properties</span><br><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"></span><br><span class="line"># Direct log messages to stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern= %-<span class="number">5</span>p %c&#123;<span class="number">1</span>&#125;:%L - %m%n</span><br></pre></td></tr></table></figure>
<p>다음과 같은 코드를 넣어줍니다. Log4j를 이용하기 위해서는 설정파일과 객체파일을 생성해야하므로 이것들을 properties에 담기위한 작업입니다.</p>
<h1 id="tomcatseoljeonghagi"><a href="#tomcatseoljeonghagi" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#tomcat설정하기"></a> Tomcat설정하기</h1>
<p>Tomcat버전 apache-tomcat: v9.0.27</p>
<p>Intellij는 Tomcat을 설정하고 프로젝트실행에 Tomcat에 프로젝트를 추가하는 방식을 사용합니다.</p>
<p>그림</p>
<p>톰캣을 사용하기위해서 해당 Run-&gt;Edit Configuration을 선택합니다. 그리고 Deployment를 선택하여 +버튼으로 해당 톰켓 폴더를 선택해줍니다. 이제 그러면 tomcat이 활성화되고 실행이 가능합니다.</p>
<blockquote>
<p>톰켓 실행시 오류</p>
</blockquote>
<p><code>[IntelliJ says 'cannot run program '/path/to/tomcat/bin/catalina.sh' error=13 permission denied](https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per)</code></p>
<p>라는 오류가 발생하면</p>
<p><code>chmod a+x /path/to/tomcat/bin/catalina.sh</code></p>
<p>해당 톰켓 경로를 직접 지정해서 경로 권한을 바꿔주어야합니다. 임의로 주어진 예시입니다.</p>
<h1 id="spring-mvccugawa-xmlpail-saengseong"><a href="#spring-mvccugawa-xmlpail-saengseong" class="header-anchor">6. </a><a class="markdownIt-Anchor" href="#spring-mvc추가와-xml파일-생성"></a> Spring MVC추가와 XML파일 생성</h1>
<p>build.gradle에 spring-webmvc를 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line"><span class="comment">//    testCompile group: 'junit', name: 'junit', version: '4.12'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-context'</span>,</span><br><span class="line">            version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-test'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    compile group: <span class="string">'org.springframework'</span>,name: <span class="string">'spring-webmvc'</span>, version: <span class="string">'5.0.7.RELEASE'</span></span><br><span class="line">    implementation(<span class="string">'org.projectlombok:lombok:1.18.2'</span>)</span><br><span class="line"><span class="comment">//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.0'</span></span><br><span class="line">    compile group: <span class="string">'log4j'</span>, name: <span class="string">'log4j'</span>, version: <span class="string">'1.2.17'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compile group에 추가된 Name 'spring-webmvc’를 추가해줍니다.</p>
<h3 id="ije-root-context-xmlgwa-servlet-context-xmleul-cugahaejubnida"><a href="#ije-root-context-xmlgwa-servlet-context-xmleul-cugahaejubnida" class="header-anchor">6.1. </a><a class="markdownIt-Anchor" href="#이제-root-contextxml과-servlet-contextxml을-추가해줍니다"></a> 이제 root-context.xml과 servlet-context.xml을 추가해줍니다.</h3>
<p>src밑에 webapp폴더에 필요한 폴더 구조를 생성해서 사용합니다. webapp밑에 'WEB-INF’폴더를 먼저 생성하고 Spring,appServlet폴더를 생성합니다.</p>
<p>이제, WEB-INF밑에 spring폴더에는 root-context.xml, servlet-context.xml 파일을 생성합니다. XML파일을 직접 생성할 수도 있지만 메뉴를 이용해서 생성할 수 있습니다.</p>
<p>src 오른쪽마우스 -&gt; new -&gt; XML Configuration -&gt; Spring config를 선택하여 해당 root-context.xml, servlet-context.xml을 생성해줍니다.</p>
<p>servlet-contex.xml로 화면을 이동하면 Application Context…와 같은 메시지가 보이게 됩니다.</p>
<p>그리고 Project Structure를 확인해보면 root-context.xml과 servlet-context.xml파일이 추가된것을 확인할 수 있습니다.</p>
<h1 id="controller-cugahagi"><a href="#controller-cugahagi" class="header-anchor">7. </a><a class="markdownIt-Anchor" href="#controller-추가하기"></a> Controller 추가하기</h1>
<p>main폴더내에 java폴더 안에 org.kgh.controller라고 패키지를 생성하겠습니다. 생성된 패키지에 TestController클래스를 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.kgh.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Log</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"테스트중입니다."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이 @Log4j, Lombok을 이용하는 컴파일이 정상적으로 실행되는지 확인합니다.</p>
<p>servlet-context.xml에서 설정해보겠습니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.kgh.controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>이와 같이 설정해주게 되면 정확히 맵핑이 되어 진행될것입니다. 이제는 file-Project Structure내에 Facets항목을 열어서 web.xml을 추가해줍니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>다음과 같이 매핑되는것을 확인할 수 있고, 이제 톰캣을 확인해보면 정상적으로 서버가 구동되는것을 확인할 수 있습니다.</p>
<h1 id="reference"><a href="#reference" class="header-anchor">8. </a><a class="markdownIt-Anchor" href="#reference"></a> reference</h1>
<p><a href="https://gradle.org/releases/" target="_blank" rel="noopener">https://gradle.org/releases/</a></p>
<p><a href="https://www.holaxprogramming.com/2017/07/04/devops-gradle-is-faster-than-maven/" target="_blank" rel="noopener">https://www.holaxprogramming.com/2017/07/04/devops-gradle-is-faster-than-maven/</a></p>
<p><a href="https://blog.naver.com/PostView.nhn?blogId=sharplee7&amp;logNo=221412143968" target="_blank" rel="noopener">https://blog.naver.com/PostView.nhn?blogId=sharplee7&amp;logNo=221412143968</a></p>
<p><a href="https://niceman.tistory.com/99" target="_blank" rel="noopener">https://niceman.tistory.com/99</a></p>
<p><a href="https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per" target="_blank" rel="noopener">https://stackoverflow.com/questions/3092049/intellij-says-cannot-run-program-path-to-tomcat-bin-catalina-sh-error-13-per</a></p>
]]></content>
      <categories>
        <category>SPRING/SPRINGBOOT</category>
      </categories>
      <tags>
        <tag>environment</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>[삼성 SW 역량테스트] 백준 로봇청소기 14503</title>
    <url>/robot-vacuum-cleaner/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 로봇청소기 14503</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>장소 조건</li>
</ul>
<p>로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.</p>
<ul>
<li>로봇청소기의 작동 방식</li>
</ul>
<p>로봇 청소기는 다음과 같이 작동한다.</p>
<ol>
<li>현재 위치를 청소한다.</li>
<li>현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
<ol>
<li>왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.</li>
<li>왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.</li>
<li>네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.</li>
<li>네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.</li>
</ol>
</li>
</ol>
<p>단, 로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.</p>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<ul>
<li>로봇이 북동남서의 방향에 따른 왼쪽 회전의 경우를 잘 생각해주어야 합니다.</li>
<li>로봇이 후진하는 경우에 대해서 좌표값을 잘 이해할 수 있어야합니다.</li>
</ul>
<p>로봇이 왼쪽방향으로 부터 차례대로 탐색을 진행 할 수 있어야 한다.</p>
<p><code>북(0) → 서(3), 서(3) → 남(2), 남(2) → 동(1), 동(1) → 북(0)</code></p>
<p>하나의 예를 들어서 설명해보겠습니다. 첫번째 테스트 케이스를 예로 들어보겠습니다. 현재 방향이 북(0), r = 1, c = 1 의 값을 갖습니다. 현재 (1,1)의 위치에서 북쪽방향을 바라보고있는 로봇청소기 입니다. 로봇청소기가 이제 왼쪽으로 값을 회전시키기 위해서는 어떻게 할 수 있을까요?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>현재 위치가 0번 즉, 북쪽을 바라보고 있습니다. 북쪽을 바라보고 있으면서 이제 로봇청소기가 왼쪽으로 탐색을 진행해야하기때문에 서쪽방향으로 이동할 수 있어야합니다. 그러면 현재 (1,1)의 위치에서 (현재 R 위치-1),(현재 C위치 - 0) 의 방향으로 이동을 시키면 왼쪽으로 이동시킬 수 있겠습니다.</p>
<p>그래서 dx,dy의 값의 기준도 (북→서, 서→남, 남→동, 동→북) 의 형식으로 dx,dy의 값을 기준을 잡았습니다.</p>
<blockquote>
<p>방향 회전</p>
</blockquote>
<p>그러면 이것을 방향회전하는 경우로 바꾸려면 어떻게 진행해야 할까요? 현재 북쪽을 제외한 나머지는 차이가 1이나는것을 확인할 수 있습니다.</p>
<p><code>북(0) → 서(3), 서(3) → 남(2), 남(2) → 동(1), 동(1) → 북(0)</code></p>
<p>이것을 코드로 표현한다면 북쪽을 제외한 나머지는 차이가 d-1만큼 차이가 나게됩니다. 그러면 북쪽의 값은 d-1이 음수가 되는경우 즉, d가 0(북쪽)일 경우 이 값을 3으로 변경해주면 됩니다.</p>
<p>코드에서 표현한 것은</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> next_dir = d<span class="number">-1</span> &lt; <span class="number">0</span> ? <span class="number">3</span> : d<span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p>아래와 같이 표현할 수 있습니다.</p>
<p>또 다른 방식으로는</p>
<p>북쪽을 제외한 값들이 차이가 1이나고 북쪽(0)과 이동하려는 왼쪽의 서쪽값이(3)이 되기때문에 이것을 코드로 표현하면</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> next_dir = (d+<span class="number">3</span>) % <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>의 형태로도 나타낼 수 있습니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">d = (<span class="number">0</span> + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">0</span> 나머지: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">d = (<span class="number">1</span> + <span class="number">3</span> )% <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">d = (<span class="number">2</span> + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = (<span class="number">3</span> + <span class="number">3</span>) % <span class="number">4</span>  </span><br><span class="line"></span><br><span class="line">몫: <span class="number">1</span> 나머지: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>의 형태를 띄기 때문에 이것을 표현한 것과 같습니다.</p>
<blockquote>
<p>방향 후진</p>
</blockquote>
<p>방향 후진의 경우에는 모든 4개의 방향을 탐색하고 나고나서도 청소가 되어있으면 다시 제자리로 돌아와서 후진을 해주면됩니다.</p>
<p>예를 들어서 서쪽 기준으로 (남,동,북,서)를 탐색한다고 생각을 하면 모든 방향이 청소가 되어 있거나 벽일 경우면 다시 제자리 서쪽으로 돌아오게 될 것입니다. 이제 서쪽기준으로 후진을 하게 되면 (1,0) 만큼 후진을 진행하게 될 것입니다. 남쪽 기준으로 탐색을 한다고 하면 다시 남쪽으로 돌아온다면 (0,-1)만큼 후진을 진행하면 됩니다.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> back_dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> back_dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>이와 같이 후진하는 경우에 대해서도 배열형태로 확인을 할 수 있습니다.</p>
<h1 id="soseu-kodeu"><a href="#soseu-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#소스-코드"></a> 소스 코드</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  로봇청소기.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/09.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> back_dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> back_dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX_SIZE][MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> r,c,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 뒤에가 벽이라면 종료 시켜준다.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[r][c] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 현재 위치 청소</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[r][c] == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">map</span>[r][c] = <span class="number">2</span>;      <span class="comment">// 현재 위치 청소</span></span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//int next_dir = d-1 &lt; 0 ? 3 : d-1;</span></span><br><span class="line">        <span class="keyword">int</span> next_dir = (d+<span class="number">3</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> next_x = r + dx[next_dir];</span><br><span class="line">        <span class="keyword">int</span> next_y = c + dy[next_dir];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 빈칸 이면 청소</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[next_x][next_y] == <span class="number">0</span>)&#123;</span><br><span class="line">            dfs(next_x, next_y, next_dir);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 빈칸이 아닐 경우</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            d = next_dir;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4번의 방향을 모두돌고 다시 제자리로 돌아가는것이므로 만약에 0에서 시작해서 3까지 이동해서 모든 값들의 방향이 이동되어서 3일 경우 0의 자리로 돌아가주는것을 생각해주어야한다. 그리고 나서 후진을 한다.</span></span><br><span class="line">    <span class="keyword">int</span> next_x = r + back_dx[d]; <span class="comment">// 기존의 방향대로 회전시켜준다.</span></span><br><span class="line">    <span class="keyword">int</span> next_y = c + back_dy[d];</span><br><span class="line">    dfs(next_x, next_y, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(r,c,d);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>01.Rxjava와 리액티브 프로그래밍</title>
    <url>/reactive-programming-section01/</url>
    <content><![CDATA[<h1 id="what-is-rxjava"><a href="#what-is-rxjava" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#what-is-rxjava"></a> What is RxJava?</h1>
<p>자바(Java)에서 리액티브 프로그래밍(Reactive Programming)을 구현하는데 사용하는 <code>라이브러리</code>입니다.</p>
<p>이벤트 처리와 같은 <code>비동기</code> 처리에 최적화됐으며, <code>2.0버전부터 Reactive Streams 사양을 구현</code>합니다. Reactive Streams 사양을 구현합니다. Reactive Streams는 어떤 라이브러리나 프레임워크라도 데이터 스트림을 비동기로 처리하는 공통 메커니즘을 인터페이스로 제공합니다.</p>
<p>즉, <code>RxJava2.0</code>부터는 Reative Streams API를 의존하고 Reactive Streams를 제외한 다른 라이브러리는 의존하지 않습니다.  RxJava는 <code>함수형 리액티브(Functional Reactive Programming)</code>은 아니지만, 함수형 프로그램의 영향을 받아 함수형 인터페이스를 인자로 전달받는 메서드가 많습니다. 이러한 함수형 인터페이스를 사용하는 메서드들을 조합하면 함수형 프로그래밍을 하는 것 처럼 데이터를 <code>필터링하거나 변환</code>하는 등의 처리를 유연하게 할 수 있습니다.</p>
<h2 id="rxjavayi-jiweon-beojeon"><a href="#rxjavayi-jiweon-beojeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#rxjava의-지원-버전"></a> Rxjava의 지원 버전</h2>
<p><code>Java 6 버전</code> 이상과 <code>안드로이드2.3버전 진저브레드(gingerbread)이상</code>을 지원합니다.</p>
<h2 id="rxjava-gibon-culryeoghaebogi"><a href="#rxjava-gibon-culryeoghaebogi" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#rxjava-기본-출력해보기"></a> RxJava 기본 출력해보기</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxjavaOutput</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Flowable&lt;String&gt; flowable = Flowable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line">        flowable.subscribe(data-&gt; System.out.println(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ceori-sunseo"><a href="#ceori-sunseo" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#처리-순서"></a> 처리 순서</h2>
<ul>
<li>just 메서드 인자로 전달된 데이터를 통지하는 생산자(Flowable)를 생성합니다.</li>
<li>생산자가 데이터를 통지하면 소비자(람다식으로 구현된 함수형 인터페이스) 데이터 출력이 됩니다.</li>
</ul>
<h1 id="what-is-reactive-programming"><a href="#what-is-reactive-programming" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#what-is-reactive-programming"></a> What is reactive programming?</h1>
<p>데이터가 통지될 때마다 관련 프로그램이 반응(reaction)해 데이터를 처리하는 프로그래밍 방식입니다.</p>
<h2 id="example-of-reactive-programming"><a href="#example-of-reactive-programming" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#example-of-reactive-programming"></a> Example of reactive programming</h2>
<p>GPS위치 정보가 변경될 때의 데이터 전송 흐름을 상상해보면 이해하기 쉽습니다. 이동해 위치 정보가 변경될 때마다 데이터를 전송하고 이동을 멈추면 데이터전송을 중지하는 것처럼 생성되는 데이터를 한 번에 보내지 않고 각각의 데이터가 생성될 때마다 순서대로 보냅니다. 이러한 데이터의 흐름을 <code>데이터 스트림(data stream)</code> 이라고 합니다.</p>
<p>이미 생성된 데이터 집합인 <code>리스트(list)</code>같은 <code>컬렉션(collection)</code> 과는 다르게 앞으로 발생할 가능성이 있는 데이터 까지도 포함하는 데이터 집합체 입니다.</p>
<p>데이터 스트림은 이벤트와도 관련이 있어서 문자열을 입력하는 행위는 입력한 데이터가 순서대로 생성하는것으로 생각 할 수 있습니다.</p>
<p>예를 들어, <code>&quot;abc&quot;</code>라고 입력하면 입력 이벤트가 발생할때 다음과 같은 데이터가 생성된다고 생각할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. [a]</span><br><span class="line"><span class="number">2</span>. [ab]</span><br><span class="line"><span class="number">3</span>. [abc]</span><br></pre></td></tr></table></figure>
<p>마찬가지로 버튼을 누르는 행위에 대한 구체적인 데이터가 없더라도 버튼 이벤트와 같은 데이터가 생성된다고 생각할 수 있습니다. 버튼을 여러번 누른다면 <code>누른 횟수만큼 버튼을 누른다</code> 라는 이벤트가 발생할 수 있습니다.</p>
<p>즉, 이벤트도 발생할 때마다 데이터를 전송하는 데이터 스트림으로 다룰 수 있습니다. 데이터 스트림으로 데이터를 전달받은 프로그램이 그때마다 적절히 처리 할 수 있게 구성됐습니다.</p>
<p><strong>⇒ 결론적으로 필요한 데이터를 직접 가져와 처리하는것이 아니라 보내온 <code>데이터</code>를 <code>받은 시점에 반응</code>해 이를 처리하는 프로그램을 만드는것이 리액티브 프로그래밍입니다.</strong></p>
<p>또 다른 예로, 상품가격과 부가가치세 세율로 부가가치세를 계산하는 프로그램이 있다고 할때, 리액티브 프로그래밍이 아니라면 상품가격과 부가가치세 세율을 얻는 것만으로는 어떤 일도 일어나지 않습니다.</p>
<p>값을 얻은 후에 <code>부가가치세를 계산한다</code> 라는 <code>행위(action)</code>이 이루어져야 비로소 부가 가치세를 계산합니다. 또한, 부가 가치세를 계산한 후 상품가격이 변경되더라도 다시 계산처리 <code>행위</code>가 이루어지지 않는 한 부가가치세는 변경되지 않습니다.</p>
<h2 id="riaegtibeu-peurogeuraemingi-anilddae"><a href="#riaegtibeu-peurogeuraemingi-anilddae" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#리액티브-프로그래밍이-아닐때"></a> 리액티브 프로그래밍이 아닐때</h2>
<ol>
<li>입력한다</li>
<li>버튼이 눌린다</li>
<li>계산 결과를 표시한다</li>
</ol>
<p>상품 가격이 바뀌어도 세금계산 버튼을 누르지 않으면 부가가치세가 바뀌지 않는다.</p>
<h2 id="riaegtibeu-peurogeuraemingil-ddae"><a href="#riaegtibeu-peurogeuraemingil-ddae" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#리액티브-프로그래밍일-때"></a> 리액티브 프로그래밍일 때</h2>
<ol>
<li>입력한다</li>
<li>입력한 내용을 통지한다</li>
<li>통지를 받아 계산하고 결과를 표시한다</li>
</ol>
<p>상품가격이 바뀔 때마다 부가가치세가 자동으로 계산된다.</p>
<hr>
<p>상품 가격 변동을 감지하는 <code>리스너(listener)</code>를 이용해 자동으로 부가가치세를 계산하는 프로그램과 어떤 차이가 있는지 의문이 생길 수 있습니다.</p>
<p>예를 들어, 상품가격이 변경 될때 반응하면서 상품가격에 해당하는 부가가치세를 다시 계산해 표시하는 것을 리액티브 프로그래밍이라 할 수 없습니다.</p>
<p><code>리스너(listener)가 반응</code>하면서 부가가치세 항목에 <code>새로운 데이터가 전달되고 부가가치세 항목에서 계산 프로그램을 실행해 결과를 부가가치세로 표시</code>한다고 생각하면 리액티브 프로그래밍이라고 할 수 있습니다.</p>
<p>⇒ 리액티브 프로그래밍에서 데이터를 생산하는 측이 데이터를 전달하는것까지 책임집니다. 데이터를 생산하는측(상품가격)은 데이터를 전달하는것까지 책임집니다.  그러므로 데이터를 생산하는 측은 데이터를 소비하는 측(예 부가가치세)이 전달 받은 데이터로 무엇을 하는지 관여하지 않아도 됩니다.</p>
<p>데이터를 생산하는 측은 데이터를 소비하는 측에 무엇을 하든지 관계가 없으므로 <code>소비하는 측의 처리를 기다릴 필요가 없습니다.</code> 그러므로 데이터를 통지한 후 데이터를 소비하는 측에서 <code>데이터를 처리하는 도중</code>이라도 데이터를 생산하는 측은 <code>바로 다음 데이터를 처리</code> 할 수 있습니다.</p>
<h2 id="siseutem-gucugyi-gwanjeom"><a href="#siseutem-gucugyi-gwanjeom" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#시스템-구축의-관점"></a> 시스템 구축의 관점</h2>
<p>리액티브 프로그래밍은 <code>마이크로서비스(Miscroservice)</code>와 같이 분산 시스템으로 프로그램을 구현하는데 적합해 최근 주목을 받고 있습니다.</p>
<p><code>리액티브 프로그래밍(Programming)</code>과 <code>리액티브 시스템(System)</code>으로 부르지 않고 리액티브 시스템이 리액티브 프로그래밍으로 구현된 시스템을 의미하지 않기 때문입니다.</p>
<h2 id="riaegtibeu-siseutemiran"><a href="#riaegtibeu-siseutemiran" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#리액티브-시스템이란"></a> 리액티브 시스템이란?</h2>
<p>메시지를 보내 데이터를 처리하고 상황에 따라 스케일 아웃(scale out)과 스케일 인(scale in)을 자동으로 수행해 장애 내성을 높임으로써 항상 <code>빠르게 수용</code>할 수 있는 시스템을 말합니다.(인프라 조건+)</p>
<h1 id="rxjavayi-gaeyo"><a href="#rxjavayi-gaeyo" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#rxjava의-개요"></a> RxJava의 개요</h1>
<p>에릭마이어가 개발한 .net 프레임워크의 실험적인 라이브러리인 Reactive Extensions 를 줄여서 2009년 마이크로소프트에서 공개하고 2013년 넷플릭스가 자바로 이식한 것이 Rxjava의 시작입니다.</p>
<p>현재 Reative Extensions를 다루는 라이브러리는 <code>ReactiveX</code> 라는 오픈소스 프로젝트로 바뀌어 Java, .Net, javascript, Swift 등 여러 프로그래밍 언어를 지원하고 있습니다.</p>
<p><code>RxJava 1.x버전</code> 때는 자바에 Reactive Extensions를 이식하는 개발이 진행됐고, 리액티브 프로그래밍 개념이 널리 알려지면서 Reactive Extensions와 별도로 여러 업체와 단체에서 데이터 스트림을 비동기로 다루는 라이브러리와 프레임워크를 출시하였습니다.</p>
<p>라이브러리, 프레임워크 차이로 단체들이 데이터 스트림을 비동기로 다루는 최소한의 API를 정하고 제공했습니다. <code>2015년 4월 자바기반의 Reactive Streams for JVM</code> 버전이 <code>1.0.0</code>을 릴리즈하게 되었습니다.</p>
<p><code>Rxjava 1.x버전</code>때는 Reative Streams를 지원하지 않았지만, <code>Rxjava 2.x버전</code>때는 Reative Streams를 지원하여 2016년 10월에 Rxjava2.0이 릴리즈 되었습니다. Rxjava2.0버전부터 내부를 완전히 새롭게 구현하여 성능개선과 배압(back pressure) 사양에 따라 사용하는 API가 변경됐습니다.</p>
<p>그리고, Rxjava 1.x버전에서 2.x버전으로 전환할 때는 API 변경 작업도 반영해야 하므로 2.x버전으로 간단하게 전환할 수가 없습니다. 그 이유는 <code>내부구현을 모두 바꾸었기 때문입니다.</code></p>
<ul>
<li>버전별 루트 패키지</li>
</ul>
<table>
<thead>
<tr>
<th>버전</th>
<th>패키지</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.x</td>
<td>rx</td>
</tr>
<tr>
<td>2.x</td>
<td>io.reactivex</td>
</tr>
</tbody>
</table>
<p>따라서, RxJava의 두 버전을 같은 프로젝트에 함께 사용할 수는 있으나 프로젝트 내부에서 Rxjav에 의존하는 다른 라이브러리를 사용한다면 라이브러리가 어떤 버전을 지원하느냐에 따라 두 버전을 함께 사용하지 못할 수도 있습니다.</p>
<ul>
<li>두 버전을 사용하는것은 바람직 하지 않습니다.</li>
</ul>
<p>Rxjava의 실험적인 API가 있습니다. 해당 에너테이션이 붙어 있는것은 <code>개발중이거나 실험중인 API</code>입니다.</p>
<ul>
<li>@Beta @Experimental</li>
</ul>
<p>추가로 <code>io.reactivex.internal</code>로 시작하는 패키지에 있는 클래스는 <code>Rxjava 내부</code>에서 기본으로 사용하는 클래스입니다. 가능하면 클래스에 의존하지 않는 편이 더 낫습니다.</p>
<h1 id="rxjavayi-teugjing"><a href="#rxjavayi-teugjing" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#rxjava의-특징"></a> RxJava의 특징</h1>
<p>Rxjava는 디자인 패턴인 옵저버(Observer)패턴을 잘 확장했습니다.</p>
<h2 id="objeobeopaeteoniran"><a href="#objeobeopaeteoniran" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#옵저버패턴이란"></a> 옵저버패턴이란?</h2>
<p>감시 대상 객체의 상태가 변하면 이를 관찰하는 객체에 알려주는 구조입니다. 이 패턴의 특징을 살리면 데이터를 생성하는 측과 데이터를 소비하는 측으로 나눌 수 있습니다.</p>
<p>또한, 옵저버패턴에 완료와 에러통지를 할 수 있어서 모든 데이터 통지가 끝나거나 에러가 발생하는 시점에 별도로 대응해줄수도 있습니다.</p>
<h2 id="bidonggi-ceori"><a href="#bidonggi-ceori" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#비동기-처리"></a> 비동기 처리</h2>
<p>Rxjava의 또 다른 특징으로 쉬운 비동기 처리를 들 수 있습니다. Reactive Streams 규칙의 근간이 되는 <code>Observable규약</code> 이라는 Rxjava개발 가이드라인을 따른 구현이라면 직접 스레드(thread)를 관리하는 번거로움에서 해방되고 구현도 쉽게 가능합니다. 또한, 동기 처리나 비동기 처리나 구현 방법에는 큰 차이가 없는 것도 Rxjava의 특징입니다.</p>
<p>RxJava는 함수형 프로그래밍의 영향을 받아 함수형 인터페이스로 인자를 전달받는 메서드를 사용해 대부분의 처리를 구현합니다. 입력과 결과만 정해져 있으면 구체적인 처리는 개발자에게 맡길 수 잇으므로 더욱 자유로운 구현이 가능합니다.</p>
<h2 id="hamsuhyeong-peurogeuraemyi-weoncig"><a href="#hamsuhyeong-peurogeuraemyi-weoncig" class="header-anchor">4.3. </a><a class="markdownIt-Anchor" href="#함수형-프로그램의-원칙"></a> 함수형 프로그램의 원칙</h2>
<ul>
<li>처리 작업의 영향 범위를 좁힐 수 있고 동시에 복잡하지않게 비동기 처리를 할  수 있습니다.</li>
</ul>
]]></content>
      <categories>
        <category>RXJAVA</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>리액티브프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>[삼성 SW 역량테스트] 백준 연구소 14502</title>
    <url>/beakjoon-laboratory-14502/</url>
    <content><![CDATA[<h1 id="munje-ringkeu"><a href="#munje-ringkeu" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#문제-링크"></a> 문제 링크</h1>
<p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">삼성 SW 역량테스트 기출 백준 연구소 14502</a></p>
<h1 id="munje-jogeon"><a href="#munje-jogeon" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#문제-조건"></a> 문제 조건</h1>
<ul>
<li>연구소는 크기가 <code>N×M</code>입니다.</li>
<li>연구소에서 <code>빈곳 0, 벽 1, 바이러스 2</code>의 값이 주어지게 됩니다.</li>
<li>벽을 3개만 세운 뒤 바이러스가 퍼질 수 없는 안전영역의 최댓값을 구하는 문제입니다.</li>
<li>지도의 세로 크기 N과 가로 크기 M (3 ≤ N, M ≤ 8)</li>
</ul>
<h1 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h1>
<p><code>0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</code> 라는 조건이 있는 문제입니다.</p>
<p>이 문제를 풀때 가장 중요한점은 DFS로 접근해야 하는가? BFS로 접근해야 하는가를 많이 고민하였던 문제였습니다.</p>
<p>Basement  조건이 <code>벽을 3개</code> 세울 때 조합의 경우의 수를 사용하기 위해서 DFS를 사용하였으며, 연구소에서 바이러스들이 전염시키는 과정은 BFS로 풀이를 진행하였습니다.</p>
<ul>
<li>값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 됩니다.</li>
<li>빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</li>
<li>DFS 에서의 수행은 빈칸의 개수가 기준이 되므로 empty_size를 선언해서 받아오게 하였습니다.</li>
<li>CNT 값이 3일 경우 3개의 벽을 모두 세운 경우이므로 기존의 값은 변화가 되면 안되기때문에 맵을 Copy시켜줍니다.</li>
<li>이제 BFS를 수행하기위해 각각의 경우에 있어서 Check변수가 1일 경우에만 벽을 세워주게 됩니다.</li>
<li>바이러스가 전파시에 <code>현재 바이러스의 값 2</code>인 좌표 (x,y)의 점을 기준으로 <code>BFS</code>를 수행합니다.</li>
<li>모든 BFS경우를 돌고나서 아직 전염되지 않은 값이 있는곳이 <code>안전지대</code>입니다. 그 곳의 값을 <code>safe_size 카운팅</code> 시켜줍니다.</li>
<li>각 경우마다 안전영역의 최대의 값을 구해주어야하므로 최댓값을 갱신시켜줍니다.</li>
<li>각 경우마다 경우의 수가 달라지므로 visited 변수를 초기화 시켜줍니다.</li>
</ul>
<blockquote>
<p>즉, DFS 반복 → basement 확인 → BFS (x,y)좌표로 부터 바이러스 전염 → 안전영역의 최댓값</p>
</blockquote>
<h1 id="puli-kodeu"><a href="#puli-kodeu" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이-코드"></a> 풀이 코드</h1>
<blockquote>
<p>C++</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  연구소14502.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-ps</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 2020/09/07.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> copy_map[MAX][MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; empty;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> empty_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> check[MAX*MAX];     <span class="comment">// size를 MAX * MAX를 해준이유는 빈칸이 N*M까지 나올 수 있기 때문입니다.</span></span><br><span class="line"><span class="keyword">int</span> visited[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    visited[x][y] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = q.front().first;</span><br><span class="line">        <span class="keyword">int</span> dy = q.front().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = dx + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[mx][my] == <span class="number">0</span> &amp;&amp; copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    visited[mx][my] = <span class="number">1</span>;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    q.push(&#123;mx,my&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">        <span class="comment">// 기존의 맵을 변경시키면 안되기때문에 값을 카피시켜줍니다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 벽을 세우기 하나의 경우마다의 벽을 세워야함.</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;empty_size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = empty[i].first;</span><br><span class="line">                <span class="keyword">int</span> y = empty[i].second;</span><br><span class="line">                copy_map[x][y] = <span class="number">1</span>;</span><br><span class="line">                count +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// virus 전염시키기</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;virus.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = virus[i].first;</span><br><span class="line">            <span class="keyword">int</span> y = virus[i].second;</span><br><span class="line">            bfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> safe_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe_size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans &lt; safe_size)&#123;</span><br><span class="line">            ans = safe_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 조합의 형식으로 3개가 뽑힐때까지 뽑았다가 종료되는 시점에 그 값을 다시 false로 만들고 다시 조합의 경우를 뽑습니다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;empty_size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(i, cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 값을 입력받고 빈칸과 바이러스의 좌표를 담고 있는 벡터에 해당 값들을 넣어주게 된다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 0: 빈칸</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                empty.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2: 바이러스</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                virus.push_back(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 빈칸을 기준으로 DFS를 수행한다. 따라서,조합의 경우라고 생각하면 됩니다. N(빈칸의 개수중)에서 3개를 뽑는 경우의 수라고 생각을 합니다.</span></span><br><span class="line">    empty_size = empty.<span class="built_in">size</span>();</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JAVA</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 연구소 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] copy_map;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Dot&gt; virusList = <span class="keyword">new</span> ArrayList&lt;Dot&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir =&#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wallDfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// map Copy</span></span><br><span class="line">            copyMapFunc();</span><br><span class="line">            <span class="comment">// virus spread</span></span><br><span class="line">            <span class="keyword">for</span>(Dot dot : virusList)&#123;</span><br><span class="line">                virusSpreadBfs(dot.x, dot.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// safe Area</span></span><br><span class="line">            ans = Math.max(ans, getSafeArea());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n * m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i / m;</span><br><span class="line">            <span class="keyword">int</span> y = i % m;</span><br><span class="line">            <span class="keyword">if</span>(map[x][y] == <span class="number">1</span> || map[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map[x][y] = <span class="number">1</span>;</span><br><span class="line">            wallDfs(i+<span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">            map[x][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 맵 카</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyMapFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                copy_map[i][j] = map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 바이러스 퍼트리기</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">virusSpreadBfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> my = y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mx &gt;= <span class="number">0</span> &amp;&amp; mx &lt; n &amp;&amp; my &gt;= <span class="number">0</span> &amp;&amp; my &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[mx][my] == <span class="number">0</span>)&#123;</span><br><span class="line">                    copy_map[mx][my] = <span class="number">2</span>;</span><br><span class="line">                    virusSpreadBfs(mx,my);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 안전영역 개수 체크</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSafeArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> safe = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copy_map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    safe += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> safe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    4 6</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">    1 0 0 0 0 2</span></span><br><span class="line"><span class="comment">    1 1 1 0 0 2</span></span><br><span class="line"><span class="comment">    0 0 0 0 0 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">        n = Integer.parseInt(st.nextToken());</span><br><span class="line">        m = Integer.parseInt(st.nextToken());</span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        copy_map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                    virusList.add(<span class="keyword">new</span> Dot(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        wallDfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW역량테스트</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>삼성SW역량테스트</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연산자끼워넣기2 15658</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%97%B0%EC%82%B0%EC%9E%90%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B02-15658/</url>
    <content><![CDATA[<p><a href="https://www.acmicpc.net/problem/15658" target="_blank" rel="noopener">연산자끼워넣기(2)15658</a></p>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<blockquote>
<p>DFS</p>
</blockquote>
<ul>
<li>재귀호출로 백트래킹으로 구해줍니다.</li>
<li>연산자끼워넣기 1번문제와 같은 원리입니다. 정답 또한 같습니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<blockquote>
<p>DFS 백트래킹</p>
</blockquote>
<ul>
<li>맨처음 dfs(v,1,v[0],plus,minus,multi,div); 호출할 때 왜 idx = 1로 시작하고, sum의 값을 v[0]의 값을 넘겨주는가에 대한 의문을 갖고 계신분들이 있습니다. idx를 1로 시작한 이유는 곱하기나, 나눗셈의 경우에서 sum의 값이 0일 경우 올바르지 않은 값이 연산되게 됩니다. 따라서, v[0] (+, -, *, /) v[1] 의 형태로 연산이 되게 됩니다. 따라서 올바른 값을 구할 수 있습니다. 곰곰히 생각해보시면 어떤 말씀인지 알 것이라 생각합니다.</li>
<li>입력받은 plus,minus,multi,div의 개수를 0보다 클 경우에는 계속해서 재귀호출을 합니다.</li>
<li>시간복잡도 계산 총 연산자(+,-,*,/) 4개의 연산자이고, 총 N은 (2&lt;=N&lt;=11) 11까지 이므로 4^10 = 1048570의 복잡도를 가지게 됩니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>만약 v.size() == idx 모든 원소의 개수를 확인하였을 경우에 현재 sum값을 res 벡터에 값을 넣어줍니다. 그 후 <code>auto p = minmax_element(res.begin(), res.end());</code>를 사용하여 최댓값과 최솟값을 구해주게 됩니다. 이렇게 구하지 않고도 문제의 조건에서보면  <code>최댓값과 최솟값이 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다</code> 라는 조건이 있습니다.<br>
이러한 것들에 따라 값을 max함수와 min함수를 사용하면서 최댓값과 최솟값을 구해줍니다.<br>
다른분들의 풀이를 보니 이런식으로 사용하시는것을 보고 배우게 되었습니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxResult = -MAX, minResult = MAX;</span><br><span class="line"> maxResult = <span class="built_in">max</span>(maxResult, sum);</span><br><span class="line"> minResult = <span class="built_in">min</span>(minResult, sum);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; maxResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; minResult &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-puli"><a href="#dfs-baegteuraeking-puli" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-풀이"></a> DFS 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  12_백준_연산자끼워넣기2_15658.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> sum, <span class="keyword">int</span> idx, <span class="keyword">int</span> plus, <span class="keyword">int</span> minus, <span class="keyword">int</span> multi, <span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        res.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum+v[idx],idx+<span class="number">1</span>, plus<span class="number">-1</span>,minus,multi,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum-v[idx],idx+<span class="number">1</span>, plus,minus<span class="number">-1</span>,multi,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum*v[idx],idx+<span class="number">1</span>, plus,minus,multi<span class="number">-1</span>,div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,sum/v[idx],idx+<span class="number">1</span>, plus,minus,multi,div<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">int</span> plus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> multi=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cal=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cal;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            plus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            minus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            multi = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            div = cal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(v, v[<span class="number">0</span>],<span class="number">1</span>,plus, minus, multi, div);</span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">" "</span> &lt;&lt;  *p.first;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>DFS</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 퇴사 14501</title>
    <url>/%EB%B0%B1%EC%A4%80%ED%87%B4%EC%82%AC14501/</url>
    <content><![CDATA[<h2 id="baegjuntoesa14501"><a href="#baegjuntoesa14501" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준퇴사14501"></a> <a href="https://www.acmicpc.net/problem/14501" target="_blank" rel="noopener">백준퇴사14501</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>백트래킹 재귀호출</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>맨 처음에 조합으로 next_permutation을 사용해서 해당 T[i]만큼 false를 만들면서 오는 경우를 찾으면 어떨까 라고 생각하였지만, 직감적으로 쉽지않다는것을 느꼈습니다. 그래서 재귀함수로 풀어보자 라는 생각으로 풀게되었습니다.</li>
<li>이 부분이 가장 중요한 부분입니다. 재귀 백트래킹으로 <code>idx==n+1</code>과 같을때 <code>basement 정답을 찾았을 경우를 확인</code>하였습니다. 그리고 idx값이 n+1보다 클 경우 조건에 퇴사할 수 없으므로 <code>return으로 종료</code>시켜주었습니다.</li>
<li>기존것과 다르게 이것은 선택할지 말지에 대한 경우를 잘 확인해주어야합니다. 예를 들면, [1,2,3,4,5]라는 T배열이있다고 가정하면 1,2,3,4,5라는 값을 모두 사용하는것이 아니라 날짜가 <code>n+1과 같은경우</code>를 찾는 경우이기 때문에 1,2,3,4,5라는 값을 모두 사용할 수 있고, 최소 하나이상의 값만 사용할 수 있습니다.</li>
<li>너무 습관적으로 for문안에다가 재귀함수를 호출하였는데, 이 문제는 조합이나 순열문제가 아니라 말그대로 브루트포스문제였습니다. for을 작성하게 되면 1,2,3,4,5의 모든 값에 대한 경우의 수를 확인하는것입니다. 익숙함에 속아버렸습니다.</li>
<li>dfs를 호출할때 이것도 무의식적으로 <code>dfs(0,0)</code>을 호출하였는데, 문제의 조건에서 보면 <code>최소 1일</code>부터이기 때문에 초기조건을 1부터 시작하였습니다.<code>idx는 상담일 day와 같습니다.</code></li>
<li>최대값을 찾아주는것은 max_num이라는 변수를 활용하여서 그때마다 비교해서 업데이트를 해주었습니다. max_elements를 사용할 수도 있었지만, 빠르게 비교해주기위해서 이런 로직을 사용하였습니다.</li>
</ul>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="baegteuraeking-dfs"><a href="#baegteuraeking-dfs" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#백트래킹-dfs"></a> 백트래킹 DFS</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  11_백준_퇴사_14501.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 17/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max_num)&#123;</span><br><span class="line">            max_num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(sum+P[idx], idx+T[idx]);</span><br><span class="line">    dfs(sum,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; T[i] &gt;&gt; P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>혹시라도 0,1에서 왜 시작하는거지? 라는 의문이 있으신분은 아래와 같이 구현하여도 상관은 없습니다. 단지 문제의 조건에 부합시키기 위해 위와 같이 작성한것 뿐입니다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  11_백준_퇴사_14501.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 17/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx == n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max_num)&#123;</span><br><span class="line">            max_num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(sum+P[idx], idx+T[idx]);</span><br><span class="line">    dfs(sum,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; T[i] &gt;&gt; P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 부분수열의합 1182</title>
    <url>/%EB%B0%B1%EC%A4%80%EB%B6%80%EB%B6%84%EC%88%98%EC%97%B4%EC%9D%98%ED%95%A91182/</url>
    <content><![CDATA[<h2 id="baegjun-bubunsuyeolyihab-1182"><a href="#baegjun-bubunsuyeolyihab-1182" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-부분수열의합-1182"></a> <a href="https://www.acmicpc.net/problem/1182" target="_blank" rel="noopener">백준 부분수열의합 1182</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>재귀호출 사용, 조합 사용</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>next_permutation을 사용한 조합을 이용한 풀이 방법 1<br>
순열과 조합중 조합을 사용하여 각각의 부분집합의 경우를 모두 구해준다. 하나씩 check변수에 모든 값을 true로 바꾸어준 후, 맨 앞에 있는 값들을 false로 바꾸면서 모든 부분집합의 경우를 구해준다.</p>
</li>
<li>
<p>재귀함수 백트래킹을 이용한 풀이 방법 2</p>
</li>
</ul>
<ol>
<li><code>m == 0 일때 공집합</code>을 빼주어야한다. 양수라고 하였음. 정수에서 양수의 크기만 가지므로 공집합은 제외해야함</li>
<li>int cnt = 0;의 값이 계속초기화된다고 할 수 있지만, 결과값 반환할때는 그값이 더해진값만 반환된다.</li>
<li><strong>경우의 수</strong> 의 문제임 따라서, 그값이 1로반환되어 한번의 경우의수 0번의 경우의수를 반환하여 더해가다보면 최종 경우의 수를 반환하게 된다.</li>
<li>정답일 경우는 sum == m이 같고, cnt ==값이 5개일때만 가능하다.</li>
<li>비정답일 경우는 sum == m이 아닌경우에 cnt==값이 5개 일경우는 불가능하다.<br>
예를 들면, 도달했지만 값이 다를 수 있음 반례임</li>
</ol>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<p>재귀 백트래킹 풀이 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> n,<span class="keyword">int</span> m, <span class="keyword">int</span> idx, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ans.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            s += ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == m)&#123;</span><br><span class="line">            cnt +=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        ans.push_back(v[i]);</span><br><span class="line">        dfs(v,n,m,i,sum);</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,n,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>재귀 백트래킹 풀이 2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> m, <span class="keyword">int</span> cnt,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 합이 m과 같을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">            ans +=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,m,cnt+<span class="number">1</span>,sum+v[cnt]);</span><br><span class="line">    dfs(v,m,cnt+<span class="number">1</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//공집합 빼주기</span></span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">        ans -=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>next_permutation 조합 풀이</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">bool</span> check[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[j] != <span class="literal">true</span>)&#123;</span><br><span class="line">                    sum += v[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">                cnt +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(check,check+n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>백트래킹</tag>
        <tag>조합</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 암호만들기 1759</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%95%94%ED%98%B8%EB%A7%8C%EB%93%A4%EA%B8%B01759/</url>
    <content><![CDATA[<h2 id="baegjunamhomandeulgi1759"><a href="#baegjunamhomandeulgi1759" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준암호만들기1759"></a> <a href="https://www.acmicpc.net/problem/1759" target="_blank" rel="noopener">백준암호만들기1759</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li><code>Recursive</code>를 활용한 풀이 <code>백트래킹 두가지 방법</code>으로 풀겠습니다.</li>
<li>include<algorithm>헤더에 sort함수를 사용하겠습니다. 그 이유는 사전식으로 가능성 있는 암호를 모두 출력한다. 라는 조건이 있기 때문입니다.</algorithm></li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>
<p>조합의 방식으로 풀어야합니다. 어떻게 조합으로 풀어야된다는 생각을 하였을까요? 문자의 종류는 C가지, 암호는 서로 다른 L개의 알파벳 소문자들로 구성된다고 문제에 나와있다. 이것이 뜻하는 바는 바로 <code>C개의 문자중 L개를 뽑는 방식이다</code> 결국 조합을 나타내는 문제라는 것입니다.</p>
</li>
<li>
<p>백트래킹을 푸는 방식은 두가지 방법이 있습니다. 개인마다 풀이의 차이이긴 하나 개인적으로 1번풀이로 진행합니다.</p>
</li>
</ul>
<ol>
<li>vector와 check변수를 활용한 풀이</li>
<li>vector 알파벳을 선택하는 recursive(), 알파벳을 선택하지 않는 recursive()</li>
</ol>
<ul>
<li>
<p>재귀함수 호출시 <code>idx변수와 cnt변수</code>를 사용합니다. <code>Idx변수는 시작점을 결정해주는 변수</code>, <code>cnt는 몇 개를 뽑아야하는지 그리고 재귀 호출 종료 해당 basement 조건</code>이 됩니다.</p>
</li>
<li>
<p>그리고, 조합은 순열과 다르게 해당 지정된 idx값 이하의 값들은 구성하지 않습니다. 예를 들어, <code>123 213 312</code> 는 <code>모두 동일한 경우</code>로 생각합니다. 조합을 구현하기 위해서는 check배열변수와 알파벳을 담기위한 vector<char>를 선언합니다.</char></p>
</li>
<li>
<p>해당값이 사용되었더라면 <code>check[i] == true로 확인하여 continue</code>를 진행합니다. 그리고 나서 다음 반복문 수가 진행되면서 해당값이 사용되지 않았다면 해당 값을 <code>check=true</code>를 진행하고, vector에 해당되는 알파벳을 <code>push_back</code>을 해주게됩니다. 그리고나서 재귀호출을 하면서 cnt+1의 값을 해주며 idx의 값은 i의 값을 넣어주면서 진행합니다. cnt값은 내가 고를 값이며, <code>idx의 값은 해당 기준이 되는 값이기때문에 반복문을 돌면서 해당값에 대한 재귀호출</code>을 반복하게 하게됩니다.</p>
</li>
<li>
<p>만약 cnt의 값이 내가 구하고자하는 n의 값과 같다면 해당 경우를 구한것이기 때문에 실질적인 로직을 작성합니다.</p>
</li>
<li>
<p><code>알파벳은 자음 21가지, 모음 [a,e,i,o,u] 5가지</code>로 구성됩니다. 따라서, push_back으로 넣었던 vector의 값을 하나씩 꺼내면서 해당 알파벳이 <code>[a,e,i,o,u]</code>중에 하나 일 경우 모음에 대한 개수를 증가시켜주고, 이와반대로 자음일 경우 자음의 개수를 증가시켜줍니다.</p>
</li>
<li>
<p>모음의 개수는 1이상이여야하고, 자음의 개수는 2이상이여야합니다. 만약 이 해당되는 조건에 만족한다면 해당 vector에 있는 값을 모두 출력시켜주게 됩니다.</p>
</li>
<li>
<p>그리고, Return값으로 해당 재귀함수가 종료되고나서 check=false로 방문을 해제시키고, 마지막에 들어있던 벡터값도 빼주게 됩니다. 그리고나서 다음에 해당하는 경우의 수로 재귀함수가 호출되면서 조합에 대한 모든경우를 구할 수 있게됩니다.</p>
</li>
<li>
<p><code>idx변수는 해당 기준이 되는점이고, cnt는 해당종료 조건(몇개를 뽑을지 조건)입니다.</code></p>
</li>
<li>
<p><code>2번 백트래킹방식으로 사용할 경우 선택한 경우, 선택하지 않은경우를 cnt값을 더해주는지 안더해주는지 경우로 나누어서 재귀호출이 진행되게 됩니다. 2번방식은 개인적으로 직관적인 판단하기가 힘들고 1번방식이 직관적인 이해가 더 쉬웠습니다.</code></p>
</li>
<li>
<p><code>조합과 반대로 순열은 idx변수가 사라지게 됩니다. 왜냐하면 기준이 되는점을 확인해야합니다. 예를 들어서 [1,2,3,4,5] [2,1,3,4,5]는 조합과 다르게 다른경우의 수로 나타냅니다. 조합은 저것을 하나의 경우의수로 판단하기 때문입니다. 그리고 순열은 idx를 사용하지 않으므로 해당되는 모든값에 첫번째 값부터 다시 확인을 진행한다는 차이점이 있습니다.</code></p>
</li>
</ul>
<h3 id="dfs-baegteuraeking-1beon-bangsig"><a href="#dfs-baegteuraeking-1beon-bangsig" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-1번-방식"></a> DFS 백트래킹 1번 방식</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; str;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ja = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'a'</span> || str[i] == <span class="string">'e'</span> || str[i] == <span class="string">'i'</span> || str[i] == <span class="string">'o'</span> ||str[i] == <span class="string">'u'</span>)&#123;</span><br><span class="line">                mo +=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ja +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mo &gt;=<span class="number">1</span> &amp;&amp; ja &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        str.push_back(v[i]);</span><br><span class="line">        dfs(v,m,n,i,cnt+<span class="number">1</span>);</span><br><span class="line">        str.pop_back();</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    dfs(v,m,n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-2beonbangsig"><a href="#dfs-baegteuraeking-2beonbangsig" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-2번방식"></a> DFS 백트래킹 2번방식</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">string</span> str, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(str.length() == n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ja=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mo=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'a'</span> || str[i] == <span class="string">'e'</span>|| str[i] == <span class="string">'i'</span> || str[i] == <span class="string">'o'</span> || str[i] == <span class="string">'u'</span>)&#123;</span><br><span class="line">                mo +=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ja +=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mo &gt;= <span class="number">1</span> &amp;&amp; ja &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v.<span class="built_in">size</span>() == idx)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//알파벳 선택 하는 경우</span></span><br><span class="line">    dfs(v,n,m,str+v[idx],idx+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//알파벳 선택 하지 않는 경우</span></span><br><span class="line">    dfs(v,n,m,str,idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    dfs(v,n,m,<span class="string">""</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 연산자끼워넣기 14888</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%97%B0%EC%82%B0%EC%9E%90%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B014888/</url>
    <content><![CDATA[<h2 id="yeonsanjaggiweoneohgi14888"><a href="#yeonsanjaggiweoneohgi14888" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#연산자끼워넣기14888"></a> <a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">연산자끼워넣기14888</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<blockquote>
<p>next_permutation</p>
</blockquote>
<ul>
<li>값을 저장 시킬 vector<int> v;</int></li>
<li>연산자의 개수를 1,2,3,4 의 값으로 넣을 vector<int> cal;</int></li>
<li>#include<algorithm>헤더에 minmax_element으로 최대값과 최소값 구해줍니다.</algorithm></li>
</ul>
<hr>
<blockquote>
<p>DFS</p>
</blockquote>
<ul>
<li>재귀호출로 백트래킹으로 구해줍니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<blockquote>
<p>next_permutation</p>
</blockquote>
<ul>
<li>n을 입력받아 수를 v에 입력을 받아줍니다.</li>
<li><code>+, -, *, /</code>의 개수를 확인해서 cal 변수에 1,2,3,4를 나누어서 넣어줍니다. 예를 들면, 2 0 1 0 일경우 +의 개수는 2개이므로 1을 두번넣어주고, *의 개수는 1개이므로 3을 한번넣어주고 해당 cal 벡터에는 [1, 1, 3]이 됩니다.</li>
<li>cal에 담긴 벡터를 next_permutation을 돌려주면서 순열값 모든경우의 수를 구해줍니다.</li>
<li>cal값이 1일 경우 + , 2일경우 -, 3일 경우 *, 4일 경우 / 의 연산대로 조건을 처리해줍니다.</li>
<li>이때, sum = v[0]을 해준이유는 순차적으로 계산을 진행해야하므로 가장 맨처음에 존재하는 값을 sum에 담고 시작하였습니다. 연산자의 개수는 수의 N-1개이기때문에 미리 sum에 값을 넣어주었습니다. 예를 들면 10 + 20를 연산해야 한다고 할 경우 sum = 10을 두고 sum + 20으로 연산을 처리하기위해서 입니다.</li>
<li>조건에 보면 <code>식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 합니다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다.</code>을 해주어야하므로 sum의 값이 음수일 경우 sum = -sum 으로 양수 값을 변경하고, sum = (sum / v[i]) 을 계산해준 후 다시 음수값으로 변경하였습니다. sum이 양수일 경우 sum = (sum / v[i])로 로직대로 처리하였습니다.</li>
<li>minmax_element를 사용하여 max, min값을 동시에 구하였습니다. <code>auto p = minmax_element(ans.begin(), ans.end());</code>의 형식으로 최대값과 최소값을 모두 구할 수 있습니다. *p.second는 최소값, *p.first는 최대값입니다.</li>
</ul>
<h2 id="haedang-yeonsanjae-gajungcireul-buyeohayeo-geu-gabse-ddara-sunyeoleul-tonghae-modeungyeonguyi-sureul-guhaneungeosi-ki-pointeuyeossseubnida"><a href="#haedang-yeonsanjae-gajungcireul-buyeohayeo-geu-gabse-ddara-sunyeoleul-tonghae-modeungyeonguyi-sureul-guhaneungeosi-ki-pointeuyeossseubnida" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#해당-연산자에-가중치를-부여하여-그-값에-따라-순열을-통해-모든경우의-수를-구하는것이-키-포인트였습니다"></a> 해당 +,-,*,/ 연산자에 가중치를 부여하여 그 값에 따라 순열을 통해 모든경우의 수를 구하는것이 키 포인트였습니다.</h2>
<blockquote>
<p>DFS 백트래킹</p>
</blockquote>
<ul>
<li>맨처음 dfs(v,1,v[0],plus,minus,multi,div); 호출할 때 왜 idx = 1로 시작하고, sum의 값을 v[0]의 값을 넘겨주는가에 대한 의문을 갖고 계신분들이 있습니다. idx를 1로 시작한 이유는 곱하기나, 나눗셈의 경우에서 sum의 값이 0일 경우 올바르지 않은 값이 연산되게 됩니다. 따라서, v[0] (+, -, *, /) v[1] 의 형태로 연산이 되게 됩니다. 따라서 올바른 값을 구할 수 있습니다. 곰곰히 생각해보시면 어떤 말씀인지 알 것이라 생각합니다.</li>
<li>입력받은 plus,minus,multi,div의 개수를 0보다 클 경우에는 계속해서 재귀호출을 합니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>만약 v.size() == idx 모든 원소의 개수를 확인하였을 경우에 현재 sum값을 res 벡터에 값을 넣어줍니다. 그 후 <code>auto p = minmax_element(res.begin(), res.end());</code>를 사용하여 최댓값과 최솟값을 구해주게 됩니다. 이렇게 구하지 않고도 문제의 조건에서보면  <code>최댓값과 최솟값이 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다</code> 라는 조건이 있습니다.<br>
이러한 것들에 따라 값을 max함수와 min함수를 사용하면서 최댓값과 최솟값을 구해줍니다.<br>
다른분들의 풀이를 보니 이런식으로 사용하시는것을 보고 배우게 되었습니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxResult = -MAX, minResult = MAX;</span><br><span class="line"> maxResult = <span class="built_in">max</span>(maxResult, sum);</span><br><span class="line"> minResult = <span class="built_in">min</span>(minResult, sum);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; maxResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; minResult &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dfs-baegteuraeking-puli"><a href="#dfs-baegteuraeking-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#dfs-백트래킹-풀이"></a> DFS 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorihtm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> idx,<span class="keyword">int</span> sum, <span class="keyword">int</span> plus, <span class="keyword">int</span> minus, <span class="keyword">int</span> multi, <span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx == v.<span class="built_in">size</span>())&#123;</span><br><span class="line">        res.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(plus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum+v[idx],plus<span class="number">-1</span>, minus, multi, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum-v[idx], plus, minus<span class="number">-1</span>, multi, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multi &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum*v[idx], plus, minus, multi<span class="number">-1</span>, div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(div &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        dfs(v,idx+<span class="number">1</span>,sum/v[idx], plus, minus, multi, div<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> plus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minus=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> multi=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> input;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        v.push_back(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cal;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cal;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            plus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            minus = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            multi = cal;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            div = cal;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(v,<span class="number">1</span>,v[<span class="number">0</span>],plus,minus,multi,div);</span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">' '</span> &lt;&lt;  *p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next-permutation-puli"><a href="#next-permutation-puli" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#next_permutation-풀이"></a> next_permutation 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  08_백준_연산자끼워넣기_14888.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 02/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cal;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">                cal.push_back(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = v[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                sum = sum + v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">                sum = sum - v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cal[i<span class="number">-1</span>] == <span class="number">3</span>)&#123;</span><br><span class="line">                sum = sum * v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    sum = -sum;</span><br><span class="line">                    sum = (sum / v[i]);</span><br><span class="line">                    sum = -sum;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sum = (sum / v[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(sum);</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(cal.<span class="built_in">begin</span>(), cal.<span class="built_in">end</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> p = minmax_element(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p.first &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
        <tag>DFS</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 로또 6603</title>
    <url>/%EB%B0%B1%EC%A4%806603%EB%A1%9C%EB%98%90/</url>
    <content><![CDATA[<h2 id="roddo6603"><a href="#roddo6603" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#로또6603"></a> <a href="https://www.acmicpc.net/problem/6603" target="_blank" rel="noopener">로또6603</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>vector<int> check 변수에 6개를 뽑는 경우의 수 이므로, k-6개만큼은 0을 푸쉬백 해주고, 6개까지에 1을 넣어줍니다.</int></li>
<li>check배열로 next_permutation을 수행합니다. true인경우가 조합을 구하는 경우의 수입니다.</li>
<li>테스트케이스를 돌면서 vector<int>v, vector<int> check의 값의 초기화값을 잘 생각해주어야한다. 초기화가 원활하게 이루어지지않을 경우 이상한 값을 가득담고있습니다.<br>
<code>값이 들어있는 vector&lt;int&gt; v; 변수를 next_permutation을 하는것이 아니라 check변수를 수행하는것입니다.</code></int></int></li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>처음에 check배열을 선언해서 단순히 1의 값만넣어서 체크하였지만, check[i]==1 의 경우만 체크해주었다. 하지만, 조합이 나오는것이 아니라 순열의 값이 나오게 되어 올바르지 않은 값이다. 그 이유는 단순히 check배열을 사용하여 true,false값을 사용할 경우에는 중복된 값을 체크 할 수가 없다. check된 값을 next_permutation을 돌려주어야지 조합의 경우를 찾을 수 있습니다.</li>
<li>순열과 조합중에 조합 중복을 제거해야합니다.</li>
<li>push_back 을 0 과 1을 해주는 경우를 잘 생각해야합니다. 6개를 뽑는 경우의 수 이므로, k-6개만큼은 0을 푸쉬백 해주고, 6개까지에 1을 넣어줍니다.</li>
<li>가장 중요한점은 왜 0 111111이 들어가는데 어떻게 이것을 조합을 뽑을지에 대한 고민을 했다. 단순히 0,1과으로 조합의 경우를 세어준것입니다. 순열의 경우에는 이전에 보았던 값들도 확인해주어야하지만, 조합의 경우는 이전의 값을 확인하지 않는다는것이다.</li>
<li>next_permutation을 돌리게 되면서 그 순열의 값들은 계속해서 변경되기때문에 중복없는 값을 계속해서 체크해서 나갈 수 있다는점입니다.</li>
<li>next_permuation을 돌린 후 그 값을 모두 ans 저장시켜 sort(ans.begin(), ans.end())를 통하여 값을 오름차순 정렬을 시켜줍니다.<br>
<code>단순히 check배열로 true를 체크하는것이 아니라, check vector의 값으로 next_permutation을 돌려주면서 check[i]== true일 경우 N개중 K개를 고르는 경우를 구할 수 있습니다.</code></li>
</ul>
<h3 id="next-permutationpuli"><a href="#next-permutationpuli" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#next_permutation풀이"></a> next_permutation풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  07_백준_로또_6603.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 02/12/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; check;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-6</span>; i++)&#123;</span><br><span class="line">            check.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">            check.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                    curr.push_back(v[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(curr);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(check.<span class="built_in">begin</span>(),check.<span class="built_in">end</span>()));</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;ans[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i][j] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="baegteuraeking-puli"><a href="#baegteuraeking-puli" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#백트래킹-풀이"></a> 백트래킹 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">13</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v, <span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">6</span>)&#123;</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        ans.push_back(v[i]);</span><br><span class="line">        dfs(v,i,cnt+<span class="number">1</span>);</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dfs(v,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 외원판순회2 10971</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%99%B8%EC%9B%90%ED%8C%90%EC%88%9C%ED%9A%8C2-10971/</url>
    <content><![CDATA[<h2 id="baegjunoeweonpansunhoe2-10971"><a href="#baegjunoeweonpansunhoe2-10971" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준외원판순회2-10971"></a> <a href="https://www.acmicpc.net/problem/10971" target="_blank" rel="noopener">백준외원판순회2 10971</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>W[i][j]는 도시 i에서 도시 j로 가기 위한 비용이므로 모든 경우의 수 완전탐색을 수행합니다.</li>
<li>N까지의 값을 vector에 넣어서 next_permutation을 수행합니다. next_permutation을 수행하는이유는 예를 들어 N이 4라고 하였을 경우 0,1,2,3까지의 값들을 vector에 넣고 모든 경우의 수를 만들어서 w[0][0], w[0][1]…w[0][3], w[1][0],w[1][1]…w[1][3]까지의 경우를 수행합니다.</li>
</ul>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>잘못 접근하였던점 저 맵을 보는순간 비에프에스로 풀어도될 것같은데 라는생각을 하였습니다. 하지만, 전혀 다른 문제였으며 완전탐색을 통해 풀어야합니다.</li>
<li>n값과 w 이차원배열에 비용을 입력받는다.</li>
<li>w[i][i] = 0일 경우 비용이 없습니다.</li>
<li>모든 각 노드간의 간선의 비용에 따른 최소비용을 찾습니다.</li>
<li>마지막노드와 첫번째 노드를 연결시키는 부분이 가장 핵심문제입니다.</li>
<li>직접 손으로 그래프를 그려보았습니다.</li>
<li>시간복잡도 O(N*N!) N! = 10! = 3628800</li>
</ul>
<p><code>마지막노드에서 첫번째노드를 연결시킬 방법의 조건을 잘 찾아야한다. 가는경우의수와 다시 돌아오는 경우의수를 체크합니다.</code></p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="next-permutationeul-sayonghan-puli"><a href="#next-permutationeul-sayonghan-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#next_permutation을-사용한-풀이"></a> next_permutation을 사용한 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  06_백준_외원판순회2_10971.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=<span class="number">210000000</span>;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(w[v[i]][v[i+<span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">                    check = <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    sum = sum + w[v[i]][v[i+<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(check &amp;&amp; w[v[n<span class="number">-1</span>]][v[<span class="number">0</span>]] != <span class="number">0</span>)&#123;</span><br><span class="line">            sum = sum + w[v[n<span class="number">-1</span>]][v[<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">min</span> &gt; sum)&#123;</span><br><span class="line">               <span class="built_in">min</span> = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">min</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 차이를최대로 10819</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%B0%A8%EC%9D%B4%EB%A5%BC%EC%B5%9C%EB%8C%80%EB%A1%9C10819/</url>
    <content><![CDATA[<h2 id="baegjun-caireulcoedaero-10819"><a href="#baegjun-caireulcoedaero-10819" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-차이를최대로-10819"></a> <a href="https://www.acmicpc.net/problem/10819" target="_blank" rel="noopener">백준 차이를최대로 10819</a></h2>
<h2 id="keompyuting-seukil"><a href="#keompyuting-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅-스킬"></a> 컴퓨팅 스킬</h2>
<ul>
<li>#include<algorithm>헤더에 있는 next_permutation()함수를 호출하여 순열과조합을 구현합니다.</algorithm></li>
<li>next_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 다음 순열을 구하고 true를 반환한다. 다음 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 작다면) false를 반환합니다.</li>
<li>prev_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 이전 순열을 구하고 true를 반환한다. 이전 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 크다면) false를 반환합니다.</li>
<li>#include<algorithm>헤더에 있는 abs절대값 함수를 사용합니다.(해당조건)</algorithm></li>
<li></li>
</ul>
<p><code>반드시 정렬이 수행되어야만 올바를 결과값을 얻을 수 있습니다.</code></p>
<h2 id="keompyuting-sago"><a href="#keompyuting-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅-사고"></a> 컴퓨팅 사고</h2>
<ul>
<li>|A[0] - A[1]| + |A[1] - A[2]| + … + |A[N-2] - A[N-1]|의 조건에 따라 반복문을 통하여 해당조건에 순열의 첫번째 경우, 두번째 경우, …마지막 경우에 따라 int sum의 값에 저장한 후 그 값을 max값과 비교한다. 최대값을 구해야하므로 이러한 일련의 과정이 필요합니다.</li>
<li>sum += abs(v[i] - v[i+1]); 의 식으로 현재 순열과조합의 경우에서 값들의 합을 구합니다. 이때 i값과 i+1값의 범위가 벗어나지 않는지 반드시 확인합니다. for문을 v.size()만큼 순회하면 오버플로우가 발생합니다.</li>
<li>max값과 sum의 값을 비교한 후 sum의 값이 max값보다 클 경우 max값을 해당 sum의 값으로 업데이트 시켜줍니다.(최대값)</li>
<li>next_permutation의 수행이 모두 끝나면 현재 max을 출력합니다. 현재 최대값이 저장되어 있습니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="next-permutationeul-sayonghan-puli"><a href="#next-permutationeul-sayonghan-puli" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#next_permutation을-사용한-풀이"></a> next_permutation을 사용한 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  05_백준_차이를최대로_10819.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(v[i] - v[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">max</span> &lt; sum)&#123;</span><br><span class="line">            <span class="built_in">max</span> = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 123더하기 9095</title>
    <url>/%EB%B0%B1%EC%A4%80123%EB%8D%94%ED%95%98%EA%B8%B09095/</url>
    <content><![CDATA[<h2 id="baegjun-1-2-3deohagi-9095"><a href="#baegjun-1-2-3deohagi-9095" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-123더하기-9095"></a> <a href="https://www.acmicpc.net/problem/9095" target="_blank" rel="noopener">백준 1,2,3더하기 9095</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>DFS 재귀함수 이용</li>
<li>vector에 테스트케이스 개수만큼의 값들을 넣어준 후, 반복문을 통해 각 경우에 대한 dfs를 호출하여 최종적으로 리턴되는값은 1,2,3으로 만들 수 있는 n에 대한 경우의 수입니다.</li>
<li>dfs를 이해하기에 가장 좋은 예중 하나는 n과m문제입니다. 순열과 조합에 대표적인 문제입니다. 이 시리즈들을 모두 재귀로 한번 풀어보시길 바랍니다.<br>
<a href="https://www.acmicpc.net/workbook/view/2052" target="_blank" rel="noopener">N과 M시리즈 문제집</a></li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>v == sum 일 경우 1,2,3으로 만들 수 있는 경우의 수 이기때문에 return 1을 해줍니다.</li>
<li>v &lt; sum 일 경우 return 0으로 현재 들어온 값을 재귀함수 종료시켜줍니다.</li>
<li>dfs(v,n,sum+1) 1의 경우, dfs(v,n,sum+2) 2의 경우, dfs(v,n,sum+3) 3의 경우입니다.</li>
<li>1,2,3을 더하는 경우이므로 <code>dfs(v,n,sum+1)+dfs(v,n,sum+2)+dfs(v,n,sum+3)</code> 의 값을 반환시켜주면 현재까지 경우의 수를 반환시켜줍니다.<br>
<code>언제 종료될것인가의 조건과 그 조건을 넘어섰을때 조건을 잘 생각해서 로직을 구현하여야 합니다.</code></li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="dfs"><a href="#dfs" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  04_백준_1,2,3더하기_9095.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 30/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> n,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//값에 부합할 경우</span></span><br><span class="line">    <span class="keyword">if</span>(v == sum)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//값의 범위를 넘어가게되면 그 이외의 값들이 들어가게되기때문에 반드시 필요한 조건</span></span><br><span class="line">    <span class="keyword">if</span>(v &lt; sum)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dfs(v,n,sum+<span class="number">1</span>)+dfs(v,n,sum+<span class="number">2</span>)+dfs(v,n,sum+<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dfs(v[i], n, <span class="number">0</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 날짜계산 1476</title>
    <url>/%EB%B0%B1%EC%A4%80%EB%82%A0%EC%A7%9C%EA%B3%84%EC%82%B01476/</url>
    <content><![CDATA[<h2 id="baegjun-naljjagyesan-1476"><a href="#baegjun-naljjagyesan-1476" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-날짜계산-1476"></a> <a href="https://www.acmicpc.net/problem/1476" target="_blank" rel="noopener">백준 날짜계산 1476</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>단순 반복문과 조건문을 이용한 사칙연산 문제</li>
<li>while문을 이용해 지구,태양,달이 해당 입력값과 맞을 경우 break;</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>년도가 증가할때마다 E,S,M이 1씩 증가한다.</li>
<li><code>지구 1&lt;=E&lt;=15, 태양1&lt;=S&lt;=28, 달 1&lt;=m&lt;=19</code>의 범위를 벗어나게 된다면 해당 값을 1로 초기화 시켜야합니다.</li>
<li>E == 16, S == 29, M == 19일때 1로 초기화</li>
<li>입력 x,y,z 지구,태양,달을 입력 받았을때 x == E, y == S, z == M 지구,태양,달이 같은 연도를 찾은것이므로 종료시킵니다. 이때, sum은 몇년이 지났는지를 카운팅한 변수입니다. 따라서 sum을 출력시켜 정답을 도출시킵니다.<br>
<code>계산 범위를 잘 생각해서 풀어야합니다.</code></li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="modeungyeonguyi-sureul-cajseubnida"><a href="#modeungyeonguyi-sureul-cajseubnida" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#모든경우의-수를-찾습니다"></a> 모든경우의 수를 찾습니다.</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  02_백준_날짜계산_1476.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 28/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x,y,z = <span class="number">0</span>;  <span class="comment">// 입력</span></span><br><span class="line">    <span class="keyword">int</span> e=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">1</span>;  <span class="comment">// 지구, 태양, 달</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;    <span class="comment">// 연도</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e == x &amp;&amp; s == y &amp;&amp; m == z)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e +=<span class="number">1</span>;</span><br><span class="line">        s +=<span class="number">1</span>;</span><br><span class="line">        m +=<span class="number">1</span>;</span><br><span class="line">        sum +=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지구범위</span></span><br><span class="line">       <span class="keyword">if</span>(e == <span class="number">16</span>)&#123;</span><br><span class="line">           e = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 태양범위</span></span><br><span class="line">       <span class="keyword">if</span>(s == <span class="number">29</span>)&#123;</span><br><span class="line">           s = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 달 범위</span></span><br><span class="line">       <span class="keyword">if</span>(m == <span class="number">20</span>)&#123;</span><br><span class="line">           m = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>백준 일곱난쟁이 2309</title>
    <url>/%EB%B0%B1%EC%A4%80%EC%9D%BC%EA%B3%B1%EB%82%9C%EC%9F%81%EC%9D%B42309/</url>
    <content><![CDATA[<h2 id="baegjun-ilgobnanjaengi-2309"><a href="#baegjun-ilgobnanjaengi-2309" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#백준-일곱난쟁이-2309"></a> <a href="https://www.acmicpc.net/problem/2309" target="_blank" rel="noopener">백준 일곱난쟁이 2309</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>do while ~ (next_permutation)으로 계속해서 다음 조합의 경우의 수를 찾는다.</li>
<li>vector v, check변수를 선언하여 permutation을 수행한다. 9명중 7명을 뽑아야하므로 7명만큼 check=true로 변경해서 수행한다. next_permutation을 수행하면서 값들이 계속변경되기 때문에 값이 변경되면서 출력된다.</li>
</ul>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>백설공주를 도와 키를 확인하여 난쟁이를 찾자. 9명의 난쟁이 중에 7명의 난쟁이를 골라 키의 합이 100이 되는 경우를 찾아야한다.</li>
<li>9명중에 7명을 고르는 것은 9C7 = 9C2와 같은 경우의 수이다.</li>
<li>9명중 2명을 골랐을때 두명을 고르는 수는 O(N^2) * 난쟁이의 키의 합을 고르는 복잡도 O(N) = O(N^3)의 시간복잡도를 갖는다. N=9명이므로 9^3 = 729의 모든경우의 수에서 찾을 수 있다.</li>
<li>경우 1)난쟁이가 아닌 9명중 2명을 뽑는 경우를 구해서 sum의 값에서 그 해당 값들을 뺐을때 합이 100인경우를 찾는다.</li>
<li>경우 2)next_permutation을 돌려서 9명중 7명을 선택해서 그 값이 100일때 그 값들을 출력시켜준다. 이때 check변수를 선언하여 7명을 선택해야하는 경우를 true로 바꾸어주면서 수행한다.</li>
</ul>
<p><code>주의해야 할점: 정렬이 되어있는 상태여야 한다.</code></p>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="ijung-pomun"><a href="#ijung-pomun" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#이중-포문"></a> 이중 포문</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">        sum += v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum - v[i] - v[j] == <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>; z&lt;n; z++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == z || j == z)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; v[z] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next-permutation-johab"><a href="#next-permutation-johab" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#next_permutation-조합"></a> next_permutation 조합</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; check(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="literal">true</span>)&#123;</span><br><span class="line">                sum += v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum== <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOJ</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>브루트포스</tag>
      </tags>
  </entry>
  <entry>
    <title>이진 탐색 트리 BST</title>
    <url>/bst/</url>
    <content><![CDATA[<h1 id="geomsaegteuri-search-tree"><a href="#geomsaegteuri-search-tree" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#검색트리-search-tree"></a> 검색트리 Search Tree</h1>
<h3 id="gyeceungjeogin-gujoreul-pyohyeon"><a href="#gyeceungjeogin-gujoreul-pyohyeon" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#계층적인-구조를-표현"></a> 계층적인 구조를 표현</h3>
<ul>
<li>조직도</li>
<li>디렉토리와 서브디렉토리 구조</li>
<li>가계도</li>
</ul>
<h3 id="teuriyi-teugjing"><a href="#teuriyi-teugjing" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#트리의-특징"></a> 트리의 특징</h3>
<ul>
<li>트리는 노드(node)들과 노드들을 연결하는 링크(link)들로 구성됩니다.</li>
<li>맨 위의 노드를 <code>&quot;루트(root)&quot;</code>라고 부릅니다.</li>
<li>노드를 연결하는 선을 <code>&quot;link&quot;, &quot;edge&quot;,&quot;branch&quot;</code></li>
<li><code>부모노드 자식노드</code>로 구성되어있습니다.</li>
<li>루트노드를 제외한 트리의 모든 노드들은 <code>유일한 부모노드</code>를 갖습니다.</li>
<li>부모가 동일한 노드들을 형제 <code>&quot;sibling&quot;</code>관계라고 부릅니다.</li>
<li>자식이 없는 노드들을 <code>&quot;leaf&quot;</code>노드라고 부릅니다.</li>
<li>“leaf” 노드가 아닌것 <code>내부 노드</code>라고 부릅니다.</li>
<li><code>조상-자손 관계</code>가 있다. 부모-자식관계를 확장한것 (ancestor-descendant) 관계</li>
<li>루트는 레벨관계 <code>Level 0 ~ Level N</code> 까지 갖습니다.</li>
</ul>
<ul>
<li>트리의 기본적인 성질
<ul>
<li>노드가 N개인 트리는 항상 N-1개의 링크(link)를 가집니다.</li>
<li>트리에서 루트에서 어떤 노드로 가는 경로는 유일하다. 또한 임의의 두 노드간의 경로도 유일(존재,1개)합니다.(단, 같은 노드를 두 번 이상 방문하지 않는다)</li>
<li>트리의 높이는 레벨의 개수입니다.</li>
</ul>
</li>
</ul>
<h1 id="ijin-teuri-binary-tree"><a href="#ijin-teuri-binary-tree" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#이진-트리-binary-tree"></a> 이진 트리 Binary Tree</h1>
<h3 id="teugjing"><a href="#teugjing" class="header-anchor">2.1. </a><a class="markdownIt-Anchor" href="#특징"></a> 특징</h3>
<ul>
<li>이진 트리에서 각 노드는 최대 2개의 자식을 가집니다.</li>
<li>각각의 자식 노드는 자신이 부모의 왼쪽 자식인지 오른쪽 자식인지가 지정됩니다.(자식이 한 명인 경우에도)</li>
<li>서로 다른 이진트리는 값의 위치가 다르면 <code>서로 다른 이진트리</code>라고 불리온다. (자식노드가 한개인 경우에도 해당됩니다)</li>
</ul>
<h3 id="ijinteuriyi-eungyong-expression-tree-huffman-code"><a href="#ijinteuriyi-eungyong-expression-tree-huffman-code" class="header-anchor">2.2. </a><a class="markdownIt-Anchor" href="#이진트리의-응용-expression-tree-huffman-code"></a> 이진트리의 응용 Expression Tree, Huffman Code</h3>
<ul>
<li>
<p>(x+y) * ((a + b) / c) 를 이진 트리형태로 나타낼 수 있다. Expression트리에서 응용한다.</p>
</li>
<li>
<p>허프만 코드 ‘A’ - ‘Z’, ‘a’ - ‘z’ 파일들의 알파벳을 어떤 데이터를 압축하는 것을 뜻한다. 파일의 길이가 최소가 되도록 하는 알고리즘(파일 압축)</p>
</li>
</ul>
<h3 id="full-binary-trees-and-complete-binary-trees"><a href="#full-binary-trees-and-complete-binary-trees" class="header-anchor">2.3. </a><a class="markdownIt-Anchor" href="#full-binary-trees-and-complete-binary-trees"></a> Full Binary Trees And Complete Binary Trees</h3>
<ul>
<li>
<p>Full Binary Trees 모든 레벨에서 노드에 채워져 있는 경우</p>
</li>
<li>
<p>Completr Binary Trees 맨 마지막경우에는 노드가 없을 수 있다.(단, 끝에서부터 노드가 없을 수 있다.)</p>
</li>
<li>
<p>높이가 h인 full binary tree는 2^h-1개의 노드를 가진다.</p>
</li>
<li>
<p>노드가 N개인 full 혹은 complete 이진 트리의 높이는 O(logN)이다.(노드가 N개인 이진트리의 높이는 최악의 경우 N이 될 수 있다.)</p>
</li>
</ul>
<h3 id="ijinteuriyi-pyohyeon"><a href="#ijinteuriyi-pyohyeon" class="header-anchor">2.4. </a><a class="markdownIt-Anchor" href="#이진트리의-표현"></a> 이진트리의 표현</h3>
<ul>
<li>Heap은 Complete Binary Tree이다.</li>
<li>연결 구조 표현
<ul>
<li>각 노드에 하나에의 데이터필드와 왼쪽자식(left), 오른쪽 자식(right),그리고 부모노드§의 주소를 저장</li>
<li>부모노드는 주소는 반드시 필요한 경우가 아니면 보통 생략함</li>
</ul>
</li>
</ul>
<h3 id="ijinteuriyi-sunhoe-traversal"><a href="#ijinteuriyi-sunhoe-traversal" class="header-anchor">2.5. </a><a class="markdownIt-Anchor" href="#이진트리의-순회traversal"></a> 이진트리의 순회(Traversal)</h3>
<ul>
<li>
<p>순회: 이진 트리의 모든 노드를 방문하는 일</p>
</li>
<li>
<p>중순위(inorder) 순회</p>
<ul>
<li>
<p>왼쪽자식기준으로 루트노드를 중간에 방문한다.</p>
</li>
<li>
<p>왼쪽 자식 노드-&gt;루트-&gt;오른쪽 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line"><span class="built_in">print</span> key[x]</span><br><span class="line">pre-order-tree-walk(right[x])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>선순위(preorder) 순회</p>
<ul>
<li>
<p>왼쪽자식기준으로 루트노드를 처음에 방문한다.</p>
</li>
<li>
<p>루트 노드-&gt;왼쪽 자식 노드-&gt;오른쪽 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> key[x]</span><br><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line">pre-order-tree-walk(right[x])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>후순위(postorder) 순회</p>
<ul>
<li>
<p>왼쪽기준으로 루트노드를 마지막에 방문한다.</p>
</li>
<li>
<p>왼쪽 자식 노드-&gt;루트 노드-&gt;중간 자식 노드</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pre-order-tree-walk(left[x])</span><br><span class="line">pre-order-tree-walk(right[x])</span><br><span class="line"><span class="built_in">print</span> key[x]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>레벨오더(level-order) 순회</p>
<ul>
<li>
<p>레벨 순으로 방문, 동일 레벨에서는 왼쪽에서 오른쪽 순서로 방문합니다.</p>
</li>
<li>
<p>큐(queue)를 이용하여 구현</p>
<p>트리에 [1,2,3,4,5,6,7]이 순서대로 있다고하면 레벨별로 하나씩 방문한다(단, 기준은 왼쪽)</p>
<hr>
<p>Level 0: 1</p>
<p>Level 1: 2,3</p>
<p>Level 2: 4,5,6,7</p>
<hr>
<p>해당 순서로 방문한다고 생각하면 됩니다.</p>
</li>
</ul>
</li>
</ul>
<h3 id="dynamic-set"><a href="#dynamic-set" class="header-anchor">2.6. </a><a class="markdownIt-Anchor" href="#dynamic-set"></a> Dynamic Set</h3>
<ul>
<li>
<p>여러개의 데이터의 집합을 뜻하는 말을 일컫습니다.</p>
</li>
<li>
<p>여러 개의 키(Key)를 저장합니다.</p>
</li>
<li>
<p>다음과 같은 연산들을 지원하는 자료구조입니다.</p>
<ul>
<li>INSERT - 새로운 키의 삽입</li>
<li>SEARCH - 키 탐색</li>
<li>DELETE - 키의 삭제</li>
</ul>
</li>
<li>
<p>예: 심볼 테이블</p>
</li>
</ul>
<h3 id="baeyeol"><a href="#baeyeol" class="header-anchor">2.7. </a><a class="markdownIt-Anchor" href="#배열"></a> 배열</h3>
<ul>
<li>정렬 O
<ul>
<li>검색: O(logN)</li>
<li>삽입: O(N)</li>
<li>삭제: O(N)</li>
</ul>
</li>
<li>정렬 X
<ul>
<li>검색: O(N)</li>
<li>삽입: O(1), O(N)</li>
<li>삭제: O(1)</li>
</ul>
</li>
</ul>
<h3 id="yeongyeolriseuteu"><a href="#yeongyeolriseuteu" class="header-anchor">2.8. </a><a class="markdownIt-Anchor" href="#연결리스트"></a> 연결리스트</h3>
<ul>
<li>
<p>정렬 O</p>
<ul>
<li>검색: O(N), O(logN)</li>
<li>삽입: O(N)</li>
<li>삭제: O(1)</li>
</ul>
</li>
<li>
<p>정렬 X</p>
<ul>
<li>검색: O(N)</li>
<li>삽입: O(1)</li>
<li>삭제: O(1)</li>
</ul>
</li>
</ul>
<p>정렬이 이루어지면 이진검색 O(logN)의 시간복잡도 만큼수행된다. 예를 들면, 1,2,4,8 의 형식으로 트리의 노드의 개수가 증가된다고 하면 2^k = N으로 나타낼 수 있다. k는 시행횟수이며, N은 입력된 개수입니다. 이것을 K = log2N으로 나타낼 수 있습니다. 이때 시간복잡도에서는 상수를 무시하기 때문에 K=logN으로 나타낼 수 있습니다. 따라서, 이진탐색의 시간복잡도는 O(logN) 입니다.</p>
<h3 id="dayanghan-bangbeobdeul"><a href="#dayanghan-bangbeobdeul" class="header-anchor">2.9. </a><a class="markdownIt-Anchor" href="#다양한-방법들"></a> 다양한 방법들</h3>
<ul>
<li>정렬된 혹은 정렬되지 않은 배열 혹은 연결 리스트를 사용할 경우 INSERT, SEARCH, DELETE 중 적어도 하나는 O(N)</li>
<li>이진탐색트리(Binary Search Tree), 레드-블랙트리, AVL-트리 등의 트리에 기반한 구조들</li>
<li>Direct Address Table, 해쉬 테이블 등</li>
</ul>
<h3 id="geomsaegteuri"><a href="#geomsaegteuri" class="header-anchor">2.10. </a><a class="markdownIt-Anchor" href="#검색트리"></a> 검색트리</h3>
<ul>
<li>Dynamic set을 트리의 형태로 구현</li>
<li>일반적으로 SEARCH, INSERT, DELETE 연산이 트리의 높이(height)에 비례하는 시간복잡도를 가짐</li>
<li>이진검색트리(Binary Search Tree), 레드-블랙 트리(Red-black tree), B-트리 등</li>
</ul>
<h1 id="ijintamsaegteuri-binary-search-tree"><a href="#ijintamsaegteuri-binary-search-tree" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#이진탐색트리-binary-search-tree"></a> 이진탐색트리 Binary Search Tree</h1>
<h3 id="ijeongeomsaegteuri-bst-teugjing"><a href="#ijeongeomsaegteuri-bst-teugjing" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#이전검색트리bst-특징"></a> 이전검색트리(BST) 특징</h3>
<ul>
<li>
<p>이진트리이면서 각노드에 하나의 키를 저장</p>
</li>
<li>
<p>각 노드 v에 대해서 그 노드의 왼쪽 부트리(subtree)에 있는 키들은 key[v]보다 작거나 같고, 오른쪽 부트리에 있는 값은 크거나 같다.</p>
</li>
<li>
<p>중위 순회의 값을 갖는다</p>
</li>
<li>
<p>각 노드의 왼쪽 서브트리에는 해당 노드의 값보다 작은 값을 지닌 노드들로 이루어져 있다.</p>
</li>
<li>
<p>각 노드의 오른쪽 서브트리에는 해당 노드의 값보다 큰 값을 지닌 노드들로 이루어져 있다.</p>
</li>
<li>
<p>중복된 노드가 없어야 한다.</p>
</li>
<li>
<p>왼쪽 서브트리, 오른쪽 서브트리 또한 이진탐색트리이다.</p>
</li>
</ul>
<h3 id="1-search"><a href="#1-search" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#1search"></a> 1.SEARCH</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RECURSIVE</span><br><span class="line"></span><br><span class="line">TREE-SEARCH(x,k) x = 루트노드, k = 찾는값</span><br><span class="line">	<span class="comment">// x가 null이거나 k == key[x]를 찾은 경우(원하는 값을 찾은 경우)</span></span><br><span class="line">	<span class="keyword">if</span> x == <span class="literal">NULL</span> || k == key[x]</span><br><span class="line">		then <span class="keyword">return</span> x;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">// 키보다 작을 경우</span></span><br><span class="line">	<span class="keyword">if</span> k &lt; key[x]</span><br><span class="line">		then <span class="keyword">return</span> TREE-SEARCH(left[x],k)</span><br><span class="line">	<span class="comment">// 키보다 클경우</span></span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		then <span class="keyword">return</span> TREE-SEARCH(right[x],k)</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NONE RECURSIVE</span><br><span class="line"></span><br><span class="line">ITERATIVE-TREE-SEARCH(x,k)</span><br><span class="line">	While x != <span class="literal">NULL</span> <span class="keyword">and</span> K != key[x]</span><br><span class="line">		<span class="keyword">do</span> <span class="keyword">if</span> k &lt; key[x]</span><br><span class="line">				then x &lt;- left[x]</span><br><span class="line">				<span class="keyword">else</span> x &lt;- rgiht[x]</span><br><span class="line">	<span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure>
<p>시간복잡도: O(h), h = 트리의 높이</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>검색트리</tag>
        <tag>이진탐색트리</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>알고리즘 N-Queen 문제</title>
    <url>/n-queen/</url>
    <content><![CDATA[<h2 id="n-queenmunje"><a href="#n-queenmunje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#n-queen문제"></a> <a href="https://www.acmicpc.net/problem/9663" target="_blank" rel="noopener">N-Queen문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>Recursive() 재귀함수 어느지점에서 종료시키고, 다시 재귀호출을 해야하는지의개념을 확실하게 알고 있어야합니다.</li>
<li>Recursive()의 개념을 잡기에 좋은 문제는 <code>백준 N과 M시리즈</code> 입니다. 개념이 약하신분들은 순열과 조합의 개념부터 확실히 잡고 오시는것이 좋을 것이라고 생각을 합니다.</li>
<li><code>백트래킹 깊이우선탐색(DFS)</code>의 개념을 알아야합니다. 깊이우선탐색은 보통 <code>Recursive, Stack</code>를 사용합니다. Recursive가 직관적이고 코드이해하기도 쉽고, 스택보다는 구현이 덜 복잡하다는 장점이 있어서 Recursive로 구현하겠습니다.</li>
</ul>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>깊이우선탐색(DFS) 진행한 Level과 모든 말을 놓는 경우의 수가 같을때 재귀호출을 종료해야합니다.</p>
</li>
<li>
<p>N<em>N</em>N … N^N의 시간복잡도를 갖습니다.</p>
</li>
<li>
<p>백트래킹의 개념에 대해 알고 있어야 한다. 깊이우선탐색의 트리형태로 어떻게 진행하는지 직접 손으로 써보면서 진행해야합니다.</p>
</li>
<li>
<p>상태공간트리의 개념을 알고 있어야합니다.</p>
<ul>
<li>상태공간트리란 찾는 해를 포함하는 트리이며 이트리안에 어떠한 노드에 해당하는 이 트리를 체계적으로 탐색하면서 반드시 해를 찾을 수 있어야합니다.</li>
</ul>
</li>
<li>
<p>해당 퀸이 열 있는지 체크와 대각선을 체크해야합니다.</p>
</li>
</ul>
<p>예를 들어 설명하겠습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start에서 시작하면서 트리의 형태로 가지를 치면서 진행합니다. start-&gt; (0,0) (0,1) (0,2) (0,3)  첫번째 열에서 갈수 있는 모든 경우의 수입니다.</span><br><span class="line"></span><br><span class="line">(1,0) (1,1) (1,2) .... 두번째 열에서 갈 수 있는 경우의 수</span><br><span class="line"></span><br><span class="line">(level, 1) (level, 2) (level, 3) Level 크기에서 갈 수 있는 경우의 수</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Level 0</td>
<td>(0,0)</td>
<td>(0,1)</td>
<td>(0,2)</td>
<td>(0,3)</td>
</tr>
<tr>
<td>Level 1</td>
<td>(1,0)</td>
<td>(1,1)</td>
<td>(1,2)</td>
<td>(1,3)</td>
</tr>
<tr>
<td>Level 2</td>
<td>(2,0)</td>
<td>(2,1)</td>
<td>(2,2)</td>
<td>(2,3)</td>
</tr>
<tr>
<td>Level 3</td>
<td>(3,0)</td>
<td>(3,1)</td>
<td>(3,2)</td>
<td>(3,3)</td>
</tr>
</tbody>
</table>
<hr>
<p>다음의 상황은 <code>Level 0 ~ Level N</code> 의 경우까지 진행하는 경우라고 생각하겠습니다.</p>
<ul>
<li>
<p>Level0의 경우에서 갈 수 있는 모든경우를 탐색하면서 퀸을 놓습니다. 그리고 다음 Level1으로 진행하면서 열에 들어갈 수 있는 경우를 확인하면서 진행합니다. 이때 알아야 하는 부분이 Promissing의 개념입니다.</p>
</li>
<li>
<p>즉,<code>Level0 (0,0)</code>에 퀸을 놓으면 <code>Level1 (1,0)</code>에 퀸을 놓는 경우를 확인해보겠습니다. 퀸을 놓을 수 있는 조건은 <code>동, 서, 남, 북, 대각선</code>에 퀸이 위치해있으면 놓을 수 없습니다. 그러면 당연히 (1,0)은 확인할 필요도 없이 놓을 수 없는 경우의 수라는것입니다. 이것을 Promissing의 개념을 확인하여 더 갈 수 있는지 없는지를 판단하는 것입니다. 체크한다고 하시면 됩니다.</p>
</li>
<li>
<p>레벨의 수가 결국 말의 개수를 뜻합니다. 제 코드에서는 cols라는 배열이 쓰이는데 이것은 현재 말이 어디에 놓였는지에 대한 위치입니다. cols[1] : 1번말이 놓인 열 , cols[2] : 2번말이 놓인 열 … cols[i] = j (i번말이 j에 놓였다는 의미입니다. i는 결국 레벨입니다.)</p>
</li>
<li>
<p>Promissing Test를 진행할 때 마지막에 놓인 이 말이 이전에 놓인 다른 말들과 충돌하는지 검사를 하면 퀸을 놓을수 있는지 없는지를 확인 할 수 있습니다.</p>
</li>
</ul>
<h3 id="recursive-seolgye"><a href="#recursive-seolgye" class="header-anchor">3.1. </a><a class="markdownIt-Anchor" href="#recursive-설계"></a> Recursive 설계</h3>
<ol>
<li>promising()함수를 호출합니다. 진행이 가능한지 여부를 확인하고 아니면 false, 가능하면 true를 리턴합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line"> <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Level과 N의 값이 같은 경우(성공한 경우)</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">      <span class="comment">// 기존의 N-queen의 위치를 구하면 종료하는 형식이였지만, 모든 경우의 수를 구하기 위해서는 해당 cnt값을 증가시켜주어서 확인할 수 있다.</span></span><br><span class="line">      cnt+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Level과 N의 값이 같지 않은 경우 Recursive() 재귀 함수 호출</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">     cols[level+<span class="number">1</span>] = i;</span><br><span class="line">     <span class="comment">// 다음 레벨로 재귀 호출</span></span><br><span class="line">     <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="promising-test-seolgye"><a href="#promising-test-seolgye" class="header-anchor">3.2. </a><a class="markdownIt-Anchor" href="#promising-test-설계"></a> Promising Test 설계</h3>
<ol>
<li>같은 열을 확인하여야합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">      <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>같은 대각선에 놓였는지를 확인하여야 합니다.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-dfs-baegteuraeking-haedang-gabs-cajgi-gibon-gaenyeom"><a href="#1-dfs-baegteuraeking-haedang-gabs-cajgi-gibon-gaenyeom" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-dfs-백트래킹-해당-값-찾기기본-개념"></a> 1. DFS 백트래킹 해당 값 찾기(기본 개념)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  n-queen.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 22/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cols[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">promissing</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;level; i++)&#123;</span><br><span class="line">        <span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">        <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; i &lt;&lt; <span class="string">","</span> &lt;&lt; cols[i] &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        cols[level+<span class="number">1</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 성공할 경우</span></span><br><span class="line">        <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">8</span>;</span><br><span class="line">    recursive(<span class="number">0</span>,N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-dfs-baegteuraeking-haedang-gabs-cajgi-gyeonguyi-su-cajgi-baegjun-munje"><a href="#2-dfs-baegteuraeking-haedang-gabs-cajgi-gyeonguyi-su-cajgi-baegjun-munje" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#2-dfs-백트래킹-해당-값-찾기경우의-수-찾기-백준-문제"></a> 2. DFS 백트래킹 해당 값 찾기(경우의 수 찾기 백준 문제)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  n-queen.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 22/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cols[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">promissing</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;level; i++)&#123;</span><br><span class="line">        <span class="comment">// 같은 열에 놓였는지 확인 (레벨과 행이 같다는 의미임(결국 충돌이 있다는 의미))</span></span><br><span class="line">        <span class="keyword">if</span>(cols[i] == cols[level])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 대각선에 충돌되는것 확인</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((level-i) == <span class="built_in">abs</span>(cols[level] - cols[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 정답을 찾을 수 없는 경우 예를 들어 1,1 에서 2,1은 당연히 될수없는것이니까 프로미싱을 확인한다고 생각하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!promissing(level,N))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 성공적으로 도착하였을 경우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(level == N)&#123;</span><br><span class="line">        <span class="comment">// 기존의 N-queen의 위치를 구하면 종료하는 형식이였지만, 모든 경우의 수를 구하기 위해서는 해당 cnt값을 증가시켜주어서 확인할 수 있다.</span></span><br><span class="line">        cnt+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        cols[level+<span class="number">1</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 성공할 경우</span></span><br><span class="line">        <span class="keyword">if</span>(recursive(level+<span class="number">1</span>,N))&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    recursive(<span class="number">0</span>,N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>백준</tag>
        <tag>DFS</tag>
        <tag>백트래킹</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 더 맵게</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EB%8D%94%EB%A7%B5%EA%B2%8C/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-deo-maebge-munje"><a href="#peurogeuraemeoseu-deo-maebge-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-더-맵게-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42626" target="_blank" rel="noopener">프로그래머스 더 맵게 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>이번 문제를 해결하기 위해서는 단순 sort를 사용하는것이 아니라 우선순위큐 <code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</code>  오름차순 형식으로 써주어야합니다.</li>
<li>단순히 while문을 통해서 안에서 sort를 처리하려고 하였지만 16번 테스트케이스를 통과하지 못하였고 효율성에서는 시간초과가 발생하였습니다. 또한, 범위값이 너무 제한적이였다. 그래서 우선순위큐를 사용하였습니다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scoville의 길이는 1 이상 1,000,000 이하입니다.</span><br><span class="line">K는 0 이상 1,000,000,000 이하입니다.</span><br><span class="line">scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</span><br></pre></td></tr></table></figure>
<ul>
<li>주의해야할점은 <code>우선순위큐 push는 맨앞으로 들어간다는것과 top에 있는것도 0번째 인덱스에 있는 값</code>입니다.</li>
</ul>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ol>
<li>스코빌 벡터에 있는 값을 우선순위큐에 넣어준다. <code>greater&lt;int&gt;</code>를 옵션으로 지정하였기 때문에 자동으로 오름차순으로 정렬해줍니다. 만약 내림차순으로 하고 싶은경우 less<int>옵션을 사용하시면 됩니다.</int></li>
<li><code>첫번째, 두번째값을 통하여 스코빌 지수</code>를 구합니다. <code>단 q.top()의 값이 K보다 작아야합니다.</code> 반복문 조건</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">예시</span><br><span class="line">스코빌 1 2 3 9 10일경우  </span><br><span class="line">(1 + 2 * 2) 5 3 9 10 으로 변경됩니다. 우선순위큐 이므로 3 5 9 10 정렬됩니다.</span><br><span class="line">(3 + 5 * 2) 13 9 10 으로 변경됩니다. 우선순위큐 이므로 9 10 13 정렬됩니다.</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>기존의 while문에서는 sort를 다시해주어야하는데 우선순위 큐가 자동으로 정렬시켜주기때문에 필요없는 과정입니다.</li>
<li>만약 우선순위큐의 사이즈가 2이하가 되면 더이상 구할 수 없으므로 Return -1을 실행합니다. 그게 아니라면 계속 진행하고 q.top()의 값이 K보다 큰 경우가 있으면 더이상 반복문을 반복하지 않습니다.</li>
</ol>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-ilbanjeogin-sort-puli-sigancogwa"><a href="#1-ilbanjeogin-sort-puli-sigancogwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-일반적인-sort-풀이시간초과"></a> 1. 일반적인 sort 풀이(시간초과)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  더맵게 일반 정렬.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scoville;</span><br><span class="line">  </span><br><span class="line">    scoville.push_back(<span class="number">3</span>);</span><br><span class="line">    scoville.push_back(<span class="number">9</span>);</span><br><span class="line">    scoville.push_back(<span class="number">10</span>);</span><br><span class="line">    scoville.push_back(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">int</span> K=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = scoville.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        sort(scoville.<span class="built_in">begin</span>(),scoville.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 스코빌 첫번째 값이 K보다 작아야하고, cnt 값이 해당 스코빌 사이즈값이전까지 돌아아한다, 그리고 스코빌 사이즈는 2보다 커야한다. 아니면 -&gt; 메모리 에러남</span></span><br><span class="line">        <span class="keyword">if</span>(scoville[<span class="number">0</span>] &lt; K &amp;&amp; cnt &lt; len &amp;&amp; scoville.<span class="built_in">size</span>() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> new_scoville=<span class="number">0</span>;</span><br><span class="line">                  </span><br><span class="line">          new_scoville = scoville[<span class="number">0</span>] + (scoville[<span class="number">1</span>] * <span class="number">2</span>);</span><br><span class="line">          scoville[<span class="number">0</span>] = new_scoville;</span><br><span class="line">          scoville.erase(scoville.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">          cnt+=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 스코빌 첫번째지수가 K보다 작으면 결국 모든것이 되지않았으니까 cnt = 0;</span></span><br><span class="line">            <span class="keyword">if</span>(scoville[<span class="number">0</span>] &lt; K)&#123;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">        answer = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        answer = cnt;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="useonsunwikyu-sayong"><a href="#useonsunwikyu-sayong" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#우선순위큐-사용"></a> 우선순위큐 사용</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  더맵게 우선순위큐.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 20/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scoville;</span><br><span class="line">    scoville.push_back(<span class="number">1</span>);</span><br><span class="line">    scoville.push_back(<span class="number">2</span>);</span><br><span class="line">    scoville.push_back(<span class="number">3</span>);</span><br><span class="line">    scoville.push_back(<span class="number">9</span>);</span><br><span class="line">    scoville.push_back(<span class="number">10</span>);</span><br><span class="line">    scoville.push_back(<span class="number">12</span>);</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> K = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scoville.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        q.push(scoville[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> min_num_first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min_num_second = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.top() &lt; K)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        min_num_first = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        min_num_second = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        res = min_num_first + (min_num_second * <span class="number">2</span>);</span><br><span class="line">        q.push(res);</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>레벨2</tag>
        <tag>우선순위큐</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 가장 큰 수</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%ED%81%B0%EC%88%98/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-gajang-keun-su-munje"><a href="#peurogeuraemeoseu-gajang-keun-su-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-가장-큰-수-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42746" target="_blank" rel="noopener">프로그래머스 가장 큰 수 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>0 또는 양의 정수 1 &lt;= numbers_length &lt;= 100,000, 0 &lt;= numbers &lt;= 1000 를 보고 O(N^2) 복잡도 불가할 것이라 예측하였습니다. 왜냐하면 (100,000)^ = 약 100억</li>
<li>String to int 변환 함수 atoi(str.c_str()), int to String 변환함수 to_string(number)
<ul>
<li><code>“String&quot; - ‘0’ =&gt; 숫자</code>로 변경이 가능합니다. <code>단, 범위는 0~9까지</code></li>
<li><code>Number + ‘0’ =&gt; 문자</code>로 변경이 가능합니다. <code>단, 범위는 0~9까지</code></li>
<li>숫자가 10이 나왔을 경우에는 <code>dec = dec * 10 + str[i] - '0'</code>의 형식으로 해주어야합니다. <code>유사문제로는 카카오 셔틀버스 문제</code>가 있습니다.</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 &gt; s2 + s1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s1 &gt; s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>string기준으로 문제를 해결해야한다.</li>
<li>맨 처음 순열과 같이 <code>DFS로 완전탐색</code>을 하였지만 <code>시간초과</code> 가 나서 sort()함수 사용해봤지만 테스트케이스는 맞지만 시간초과는 그대로여서 시간복잡도에 고민을 한번 더 하였습니다.</li>
<li><code>Sort Compare</code>로 비교 후 정렬값들을 가지고 문자열끼리 append시켜주었으면 쉽게 해결하였을 문제였습니다.</li>
<li>compare 함수 기본 형식(기본적으로 오름차순을 적용시킵니다.) 굳이 if문을 쓰지 않고 바로 return s1 &gt; s2형식으로 해주어도 됩니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-dfspuli-sigancogwa"><a href="#1-dfspuli-sigancogwa" class="header-anchor">4.1. </a><a class="markdownIt-Anchor" href="#1-dfs풀이시간초과"></a> 1. DFS풀이(시간초과)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  가장큰수.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 14/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value_v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;a, <span class="keyword">const</span> <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(b.<span class="built_in">size</span>() &gt; a.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> b &gt; a;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b &lt; a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//len개를 모두 선택하였을 경우</span></span><br><span class="line">    <span class="keyword">if</span>(idx == len)&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            str += to_string(value_v[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> comp = atoi(str.c_str());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(comp &gt; ans)&#123;</span><br><span class="line">            ans = comp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i] = <span class="literal">true</span>;</span><br><span class="line">        value_v.push_back(v[i]);</span><br><span class="line">        dfs(idx+<span class="number">1</span>, v, len);</span><br><span class="line">        value_v.pop_back();</span><br><span class="line">        check[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    s.push_back(<span class="string">"3"</span>); s.push_back(<span class="string">"30"</span>); s.push_back(<span class="string">"34"</span>);s.push_back(<span class="string">"5"</span>);s.push_back(<span class="string">"9"</span>);</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(len);</span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), compare);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        v[i] = atoi(s[i].c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,v,len);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; to_string(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string-jeongryeol-bigyo-sigancogwa-x-jeongdab"><a href="#string-jeongryeol-bigyo-sigancogwa-x-jeongdab" class="header-anchor">4.2. </a><a class="markdownIt-Anchor" href="#string-정렬-비교시간초과-x-정답"></a> String 정렬 비교(시간초과 X 정답)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 + s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s2 + s1 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1 + s2 &gt; s2 + s1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    numbers.push_back(<span class="number">3</span>); numbers.push_back(<span class="number">30</span>); numbers.push_back(<span class="number">34</span>);numbers.push_back(<span class="number">5</span>);numbers.push_back(<span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> numbers_len = numbers.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers_len; i++)&#123;</span><br><span class="line">        s.push_back(to_string(numbers[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), compare);</span><br><span class="line">    <span class="keyword">int</span> s_len = s.<span class="built_in">size</span>();</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s_len; i++)&#123;</span><br><span class="line">          ans += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">0</span>] == <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>유사문제: <a href="https://www.acmicpc.net/problem/1422" target="_blank" rel="noopener">백준 1422 숫자의 신</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>레벨2</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 H-index</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4H-INDEX/</url>
    <content><![CDATA[<h2 id="peurogeuraemeoseu-h-index-munje"><a href="#peurogeuraemeoseu-h-index-munje" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#프로그래머스-h-index-문제"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42747" target="_blank" rel="noopener">프로그래머스 H-index 문제</a></h2>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>정렬문제인 만큼 <code>#include &lt;algorithm&gt; 헤더에 있는 sort를 이용하면 됩니다.</code></li>
<li>sort는 기본적으로 오름차순 정렬로 되어있습니다. 별 다른 옵션을 주지 않아도 오름차순 정렬을 하게 됩니다. 그 외 <code>내림차순정렬</code>을 이용 할 때는 다음과 같은 두가지 방법을 사용할 수 있습니다.</li>
</ul>
<blockquote>
<p>1.compare함수를 이용한 내림차순 방법</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool compare(int v1,int v2)&#123;</span><br><span class="line">    return v1 &lt; v2;</span><br><span class="line">&#125;</span><br><span class="line">sort(citations.begin(),citations.end(),compare);</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>greater<int>() 함수 옵션을 사용한 내림차순 정렬</int></li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort(citations.begin(),citations.end(),greater&lt;int&gt;());</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li><code>H-index</code>의 개념을 알고가셔야 합니다. 논문 n편중 h번이상 인용된 논문이 h편이상이고 h번 이하 인용되었다면 h가 H-index가 됩니다.</li>
<li>첫번째 <code>테스트 케이스인 [3,0,6,1,5]</code>로 예를 들어 설명하겠습니다.</li>
</ul>
<blockquote>
<p>오름차순 정렬 전</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">DATA</th>
<th style="text-align:left">INDEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>오름차순 정렬 후</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">DATA</th>
<th style="text-align:left">INDEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<hr>
<h2 id><a href="#" class="header-anchor">4. </a><a class="markdownIt-Anchor" href="#"></a> </h2>
<ul>
<li>정렬전과 정렬후의 과정입니다.<code>H-index</code>라는것을 맨처음에 모든 값의 합을 나눈 평균의 값이 H-Index라고 생각을 하여 아주 단순하게 생각했습니다. 당연히 틀린것이였습니다.</li>
<li><em>index</em>를 가지고 생각했어야 했는데, 값을 가지고 생각을 하였습니다. 위의 테스트케이스는 총 5편의 논문이 쓰여졌으며  <code>인덱스값이 DATA의 값보다 커지는 시점</code> <code>index &gt; data</code>을 찾아야 합니다. 그 시점이 H-index지점입니다.데이터값은 뒤에서부터 비교하고 인덱스값은 앞에서 비교하게 됩니다. 따라서 citations.size()-i-1의 형식이 나오게됩니다. -1을 해주는이유는 for문에서는citiation-1지점까지만 순회하기때문에 이에 따라 -1을 붙여준것입니다. 어디서부터 시작하고 어디서부터 끝내는지에 대해서 한번더 고민해보시면 되겠습니다.</li>
<li>Data = 5, Index = 3의 지점이 H-index에 해당하는값 입니다. <code>index&gt;data</code>의 지점에 index는 3의 값을 반환하게 됩니다. 이 값은 결국 h-index의 값을 나타내는것이며 <code>총 5편의 논문과 3회이상의 인용된 논문 3편, 3회 이하 인용된 논문 2편</code>이 되게 됩니다. 따라서 h-index의 값을 정확하게 도출해냈다고 할 수 있습니다.</li>
<li>문제들을 너무 어렵게 생각하여 풀었는데, <code>index</code>에 대해 유연하게 접근하면 쉽게 풀 수 있었던 문제라고 생각합니다.</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">5. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<h3 id="1-jeongryeol-puli"><a href="#1-jeongryeol-puli" class="header-anchor">5.1. </a><a class="markdownIt-Anchor" href="#1-정렬-풀이"></a> 1. 정렬 풀이</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 오름차순 정렬, 내림차순은 그 반대 v1 &gt; v2</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &lt; v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; citations;</span><br><span class="line">    citations.push_back(<span class="number">3</span>);</span><br><span class="line">    citations.push_back(<span class="number">0</span>);</span><br><span class="line">    citations.push_back(<span class="number">6</span>);</span><br><span class="line">    citations.push_back(<span class="number">1</span>);</span><br><span class="line">    citations.push_back(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    sort(citations.<span class="built_in">begin</span>(),citations.<span class="built_in">end</span>(),compare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;citations.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= citations[citations.<span class="built_in">size</span>()-i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>레벨2</tag>
        <tag>H-INDEX</tag>
        <tag>정렬</tag>
      </tags>
  </entry>
  <entry>
    <title>프로그래머스 위장</title>
    <url>/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EC%9C%84%EC%9E%A5/</url>
    <content><![CDATA[<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42578" target="_blank" rel="noopener">프로그래머스 위장문제</a></p>
<hr>
<h2 id="keompyutingjeog-seukil"><a href="#keompyutingjeog-seukil" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-스킬"></a> 컴퓨팅적 스킬</h2>
<ul>
<li>
<p>옷 종류 = KEY, 옷 이름= VALUE를 두고 문제를 해결해야 한다고 생각하였습니다.</p>
</li>
<li>
<p><strong>#include&lt;unordered_map&gt;</strong> 헤더에 포함된 <strong>unordered_map&lt;string,int&gt;</strong> 형태로 사용하려고 하였습니다.</p>
<ul>
<li>unordered와 map중 unordered 자료구조를 사용한 이유는 map은 balanced tree의 형태를 가지고 있고, unordered_map는 hash형태로 이루어져있기 때문에 성능차이의 이슈로 특별한 이유가 없는 한 unordered_map을 사용하려고 합니다.</li>
<li>주어진 파라미터 <em>vector&lt;vector<string>&gt; clothes;</string></em> 의 형태가 주어졌는데요. 헷갈리는 부분이 있어서 설명하고 넘어가겠습니다. <em>vector&lt;vector<string></string></em>  2차원 벡터는 2차원 배열과 형태가 같습니다.</li>
<li>그리고, 2차원 벡터에 값을 넣게 될경우 주의해야할 점이 한가지 있습니다. 직접 접근해서 벡터값을 넣지 못하게 되어있다는것입니다. <em>clothes[0].push_back(“yellow_hat”)</em> 처럼 값을 넣으려고 하였지만, Xcode에서 <em>Invalid operands to binary expression</em> 에러가 나타났습니다. 직접적으로 2차원벡터에 값을 바로 접근하기가 불가능한 모양입니다. 그래서 1차원 벡터를 생성시킨 후 값을 넣어준 다음, 2차원 벡터에 값이 들어간 벡터를 넣었습니다. <s>프로그래머스에서 테스트케이스로 바로 Input을 주기 때문에 이러한 과정이 필요없지만, 직접 소스코드를 Xcode에 작성하면서 디버깅도 해보는편이라 저런형식으로 넣어주게 되었습니다.</s></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; clothes;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1.push_back(<span class="string">"yellow_hat"</span>); v1.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">v2.push_back(<span class="string">"blue_sunglasses"</span>); v2.push_back(<span class="string">"eyewear"</span>);</span><br><span class="line">v3.push_back(<span class="string">"green_turban"</span>); v3.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">clothes.push_back(v1);</span><br><span class="line">clothes.push_back(v2);</span><br><span class="line">clothes.push_back(v3);</span><br></pre></td></tr></table></figure>
<ul>
<li>1차원 행부분에서 열부분을 참고하시면 모든값들을 가져올 수 있겠습니다. 그리고, auto를 사용하셔서 값들을 가져올 수도 있습니다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>아래와 같은 3가지 형식으로 사용하시면 됩니다.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">    m[clothes[i][<span class="number">1</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p : clothes)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; p.at(<span class="number">0</span>);</span><br><span class="line">  	<span class="built_in">cout</span>&lt;&lt; p[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s : clothes)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>map에 있는 값들을 모두 확인하기 위해서는<strong>iterator</strong> 를 사용하셔야 합니다. 사용하실 방식은 다음과 같습니다. map과 map::iterator를 선언시켜줍니다. 그리고 iter 변수를 사용해서 unordered_map에 있는 모든 값들을 탐색을 시작하게 됩니다. iter-&gt;first, iter-&gt;second로 참조하여 접근하게 되면 해당 맵의 &lt;string,int&gt;형태로 저장된 값을 가져올 수 있습니다.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=m.<span class="built_in">begin</span>(); iter != m.<span class="built_in">end</span>(); iter++)&#123;</span><br><span class="line">    answer *= (iter-&gt;second+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>–</p>
<h2 id="keompyutingjeog-sago"><a href="#keompyutingjeog-sago" class="header-anchor">2. </a><a class="markdownIt-Anchor" href="#컴퓨팅적-사고"></a> 컴퓨팅적 사고</h2>
<ul>
<li>
<p>첫번째 테스트 케이스를 예시로 설명해보겠습니다. [headergear, eyewear] 의 두가지 종류가 있습니다. headgear를 입거나 안입는 경우 headgear = 2가지 경우, eyewear를 입거나 안입는 경우 1가지 경우입니다. 이것을 경우의 수로 적용시켜보겠습니다. (headgear +1)* (eyewear + 1)로 적용시키면 (2+1) * (1+1) = 6 - 1 = 5가지가 됩니다.</p>
<ul>
<li>이때 +1을 왜 더하는거야? 라고 생각하실분이 있으실 것입니다. 그 이유는 의상을 입을까? 말까? 라는 경우를 고려해주어야하기 때문입니다. 그래서 +1을 해주게 되는것입니다.</li>
<li>마지막에 -1은 또 왜해주나요? 적어도 하나의 의상을 입어야하므로 모두 입지않는 경우의 수인 1가지 경우를 빼주어야 결국 모든 경우의 수의 조합이 나오게 될 것입니다.</li>
</ul>
</li>
<li>
<p>모든 원소는 문자열로 이루어져있고, clothes는 [의상의 이름, 의상의 종류]의 형태를 가지고 있다. 따라서 해시 자료구조형을 사용해서 접근하면 된다. 처음에는 조합개념으로 dfs를 진행하려고 하였지만, 선택한 개수가 매번달라지는 경우때문에 dfs를 사용하지 않았습니다.</p>
</li>
</ul>
<hr>
<h2 id="puli"><a href="#puli" class="header-anchor">3. </a><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  위장문제.cpp</span></span><br><span class="line"><span class="comment">//  algorithm-level-up</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by kgh on 15/11/2019.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 kgh. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; clothes;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    v1.push_back(<span class="string">"yellow_hat"</span>); v1.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">    v2.push_back(<span class="string">"blue_sunglasses"</span>); v2.push_back(<span class="string">"eyewear"</span>);</span><br><span class="line">    v3.push_back(<span class="string">"green_turban"</span>); v3.push_back(<span class="string">"headgear"</span>);</span><br><span class="line">    clothes.push_back(v1);</span><br><span class="line">    clothes.push_back(v2);</span><br><span class="line">    clothes.push_back(v3);</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clothes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        m[clothes[i][<span class="number">1</span>]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> answer = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line">    <span class="keyword">for</span>(iter=m.<span class="built_in">begin</span>(); iter != m.<span class="built_in">end</span>(); iter++)&#123;</span><br><span class="line">        answer *= (iter-&gt;second+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; answer<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programmers</category>
      </categories>
      <tags>
        <tag>프로그래머스</tag>
        <tag>알고리즘</tag>
        <tag>위장</tag>
        <tag>레벨2</tag>
        <tag>해시</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Command</title>
    <url>/hexo-%20command/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start"><a href="#quick-start" class="header-anchor">1. </a><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="front-formatter"><a href="#front-formatter" class="header-anchor">1.1. </a><a class="markdownIt-Anchor" href="#front-formatter"></a> front formatter</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post.md 머리말</span></span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 태그명 #(예) 헥소</span><br><span class="line">- 깃허브</span><br><span class="line"></span><br><span class="line"># 또는 아래와 같이 사용 할수 있다.</span><br><span class="line">tags: [헥소, 깃허브]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 카테고리명 #(예) 깃허브</span><br><span class="line">- 서브카테고리명 #(예) 헥소</span><br><span class="line"></span><br><span class="line"># 또는 아래 처럼 사용 할수 있다.</span><br><span class="line">categories: [깃허브, 헥소]</span><br></pre></td></tr></table></figure>
<h3 id><a href="#" class="header-anchor">1.2. </a><a class="markdownIt-Anchor" href="#"></a> </h3>
<h3 id="create-a-new-post"><a href="#create-a-new-post" class="header-anchor">1.3. </a><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new draft <span class="string">"My new Draft"</span></span><br><span class="line">$ hexo new layout <span class="string">"My New layout"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server"><a href="#run-server" class="header-anchor">1.4. </a><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server post</span><br><span class="line">$ hexo server draft</span><br><span class="line">$ hexo server layout</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files"><a href="#generate-static-files" class="header-anchor">1.5. </a><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a href="#deploy-to-remote-sites" class="header-anchor">1.6. </a><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="generate-static-files-and-deploy-to-remote-sites"><a href="#generate-static-files-and-deploy-to-remote-sites" class="header-anchor">1.7. </a><a class="markdownIt-Anchor" href="#generate-static-files-and-deploy-to-remote-sites"></a> Generate static files and Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<h3 id="image-files-path"><a href="#image-files-path" class="header-anchor">1.8. </a><a class="markdownIt-Anchor" href="#image-files-path"></a> image files path</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source/images/image file path</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ETC</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>command</tag>
      </tags>
  </entry>
</search>
